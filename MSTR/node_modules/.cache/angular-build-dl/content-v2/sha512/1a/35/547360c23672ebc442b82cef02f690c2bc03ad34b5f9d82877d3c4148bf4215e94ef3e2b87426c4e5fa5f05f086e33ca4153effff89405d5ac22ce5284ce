var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main-main-module"], {
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-accordion.js": 
        /*!*******************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-accordion.js ***!
          \*******************************************************************************/
        /*! exports provided: NxExpansionPanelComponent, NxAccordionDirective, NxAccordionModule, ɵa, ɵb, ɵd, ɵc, ɵe */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxExpansionPanelComponent", function () { return NxExpansionPanelComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAccordionDirective", function () { return NxAccordionDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAccordionModule", function () { return NxAccordionModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return nxAccordionAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return NxExpansionPanelBodyDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function () { return NxExpansionPanelDescriptionDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function () { return NxExpansionPanelHeaderComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function () { return NxExpansionPanelTitleDirective; });
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/accordion */ "./node_modules/@angular/cdk/esm2015/accordion.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_TYPE = 'regular';
            var NxAccordionDirective = /** @class */ (function (_super) {
                __extends(NxAccordionDirective, _super);
                function NxAccordionDirective() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this._style = 'regular';
                    _this._negative = null;
                    return _this;
                }
                Object.defineProperty(NxAccordionDirective.prototype, "style", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._style;
                    },
                    /**
                     * Value for the styling that should be chosen.
                     * Default value: 'regular'
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = value ? value : DEFAULT_TYPE;
                        var _b = __read(value.match(/regular|light/) || [DEFAULT_TYPE], 1), newValue = _b[0];
                        this._style = ( /** @type {?} */(newValue));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAccordionDirective.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative set of styles should be used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxAccordionDirective;
            }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_1__["CdkAccordion"]));
            NxAccordionDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-accordion',
                            host: {
                                '[class.nx-accordion]': 'true',
                                'role': 'presentation'
                            }
                        },] }
            ];
            NxAccordionDirective.propDecorators = {
                style: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['nxStyle',] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nxAccordionAnimations = {
                bodyExpansion: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["trigger"])('bodyExpansion', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["state"])('closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({ height: '0px', visibility: 'hidden' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["state"])('open', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({ height: '*', visibility: 'visible' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["transition"])('open <=> closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["animate"])('.5s cubic-bezier(0.86, 0, 0.07, 1)'))
                ]),
                indicatorRotate: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["trigger"])('indicatorRotate', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["state"])('closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({ transform: 'rotate(0deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["state"])('open', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({ transform: 'rotate(180deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["transition"])('open <=> closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["animate"])('.3s ease')),
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxExpansionPanelBodyDirective = /** @class */ (function () {
                /**
                 * @param {?} _template
                 */
                function NxExpansionPanelBodyDirective(_template) {
                    this._template = _template;
                }
                return NxExpansionPanelBodyDirective;
            }());
            NxExpansionPanelBodyDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Directive"], args: [{ selector: '[nxExpansionPanelBody]' },] }
            ];
            /** @nocollapse */
            NxExpansionPanelBodyDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId = 0;
            /** @type {?} */
            var DEFAULT_TYPE$1 = 'regular';
            var ɵ0 = undefined;
            var NxExpansionPanelComponent = /** @class */ (function (_super) {
                __extends(NxExpansionPanelComponent, _super);
                /**
                 * @param {?} accordion
                 * @param {?} _changeDetectorRef
                 * @param {?} _expansionDispatcher
                 * @param {?} _viewContainerRef
                 */
                function NxExpansionPanelComponent(accordion, _changeDetectorRef, _expansionDispatcher, _viewContainerRef) {
                    var _this = _super.call(this, accordion, _changeDetectorRef, _expansionDispatcher) || this;
                    _this._viewContainerRef = _viewContainerRef;
                    _this._negative = null;
                    _this._accordionStyle = DEFAULT_TYPE$1;
                    _this._style = null;
                    _this._headerId = "nx-expansion-panel-header-" + nextId++;
                    /**
                     * Stream that emits for changes in `\@Input` properties.
                     */
                    _this._inputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    _this.accordion = accordion;
                    return _this;
                }
                Object.defineProperty(NxExpansionPanelComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative set of styles should be used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxExpansionPanelComponent.prototype, "style", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._style;
                    },
                    /**
                     * Value for the styling that should be chosen.
                     * Default value: 'regular'.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = value ? value : DEFAULT_TYPE$1;
                        var _b = __read(value.match(/regular|light/) || [DEFAULT_TYPE$1], 1), newValue = _b[0];
                        this._style = ( /** @type {?} */(newValue));
                        this._accordionStyle = ( /** @type {?} */(newValue));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxExpansionPanelComponent.prototype, "portal", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._portal;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxExpansionPanelComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    if (this.lazyContent) {
                        // Render the content as soon as the panel becomes open.
                        this.opened.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                         * @return {?}
                         */function () { return _this.expanded && !_this._portal; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["TemplatePortal"](_this.lazyContent._template, _this._viewContainerRef);
                        }));
                    }
                    // Inherit appearance given by the accordion (if any).
                    if (Boolean(this.accordion)) {
                        if (this.style === null && this.accordion.style !== null) {
                            this.style = this.accordion.style;
                        }
                        if (this.negative === null && this.accordion.negative !== null) {
                            this.negative = this.accordion.negative;
                        }
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                NxExpansionPanelComponent.prototype.ngOnChanges = function (changes) {
                    this._inputChanges.next(changes);
                };
                /**
                 * @return {?}
                 */
                NxExpansionPanelComponent.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    this._inputChanges.complete();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxExpansionPanelComponent.prototype.getOpenState = function () {
                    return this.expanded ? 'open' : 'closed';
                };
                return NxExpansionPanelComponent;
            }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_1__["CdkAccordionItem"]));
            NxExpansionPanelComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{
                            selector: 'nx-expansion-panel',
                            exportAs: 'NxExpansionPanelComponent',
                            template: "<ng-content select=\"nx-expansion-panel-header\"></ng-content>\n\n<div class=\"nx-expansion-panel__content\" role=\"region\" [@bodyExpansion]=\"getOpenState()\"\n  [attr.aria-labelledby]=\"_headerId\" [id]=\"id\">\n  <div class=\"nx-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            animations: [nxAccordionAnimations.bodyExpansion],
                            host: {
                                '[class.nx-expanded]': 'expanded',
                                '[class.nx-expansion-panel--light]': '_accordionStyle === "light"',
                                '[class.nx-expansion-panel--regular]': '_accordionStyle === "regular"',
                                '[class.nx-expansion-panel--negative]': 'negative'
                            },
                            providers: [
                                // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering
                                // to the same accordion.
                                { provide: NxAccordionDirective, useValue: ɵ0 },
                            ],
                            styles: [":host{display:block}:host(.nx-expansion-panel--negative) ::ng-deep div.nx-expansion-panel__body *{color:#fff}.nx-expansion-panel__content{overflow:hidden;display:block}.nx-expansion-panel__body{font-size:16px;line-height:24px;padding:24px 88px 32px 32px}@media (max-width:703px){.nx-expansion-panel__body{padding:24px 16px 32px}:host:last-child ::ng-deep .nx-expansion-panel__header-content,:host:only-child ::ng-deep .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-content{border-top:1px solid #d9d9d9;border-bottom:none}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__body{padding-top:0}:host(.nx-expansion-panel--light):first-child ::ng-deep .nx-expansion-panel__header-content{border-top:none}"]
                        }] }
            ];
            /** @nocollapse */
            NxExpansionPanelComponent.ctorParameters = function () { return [
                { type: NxAccordionDirective, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["SkipSelf"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["UniqueSelectionDispatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewContainerRef"] }
            ]; };
            NxExpansionPanelComponent.propDecorators = {
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                style: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['nxStyle',] }],
                lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChild"], args: [NxExpansionPanelBodyDirective,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxExpansionPanelHeaderComponent = /** @class */ (function () {
                /**
                 * @param {?} panel
                 * @param {?} _changeDetectorRef
                 */
                function NxExpansionPanelHeaderComponent(panel, _changeDetectorRef) {
                    var _this = this;
                    this.panel = panel;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._parentChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_9__["Subscription"].EMPTY;
                    this._parentChangeSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(panel.opened, panel.closed, panel._inputChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                     * @param {?} changes
                     * @return {?}
                     */function (/**
                     * @param {?} changes
                     * @return {?}
                     */ changes) { return !!(changes.hideToggle || changes.disabled); }))))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this._changeDetectorRef.markForCheck(); }));
                }
                /**
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.ngOnDestroy = function () {
                    this._parentChangeSubscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.isExpanded = function () {
                    return this.panel.expanded;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.getOpenState = function () {
                    return this.panel.getOpenState();
                };
                /**
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype._getPanelId = function () {
                    return this.panel.id;
                };
                /**
                 * Toggle the expansion panel.
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.toggle = function () {
                    this.panel.toggle();
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.keydown = function (event) {
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["SPACE"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__["ENTER"]:
                            event.preventDefault();
                            this.toggle();
                            break;
                        default:
                            return;
                    }
                };
                return NxExpansionPanelHeaderComponent;
            }());
            NxExpansionPanelHeaderComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{
                            selector: 'nx-expansion-panel-header',
                            template: "<div class=\"nx-expansion-panel__header-content\">\n  <ng-content select=\"nx-expansion-panel-title\"></ng-content>\n  <ng-content select=\"nx-expansion-panel-description\"></ng-content>\n  <nx-icon\n    [@indicatorRotate]=\"getOpenState()\"\n    class=\"nx-expansion-panel__chevron\"\n    name=\"chevron-down\">\n  </nx-icon>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            animations: [nxAccordionAnimations.indicatorRotate],
                            host: {
                                '[class.nx-expanded]': 'isExpanded()',
                                'class': 'nx-expansion-panel__header',
                                'role': 'button',
                                '[attr.id]': 'panel._headerId',
                                '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                                '[attr.aria-controls]': '_getPanelId()',
                                '[attr.aria-expanded]': 'isExpanded()',
                                '[attr.aria-disabled]': 'panel.disabled',
                                '(keydown)': 'keydown($event)',
                                '(click)': 'toggle()'
                            },
                            styles: [":host:focus{outline:0}.nx-expansion-panel__header-content{width:100%;cursor:pointer;align-items:center;color:#414141;display:flex;justify-content:space-between;position:relative;padding:24px 32px;margin-top:16px;background:#f5f5f5;outline:0;border:none}::ng-deep .nx-expansion-panel__header-title{font-size:26px;font-weight:300;line-height:32px;letter-spacing:.3px;text-align:left;margin-right:32px}:host-context(.nx-expansion-panel--negative) .nx-expansion-panel__header-content{background-color:#fff}.nx-expansion-panel__chevron{color:#006192;pointer-events:none;font-size:24px}:host-context(.nx-expansion-panel--light) .nx-expansion-panel__header-content{margin-top:0;background:0 0}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{color:#006192;letter-spacing:.2px;font-weight:400;font-size:20px;line-height:28px}@media (max-width:703px){.nx-expansion-panel__header-content{padding:16px;margin-top:0;border-top:1px solid #d9d9d9}::ng-deep .nx-expansion-panel__header-title{font-size:20px;line-height:28px;margin-right:16px;font-weight:400}:host(.nx-expanded) .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{line-height:24px;font-size:16px}:host-context(.nx-expansion-panel--light.nx-expanded) .nx-expansion-panel__header-content{border-bottom:none}}:host[aria-disabled=true] .nx-expansion-panel__header-content{cursor:not-allowed}:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__chevron,:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__header-title{color:#c2c2c2}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content{border-color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-title{color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__chevron{color:#fff}:host-context([data-whatinput=keyboard]):focus .nx-expansion-panel__header-content{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-top-color:transparent;z-index:1}"]
                        }] }
            ];
            /** @nocollapse */
            NxExpansionPanelHeaderComponent.ctorParameters = function () { return [
                { type: NxExpansionPanelComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Host"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] }
            ]; };
            /**
             * This directive is to be used inside of the NxExpansionPanelHeader component.
             */
            var NxExpansionPanelDescriptionDirective = /** @class */ (function () {
                function NxExpansionPanelDescriptionDirective() {
                }
                return NxExpansionPanelDescriptionDirective;
            }());
            NxExpansionPanelDescriptionDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-expansion-panel-description',
                            host: {
                                class: 'nx-expansion-panel__header-description'
                            }
                        },] }
            ];
            /**
             * This directive is to be used inside of the NxExpansionPanelHeader component.
             */
            var NxExpansionPanelTitleDirective = /** @class */ (function () {
                function NxExpansionPanelTitleDirective() {
                }
                return NxExpansionPanelTitleDirective;
            }());
            NxExpansionPanelTitleDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-expansion-panel-title',
                            host: {
                                class: 'nx-expansion-panel__header-title'
                            }
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxAccordionModule = /** @class */ (function () {
                function NxAccordionModule() {
                }
                return NxAccordionModule;
            }());
            NxAccordionModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["PortalModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_4__["NxIconModule"]
                            ],
                            exports: [
                                NxAccordionDirective,
                                NxExpansionPanelComponent,
                                NxExpansionPanelHeaderComponent,
                                NxExpansionPanelDescriptionDirective,
                                NxExpansionPanelTitleDirective,
                                NxExpansionPanelBodyDirective
                            ],
                            declarations: [
                                NxAccordionDirective,
                                NxExpansionPanelComponent,
                                NxExpansionPanelHeaderComponent,
                                NxExpansionPanelDescriptionDirective,
                                NxExpansionPanelTitleDirective,
                                NxExpansionPanelBodyDirective
                            ],
                            providers: [],
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-accordion.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-action.js": 
        /*!****************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-action.js ***!
          \****************************************************************************/
        /*! exports provided: NxActionModule, NxActionComponent, NxActionIconDirective */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxActionModule", function () { return NxActionModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxActionComponent", function () { return NxActionComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxActionIconDirective", function () { return NxActionIconDirective; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxActionComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxActionComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._selected = false;
                    this._expandable = false;
                    this._expanded = false;
                }
                Object.defineProperty(NxActionComponent.prototype, "selected", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._selected;
                    },
                    /**
                     * Whether this action is selected or not.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxActionComponent.prototype, "expandable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._expandable;
                    },
                    /**
                     * Whether this action is expandable or not. Will add a caret icon.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._expandable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxActionComponent.prototype, "expanded", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._expanded;
                    },
                    /**
                     * Whether this action is expanded or not.
                     * Only works in combination with the `expandable` option set to `true`.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._expanded = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxActionComponent;
            }());
            NxActionComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: '[nxAction]',
                            template: "<div class=\"nx-action__wrapper\">\n  <ng-container *ngIf=\"expandable\">\n    <nx-icon class=\"nx-action__expand-icon\" name=\"chevron-right\"></nx-icon>\n  </ng-container>\n  <ng-content select=\"[nxActionIcon]\"></ng-content>\n  <span class=\"nx-action__label\">\n    <ng-content></ng-content>\n  </span>\n</div>\n",
                            host: {
                                '[class.is-expanded]': 'expanded',
                                '[class.is-selected]': 'selected',
                                '[class.is-expandable]': 'expandable',
                                'class': 'nx-action'
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host(.nx-action){display:block;background-color:#f5f5f5;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;box-shadow:none;border:none;margin:0;cursor:pointer;line-height:24px;font-size:16px;font-weight:400;padding:8px 16px 8px 0;width:100%;color:#414141;text-decoration:none}:host(.nx-action):hover{background-color:#ececec}:host(.nx-action).is-expanded{font-weight:700}:host(.nx-action).is-expanded .nx-action__expand-icon{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}:host(.nx-action).is-expandable .nx-action__wrapper::before{flex:0 1 32px;max-width:8px;min-width:4px}:host(.nx-action).is-selected{background-color:#007ab3;color:#fff;font-weight:700}:host(.nx-action)[nxTreeNodePadding] .nx-action__wrapper::before{flex-shrink:0}:host(.nx-action)::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]):focus{box-shadow:inset 0 0 0 4px #009de6;border-radius:8px}:host-context([data-whatinput=keyboard]):focus.is-selected{box-shadow:inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff}.nx-action__expand-icon{display:flex;justify-content:center;transition:.2s;-webkit-transform:rotateZ(0);transform:rotateZ(0);width:16px;height:24px;margin-right:8px;flex:0 0 auto;font-size:22px}.nx-action__wrapper{display:flex;align-items:center;position:relative;overflow:hidden}.nx-action__wrapper::before{content:'';display:block;flex:0 1 32px;min-width:16px;height:1em}::ng-deep .nx-action__icon{margin-right:16px;height:24px;font-weight:400;flex:0 0 auto;position:relative;top:-1px}.nx-action__label{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;flex:1 1 50%;text-align:left;line-height:1;padding:4px 0}"]
                        }] }
            ];
            /** @nocollapse */
            NxActionComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
            ]; };
            NxActionComponent.propDecorators = {
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                expandable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                expanded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxActionIconDirective = /** @class */ (function () {
                function NxActionIconDirective() {
                }
                return NxActionIconDirective;
            }());
            NxActionIconDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: '[nxActionIcon]',
                            host: {
                                'class': 'nx-action__icon'
                            }
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxActionModule = /** @class */ (function () {
                function NxActionModule() {
                }
                return NxActionModule;
            }());
            NxActionModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [_allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_3__["NxIconModule"], _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"]],
                            declarations: [NxActionComponent, NxActionIconDirective],
                            exports: [NxActionComponent, NxActionIconDirective]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-action.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-autocomplete.js": 
        /*!**********************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-autocomplete.js ***!
          \**********************************************************************************/
        /*! exports provided: NxAutocompleteModule, NxAutocompleteOptionSelected, NxAutocompleteOptionComponent, NxAutocompleteSelectedEvent, NxAutocompleteComponent, getNxAutocompleteMissingPanelError, NX_AUTOCOMPLETE_VALUE_ACCESSOR, NxAutocompleteTriggerDirective */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteModule", function () { return NxAutocompleteModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteOptionSelected", function () { return NxAutocompleteOptionSelected; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteOptionComponent", function () { return NxAutocompleteOptionComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteSelectedEvent", function () { return NxAutocompleteSelectedEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteComponent", function () { return NxAutocompleteComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNxAutocompleteMissingPanelError", function () { return getNxAutocompleteMissingPanelError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_AUTOCOMPLETE_VALUE_ACCESSOR", function () { return NX_AUTOCOMPLETE_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteTriggerDirective", function () { return NxAutocompleteTriggerDirective; });
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @allianz/ngx-ndbx/formfield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _allianz_ngx_ndbx_natural_language_form__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @allianz/ngx-ndbx/natural-language-form */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-natural-language-form.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Option selected event
             */
            var NxAutocompleteOptionSelected = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?=} isUserInput
                 */
                function NxAutocompleteOptionSelected(source, isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.source = source;
                    this.isUserInput = isUserInput;
                }
                return NxAutocompleteOptionSelected;
            }());
            /**
             * Option IDs need to be unique across components, so this counter exists outside of
             * the component definition.
             * @type {?}
             */
            var _uniqueIdCounter = 0;
            var NxAutocompleteOptionComponent = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 */
                function NxAutocompleteOptionComponent(elementRef, _changeDetectorRef) {
                    this.elementRef = elementRef;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._id = "nx-autocomplete-option-" + _uniqueIdCounter++;
                    this._selected = false;
                    this._active = false;
                    this._disabled = false;
                    /**
                     * Event emitted when the option is selected or deselected.
                     */
                    this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                }
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "id", {
                    /**
                     * Id of the autocomplete option. By default it is set to an incremented value.
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "selected", {
                    /**
                     * Whether or not the option is currently selected.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "active", {
                    /**
                     * Whether or not the option is currently active and ready to be selected.
                     * An active option displays styles as if it is focused, but the
                     * focus is actually retained somewhere else. This comes in handy
                     * for components like autocomplete where focus must remain on the input.
                     * @return {?}
                     */
                    get: function () {
                        return this._active;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "disabled", {
                    /**
                     * Whether the option is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        if (this._disabled !== newValue) {
                            this._disabled = newValue;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Ensures the option is selected when activated from the keyboard.
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._handleKeydown = function (event) {
                    if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["SPACE"]) {
                        this._selectViaInteraction();
                        // Prevent the page from scrolling down and form submits.
                        event.preventDefault();
                    }
                };
                /**
                 * `Selects the option while indicating the selection came from the user. Used to
                 * determine if the select's view -> model callback should be invoked.`
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._selectViaInteraction = function () {
                    if (!this.disabled) {
                        this._selected = true;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent(true);
                    }
                };
                /**
                 * Returns the correct tabindex for the option depending on disabled state.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._getTabIndex = function () {
                    return this.disabled ? '-1' : '0';
                };
                /**
                 * Emits the selection change event.
                 * @private
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._emitSelectionChangeEvent = function (isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));
                };
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "viewValue", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return (this.elementRef.nativeElement.textContent || '').trim();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * This method sets display styles on the option to make it appear
                 * active. This is used by the ActiveDescendantKeyManager so key
                 * events will display the proper options as active on arrow key events.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.setActiveStyles = function () {
                    if (!this._active) {
                        this._active = true;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * \@docs-private
                 * This method removes display styles on the option that made it appear
                 * active. This is used by the ActiveDescendantKeyManager so key
                 * events will display the proper options as active on arrow key events.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.setInactiveStyles = function () {
                    if (this._active) {
                        this._active = false;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * \@docs-private
                 * Gets the label to be used when determining whether the option should be focused.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.getLabel = function () {
                    return this.viewValue;
                };
                /**
                 * Selects the option.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.select = function () {
                    this._selected = true;
                    this._changeDetectorRef.markForCheck();
                    this._emitSelectionChangeEvent();
                };
                /**
                 * Deselects the option.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.deselect = function () {
                    this._selected = false;
                    this._changeDetectorRef.markForCheck();
                    this._emitSelectionChangeEvent();
                };
                /**
                 * \@docs-private
                 * Sets focus onto this option.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.focus = function () {
                    /** @type {?} */
                    var element = this.elementRef.nativeElement;
                    if (typeof element.focus === 'function') {
                        element.focus();
                    }
                };
                return NxAutocompleteOptionComponent;
            }());
            NxAutocompleteOptionComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{
                            selector: 'nx-autocomplete-option',
                            template: "<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n  <div class=\"nx-autocomplete-option__label\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                            host: {
                                'role': 'option',
                                '[attr.tabindex]': '_getTabIndex()',
                                '[id]': 'id',
                                '[attr.aria-selected]': 'selected.toString()',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '(click)': '_selectViaInteraction()',
                                '(keydown)': '_handleKeydown($event)',
                                '[class.nx-active]': 'active',
                                '[class.nx-disabled]': 'disabled',
                                '[style.display]': '\'block\'' // needed for to be able to calculate offset height
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host:focus{outline:0}.nx-autocomplete-option{font-size:20px;line-height:28px;letter-spacing:.2px;padding:0 32px 16px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}.nx-autocomplete-option.nx-active,.nx-autocomplete-option:hover{color:#007ab3}@media screen and (-ms-high-contrast:active){.nx-autocomplete-option.nx-active,.nx-autocomplete-option:hover{color:highlightText}}.nx-autocomplete-option__label{overflow:hidden;text-overflow:ellipsis;padding:0 12px;margin:0 -12px}:host-context([data-whatinput=keyboard]) .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxAutocompleteOptionComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] }
            ]; };
            NxAutocompleteOptionComponent.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                onSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Autocomplete IDs need to be unique across components, so this counter exists outside of
             * the component definition.
             * @type {?}
             */
            var _uniqueAutocompleteIdCounter = 0;
            /**
             * Event object that is emitted when an autocomplete option is selected.
             */
            var NxAutocompleteSelectedEvent = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} option
                 */
                function NxAutocompleteSelectedEvent(source, option) {
                    this.source = source;
                    this.option = option;
                }
                return NxAutocompleteSelectedEvent;
            }());
            var NxAutocompleteComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 */
                function NxAutocompleteComponent(_changeDetectorRef, _elementRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    /**
                     * Whether the autocomplete panel should be visible, depending on option length.
                     */
                    this.showPanel = false;
                    this._isOpen = false;
                    this._items = null;
                    this._hasItems = false;
                    /**
                     * Event that is emitted whenever an option from the list is selected.
                     */
                    this.optionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    /**
                     * Event that is emitted when the autocomplete panel is opened.
                     */
                    this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    /**
                     * Event that is emitted when the autocomplete panel is closed.
                     */
                    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_8__["EventEmitter"]();
                    this._classList = {};
                    /**
                     * Unique ID to be used by autocomplete trigger's "aria-owns" property.
                     */
                    this.id = "nx-autocomplete-" + _uniqueAutocompleteIdCounter++;
                    // As autocomplete option can hold any value, we might need a converter
                    // to get a string representation, which can be stored in input. Default value ? value.toString() : null.
                    /**
                     * Value to string converter.
                     */
                    this.valueFormatter = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) { return value ? value.toString() : null; });
                }
                Object.defineProperty(NxAutocompleteComponent.prototype, "isOpen", {
                    /**
                     * Whether the autocomplete panel is open.
                     * @return {?}
                     */
                    get: function () { return this._isOpen && this.showPanel; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "items", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._items;
                    },
                    /**
                     * Items observable. If given, autocomplete takes care of the options and ng-content is discarderd
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        var _this = this;
                        this._hasItems = true;
                        if (Array.isArray(val)) {
                            this._items = val;
                        }
                        else if (val instanceof rxjs__WEBPACK_IMPORTED_MODULE_10__["Observable"]) {
                            if (this._itemsSubscription) {
                                this._itemsSubscription.unsubscribe();
                            }
                            this._itemsSubscription = val.subscribe(( /**
                             * @param {?} itms
                             * @return {?}
                             */function (itms) {
                                _this._items = itms;
                                _this._changeDetectorRef.markForCheck();
                                // and check visibility in next cycle, when options are set
                                setTimeout(( /**
                                 * @return {?}
                                 */function () { return _this._setVisibility(); }));
                            }));
                        }
                        else if (val === null) {
                            this._items = val;
                        }
                        else {
                            throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "hasItems", {
                    /**
                     * \@docs-private
                     * Is items observable set
                     * @return {?}
                     */
                    get: function () {
                        return this._hasItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "options", {
                    /**
                     * Autocomplete options
                     * @return {?}
                     */
                    get: function () {
                        return this.hasItems ? this._vOptions : this._cOptions;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "classList", {
                    /**
                     * Takes classes set on the host nx-autocomplete element and applies them to the panel
                     * inside the overlay container to allow for easy styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        if (value && value.length) {
                            value.split(' ').forEach(( /**
                             * @param {?} className
                             * @return {?}
                             */function (/**
                             * @param {?} className
                             * @return {?}
                             */ className) { return _this._classList[className.trim()] = true; }));
                            this._elementRef.nativeElement.className = '';
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype.ngAfterViewInit = function () {
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["ActiveDescendantKeyManager"](this.options).withWrap();
                    this._setVisibility();
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype.ngOnDestroy = function () {
                    if (this._itemsSubscription) {
                        this._itemsSubscription.unsubscribe();
                    }
                };
                /**
                 * Sets the panel scrollTop. This allows us to manually scroll to display options
                 * above or below the fold, as they are not actually being focused when active.
                 * @param {?} scrollTop
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._setScrollTop = function (scrollTop) {
                    if (this.panel) {
                        this.panel.nativeElement.scrollTop = scrollTop;
                    }
                };
                /**
                 * Returns the panel's scrollTop.
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._getScrollTop = function () {
                    return this.panel ? this.panel.nativeElement.scrollTop : 0;
                };
                /**
                 * Panel should hide itself when the option list is empty.
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._setVisibility = function () {
                    this.showPanel = !!(this.options && this.options.length);
                    this._classList['nx-autocomplete-visible'] = this.showPanel;
                    this._classList['nx-autocomplete-hidden'] = !this.showPanel;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Emits the `select` event.
                 * @param {?} option
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._emitSelectEvent = function (option) {
                    /** @type {?} */
                    var event = new NxAutocompleteSelectedEvent(this, option);
                    this.optionSelected.emit(event);
                };
                return NxAutocompleteComponent;
            }());
            NxAutocompleteComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Component"], args: [{
                            selector: 'nx-autocomplete',
                            template: "<ng-template>\n  <div class=\"nx-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"_classList\" #panel>\n    <ng-container *ngIf=\"hasItems\">\n      <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n        {{item}}\n      </nx-autocomplete-option>\n    </ng-container>\n    <ng-container *ngIf=\"!hasItems\">\n      <ng-content></ng-content>\n    </ng-container>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectionStrategy"].OnPush,
                            exportAs: 'nxAutocomplete',
                            host: {
                                'class': 'nx-autocomplete'
                            },
                            styles: [":host ::ng-deep .c-input::-ms-clear{width:0;height:0}.nx-autocomplete-panel{background-color:#fff;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:24px;overflow-y:auto;overflow-x:hidden;max-height:336px;width:100%;border-radius:4px}.nx-autocomplete-panel.nx-autocomplete-visible{visibility:visible}.nx-autocomplete-panel.nx-autocomplete-hidden{visibility:hidden}@media screen and (-ms-high-contrast:active){.nx-autocomplete-panel{box-shadow:0 0 0 1px windowText}}"]
                        }] }
            ];
            /** @nocollapse */
            NxAutocompleteComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] }
            ]; };
            NxAutocompleteComponent.propDecorators = {
                template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_8__["TemplateRef"],] }],
                panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewChild"], args: ['panel',] }],
                items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"] }],
                optionSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Output"] }],
                _vOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewChildren"], args: [NxAutocompleteOptionComponent,] }],
                _cOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ContentChildren"], args: [NxAutocompleteOptionComponent, { descendants: true },] }],
                classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['class',] }],
                valueFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['nxValueFormatter',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Provider that allows the autocomplete to register as a ControlValueAccessor.
             * \@docs-private
             * @type {?}
             */
            var NX_AUTOCOMPLETE_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_9__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_8__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NxAutocompleteTriggerDirective; })),
                multi: true
            };
            /**
             * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
             * @return {?}
             */
            function getNxAutocompleteMissingPanelError() {
                return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +
                    'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +
                    'you\'re attempting to open it after the ngAfterContentInit hook.');
            }
            var NxAutocompleteTriggerDirective = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _overlay
                 * @param {?} _viewContainerRef
                 * @param {?} _zone
                 * @param {?} _changeDetectorRef
                 * @param {?} _dir
                 * @param {?} _nxFormField
                 * @param {?} _nxWordField
                 * @param {?} _document
                 * @param {?=} _viewportRuler
                 */
                function NxAutocompleteTriggerDirective(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, _dir, _nxFormField, _nxWordField, _document, _viewportRuler) {
                    var _this = this;
                    this._element = _element;
                    this._overlay = _overlay;
                    this._viewContainerRef = _viewContainerRef;
                    this._zone = _zone;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dir = _dir;
                    this._nxFormField = _nxFormField;
                    this._nxWordField = _nxWordField;
                    this._document = _document;
                    this._viewportRuler = _viewportRuler;
                    this._componentDestroyed = false;
                    /**
                     * Whether or not the label state is being overridden.
                     */
                    this._manuallyFloatingLabel = false;
                    /**
                     * Subscription to viewport size changes.
                     */
                    this._viewportSubscription = rxjs__WEBPACK_IMPORTED_MODULE_10__["Subscription"].EMPTY;
                    /**
                     * Stream of keyboard events that can close the panel.
                     */
                    this._closeKeyEventStream = new rxjs__WEBPACK_IMPORTED_MODULE_10__["Subject"]();
                    /**
                     * Value changes
                     */
                    this._valueChanges = new rxjs__WEBPACK_IMPORTED_MODULE_10__["Subject"]();
                    this._itemsCb = null;
                    this._debounce = 400;
                    this._autocompleteDisabled = false;
                    this._overlayAttached = false;
                    /**
                     * Stream of autocomplete option selections.
                     */
                    this.optionSelections = Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["defer"])(( /**
                     * @return {?}
                     */function () {
                        if (_this.autocomplete && _this.autocomplete.options) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"]).apply(void 0, __spread(_this.autocomplete.options.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.onSelectionChange; }))));
                        }
                        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
                        // Return a stream that we'll replace with the real one once everything is in place.
                        return _this._zone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["switchMap"])(( /**
                     * @return {?}
                     */function () { return _this.optionSelections; })));
                    }));
                    /**
                     * `View -> model callback called when value changes`
                     */
                    this._onChange = ( /**
                     * @param {?} val
                     * @return {?}
                     */function (val) {
                        _this._valueChanges.next(val);
                    });
                    /**
                     * `View -> model callback called when autocomplete has been touched`
                     */
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "itemsCb", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._itemsCb;
                    },
                    /**
                     * The items callback. Called with input value, must return Observable of Array of strings
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        if (typeof val === 'function') {
                            this._itemsCb = val;
                        }
                        else {
                            throw new Error('Wrong value type for nxAutocompleteItems');
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "debounce", {
                    /**
                     * Debounce in ms before items callback is triggered. Defaults to 400
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this._debounce = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(val);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "autocompleteDisabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._autocompleteDisabled;
                    },
                    /**
                     * Whether autocomplete functionality is disabled.
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this._autocompleteDisabled = val;
                        this._bindAutocompleteItems();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "panelOpen", {
                    /**
                     * Whether or not the autocomplete panel is open.
                     * @return {?}
                     */
                    get: function () {
                        return this._overlayAttached && this.autocomplete.showPanel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "activeOption", {
                    /**
                     * The currently active option, coerced to NxAutocompleteOptionComponent type.
                     * @return {?}
                     */
                    get: function () {
                        if (this.autocomplete && this.autocomplete._keyManager) {
                            return this.autocomplete._keyManager.activeItem;
                        }
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "_outsideClickStream", {
                    /**
                     * Stream of clicks outside of the autocomplete panel.
                     * @private
                     * @return {?}
                     */
                    get: function () {
                        var _this = this;
                        if (!this._document) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["of"])(null);
                        }
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["fromEvent"])(this._document, 'click'), Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["fromEvent"])(this._document, 'touchend'))
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                            /** @type {?} */
                            var clickTarget = ( /** @type {?} */(event.target));
                            /** @type {?} */
                            var formField = _this._formField ?
                                _this._formField.elementRef.nativeElement : null;
                            return _this._overlayAttached &&
                                clickTarget !== _this._element.nativeElement &&
                                (!formField || !formField.contains(clickTarget)) &&
                                (!!_this._overlayRef && !_this._overlayRef.overlayElement.contains(clickTarget));
                        })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "_formField", {
                    /**
                     * @private
                     * @return {?}
                     */
                    get: function () {
                        if (this._nxFormField) {
                            return this._nxFormField;
                        }
                        else if (this._nxWordField) {
                            return this._nxWordField;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.ngOnDestroy = function () {
                    this._viewportSubscription.unsubscribe();
                    this._componentDestroyed = true;
                    this._destroyPanel();
                    this._closeKeyEventStream.complete();
                    if (this._controlValueChangesSubscription) {
                        this._controlValueChangesSubscription.unsubscribe();
                    }
                    if (this._itemsSubscription) {
                        this._itemsSubscription.unsubscribe();
                    }
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.ngOnChanges = function () {
                    this._bindAutocompleteItems();
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.ngAfterViewInit = function () {
                    this._bindAutocompleteItems();
                };
                /**
                 * Binds or rebinds the autocomplete items. Prerequisites:
                 * - items callback has to be defined
                 * - autocomplete panel has to be bound
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._bindAutocompleteItems = function () {
                    var _this = this;
                    if (this._controlValueChangesSubscription) {
                        this._controlValueChangesSubscription.unsubscribe();
                    }
                    if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {
                        /** @type {?} */
                        var itemsSubject_1 = new rxjs__WEBPACK_IMPORTED_MODULE_10__["Subject"]();
                        this.autocomplete.items = itemsSubject_1;
                        /** @type {?} */
                        var valueChanges = this._formField &&
                            this._formField._control &&
                            this._formField._control.ngControl &&
                            this._formField._control.ngControl.valueChanges ?
                            this._formField._control.ngControl.valueChanges : this._valueChanges;
                        this._controlValueChangesSubscription = valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["debounceTime"])(this._debounce))
                            .subscribe(( /**
                     * @param {?} input
                     * @return {?}
                     */function (input) {
                            if (_this._itemsSubscription) {
                                _this._itemsSubscription.unsubscribe();
                            }
                            _this._itemsSubscription = _this._itemsCb(input).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["first"])()).subscribe(( /**
                             * @param {?} result
                             * @return {?}
                             */function (result) {
                                itemsSubject_1.next(result);
                            }), ( /**
                             * @param {?} err
                             * @return {?}
                             */function (err) {
                                // On error reset
                                // TODO: Log error?
                                itemsSubject_1.next([]);
                            }));
                        }));
                    }
                };
                /**
                 * Opens the autocomplete suggestion panel.
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.openPanel = function () {
                    if (!this.autocompleteDisabled) {
                        this._attachOverlay();
                        this._floatLabel();
                    }
                };
                /**
                 * Closes the autocomplete suggestion panel.
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.closePanel = function () {
                    this._resetLabel();
                    if (!this._overlayAttached) {
                        return;
                    }
                    if (this.panelOpen) {
                        // Only emit if the panel was visible.
                        this.autocomplete.closed.emit();
                    }
                    this.autocomplete._isOpen = this._overlayAttached = false;
                    if (this._overlayRef && this._overlayRef.hasAttached()) {
                        this._overlayRef.detach();
                        this._closingActionsSubscription.unsubscribe();
                    }
                    // Note that in some cases this can end up being called after the component is destroyed.
                    // Add a check to ensure that we don't try to run change detection on a destroyed view.
                    if (!this._componentDestroyed) {
                        // We need to trigger change detection manually, because
                        // `fromEvent` doesn't seem to do it at the proper time.
                        // This ensures that the label is reset when the
                        // user clicks outside.
                        this._changeDetectorRef.detectChanges();
                    }
                };
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "panelClosingActions", {
                    /**
                     * A stream of actions that should close the autocomplete panel, including
                     * when an option is selected, on blur, and when TAB is pressed.
                     * @return {?}
                     */
                    get: function () {
                        var _this = this;
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"])(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(( /**
                         * @return {?}
                         */function () { return _this._overlayAttached; }))), this._closeKeyEventStream, this._outsideClickStream, this._overlayRef ?
                            this._overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["filter"])(( /**
                             * @return {?}
                             */function () { return _this._overlayAttached; }))) :
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["of"])());
                    },
                    enumerable: true,
                    configurable: true
                });
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.writeValue = function (value) {
                    var _this = this;
                    Promise.resolve(null).then(( /**
                     * @return {?}
                     */function () { return _this._setTriggerValue(value); }));
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.setDisabledState = function (isDisabled) {
                    this._element.nativeElement.disabled = isDisabled;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._handleKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    // Prevent the default action on all escape key presses. This is here primarily to bring IE
                    // in line with other browsers. By default, pressing escape on IE will cause it to revert
                    // the input value to the one that it had on focus, however it won't dispatch any events
                    // which means that the model value will be out of sync with the view.
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ESCAPE"]) {
                        event.preventDefault();
                    }
                    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
                    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
                    if (this.panelOpen && (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ESCAPE"] || (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["UP_ARROW"] && event.altKey))) {
                        this._resetActiveItem();
                        this._closeKeyEventStream.next();
                        event.stopPropagation();
                    }
                    else if (this.activeOption && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ENTER"] && this.panelOpen) {
                        this.activeOption._selectViaInteraction();
                        this._resetActiveItem();
                        event.preventDefault();
                    }
                    else {
                        /** @type {?} */
                        var prevActiveItem = this.autocomplete._keyManager.activeItem;
                        /** @type {?} */
                        var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["DOWN_ARROW"];
                        if (this.panelOpen || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["TAB"]) {
                            this.autocomplete._keyManager.onKeydown(event);
                        }
                        else if (isArrowKey && this._isFieldEnabled()) {
                            this.openPanel();
                        }
                        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                            this._scrollToOption();
                        }
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._handleInput = function (event) {
                    /** @type {?} */
                    var target = ( /** @type {?} */(event.target));
                    /** @type {?} */
                    var value = target.value;
                    // Based on `NumberValueAccessor` from forms.
                    if (target.type === 'number') {
                        value = value === '' ? null : parseFloat(value);
                    }
                    // If the input has a placeholder, IE will fire the `input` event on page load,
                    // focus and blur, in addition to when the user actually changed the value. To
                    // filter out all of the extra events, we save the value on focus and between
                    // `input` events, and we check whether it changed.
                    // See: https://connect.microsoft.com/IE/feedback/details/885747/
                    if (this._isFieldEnabled() && this._previousValue !== value &&
                        document.activeElement === event.target) {
                        this._previousValue = value;
                        this._onChange(value);
                        this.openPanel();
                    }
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._handleFocus = function () {
                    if (this._isFieldEnabled()) {
                        this._previousValue = this._element.nativeElement.value;
                        this.openPanel();
                    }
                };
                /**
                 * In "auto" mode, the label will animate down as soon as focus is lost.
                 * This causes the value to jump when selecting an option with the mouse.
                 * This method manually floats the label until the panel can be closed.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._floatLabel = function () {
                    if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {
                        this._nxFormField.floatLabel = 'always';
                        this._manuallyFloatingLabel = true;
                    }
                };
                /**
                 * If the label has been manually elevated, return it to its normal state.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._resetLabel = function () {
                    if (this._manuallyFloatingLabel) {
                        this._nxFormField.floatLabel = 'auto';
                        this._manuallyFloatingLabel = false;
                    }
                };
                /**
                 * Given that we are not actually focusing active options, we must manually adjust scroll
                 * to reveal options below the fold. First, we find the offset of the option from the top
                 * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
                 * the panel height + the option height, so the active option will be just visible at the
                 * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
                 * will become the offset. If that offset is visible within the panel already, the scrollTop is
                 * not adjusted.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._scrollToOption = function () {
                    if (this.autocomplete.options.length === 0) {
                        return;
                    }
                    /** @type {?} */
                    var optionOffset = 0;
                    /** @type {?} */
                    var optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;
                    if (this.autocomplete._keyManager.activeItem) {
                        optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;
                    }
                    /** @type {?} */
                    var newScrollPosition = _getOptionScrollPosition(optionOffset, optionHeight, this.autocomplete._getScrollTop(), this.autocomplete.panel.nativeElement.offsetHeight);
                    this.autocomplete._setScrollTop(newScrollPosition);
                };
                /**
                 * This method listens to a stream of panel closing actions and resets the
                 * stream every time the option list changes.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._subscribeToClosingActions = function () {
                    var _this = this;
                    /** @type {?} */
                    var firstStable = this._zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1));
                    /** @type {?} */
                    var optionChanges = this.autocomplete.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["tap"])(( /**
                     * @return {?}
                     */function () { return _this._positionStrategy.reapplyLastPosition(); })), 
                    // Defer emitting to the stream until the next tick, because changing
                    // bindings in here will cause "changed after checked" errors.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["delay"])(0));
                    // When the zone is stable initially, and when the option list changes...
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_10__["merge"])(firstStable, optionChanges)
                        .pipe(
                    // create a new stream of panelClosingActions, replacing any previous streams
                    // that were created, and flatten it so our stream only emits closing events...
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["switchMap"])(( /**
                     * @return {?}
                     */function () {
                        _this._resetActiveItem();
                        _this.autocomplete._setVisibility();
                        return _this.panelClosingActions;
                    })), 
                    // when the first closing event occurs...
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__["take"])(1))
                        // set the value, close the panel, and complete.
                        .subscribe(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) { return _this._setValueAndClose(event); }));
                };
                /**
                 * Destroys the autocomplete suggestion panel.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._destroyPanel = function () {
                    if (this._overlayRef) {
                        this.closePanel();
                        this._overlayRef.dispose();
                        this._overlayRef = null;
                    }
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._setTriggerValue = function (value) {
                    /** @type {?} */
                    var toDisplay = this.autocomplete && this.autocomplete.valueFormatter ?
                        this.autocomplete.valueFormatter(value) :
                        value;
                    // Simply falling back to an empty string if the display value is falsy does not work properly.
                    // The display value can also be the number zero and shouldn't fall back to an empty string.
                    /** @type {?} */
                    var inputValue = toDisplay != null ? toDisplay : '';
                    // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go
                    // through change detection.
                    if (this._formField) {
                        this._formField._control.value = inputValue;
                    }
                    else {
                        this._element.nativeElement.value = inputValue;
                    }
                };
                /**
                 * This method closes the panel, and if a value is specified, also sets the associated
                 * control to that value. It will also mark the control as dirty if this interaction
                 * stemmed from the user.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._setValueAndClose = function (event) {
                    if (event && event.source) {
                        this._clearPreviousSelectedOption(event.source);
                        this._setTriggerValue(event.source.value);
                        this._onChange(event.source.value);
                        this._element.nativeElement.focus();
                        this.autocomplete._emitSelectEvent(event.source);
                    }
                    this.closePanel();
                };
                /**
                 * Clear any previous selected option and emit a selection change event for this option
                 * @private
                 * @param {?} skip
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._clearPreviousSelectedOption = function (skip) {
                    this.autocomplete.options.forEach(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) {
                        if (option !== skip && option.selected) {
                            option.deselect();
                        }
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._attachOverlay = function () {
                    var _this = this;
                    if (!this.autocomplete) {
                        throw getNxAutocompleteMissingPanelError();
                    }
                    if (!this._overlayRef) {
                        this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["TemplatePortal"](this.autocomplete.template, this._viewContainerRef);
                        this._overlayRef = this._overlay.create(this._getOverlayConfig());
                        if (this._viewportRuler) {
                            this._viewportSubscription = this._viewportRuler.change().subscribe(( /**
                             * @return {?}
                             */function () {
                                if (_this.panelOpen && _this._overlayRef) {
                                    _this._overlayRef.updateSize({ minWidth: _this._getHostWidth() });
                                }
                            }));
                        }
                    }
                    else {
                        /** Update the panel width, in case the host width has changed */
                        this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
                    }
                    if (this._overlayRef && !this._overlayRef.hasAttached()) {
                        this._overlayRef.attach(this._portal);
                        this._closingActionsSubscription = this._subscribeToClosingActions();
                    }
                    /** @type {?} */
                    var wasOpen = this.panelOpen;
                    this.autocomplete._setVisibility();
                    this.autocomplete._isOpen = this._overlayAttached = true;
                    // We need to do an extra `panelOpen` check in here, because the
                    // autocomplete won't be shown if there are no options.
                    if (this.panelOpen && wasOpen !== this.panelOpen) {
                        this.autocomplete.opened.emit();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getOverlayConfig = function () {
                    return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["OverlayConfig"]({
                        positionStrategy: this._getOverlayPosition(),
                        scrollStrategy: this._scrollStrategy(),
                        minWidth: this._getHostWidth(),
                        direction: this._dir ? this._dir.value : 'ltr'
                    });
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getOverlayPosition = function () {
                    this._positionStrategy = this._overlay.position()
                        .flexibleConnectedTo(this._getConnectedElement())
                        .withViewportMargin(16)
                        .withPush(false)
                        .withPositions([
                        {
                            originX: 'start',
                            originY: 'bottom',
                            overlayX: 'start',
                            overlayY: 'top'
                        },
                        {
                            originX: 'start',
                            originY: 'top',
                            overlayX: 'start',
                            overlayY: 'bottom',
                        }
                    ]);
                    return this._positionStrategy;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._scrollStrategy = function () {
                    return this._overlay.scrollStrategies.reposition();
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getConnectedElement = function () {
                    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;
                };
                /**
                 * Returns the width of the input element, so the panel min-width can match it.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getHostWidth = function () {
                    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
                };
                /**
                 * Resets the active item to -1 so arrow events will activate the
                 * correct options, or to 0 if the consumer opted into it.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._resetActiveItem = function () {
                    this.autocomplete._keyManager.setActiveItem(-1);
                };
                /**
                 * Determines whether the panel can be opened.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._isFieldEnabled = function () {
                    /** @type {?} */
                    var element = this._element.nativeElement;
                    return !element.readOnly && !element.disabled;
                };
                return NxAutocompleteTriggerDirective;
            }());
            NxAutocompleteTriggerDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Directive"], args: [{
                            selector: "input[nxAutocomplete], textarea[nxAutocomplete]",
                            host: {
                                'role': 'combobox',
                                'autocomplete': 'off',
                                'aria-autocomplete': 'list',
                                '[attr.aria-activedescendant]': 'activeOption?.id',
                                '[attr.aria-expanded]': 'panelOpen.toString()',
                                '[attr.aria-owns]': 'autocomplete?.id',
                                // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                                // a little earlier. This avoids issues where IE delays the focusing of the input.
                                '(focusin)': '_handleFocus()',
                                '(blur)': '_onTouched()',
                                '(input)': '_handleInput($event)',
                                '(keydown)': '_handleKeydown($event)',
                            },
                            exportAs: 'nxAutocompleteTrigger',
                            providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            NxAutocompleteTriggerDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ElementRef"] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["ChangeDetectorRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }] },
                { type: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_1__["NxFormfieldComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Host"] }] },
                { type: _allianz_ngx_ndbx_natural_language_form__WEBPACK_IMPORTED_MODULE_12__["NxWordComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Host"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["DOCUMENT"],] }] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["ViewportRuler"] }
            ]; };
            NxAutocompleteTriggerDirective.propDecorators = {
                autocomplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['nxAutocomplete',] }],
                itemsCb: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['nxAutocompleteItems',] }],
                debounce: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['nxAutocompleteDebounce',] }],
                autocompleteDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["Input"], args: ['nxAutocompleteDisabled',] }]
            };
            /**
             * Determines the position to which to scroll a panel in order for an option to be into view.
             * \@docs-private
             * @param {?} optionOffset Option offset
             * @param {?} optionHeight Height of the options.
             * @param {?} currentScrollPosition Current scroll position of the panel.
             * @param {?} panelHeight Height of the panel.
             * @return {?}
             */
            function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
                if (optionOffset < currentScrollPosition) {
                    return optionOffset;
                }
                if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
                    return Math.max(0, optionOffset - panelHeight + optionHeight);
                }
                return currentScrollPosition;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxAutocompleteModule = /** @class */ (function () {
                function NxAutocompleteModule() {
                }
                return NxAutocompleteModule;
            }());
            NxAutocompleteModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_8__["NgModule"], args: [{
                            declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],
                            exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__["OverlayModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["A11yModule"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-autocomplete.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-base.js": 
        /*!**************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-base.js ***!
          \**************************************************************************/
        /*! exports provided: NxErrorModule, ERROR_DEFAULT_OPTIONS, NxErrorComponent, NxLabelModule, LABEL_DEFAULT_OPTIONS, NxLabelComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxErrorModule", function () { return NxErrorModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERROR_DEFAULT_OPTIONS", function () { return ERROR_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxErrorComponent", function () { return NxErrorComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxLabelModule", function () { return NxLabelModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LABEL_DEFAULT_OPTIONS", function () { return LABEL_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxLabelComponent", function () { return NxLabelComponent; });
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _allianz_ngx_ndbx_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @allianz/ngx-ndbx/message */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-message.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ERROR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('ERROR_DEFAULT_OPTIONS');
            var NxErrorComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _defaultOptions
                 */
                function NxErrorComponent(_changeDetectorRef, _defaultOptions) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._defaultOptions = _defaultOptions;
                    this._showIcon = true;
                    this._appearance = 'message';
                    if (this._defaultOptions && this._defaultOptions.appearance) {
                        this.appearance = this._defaultOptions.appearance;
                    }
                }
                Object.defineProperty(NxErrorComponent.prototype, "showIcon", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._showIcon;
                    },
                    /**
                     * Whether an icon should be displayed.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._showIcon = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxErrorComponent.prototype, "appearance", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._appearance;
                    },
                    /**
                     * Whether the error should have message or text styling.
                     *
                     * Default is 'message'.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this.appearance) {
                            this._appearance = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxErrorComponent;
            }());
            NxErrorComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            selector: 'nx-error',
                            template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n  <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\">\n  </nx-icon>\n  <div class=\"nx-error__content-wrapper\">\n    <div class=\"nx-error__content\">\n      <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" [showIcon]=\"showIcon\" nxContext=\"error\">\n  <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n  <ng-content></ng-content>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[attr.role]': '"alert"'
                            },
                            styles: [":host{font-size:16px;line-height:20px;color:#dc3149;width:100%;display:block}:host .nx-error__content{line-height:20px}:host .nx-error__icon{font-size:20px;line-height:20px;color:#dc3149;margin-right:8px;float:left}"]
                        }] }
            ];
            /** @nocollapse */
            NxErrorComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [ERROR_DEFAULT_OPTIONS,] }] }
            ]; };
            NxErrorComponent.propDecorators = {
                showIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                appearance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxErrorModule = /** @class */ (function () {
                function NxErrorModule() {
                }
                return NxErrorModule;
            }());
            NxErrorModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__["NxIconModule"],
                                _allianz_ngx_ndbx_message__WEBPACK_IMPORTED_MODULE_1__["NxMessageModule"]
                            ],
                            declarations: [
                                NxErrorComponent
                            ],
                            exports: [
                                NxErrorComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId = 0;
            /** @type {?} */
            var DEFAULT_SIZE = 'large';
            /** @type {?} */
            var LABEL_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('LABEL_DEFAULT_OPTIONS');
            var NxLabelComponent = /** @class */ (function () {
                /**
                 * @param {?} _defaultOptions
                 */
                function NxLabelComponent(_defaultOptions) {
                    this._defaultOptions = _defaultOptions;
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._disabled = false;
                    this._negative = false;
                    this._id = "nx-label-" + nextId++;
                    this._size = (this._defaultOptions && this._defaultOptions.size) ? this._defaultOptions.size : DEFAULT_SIZE;
                }
                Object.defineProperty(NxLabelComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Sets the label to disabled
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxLabelComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Sets the label to disabled
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxLabelComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Sets the Id of the label
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._id !== value) {
                            this._id = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxLabelComponent.prototype, "size", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._size;
                    },
                    /**
                     * **NDBX Expert option**
                     * Sets the appearance of the label
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._size = value;
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxLabelComponent;
            }());
            NxLabelComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            selector: 'nx-label',
                            template: "<label class=\"nx-label__content\">\n  <ng-content></ng-content>\n</label>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[attr.disabled]': 'disabled',
                                '[attr.aria-labelledby]': 'id || null',
                                '[class.nx-label--negative]': 'negative',
                                '[class.nx-label--large]': 'size === "large"',
                                '[class.nx-label--small]': 'size === "small"',
                                '[attr.id]': 'id',
                            },
                            styles: [":host{display:block;color:#414141}:host.nx-label--small{font-size:16px;line-height:24px;font-weight:600}:host.nx-label--large{font-size:20px;line-height:28px;letter-spacing:.2px;font-weight:300}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:#fff}"]
                        }] }
            ];
            /** @nocollapse */
            NxLabelComponent.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"], args: [LABEL_DEFAULT_OPTIONS,] }] }
            ]; };
            NxLabelComponent.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxLabelModule = /** @class */ (function () {
                function NxLabelModule() {
                }
                return NxLabelModule;
            }());
            NxLabelModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]
                            ],
                            declarations: [
                                NxLabelComponent
                            ],
                            exports: [
                                NxLabelComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-base.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-button.js": 
        /*!****************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-button.js ***!
          \****************************************************************************/
        /*! exports provided: NxButtonModule, NxButtonComponent, NxIconButtonComponent, ɵa, ɵb */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxButtonModule", function () { return NxButtonModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxButtonComponent", function () { return NxButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxIconButtonComponent", function () { return NxIconButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return NX_BUTTON_HOST_BINDINGS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return NxButtonBase; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_SIZE = 'medium';
            /** @type {?} */
            var DEFAULT_TYPE = 'primary';
            /** @type {?} */
            var NX_BUTTON_HOST_BINDINGS = {
                '[class.nx-button--primary]': 'type === "primary"',
                '[class.nx-button--secondary]': 'type === "secondary"',
                '[class.nx-button--tertiary]': 'type === "tertiary"',
                '[class.nx-button--cta]': 'type === "cta"',
                '[class.nx-button--emphasis]': 'type === "emphasis"',
                '[class.nx-button--large]': 'size === "large"',
                '[class.nx-button--medium]': 'size === "medium"',
                '[class.nx-button--small-medium]': 'size === "small-medium"',
                '[class.nx-button--small]': 'size === "small"',
                '[class.nx-button--block]': 'block',
                '[class.nx-button--negative]': 'negative',
            };
            /**
             * \@docs-private
             */
            var NxButtonBase = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 */
                function NxButtonBase(_changeDetectorRef, _elementRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    /**
                     * \@docs-private
                     */
                    this.type = DEFAULT_TYPE;
                    /**
                     * \@docs-private
                     */
                    this.size = DEFAULT_SIZE;
                    /**
                     * \@docs-private
                     */
                    this.negative = false;
                    /**
                     * \@docs-private
                     */
                    this.block = false;
                }
                Object.defineProperty(NxButtonBase.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        this._classNames = value;
                        var _b = __read(this._classNames.match(/primary|secondary|tertiary|cta|emphasis/) || [DEFAULT_TYPE], 1), _c = _b[0], type = _c === void 0 ? null : _c;
                        this.type = ( /** @type {?} */(type));
                        var _d = __read(this._classNames.match(/small-medium|small|medium|large/) || [DEFAULT_SIZE], 1), _e = _d[0], size = _e === void 0 ? null : _e;
                        this.size = ( /** @type {?} */(size));
                        this.negative = /negative/.test(this._classNames);
                        this.block = /block/.test(this._classNames);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxButtonBase.prototype, "elementRef", {
                    /**
                     * \@docs-private
                     * getter used for the modal component as a quickfix
                     * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
                     * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
                     * way to reach the elementRef of the component until the modal gets refactored.
                     * @return {?}
                     */
                    get: function () {
                        return this._elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxButtonBase;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxButtonComponent = /** @class */ (function (_super) {
                __extends(NxButtonComponent, _super);
                /**
                 * @param {?} changeDetectorRef
                 * @param {?} elementRef
                 */
                function NxButtonComponent(changeDetectorRef, elementRef) {
                    return _super.call(this, changeDetectorRef, elementRef) || this;
                }
                return NxButtonComponent;
            }(NxButtonBase));
            NxButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                            template: "<span class=\"nx-button__content-wrapper\">\n  <ng-content></ng-content>\n</span>\n",
                            // tslint:disable-next-line:component-selector
                            selector: 'button[nxButton]',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            host: NX_BUTTON_HOST_BINDINGS,
                            inputs: ['classNames:nxButton'],
                            styles: [":host{border:2px solid transparent;border-radius:4px;cursor:pointer;font-size:16px;font-weight:600;letter-spacing:1px;line-height:24px;margin:0 0 24px;padding:10px 30px;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s,box-shadow .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:auto;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;min-height:48px}:host:disabled{cursor:not-allowed}:host:focus{outline:transparent solid 2px}:host::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]).nx-button--negative:focus,:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-button--primary){color:#fff;background-color:#007ab3}:host(.nx-button--primary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--primary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--primary):disabled{background-color:rgba(0,122,179,.4);border-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--primary.nx-button--negative){background-color:#fff;border-color:#fff;color:#006192}:host(.nx-button--primary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--primary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--primary.nx-button--negative):disabled{background-color:rgba(255,255,255,.4);border-color:transparent;color:rgba(65,65,65,.3)}:host(.nx-button--secondary){background-color:transparent;border-color:#007ab3;color:#006192}:host(.nx-button--secondary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--secondary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--secondary):disabled{background-color:transparent;border-color:rgba(0,122,179,.4);color:rgba(0,97,146,.4)}:host(.nx-button--secondary.nx-button--negative){color:#fff;border-color:#fff}:host(.nx-button--secondary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--secondary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--secondary.nx-button--negative):disabled{background-color:transparent;border-color:rgba(255,255,255,.4);color:rgba(255,255,255,.4)}:host(.nx-button--tertiary){background-color:transparent;color:#006192}:host(.nx-button--tertiary):hover{background-color:#ececec}:host(.nx-button--tertiary):active{background-color:#d9d9d9;box-shadow:none}:host(.nx-button--tertiary):disabled{background-color:transparent;color:rgba(0,97,146,.4)}:host(.nx-button--tertiary.nx-button--negative){color:#fff}:host(.nx-button--tertiary.nx-button--negative):hover{background-color:#d9d9d9;color:#006192}:host(.nx-button--tertiary.nx-button--negative):active{background-color:#c2c2c2;color:#006192}:host(.nx-button--tertiary.nx-button--negative):disabled{background-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--large){font-size:20px;min-height:72px;padding:22px 46px;line-height:24px}@media (max-width:703px){:host{display:block;width:100%}:host(.nx-button--large){padding:22px 30px}}:host(.nx-button--small-medium){display:inline-block;font-size:16px;padding:6px 22px;text-transform:none;line-height:24px;min-height:40px;width:auto}:host(.nx-button--small){display:inline-block;font-size:14px;padding:6px 14px;text-transform:none;line-height:16px;min-height:32px;width:auto}:host(.nx-button--cta){background-color:#3da556;color:#fff}:host(.nx-button--cta):hover{background-color:#348357}:host(.nx-button--cta):active{background-color:#276442}:host(.nx-button--cta):disabled{background-color:rgba(61,165,86,.4)}:host(.nx-button--emphasis){background-color:#f86200;color:#fff}:host(.nx-button--emphasis):hover{background-color:#e15200}:host(.nx-button--emphasis):active{background-color:#c15500}:host(.nx-button--emphasis):disabled{background-color:rgba(248,98,0,.4)}@media (min-width:704px){:host(.nx-button--block){display:block;width:100%}}:host .nx-button__content-wrapper{display:flex;align-items:center;justify-content:center}:host([nxiconbutton]){padding:0;font-size:24px;flex:0 0 auto}:host([nxiconbutton]).nx-button--small{width:32px;font-size:16px}:host([nxiconbutton]).nx-button--small-medium{width:40px}:host([nxiconbutton]).nx-button--medium{width:48px}:host([nxiconbutton]).nx-button--large{width:72px}"]
                        }] }
            ];
            /** @nocollapse */
            NxButtonComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxIconButtonComponent = /** @class */ (function (_super) {
                __extends(NxIconButtonComponent, _super);
                /**
                 * @param {?} changeDetectorRef
                 * @param {?} elementRef
                 */
                function NxIconButtonComponent(changeDetectorRef, elementRef) {
                    return _super.call(this, changeDetectorRef, elementRef) || this;
                }
                return NxIconButtonComponent;
            }(NxButtonBase));
            NxIconButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: 'button[nxIconButton]',
                            template: "<span class=\"nx-button__content-wrapper\">\n  <ng-content></ng-content>\n</span>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            host: NX_BUTTON_HOST_BINDINGS,
                            inputs: ['classNames:nxIconButton'],
                            styles: [":host{border:2px solid transparent;border-radius:4px;cursor:pointer;font-size:16px;font-weight:600;letter-spacing:1px;line-height:24px;margin:0 0 24px;padding:10px 30px;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s,box-shadow .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:auto;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;min-height:48px}:host:disabled{cursor:not-allowed}:host:focus{outline:transparent solid 2px}:host::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]).nx-button--negative:focus,:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-button--primary){color:#fff;background-color:#007ab3}:host(.nx-button--primary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--primary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--primary):disabled{background-color:rgba(0,122,179,.4);border-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--primary.nx-button--negative){background-color:#fff;border-color:#fff;color:#006192}:host(.nx-button--primary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--primary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--primary.nx-button--negative):disabled{background-color:rgba(255,255,255,.4);border-color:transparent;color:rgba(65,65,65,.3)}:host(.nx-button--secondary){background-color:transparent;border-color:#007ab3;color:#006192}:host(.nx-button--secondary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--secondary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--secondary):disabled{background-color:transparent;border-color:rgba(0,122,179,.4);color:rgba(0,97,146,.4)}:host(.nx-button--secondary.nx-button--negative){color:#fff;border-color:#fff}:host(.nx-button--secondary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--secondary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--secondary.nx-button--negative):disabled{background-color:transparent;border-color:rgba(255,255,255,.4);color:rgba(255,255,255,.4)}:host(.nx-button--tertiary){background-color:transparent;color:#006192}:host(.nx-button--tertiary):hover{background-color:#ececec}:host(.nx-button--tertiary):active{background-color:#d9d9d9;box-shadow:none}:host(.nx-button--tertiary):disabled{background-color:transparent;color:rgba(0,97,146,.4)}:host(.nx-button--tertiary.nx-button--negative){color:#fff}:host(.nx-button--tertiary.nx-button--negative):hover{background-color:#d9d9d9;color:#006192}:host(.nx-button--tertiary.nx-button--negative):active{background-color:#c2c2c2;color:#006192}:host(.nx-button--tertiary.nx-button--negative):disabled{background-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--large){font-size:20px;min-height:72px;padding:22px 46px;line-height:24px}@media (max-width:703px){:host{display:block;width:100%}:host(.nx-button--large){padding:22px 30px}}:host(.nx-button--small-medium){display:inline-block;font-size:16px;padding:6px 22px;text-transform:none;line-height:24px;min-height:40px;width:auto}:host(.nx-button--small){display:inline-block;font-size:14px;padding:6px 14px;text-transform:none;line-height:16px;min-height:32px;width:auto}:host(.nx-button--cta){background-color:#3da556;color:#fff}:host(.nx-button--cta):hover{background-color:#348357}:host(.nx-button--cta):active{background-color:#276442}:host(.nx-button--cta):disabled{background-color:rgba(61,165,86,.4)}:host(.nx-button--emphasis){background-color:#f86200;color:#fff}:host(.nx-button--emphasis):hover{background-color:#e15200}:host(.nx-button--emphasis):active{background-color:#c15500}:host(.nx-button--emphasis):disabled{background-color:rgba(248,98,0,.4)}@media (min-width:704px){:host(.nx-button--block){display:block;width:100%}}:host .nx-button__content-wrapper{display:flex;align-items:center;justify-content:center}:host([nxiconbutton]){padding:0;font-size:24px;flex:0 0 auto}:host([nxiconbutton]).nx-button--small{width:32px;font-size:16px}:host([nxiconbutton]).nx-button--small-medium{width:40px}:host([nxiconbutton]).nx-button--medium{width:48px}:host([nxiconbutton]).nx-button--large{width:72px}"]
                        }] }
            ];
            /** @nocollapse */
            NxIconButtonComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxButtonModule = /** @class */ (function () {
                function NxButtonModule() {
                }
                return NxButtonModule;
            }());
            NxButtonModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            declarations: [NxButtonComponent, NxIconButtonComponent],
                            exports: [NxButtonComponent, NxIconButtonComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-button.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-checkbox.js": 
        /*!******************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-checkbox.js ***!
          \******************************************************************************/
        /*! exports provided: NxCheckboxModule, NxCheckboxChangeEvent, NxCheckboxGroupComponent, NxCheckboxComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxModule", function () { return NxCheckboxModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxChangeEvent", function () { return NxCheckboxChangeEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxGroupComponent", function () { return NxCheckboxGroupComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxComponent", function () { return NxCheckboxComponent; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @allianz/ngx-ndbx/base */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-base.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId = 0;
            var NxCheckboxChangeEvent = /** @class */ (function () {
                /**
                 * @param {?} checked
                 * @param {?} value
                 * @param {?} checkbox
                 */
                function NxCheckboxChangeEvent(checked, value, checkbox) {
                    this.checked = checked;
                    this.value = value;
                    this.checkbox = checkbox;
                }
                return NxCheckboxChangeEvent;
            }());
            var NxCheckboxGroupComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} ngControl
                 */
                function NxCheckboxGroupComponent(_changeDetectorRef, ngControl) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this.ngControl = ngControl;
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                    this._id = "nx-checkbox-group-" + nextId++;
                    this._disabled = false;
                    this._negative = false;
                    this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    if (this.ngControl) {
                        // Note: we provide the value accessor through here, instead of
                        // the `providers` to avoid running into a circular import.
                        this.ngControl.valueAccessor = this;
                    }
                }
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Sets the Id of the checkbox group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._id !== value) {
                            this._id = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * Sets the name of the checkboxes inside the nx-checkbox-group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._name = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Disables all checkboxes inside the nx-checkbox-group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (this._label) {
                            this._label.disabled = this._disabled;
                        }
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Set the negative styles for all the checkboxes inside the nx-checkbox-group
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "labelSize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._labelSize;
                    },
                    /**
                     * Sets the label size of the checkboxes inside the group
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._labelSize = value;
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "required", {
                    /**
                     * Whether the nx-checkbox-group are required.
                     * @return {?}
                     */
                    get: function () {
                        return this._required;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    if (this.ngControl) {
                        this._value = this._checkboxes.filter(( /**
                         * @param {?} checkbox
                         * @return {?}
                         */function (/**
                         * @param {?} checkbox
                         * @return {?}
                         */ checkbox) { return checkbox.checked; })).map(( /**
                         * @param {?} cb
                         * @return {?}
                         */function (/**
                         * @param {?} cb
                         * @return {?}
                         */ cb) { return cb.value; }));
                        // Defer setting the value in order to avoid the "Expression
                        // has changed after it was checked" errors from Angular.
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this._onChange(_this._value);
                        }));
                    }
                    this._updateSelectedCheckboxFromValue();
                    this._checkboxes.changes.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._value = _this._checkboxes.filter(( /**
                         * @param {?} checkbox
                         * @return {?}
                         */function (/**
                         * @param {?} checkbox
                         * @return {?}
                         */ checkbox) { return checkbox.checked; })).map(( /**
                         * @param {?} cb
                         * @return {?}
                         */function (/**
                         * @param {?} cb
                         * @return {?}
                         */ cb) { return cb.value; }));
                        if (_this.ngControl) {
                            _this.ngControl.control.setValue(_this._value);
                        }
                        _this._updateSelectedCheckboxFromValue();
                    }));
                };
                /**
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.writeValue = function (value) {
                    if (this._value) {
                        this._value = value;
                    }
                    this._updateSelectedCheckboxFromValue();
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype._updateSelectedCheckboxFromValue = function () {
                    var _this = this;
                    if (this._checkboxes !== null) {
                        if (this._value) {
                            this._checkboxes.map(( /**
                             * @param {?} checkbox
                             * @return {?}
                             */function (/**
                             * @param {?} checkbox
                             * @return {?}
                             */ checkbox) {
                                if (_this._value.indexOf(checkbox.value) !== -1) {
                                    checkbox.checked = true;
                                }
                            }));
                        }
                    }
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.change = function (value) {
                    value = this._checkboxes.filter(( /**
                     * @param {?} checkbox
                     * @return {?}
                     */function (/**
                     * @param {?} checkbox
                     * @return {?}
                     */ checkbox) { return checkbox.checked; })).map(( /**
                     * @param {?} cb
                     * @return {?}
                     */function (/**
                     * @param {?} cb
                     * @return {?}
                     */ cb) { return cb.value; }));
                    this._onChange(value);
                    if (this._onTouched) {
                        this._onTouched();
                    }
                    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));
                };
                return NxCheckboxGroupComponent;
            }());
            NxCheckboxGroupComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            selector: 'nx-checkbox-group',
                            template: "<div>\n  <div class=\"nx-checkbox-group__label\">\n    <ng-content select=\"nx-label\"></ng-content>\n  </div>\n  <div class=\"nx-checkbox-group__errors\">\n    <ng-content select=\"nx-error\"></ng-content>\n  </div>\n  <div class=\"nx-checkbox-group__controls\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-checkbox-group]': 'true',
                                '[class.nx-checkbox-group--negative]': 'negative',
                                '[attr.id]': 'id',
                                '[attr.required]': 'required',
                                '[attr.disabled]': 'disabled || null',
                                '[attr.aria-labelledby]': 'this._label?.id  || null',
                                '[attr.role]': '"group"',
                            },
                            styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}:host.nx-checkbox-group--negative ::ng-deep nx-error,:host.nx-checkbox-group--negative ::ng-deep nx-icon.nx-error__icon,:host.nx-checkbox-group--negative ::ng-deep nx-label{color:#fff}"]
                        }] }
            ];
            /** @nocollapse */
            NxCheckboxGroupComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Self"] }] }
            ]; };
            NxCheckboxGroupComponent.propDecorators = {
                _checkboxes: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return NxCheckboxComponent; })), { descendants: true },] }],
                _label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ContentChild"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_6__["NxLabelComponent"]; })), {},] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                labelSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
            };
            var NxCheckboxComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} checkboxGroup
                 */
                function NxCheckboxComponent(_changeDetectorRef, checkboxGroup) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this.checkboxGroup = checkboxGroup;
                    this._id = (nextId++).toString();
                    this._disabled = false;
                    this._negative = false;
                    this._labelSize = 'small';
                    this._checked = false;
                    this._name = null;
                    this._indeterminate = false;
                    /**
                     * An event emitted when the indeterminate value has changed
                     */
                    this.indeterminateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"](false);
                    /**
                     * An event emitted when the checked value has changed.
                     *
                     * Emits the boolean checked value of the changed checkbox.
                     */
                    this.checkedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"](false);
                    /**
                     * An event emitted when the checked value has changed.
                     *
                     * Emits a NxCheckboxChangeEvent.
                     */
                    this.checkboxChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                    this.onChangeCallback = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxCheckboxComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return "nx-checkbox-" + this._id;
                    },
                    /**
                     * Id of the checkbox.
                     *
                     * If not set, the checkbox gets an incremented value by default.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._id) {
                            this._id = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;
                    },
                    /**
                     * Name of the checkbox.
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        this._name = name;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;
                    },
                    /**
                     * Whether the checkbox is disabled.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (newValue !== this._disabled) {
                            this._disabled = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "labelSize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;
                    },
                    /**
                     * Sets the label size of the checkbox. Default value: small
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._labelSize = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;
                    },
                    /**
                     * Whether the checkbox has negative styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (newValue !== this._negative) {
                            this._negative = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "checked", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._checked;
                    },
                    /**
                     * Whether the checkbox is checked.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (newValue !== this._checked) {
                            if (this._indeterminate) {
                                this._setIndeterminate(false);
                            }
                            this._setChecked(newValue);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "indeterminate", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._indeterminate;
                    },
                    /**
                     * Whether the checkbox is indeterminated.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        if (this._indeterminate !== newValue) {
                            if (this._checked) {
                                this._setChecked(false);
                            }
                            this._setIndeterminate(newValue);
                        }
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "required", {
                    /**
                     * Whether the checkbox is required.
                     * @return {?}
                     */
                    get: function () {
                        return this._required;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "value", {
                    /**
                     * Sets the value of the checkbox. Default value is the checked status.
                     * @return {?}
                     */
                    get: function () {
                        return this._value ? this._value : this.checked.toString();
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._value = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._controlInvalid = function () {
                    return !!(this.checkboxGroup && this.checkboxGroup.ngControl && this.checkboxGroup.ngControl.invalid
                        && this.checkboxGroup.ngControl.touched);
                };
                /**
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.ngOnInit = function () {
                    var _this = this;
                    if (this.checkboxGroup) {
                        this.name = this.checkboxGroup.name;
                        // when relevant properties of the parent like name and disabled change
                        // we need to let change detection know that the template needs an update
                        this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._changeDetectorRef.markForCheck();
                        }));
                    }
                };
                /**
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.ngOnDestroy = function () {
                    if (this._parentChangeSubscription) {
                        this._parentChangeSubscription.unsubscribe();
                    }
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._setIndeterminate = function (value) {
                    this._indeterminate = value;
                    this.indeterminateChange.emit(this._indeterminate);
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._setChecked = function (value) {
                    this._checked = value;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Toggles the checked state of the checkbox.
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.toggle = function () {
                    this.checked = !this.checked;
                    this.onChangeCallback(this.checked);
                    if (this.checkboxGroup !== null) {
                        this.checkboxGroup.change(this);
                    }
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.writeValue = function (value) {
                    if (value === null) {
                        value = false;
                    }
                    if (value !== this.checked) {
                        this.checked = value;
                    }
                };
                /**
                 * @param {?} onChange
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.registerOnChange = function (onChange) {
                    this.onChangeCallback = onChange;
                };
                /**
                 * @param {?} onTouched
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.registerOnTouched = function (onTouched) {
                    this.onTouchedCallback = onTouched;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.touch = function () {
                    this.onTouchedCallback();
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._onInputClick = function (event) {
                    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
                    event.stopPropagation();
                    if (!this.disabled) {
                        this.toggle();
                        this.checkedChange.emit(this._checked);
                        this.checkboxChange.emit(this._createChangeEvent(this._checked));
                    }
                };
                /**
                 * \@docs-private
                 * @private
                 * @param {?} checkedValue
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._createChangeEvent = function (checkedValue) {
                    /** @type {?} */
                    var event = new NxCheckboxChangeEvent(checkedValue, this.value, this);
                    event.checked = checkedValue;
                    event.value = this.value;
                    event.checkbox = this;
                    return event;
                };
                return NxCheckboxComponent;
            }());
            NxCheckboxComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            selector: 'nx-checkbox',
                            template: "<input\n  type=\"checkbox\"\n  [id]=\"id\"\n  [name]=\"name\"\n  [checked]=\"checked\"\n  [indeterminate]=\"indeterminate\" [disabled]=\"disabled\"\n  (blur)=\"touch()\"\n  [attr.aria-labelledby]=\"id + '-label'\"\n  (click)=\"_onInputClick($event)\"\n  class=\"nx-checkbox__input\"\n  [value]=\"value\"\n>\n\n<label [id]=\"id + '-label'\" [attr.for]=\"id\" class=\"nx-checkbox__label\">\n    <span class=\"nx-checkbox__control\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <div *ngIf=\"indeterminate\" class=\"nx-checkbox__indeterminate-indicator\"></div>\n    </span>\n    <div class=\"nx-checkbox__label-text\">\n        <ng-content></ng-content>\n    </div>\n</label>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-checkbox]': 'true',
                                '[class.disabled]': 'disabled',
                                '[class.nx-checkbox--label-large]': 'labelSize === "large"',
                                '[class.nx-checkbox--negative]': 'negative',
                                '[attr.required]': 'required',
                                '[class.has-error]': '_controlInvalid() || null',
                                '[attr.aria-invalid]': '_controlInvalid() || null',
                            },
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxCheckboxComponent; })),
                                    multi: true
                                }
                            ],
                            styles: [":host{display:block;position:relative;margin-bottom:16px}:host.has-error .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control,:host.ng-invalid .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:#dc3149;border-color:#dc3149}:host.has-error .nx-checkbox__control,:host.ng-invalid .nx-checkbox__control{border-color:#dc3149}:host.has-error .nx-checkbox__indeterminate-indicator,:host.ng-invalid .nx-checkbox__indeterminate-indicator{background-color:#dc3149}.nx-checkbox__input{opacity:0;position:absolute}.nx-checkbox__label{font-size:16px;line-height:24px;cursor:pointer;display:flex}:host(.nx-checkbox--label-large) .nx-checkbox__label{font-size:20px;line-height:28px;letter-spacing:.2px}.nx-checkbox__label-text{padding:0;margin-left:12px}.nx-checkbox__control{background-color:#fff;border:2px solid #767676;border-radius:4px;color:#fff;font-size:20px;height:24px;width:24px;min-width:24px;display:flex;justify-content:center;align-items:center;z-index:0;cursor:pointer}.nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{border-radius:4px}.nx-checkbox__indeterminate-indicator{background-color:#007ab3;height:2px;width:10px}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:#007ab3;border-color:#007ab3}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:#ececec;border-color:#c2c2c2;cursor:not-allowed}.nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:#c2c2c2}.nx-checkbox__input:disabled+.nx-checkbox__label{cursor:not-allowed;color:#c2c2c2}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#c2c2c2}:host(.nx-checkbox--negative) .nx-checkbox__control{border-color:#fff;background-color:transparent}:host(.nx-checkbox--negative) .nx-checkbox__label{color:#fff}:host(.nx-checkbox--negative) .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{color:#000;background-color:#fff;border-color:#fff}:host(.nx-checkbox--negative) .nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{color:rgba(255,255,255,.4);border-color:transparent;background-color:rgba(194,194,194,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label{color:rgba(255,255,255,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:rgba(153,153,153,.4);border-color:rgba(217,217,217,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:rgba(217,217,217,.4)}@media screen and (-ms-high-contrast:active){.nx-checkbox__input:focus+.nx-checkbox__label{color:#fff}.nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control::after{background-color:#fff}.nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{border-color:#fff}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{border-color:#ff0;color:#ff0}.nx-checkbox__input:focus:checked+.nx-checkbox__label .nx-checkbox__control{background-color:none;border-color:#fff;color:#fff}.nx-checkbox__label{color:#ff0}.nx-checkbox__input:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#ff0}.nx-checkbox__input:indeterminate:focus+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#fff}}:host:not(.nx-checkbox--negative):not(.ng-invalid):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:#075994}:host:not(.nx-checkbox--negative):not(.ng-invalid):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#075994}:host:not(.nx-checkbox--negative):not(.ng-invalid):not(.has-error):hover .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:#075994}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:#003781}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#003781}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:#003781}:host-context([data-whatinput=keyboard]) .nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxCheckboxComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
                { type: NxCheckboxGroupComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"] }] }
            ]; };
            NxCheckboxComponent.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                labelSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                indeterminate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                indeterminateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
                checkedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
                checkboxChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxCheckboxModule = /** @class */ (function () {
                function NxCheckboxModule() {
                }
                return NxCheckboxModule;
            }());
            NxCheckboxModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            declarations: [
                                NxCheckboxComponent,
                                NxCheckboxGroupComponent,
                            ],
                            exports: [
                                NxCheckboxComponent,
                                NxCheckboxGroupComponent,
                            ],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_5__["NxIconModule"],
                                _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_6__["NxLabelModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-checkbox.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-config.js": 
        /*!****************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-config.js ***!
          \****************************************************************************/
        /*! exports provided: NxExpertModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxExpertModule", function () { return NxExpertModule; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @allianz/ngx-ndbx/formfield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js");
            /* harmony import */ var _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @allianz/ngx-ndbx/base */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-base.js");
            /* harmony import */ var _allianz_ngx_ndbx_datefield__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @allianz/ngx-ndbx/datefield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-datefield.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // expert presets
            /** @type {?} */
            var formfieldExpertOptions = {
                appearance: 'outline',
                nxFloatLabel: 'always'
            };
            /** @type {?} */
            var errorExpertOptions = { appearance: 'text' };
            /** @type {?} */
            var labelExpertOptions = { size: 'small' };
            /** @type {?} */
            var datepickerExpertOptions = { toggleIconTabindex: -1 };
            var ɵ0 = formfieldExpertOptions, ɵ1 = labelExpertOptions, ɵ2 = datepickerExpertOptions, ɵ3 = errorExpertOptions;
            // should not be a singleton since different tokens can be used in seperate modules
            var NxExpertModule = /** @class */ (function () {
                function NxExpertModule() {
                }
                return NxExpertModule;
            }());
            NxExpertModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            providers: [
                                { provide: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_1__["FORMFIELD_DEFAULT_OPTIONS"], useValue: ɵ0 },
                                { provide: _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_2__["LABEL_DEFAULT_OPTIONS"], useValue: ɵ1 },
                                { provide: _allianz_ngx_ndbx_datefield__WEBPACK_IMPORTED_MODULE_3__["DATEPICKER_DEFAULT_OPTIONS"], useValue: ɵ2 },
                                { provide: _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_2__["ERROR_DEFAULT_OPTIONS"], useValue: ɵ3 }
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-config.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-core.js": 
        /*!**************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-core.js ***!
          \**************************************************************************/
        /*! exports provided: BREAKPOINT_MOBILE, BREAKPOINT_TABLET, BREAKPOINT_DESKTOP, MappedStyles */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_MOBILE", function () { return BREAKPOINT_MOBILE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_TABLET", function () { return BREAKPOINT_TABLET; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_DESKTOP", function () { return BREAKPOINT_DESKTOP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MappedStyles", function () { return MappedStyles; });
            /* harmony import */ var _allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/utils */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var BREAKPOINT_MOBILE = '(max-width: 703px)';
            /** @type {?} */
            var BREAKPOINT_TABLET = '(min-width: 704px) and (max-width: 992px)';
            /** @type {?} */
            var BREAKPOINT_DESKTOP = '(min-width: 993px)';
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MappedStyles = /** @class */ (function () {
                /**
                 * @param {?} mapping
                 * @param {?=} baseClasses
                 * @param {?=} _elementRef
                 * @param {?=} _renderer
                 */
                function MappedStyles(mapping, baseClasses, _elementRef, _renderer) {
                    if (baseClasses === void 0) { baseClasses = []; }
                    this.mapping = mapping;
                    this.baseClasses = baseClasses;
                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this.classNames = '';
                }
                Object.defineProperty(MappedStyles.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["removeClasses"])(this._renderer, this._elementRef, this._classNamesSanitized);
                        this._classNamesSanitized = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])(value, this.baseClasses, this.mapping);
                        this._classNames = value;
                        Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["appendClasses"])(this._renderer, this._elementRef, this._classNamesSanitized);
                    },
                    enumerable: true,
                    configurable: true
                });
                return MappedStyles;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-core.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-datefield.js": 
        /*!*******************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-datefield.js ***!
          \*******************************************************************************/
        /*! exports provided: NxDatefieldModule, NX_DATEFIELD_VALUE_ACCESSOR, NX_DATEFIELD_VALIDATORS, NxDatepickerInputEvent, NxDatefieldDirective, NX_DATE_LOCALE_PROVIDER, NativeDateModule, NxNativeDateModule, NX_DATE_LOCALE, NxDateAdapter, NX_DATE_FORMATS, NxNativeDateAdapter, NX_NATIVE_DATE_FORMATS, NxDatepickerIntl, NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY, NX_DATEPICKER_SCROLL_STRATEGY, NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER, DATEPICKER_DEFAULT_OPTIONS, NxDatepickerContentComponent, NxDatepickerComponent, ɵc, ɵe, ɵb, ɵa, ɵd, ɵg, ɵf */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDatefieldModule", function () { return NxDatefieldModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATEFIELD_VALUE_ACCESSOR", function () { return NX_DATEFIELD_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATEFIELD_VALIDATORS", function () { return NX_DATEFIELD_VALIDATORS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDatepickerInputEvent", function () { return NxDatepickerInputEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDatefieldDirective", function () { return NxDatefieldDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATE_LOCALE_PROVIDER", function () { return NX_DATE_LOCALE_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NativeDateModule", function () { return NativeDateModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNativeDateModule", function () { return NxNativeDateModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATE_LOCALE", function () { return NX_DATE_LOCALE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDateAdapter", function () { return NxDateAdapter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATE_FORMATS", function () { return NX_DATE_FORMATS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNativeDateAdapter", function () { return NxNativeDateAdapter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_NATIVE_DATE_FORMATS", function () { return NX_NATIVE_DATE_FORMATS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDatepickerIntl", function () { return NxDatepickerIntl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY", function () { return NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATEPICKER_SCROLL_STRATEGY", function () { return NX_DATEPICKER_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER", function () { return NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATEPICKER_DEFAULT_OPTIONS", function () { return DATEPICKER_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDatepickerContentComponent", function () { return NxDatepickerContentComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDatepickerComponent", function () { return NxDatepickerComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function () { return NxCalendarComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function () { return NxCalendarBodyComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return NxDatepickerToggleComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return NxDatepickerToggleIconComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function () { return NxMonthViewComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function () { return NxMultiYearViewComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function () { return NxYearViewComponent; });
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @allianz/ngx-ndbx/formfield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js");
            /* harmony import */ var _allianz_ngx_ndbx_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @allianz/ngx-ndbx/input */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-input.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /** @type {?} */
            var NX_NATIVE_DATE_FORMATS = {
                parse: {
                    dateInput: null,
                },
                display: {
                    dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
                    monthYearLabel: { year: 'numeric', month: 'short' },
                    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
                    monthYearA11yLabel: { year: 'numeric', month: 'long' },
                }
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @abstract
             * @template D
             */
            var NxDateAdapter = /** @class */ (function () {
                function NxDateAdapter() {
                    this.locale = 'de-DE';
                    this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
                }
                Object.defineProperty(NxDateAdapter.prototype, "localeChanges", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._localeChanges; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxDateAdapter.prototype.deserialize = function (value) {
                    if (value == null || this.isDateInstance(value) && this.isValid(value)) {
                        return value;
                    }
                    return this.invalid();
                };
                /**
                 * @param {?} first
                 * @param {?} second
                 * @return {?}
                 */
                NxDateAdapter.prototype.sameDate = function (first, second) {
                    if (first && second) {
                        /** @type {?} */
                        var firstValid = this.isValid(first);
                        /** @type {?} */
                        var secondValid = this.isValid(second);
                        if (firstValid && secondValid) {
                            return !this.compareDate(first, second);
                        }
                        return firstValid === secondValid;
                    }
                    return first === second;
                };
                /**
                 * @param {?} first
                 * @param {?} second
                 * @return {?}
                 */
                NxDateAdapter.prototype.compareDate = function (first, second) {
                    return this.getYear(first) - this.getYear(second) ||
                        this.getMonth(first) - this.getMonth(second) ||
                        this.getDate(first) - this.getDate(second);
                };
                /**
                 * @param {?} locale
                 * @return {?}
                 */
                NxDateAdapter.prototype.setLocale = function (locale) {
                    this.locale = locale;
                    this._localeChanges.next(this.locale);
                };
                /**
                 * @return {?}
                 */
                NxDateAdapter.prototype.getLocale = function () {
                    return this.locale;
                };
                /**
                 * @param {?} date
                 * @param {?=} min
                 * @param {?=} max
                 * @return {?}
                 */
                NxDateAdapter.prototype.clampDate = function (date, min, max) {
                    if (min && this.compareDate(date, min) < 0) {
                        return min;
                    }
                    if (max && this.compareDate(date, max) > 0) {
                        return max;
                    }
                    return date;
                };
                return NxDateAdapter;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * InjectionToken for datepicker that can be used to override default locale code.
             * @type {?}
             */
            var NX_DATE_LOCALE = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["InjectionToken"]('nx-date-locale');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO(mmalerba): Remove when we no longer support safari 9.
            /**
             * Whether the browser supports the Intl API.
             * @type {?}
             */
            var SUPPORTS_INTL_API = typeof Intl !== 'undefined';
            /**
             * The default month names to use if Intl API is not available.
             * @type {?}
             */
            var DEFAULT_MONTH_NAMES = {
                'long': [
                    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
                    'October', 'November', 'December'
                ],
                'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
            };
            var ɵ0 = /**
             * @param {?} i
             * @return {?}
             */ function (/**
             * @param {?} i
             * @return {?}
             */ i) { return String(i + 1); };
            /**
             * The default date names to use if Intl API is not available.
             * @type {?}
             */
            var DEFAULT_DATE_NAMES = range(31, (ɵ0));
            /**
             * The default day of the week names to use if Intl API is not available.
             * @type {?}
             */
            var DEFAULT_DAY_OF_WEEK_NAMES = {
                'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
            };
            /**
             * Matches strings that have the form of a valid RFC 3339 string
             * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
             * because the regex will match strings an with out of bounds month, date, etc.
             * @type {?}
             */
            var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
            /**
             * Creates an array and fills it with values.
             * @template T
             * @param {?} length
             * @param {?} valueFunction
             * @return {?}
             */
            function range(length, valueFunction) {
                /** @type {?} */
                var valuesArray = Array(length);
                for (var i = 0; i < length; i++) {
                    valuesArray[i] = valueFunction(i);
                }
                return valuesArray;
            }
            /**
             * \@docs-private
             * Adapts the native JS Date for use with cdk-based components that work with dates.
             */
            var NxNativeDateAdapter = /** @class */ (function (_super) {
                __extends(NxNativeDateAdapter, _super);
                /**
                 * @param {?} matDateLocale
                 * @param {?} platform
                 */
                function NxNativeDateAdapter(matDateLocale, platform) {
                    var _this = _super.call(this) || this;
                    /**
                     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
                     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
                     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
                     * will produce `'8/13/1800'`.
                     *
                     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
                     * getting the string representation of a Date object from it's utc representation. We're keeping
                     * it here for sometime, just for precaution, in case we decide to revert some of these changes
                     * though.
                     */
                    _this.useUtcForDisplay = true;
                    _super.prototype.setLocale.call(_this, matDateLocale);
                    // IE does its own time zone correction, so we disable this on IE.
                    _this.useUtcForDisplay = !platform.TRIDENT;
                    _this._clampDate = platform.TRIDENT || platform.EDGE;
                    return _this;
                }
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getYear = function (date) {
                    return date.getFullYear();
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getMonth = function (date) {
                    return date.getMonth();
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getDate = function (date) {
                    return date.getDate();
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getDayOfWeek = function (date) {
                    return date.getDay();
                };
                /**
                 * @param {?} style
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getMonthNames = function (style) {
                    var _this = this;
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });
                        return range(12, ( /**
                         * @param {?} i
                         * @return {?}
                         */function (/**
                         * @param {?} i
                         * @return {?}
                         */ i) { return _this._stripDirectionalityCharacters(_this._format(dtf_1, new Date(2017, i, 1))); }));
                    }
                    return DEFAULT_MONTH_NAMES[style];
                };
                /**
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getDateNames = function () {
                    var _this = this;
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf_2 = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
                        return range(31, ( /**
                         * @param {?} i
                         * @return {?}
                         */function (/**
                         * @param {?} i
                         * @return {?}
                         */ i) { return _this._stripDirectionalityCharacters(_this._format(dtf_2, new Date(2017, 0, i + 1))); }));
                    }
                    return DEFAULT_DATE_NAMES;
                };
                /**
                 * @param {?} style
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getDayOfWeekNames = function (style) {
                    var _this = this;
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf_3 = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });
                        return range(7, ( /**
                         * @param {?} i
                         * @return {?}
                         */function (/**
                         * @param {?} i
                         * @return {?}
                         */ i) { return _this._stripDirectionalityCharacters(_this._format(dtf_3, new Date(2017, 0, i + 1))); }));
                    }
                    return DEFAULT_DAY_OF_WEEK_NAMES[style];
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getYearName = function (date) {
                    if (SUPPORTS_INTL_API) {
                        /** @type {?} */
                        var dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
                        return this._stripDirectionalityCharacters(this._format(dtf, date));
                    }
                    return String(this.getYear(date));
                };
                /**
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getFirstDayOfWeek = function () {
                    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
                    return 0;
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.getNumDaysInMonth = function (date) {
                    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.clone = function (date) {
                    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));
                };
                /**
                 * @param {?} year
                 * @param {?} month
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.createDate = function (year, month, date) {
                    // Check for invalid month and date (except upper bound on date which we have to check after
                    // creating the Date).
                    if (month < 0 || month > 11) {
                        throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
                    }
                    if (date < 1) {
                        throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
                    }
                    /** @type {?} */
                    var result = this._createDateWithOverflow(year, month, date);
                    // Check that the date wasn't above the upper bound for the month, causing the month to overflow
                    if (result.getMonth() !== month) {
                        throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
                    }
                    return result;
                };
                /**
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.today = function () {
                    return new Date();
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.parse = function (value) {
                    // We have no way using the native JS Date to set the parse format or locale, so we ignore these
                    // parameters.
                    if (typeof value === 'number') {
                        return new Date(value);
                    }
                    return value ? new Date(Date.parse(value)) : null;
                };
                /**
                 * @param {?} date
                 * @param {?} displayFormat
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.format = function (date, displayFormat) {
                    if (!this.isValid(date)) {
                        throw Error('NxNativeDateAdapter: Cannot format invalid date.');
                    }
                    if (SUPPORTS_INTL_API) {
                        // On IE and Edge the i18n API will throw a hard error that can crash the entire app
                        // if we attempt to format a date whose year is less than 1 or greater than 9999.
                        if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                            date = this.clone(date);
                            date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
                        }
                        displayFormat = Object.assign({}, displayFormat, { timeZone: 'utc' });
                        /** @type {?} */
                        var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
                        return this._stripDirectionalityCharacters(this._format(dtf, date));
                    }
                    return this._stripDirectionalityCharacters(date.toDateString());
                };
                /**
                 * @param {?} date
                 * @param {?} years
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.addCalendarYears = function (date, years) {
                    return this.addCalendarMonths(date, years * 12);
                };
                /**
                 * @param {?} date
                 * @param {?} months
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.addCalendarMonths = function (date, months) {
                    /** @type {?} */
                    var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
                    // It's possible to wind up in the wrong month if the original month has more days than the new
                    // month. In this case we want to go to the last day of the desired month.
                    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
                    // guarantee this.
                    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {
                        newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
                    }
                    return newDate;
                };
                /**
                 * @param {?} date
                 * @param {?} days
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.addCalendarDays = function (date, days) {
                    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.toIso8601 = function (date) {
                    return [
                        date.getUTCFullYear(),
                        this._2digit(date.getUTCMonth() + 1),
                        this._2digit(date.getUTCDate())
                    ].join('-');
                };
                /**
                 * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
                 * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
                 * invalid date for all other values.
                 * @param {?} value
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.deserialize = function (value) {
                    if (typeof value === 'string') {
                        if (!value) {
                            return null;
                        }
                        // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
                        // string is the right format first.
                        if (ISO_8601_REGEX.test(value)) {
                            /** @type {?} */
                            var date = new Date(value);
                            if (this.isValid(date)) {
                                return date;
                            }
                        }
                    }
                    return _super.prototype.deserialize.call(this, value);
                };
                /**
                 * @param {?} obj
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.isDateInstance = function (obj) {
                    return obj instanceof Date;
                };
                /**
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.isValid = function (date) {
                    return !isNaN(date.getTime());
                };
                /**
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype.invalid = function () {
                    return new Date(NaN);
                };
                /**
                 * Creates a date but allows the month and date to overflow.
                 * @private
                 * @param {?} year
                 * @param {?} month
                 * @param {?} date
                 * @return {?}
                 */
                NxNativeDateAdapter.prototype._createDateWithOverflow = function (year, month, date) {
                    /** @type {?} */
                    var result = new Date(year, month, date);
                    // We need to correct for the fact that JS native Date treats years in range [0, 99] as
                    // abbreviations for 19xx.
                    if (year >= 0 && year < 100) {
                        result.setFullYear(this.getYear(result) - 1900);
                    }
                    return result;
                };
                /**
                 * Pads a number to make it two digits.
                 * @private
                 * @param {?} n The number to pad.
                 * @return {?} The padded number.
                 */
                NxNativeDateAdapter.prototype._2digit = function (n) {
                    return ('00' + n).slice(-2);
                };
                /**
                 * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
                 * other browsers do not. We remove them to make output consistent and because they interfere with
                 * date parsing.
                 * @private
                 * @param {?} str The string to strip direction characters from.
                 * @return {?} The stripped string.
                 */
                NxNativeDateAdapter.prototype._stripDirectionalityCharacters = function (str) {
                    return str.replace(/[\u200e\u200f]/g, '');
                };
                /**
                 * When converting Date object to string, javascript built-in functions may return wrong
                 * results because it applies its internal DST rules. The DST rules around the world change
                 * very frequently, and the current valid rule is not always valid in previous years though.
                 * We work around this problem building a new Date object which has its internal UTC
                 * representation with the local date and time.
                 * @private
                 * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
                 *    timeZone set to 'utc' to work fine.
                 * @param {?} date Date from which we want to get the string representation according to dtf
                 * @return {?} A Date object with its UTC representation based on the passed in date info
                 */
                NxNativeDateAdapter.prototype._format = function (dtf, date) {
                    /** @type {?} */
                    var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
                    return dtf.format(d);
                };
                return NxNativeDateAdapter;
            }(NxDateAdapter));
            NxNativeDateAdapter.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Injectable"] }
            ];
            /** @nocollapse */
            NxNativeDateAdapter.ctorParameters = function () { return [
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [NX_DATE_LOCALE,] }] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__["Platform"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var NX_DATE_FORMATS = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["InjectionToken"]('nx-date-formats');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var NX_DATE_LOCALE_PROVIDER = { provide: NX_DATE_LOCALE, useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_13__["LOCALE_ID"] };
            var NativeDateModule = /** @class */ (function () {
                function NativeDateModule() {
                }
                return NativeDateModule;
            }());
            NativeDateModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["NgModule"], args: [{
                            imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__["PlatformModule"]],
                            providers: [
                                { provide: NxDateAdapter, useClass: NxNativeDateAdapter },
                                NX_DATE_LOCALE_PROVIDER
                            ],
                        },] }
            ];
            var ɵ0$1 = NX_NATIVE_DATE_FORMATS;
            var NxNativeDateModule = /** @class */ (function () {
                function NxNativeDateModule() {
                }
                return NxNativeDateModule;
            }());
            NxNativeDateModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["NgModule"], args: [{
                            imports: [NativeDateModule],
                            providers: [{ provide: NX_DATE_FORMATS, useValue: ɵ0$1 }],
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} provider
             * @return {?}
             */
            function createMissingDateImplError(provider) {
                return Error("NxDatepicker: No provider found for " + provider + ". You must import one of the following " +
                    "modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a " +
                    "custom implementation.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Datepicker data that requires internationalization.
             */
            var NxDatepickerIntl = /** @class */ (function () {
                function NxDatepickerIntl() {
                    /**
                     * Stream that emits whenever the labels here are changed. Use this to notify
                     * components if the labels have changed after initialization.
                     */
                    this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
                    /** A label for the calendar popup (visible in UI). */
                    /**
                     * @deprecated Use `switchToMultiYearViewLabel` instead
                     */
                    this.calendarHeader = 'Choose a date';
                    /**
                     * A label for the calendar popup (used by screen readers).
                     */
                    this.calendarLabel = 'Calendar';
                    /**
                     * A label for the button used to open the calendar popup (used by screen readers).
                     */
                    this.openCalendarLabel = 'Open calendar';
                    /**
                     * A label for the previous month button (used by screen readers).
                     */
                    this.prevMonthLabel = 'Previous month';
                    /**
                     * A label for the next month button (used by screen readers).
                     */
                    this.nextMonthLabel = 'Next month';
                    /**
                     * A label for the previous year button (used by screen readers).
                     */
                    this.prevYearLabel = 'Previous year';
                    /**
                     * A label for the next year button (used by screen readers).
                     */
                    this.nextYearLabel = 'Next year';
                    /**
                     * A label for the previous multi-year button (used by screen readers).
                     */
                    this.prevMultiYearLabel = 'Previous 20 years';
                    /**
                     * A label for the next multi-year button (used by screen readers).
                     */
                    this.nextMultiYearLabel = 'Next 20 years';
                    /**
                     * A label for the 'switch to month view' button (used by screen readers).
                     */
                    this.switchToMonthViewLabel = 'Choose date';
                    /**
                     * A label for the 'switch to year view' button (used by screen readers).
                     */
                    this.switchToMultiYearViewLabel = 'Choose month and year';
                }
                return NxDatepickerIntl;
            }());
            NxDatepickerIntl.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Injectable"] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * \@docs-private
             * @param {?} provider
             * @return {?}
             */
            function createMissingDateImplError$1(provider) {
                return Error("NxDatepicker: No provider found for " + provider + ". You must import one of the following " +
                    "modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a " +
                    "custom implementation.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * An internal class that represents the data corresponding to a single calendar cell.
             * \@docs-private
             */
            var NxCalendarCell = /** @class */ (function () {
                /**
                 * @param {?} value
                 * @param {?} displayValue
                 * @param {?=} ariaLabel
                 * @param {?=} enabled
                 */
                function NxCalendarCell(value, displayValue, ariaLabel, enabled) {
                    this.value = value;
                    this.displayValue = displayValue;
                    this.ariaLabel = ariaLabel;
                    this.enabled = enabled;
                }
                return NxCalendarCell;
            }());
            /**
             * An internal component used to display calendar data in a table.
             * \@docs-private
             */
            var NxCalendarBodyComponent = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 */
                function NxCalendarBodyComponent(_elementRef, _ngZone) {
                    this._elementRef = _elementRef;
                    this._ngZone = _ngZone;
                    /**
                     * The number of columns in the table.
                     */
                    this.numCols = 7;
                    /**
                     * Whether to allow selection of disabled cells.
                     */
                    this.allowDisabledSelection = false;
                    /**
                     * The cell number of the active cell in the table.
                     */
                    this.activeCell = 0;
                    /**
                     * The items to display in the first row in the offset space.
                     */
                    this.previousItems = [];
                    /**
                     * The items to display in the last row in the offset space.
                     */
                    this.followingItems = [[]];
                    /**
                     * Emits when a new value is selected.
                     */
                    this.selectedValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                }
                /**
                 * @param {?} cell
                 * @return {?}
                 */
                NxCalendarBodyComponent.prototype._cellClicked = function (cell) {
                    if (!this.allowDisabledSelection && !cell.enabled) {
                        return;
                    }
                    this.selectedValueChange.emit(cell.value);
                };
                Object.defineProperty(NxCalendarBodyComponent.prototype, "_firstRowOffset", {
                    /**
                     * The number of blank cells to put at the beginning for the first row.
                     * @return {?}
                     */
                    get: function () {
                        return this.rows && this.rows.length && this.rows[0].length ?
                            this.numCols - this.rows[0].length : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarBodyComponent.prototype, "_lastRowOffset", {
                    /**
                     * The number of blank cells to put at the end of the last filled row.
                     * @return {?}
                     */
                    get: function () {
                        return this.rows && this.rows.length && this.rows[this.rows.length - 1].length ?
                            this.numCols - this.rows[this.rows.length - 1].length : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarBodyComponent.prototype, "_lastRowIndex", {
                    /**
                     * The index of the last row.
                     * @return {?}
                     */
                    get: function () {
                        return this.rows && this.rows.length ?
                            this.rows.length - 1 : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarBodyComponent.prototype, "_followingRows", {
                    /**
                     * The following full rows to display and fill up the calendar.
                     * @return {?}
                     */
                    get: function () {
                        if (this.followingItems && this.followingItems.length) {
                            // if first row is not a full row => display them in offset space
                            if (this.followingItems[0].length < this.numCols) {
                                return this.followingItems.slice(1, this.followingItems.length);
                            }
                            return this.followingItems;
                        }
                        return [];
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} rowIndex
                 * @param {?} colIndex
                 * @return {?}
                 */
                NxCalendarBodyComponent.prototype._isActiveCell = function (rowIndex, colIndex) {
                    /** @type {?} */
                    var cellNumber = rowIndex * this.numCols + colIndex;
                    // Account for the fact that the first row may not have as many cells.
                    if (rowIndex) {
                        cellNumber -= this._firstRowOffset;
                    }
                    return cellNumber === this.activeCell;
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @return {?}
                 */
                NxCalendarBodyComponent.prototype._focusActiveCell = function () {
                    var _this = this;
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();
                        }));
                    }));
                };
                return NxCalendarBodyComponent;
            }());
            NxCalendarBodyComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: '[nx-calendar-body]',
                            template: "<!-- Create the first and last row separately so we can include special spacer cells. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n  <!--\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\n    percentage of the width (a variant of the trick described here:\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n  -->\n  <ng-container *ngIf=\"rowIndex === 0\">\n    <td *ngFor=\"let item of previousItems\"\n        aria-hidden=\"true\"\n        class=\"nx-calendar-adjacent-cell\">\n      <div aria-hidden=\"true\"\n           class=\"nx-calendar-adjacent-cell-content\">\n        {{ item.displayValue }}\n      </div>\n    </td>\n  </ng-container>\n\n  <td *ngFor=\"let item of row; let colIndex = index\"\n      role=\"gridcell\"\n      class=\"nx-calendar-body-cell\"\n      [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n      [class.nx-calendar-body-disabled]=\"!item.enabled\"\n      [class.nx-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\n      [attr.aria-label]=\"item.ariaLabel\"\n      [attr.aria-disabled]=\"!item.enabled || null\"\n      (click)=\"_cellClicked(item)\"\n      [style.width.%]=\"100 / numCols\">\n    <div class=\"nx-calendar-body-cell-content\"\n         [class.nx-calendar-body-selected]=\"selectedValue === item.value\"\n         [class.nx-calendar-body-today]=\"todayValue === item.value\">\n      {{item.displayValue}}\n    </div>\n  </td>\n\n  <ng-container *ngIf=\"rowIndex === _lastRowIndex && _lastRowOffset\">\n    <td *ngFor=\"let item of followingItems[0]\"\n        aria-hidden=\"true\"\n        class=\"nx-calendar-adjacent-cell\">\n      <div aria-hidden=\"true\"\n           class=\"nx-calendar-adjacent-cell-content\">\n        {{ item.displayValue }}\n      </div>\n    </td>\n  </ng-container>\n\n</tr>\n\n<!-- \n  if there are still elements remaining in 'following-elements', then create some extra rows\n  to fill up the space\n-->\n<tr *ngFor=\"let row of _followingRows\"\n    aria-hidden=\"true\">\n  <td *ngFor=\"let item of row\"\n      class=\"nx-calendar-adjacent-cell\">\n    <div class=\"nx-calendar-adjacent-cell-content\">\n      {{ item.displayValue }}\n    </div>\n  </td>\n</tr>\n",
                            host: {
                                'class': 'nx-calendar-body',
                                'role': 'grid',
                                'attr.aria-readonly': 'true'
                            },
                            exportAs: 'nxCalendarBody',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-calendar-adjacent-cell,.nx-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;vertical-align:text-bottom}.nx-calendar-body-cell{cursor:pointer}.nx-calendar-body-disabled{cursor:default}.nx-calendar-body-cell-content{display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:40px;height:40px;margin:0 auto;font-size:16px;font-weight:600;color:#414141;border-radius:50%;line-height:1;box-shadow:0 0 0 6px transparent}.nx-calendar-body-cell-content.nx-calendar-body-selected{background-color:#007ab3;color:#fff}.nx-calendar-body-disabled>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected){color:#c2c2c2;font-weight:400}.nx-calendar-body-active:not(.nx-calendar-body-disabled)>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected),:not(.nx-calendar-body-disabled):hover>.nx-calendar-body-cell-content:not(.nx-calendar-body-selected){background-color:#ececec;color:#414141}:host-context([data-whatinput=keyboard]) .nx-calendar-body-cell:focus .nx-calendar-body-cell-content{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host-context([data-whatinput=keyboard]) .nx-calendar-body-cell:focus.nx-calendar-body-disabled .nx-calendar-body-cell-content{color:#c2c2c2}:host-context([data-whatinput=keyboard]) .nx-calendar-body-cell:focus .nx-calendar-body-cell-content:not(.nx-calendar-body-selected){background-color:#fff}.nx-calendar-adjacent-cell-content{display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:40px;height:40px;margin:0 auto;font-size:16px;font-weight:400;color:#c2c2c2;border-radius:50%;line-height:1}"]
                        }] }
            ];
            /** @nocollapse */
            NxCalendarBodyComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["NgZone"] }
            ]; };
            NxCalendarBodyComponent.propDecorators = {
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                rows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                todayValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selectedValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                numCols: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                allowDisabledSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                activeCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                previousItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                followingItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selectedValueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @type {?}
             */
            var DAYS_PER_WEEK = 7;
            /** @type {?} */
            var TOTAL_DAYS_TO_DISPLAY = 6 * DAYS_PER_WEEK;
            /**
             * An internal component used to display a single month in the datepicker.
             * \@docs-private
             * @template D
             */
            var NxMonthViewComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _dateFormats
                 * @param {?} _dateAdapter
                 * @param {?=} _dir
                 */
                function NxMonthViewComponent(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dateFormats = _dateFormats;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    /**
                     * Emits when a new date is selected.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when any date is selected.
                     */
                    this._userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when any date is activated.
                     */
                    this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Number of days that should be displayed in one row.
                     */
                    this._numCols = 7;
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError$1('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError$1('MAT_DATE_FORMATS');
                    }
                    /** @type {?} */
                    var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
                    /** @type {?} */
                    var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
                    /** @type {?} */
                    var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
                    // Rotate the labels for days of the week based on the configured first day of the week.
                    /** @type {?} */
                    var weekdays = longWeekdays.map(( /**
                     * @param {?} long
                     * @param {?} i
                     * @return {?}
                     */function (long, i) {
                        return { long: long, narrow: narrowWeekdays[i] };
                    }));
                    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
                    this._activeDate = this._dateAdapter.today();
                }
                Object.defineProperty(NxMonthViewComponent.prototype, "activeDate", {
                    /**
                     * The date to display in this month view (everything other than the month and year is ignored).
                     * @return {?}
                     */
                    get: function () { return this._activeDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var oldActiveDate = this._activeDate;
                        /** @type {?} */
                        var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
                            this._init();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMonthViewComponent.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._selectedDate = this._getDateInCurrentMonth(this._selected);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMonthViewComponent.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMonthViewComponent.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxMonthViewComponent.prototype.ngAfterContentInit = function () {
                    this._init();
                    this._focusActiveCell();
                };
                /**
                 * Handles when a new date is selected.
                 * @param {?} date
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._dateSelected = function (date) {
                    if (this._selectedDate !== date) {
                        /** @type {?} */
                        var selectedYear = this._dateAdapter.getYear(this.activeDate);
                        /** @type {?} */
                        var selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                        /** @type {?} */
                        var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
                        this.selectedChange.emit(selectedDate);
                    }
                    this._userSelection.emit();
                };
                /**
                 * Handles keydown events on the calendar body when calendar is in month view.
                 * @param {?} event
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._handleCalendarBodyKeydown = function (event) {
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    /** @type {?} */
                    var oldActiveDate = this._activeDate;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -this._numCols);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._numCols);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]:
                            this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -
                                this._dateAdapter.getDate(this._activeDate)));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"]:
                            this.activeDate = event.altKey ?
                                this._dateAdapter.addCalendarYears(this._activeDate, -1) :
                                this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]:
                            this.activeDate = event.altKey ?
                                this._dateAdapter.addCalendarYears(this._activeDate, 1) :
                                this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
                            if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                                this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                                this._userSelection.emit();
                                // Prevent unexpected default actions such as form submission.
                                event.preventDefault();
                            }
                            return;
                        default:
                            // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                            return;
                    }
                    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                        this.activeDateChange.emit(this.activeDate);
                    }
                    this._focusActiveCell();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                };
                /**
                 * Initializes this month view.
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._init = function () {
                    this._selectedDate = this._getDateInCurrentMonth(this.selected);
                    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
                    this._monthLabel =
                        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]
                            .toLocaleUpperCase();
                    /** @type {?} */
                    var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
                    this._firstWeekOffset =
                        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -
                            this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
                    this._createWeekCells();
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @private
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._focusActiveCell = function () {
                    this._nxCalendarBody._focusActiveCell();
                };
                /**
                 * Creates NxCalendarCells for the dates in this month.
                 * @private
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._createWeekCells = function () {
                    /** @type {?} */
                    var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
                    /** @type {?} */
                    var dateNames = this._dateAdapter.getDateNames();
                    this._weeks = [[]];
                    for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
                        if (cell === DAYS_PER_WEEK) {
                            this._weeks.push([]);
                            cell = 0;
                        }
                        /** @type {?} */
                        var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
                        /** @type {?} */
                        var enabled = this._shouldEnableDate(date);
                        /** @type {?} */
                        var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
                        this._weeks[this._weeks.length - 1]
                            .push(new NxCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
                    }
                };
                /**
                 * Date filter for the month
                 * @private
                 * @param {?} date
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._shouldEnableDate = function (date) {
                    return !!date &&
                        (!this.dateFilter || this.dateFilter(date)) &&
                        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&
                        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);
                };
                /**
                 * Gets the date in this month that the given Date falls on.
                 * Returns null if the given Date is in another month.
                 * @private
                 * @param {?} date
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._getDateInCurrentMonth = function (date) {
                    return date && this._hasSameMonthAndYear(date, this.activeDate) ?
                        this._dateAdapter.getDate(date) : null;
                };
                /**
                 * Checks whether the 2 dates are non-null and fall within the same month of the same year.
                 * @private
                 * @param {?} d1
                 * @param {?} d2
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._hasSameMonthAndYear = function (d1, d2) {
                    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&
                        this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                NxMonthViewComponent.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Determines whether the user has the RTL layout direction.
                 * @private
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._isRtl = function () {
                    return this._dir && this._dir.value === 'rtl';
                };
                /**
                 * The last days of the previous month that should be displayed
                 * in the first row of the calendar.
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._getLastDaysOfPreviousMonth = function () {
                    /** @type {?} */
                    var firstDayOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
                    /** @type {?} */
                    var firstDayOfPreviousItems = this._dateAdapter.addCalendarDays(firstDayOfMonth, -this._firstWeekOffset);
                    return this._getRowOfDays(firstDayOfPreviousItems, this._firstWeekOffset);
                };
                /**
                 * The first days of the following month that should be displayed
                 * after the days of the current month. After filling up the last
                 * row of the current month, additional rows are added, so that a
                 * total of 42 days (6 rows/weeks) is displayed.
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._getFirstDaysOfFollowingMonth = function () {
                    /** @type {?} */
                    var followingDays = [];
                    /** @type {?} */
                    var firstDayOfNextMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1), 1);
                    // there should be displayed a total of 7 * 6 items
                    /** @type {?} */
                    var followingDaysCount = TOTAL_DAYS_TO_DISPLAY - this._firstWeekOffset - this._dateAdapter.getNumDaysInMonth(this.activeDate);
                    /** @type {?} */
                    var offsetItems = followingDaysCount % 7;
                    // add a non-full row to following rows.
                    // These items will fill up the last incomplete row of the current month.
                    if (offsetItems > 0) {
                        /** @type {?} */
                        var offsetRow = this._getRowOfDays(firstDayOfNextMonth, offsetItems);
                        followingDays.push(offsetRow);
                    }
                    /** @type {?} */
                    var remainingDays = followingDaysCount - offsetItems;
                    /** @type {?} */
                    var firstDayInRow = this._dateAdapter.addCalendarDays(firstDayOfNextMonth, offsetItems);
                    // fill remaining rows if needed
                    while (remainingDays > 0) {
                        followingDays.push(this._getRowOfDays(firstDayInRow, this._numCols));
                        firstDayInRow = this._dateAdapter.addCalendarDays(firstDayInRow, this._numCols);
                        remainingDays -= this._numCols;
                    }
                    return followingDays;
                };
                /**
                 * Returns a row with days, beginning with the date of `firstDayInRow`-parameter.
                 * The returned row contains `daysCount` elements.
                 * @param {?} firstDayInRow
                 * @param {?} daysCount
                 * @return {?}
                 */
                NxMonthViewComponent.prototype._getRowOfDays = function (firstDayInRow, daysCount) {
                    /** @type {?} */
                    var nextRow = [];
                    /** @type {?} */
                    var dateNames = this._dateAdapter.getDateNames();
                    for (var addDays = 0; addDays < daysCount; addDays++) {
                        /** @type {?} */
                        var day = this._dateAdapter.getDate(this._dateAdapter.addCalendarDays(firstDayInRow, addDays));
                        nextRow.push(new NxCalendarCell(day, dateNames[day - 1]));
                    }
                    return nextRow;
                };
                return NxMonthViewComponent;
            }());
            NxMonthViewComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            selector: 'nx-month-view',
                            template: "<table class=\"nx-calendar-table\">\n  <thead class=\"nx-calendar-table-head\">\n    <tr>\n      <th\n        class=\"nx-calendar-table-header\"\n        *ngFor=\"let day of _weekdays\"\n        [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\n    <tr>\n  </thead>\n  <tbody nx-calendar-body\n         [label]=\"_monthLabel\"\n         [rows]=\"_weeks\"\n         [previousItems]=\"_getLastDaysOfPreviousMonth()\"\n         [followingItems]=\"_getFirstDaysOfFollowingMonth()\"\n         [todayValue]=\"_todayDate\"\n         [numCols]=\"_numCols\"\n         [selectedValue]=\"_selectedDate\"\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n         (selectedValueChange)=\"_dateSelected($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                            exportAs: 'nxMonthView',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.nx-calendar-table-header{text-align:center;color:#c2c2c2;font-size:16px;line-height:24px;height:40px;font-weight:600}"]
                        }] }
            ];
            /** @nocollapse */
            NxMonthViewComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [NX_DATE_FORMATS,] }] },
                { type: NxDateAdapter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] }
            ]; };
            NxMonthViewComponent.propDecorators = {
                activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                _userSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                _nxCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewChild"], args: [NxCalendarBodyComponent,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @type {?}
             */
            var yearsPerPage = 20;
            /** @type {?} */
            var yearsPerRow = 4;
            /**
             * An internal component used to display a year selector in the datepicker.
             * \@docs-private
             * @template D
             */
            var NxMultiYearViewComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _dateAdapter
                 * @param {?=} _dir
                 */
                function NxMultiYearViewComponent(_changeDetectorRef, _dateAdapter, _dir) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    /**
                     * Emits when a new year is selected.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits the selected year. This doesn't imply a change on the selected date
                     */
                    this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when any date is activated.
                     */
                    this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError$1('DateAdapter');
                    }
                    this._activeDate = this._dateAdapter.today();
                }
                Object.defineProperty(NxMultiYearViewComponent.prototype, "activeDate", {
                    /**
                     * The date to display in this multi-year view (everything other than the year is ignored).
                     * @return {?}
                     */
                    get: function () { return this._activeDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var oldActiveDate = this._activeDate;
                        /** @type {?} */
                        var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                        if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==
                            Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {
                            this._init();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMultiYearViewComponent.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMultiYearViewComponent.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMultiYearViewComponent.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype.ngAfterContentInit = function () {
                    this._init();
                    this._focusActiveCell();
                };
                /**
                 * Initializes this multi-year view.
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._init = function () {
                    var _this = this;
                    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());
                    /** @type {?} */
                    var activeYear = this._dateAdapter.getYear(this._activeDate);
                    /** @type {?} */
                    var activeOffset = activeYear % yearsPerPage;
                    this._years = [];
                    for (var i = 0, row = []; i < yearsPerPage; i++) {
                        row.push(activeYear - activeOffset + i);
                        if (row.length === yearsPerRow) {
                            this._years.push(row.map(( /**
                             * @param {?} year
                             * @return {?}
                             */function (/**
                             * @param {?} year
                             * @return {?}
                             */ year) { return _this._createCellForYear(year); })));
                            row = [];
                        }
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Handles when a new year is selected.
                 * @param {?} year
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._yearSelected = function (year) {
                    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));
                    /** @type {?} */
                    var month = this._dateAdapter.getMonth(this.activeDate);
                    /** @type {?} */
                    var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));
                    this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
                };
                /**
                 * Handles keydown events on the calendar body when calendar is in multi-year view.
                 * @param {?} event
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._handleCalendarBodyKeydown = function (event) {
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    /** @type {?} */
                    var oldActiveDate = this._activeDate;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]:
                            this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
                            this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                            break;
                        default:
                            // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                            return;
                    }
                    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                        this.activeDateChange.emit(this.activeDate);
                    }
                    this._focusActiveCell();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                };
                /**
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._getActiveCell = function () {
                    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @private
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._focusActiveCell = function () {
                    this._nxCalendarBody._focusActiveCell();
                };
                /**
                 * Creates an NxCalendarCell for the given year.
                 * @private
                 * @param {?} year
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._createCellForYear = function (year) {
                    /** @type {?} */
                    var yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));
                    return new NxCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));
                };
                /**
                 * Whether the given year is enabled.
                 * @private
                 * @param {?} year
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._shouldEnableYear = function (year) {
                    // disable if the year is greater than maxDate lower than minDate
                    if (year === undefined || year === null ||
                        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||
                        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {
                        return false;
                    }
                    // enable if it reaches here and there's no filter defined
                    if (!this.dateFilter) {
                        return true;
                    }
                    /** @type {?} */
                    var firstOfYear = this._dateAdapter.createDate(year, 0, 1);
                    // If any date in the year is enabled count the year as enabled.
                    for (var date = firstOfYear; this._dateAdapter.getYear(date) === year; date = this._dateAdapter.addCalendarDays(date, 1)) {
                        if (this.dateFilter(date)) {
                            return true;
                        }
                    }
                    return false;
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                NxMultiYearViewComponent.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Determines whether the user has the RTL layout direction.
                 * @private
                 * @return {?}
                 */
                NxMultiYearViewComponent.prototype._isRtl = function () {
                    return this._dir && this._dir.value === 'rtl';
                };
                return NxMultiYearViewComponent;
            }());
            NxMultiYearViewComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            selector: 'nx-multi-year-view',
                            template: "<table class=\"nx-calendar-table\">\n  <tbody nx-calendar-body\n         allowDisabledSelection=\"true\"\n         [rows]=\"_years\"\n         [todayValue]=\"_todayYear\"\n         [selectedValue]=\"_selectedYear\"\n         [numCols]=\"4\"\n         [activeCell]=\"_getActiveCell()\"\n         (selectedValueChange)=\"_yearSelected($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                            exportAs: 'nxMultiYearView',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 17.33333px 8px}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:8px}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:8px}"]
                        }] }
            ];
            /** @nocollapse */
            NxMultiYearViewComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectorRef"] },
                { type: NxDateAdapter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] }
            ]; };
            NxMultiYearViewComponent.propDecorators = {
                activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                _nxCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewChild"], args: [NxCalendarBodyComponent,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * An internal component used to display a single year in the datepicker.
             * \@docs-private
             * @template D
             */
            var NxYearViewComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _dateFormats
                 * @param {?} _dateAdapter
                 * @param {?=} _dir
                 */
                function NxYearViewComponent(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dateFormats = _dateFormats;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    /**
                     * Emits when a new month is selected.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits the selected month. This doesn't imply a change on the selected date
                     */
                    this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when any date is activated.
                     */
                    this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    this._numCols = 3;
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError$1('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError$1('MAT_DATE_FORMATS');
                    }
                    this._activeDate = this._dateAdapter.today();
                }
                Object.defineProperty(NxYearViewComponent.prototype, "activeDate", {
                    /**
                     * The date to display in this year view (everything other than the year is ignored).
                     * @return {?}
                     */
                    get: function () { return this._activeDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var oldActiveDate = this._activeDate;
                        /** @type {?} */
                        var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {
                            this._init();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxYearViewComponent.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._selectedMonth = this._getMonthInCurrentYear(this._selected);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxYearViewComponent.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxYearViewComponent.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxYearViewComponent.prototype.ngAfterContentInit = function () {
                    this._init();
                    this._focusActiveCell();
                };
                /**
                 * Handles when a new month is selected.
                 * @param {?} month
                 * @return {?}
                 */
                NxYearViewComponent.prototype._monthSelected = function (month) {
                    /** @type {?} */
                    var normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);
                    this.monthSelected.emit(normalizedDate);
                    /** @type {?} */
                    var daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);
                    this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
                };
                /**
                 * Handles keydown events on the calendar body when calendar is in year view.
                 * @param {?} event
                 * @return {?}
                 */
                NxYearViewComponent.prototype._handleCalendarBodyKeydown = function (event) {
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                    // disabled ones from being selected. This may not be ideal, we should look into whether
                    // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                    /** @type {?} */
                    var oldActiveDate = this._activeDate;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["LEFT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["RIGHT_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["UP_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._numCols);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, this._numCols);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["HOME"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["END"]:
                            this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_UP"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["PAGE_DOWN"]:
                            this.activeDate =
                                this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ENTER"]:
                            this._monthSelected(this._dateAdapter.getMonth(this._activeDate));
                            break;
                        default:
                            // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                            return;
                    }
                    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                        this.activeDateChange.emit(this.activeDate);
                    }
                    this._focusActiveCell();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                };
                /**
                 * Initializes this year view.
                 * @return {?}
                 */
                NxYearViewComponent.prototype._init = function () {
                    var _this = this;
                    this._selectedMonth = this._getMonthInCurrentYear(this.selected);
                    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());
                    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);
                    /** @type {?} */
                    var monthNames = this._dateAdapter.getMonthNames('short');
                    this._months = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]].map(( /**
                     * @param {?} row
                     * @return {?}
                     */function (/**
                     * @param {?} row
                     * @return {?}
                     */ row) { return row.map(( /**
                     * @param {?} month
                     * @return {?}
                     */function (/**
                     * @param {?} month
                     * @return {?}
                     */ month) { return _this._createCellForMonth(month, monthNames[month]); })); }));
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @private
                 * @return {?}
                 */
                NxYearViewComponent.prototype._focusActiveCell = function () {
                    this._nxCalendarBody._focusActiveCell();
                };
                /**
                 * Gets the month in this year that the given Date falls on.
                 * Returns null if the given Date is in another year.
                 * @private
                 * @param {?} date
                 * @return {?}
                 */
                NxYearViewComponent.prototype._getMonthInCurrentYear = function (date) {
                    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate) ?
                        this._dateAdapter.getMonth(date) : null;
                };
                /**
                 * Creates an NxCalendarCell for the given month.
                 * @private
                 * @param {?} month
                 * @param {?} monthName
                 * @return {?}
                 */
                NxYearViewComponent.prototype._createCellForMonth = function (month, monthName) {
                    /** @type {?} */
                    var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);
                    return new NxCalendarCell(month, monthName, ariaLabel, this._shouldEnableMonth(month));
                };
                /**
                 * Whether the given month is enabled.
                 * @private
                 * @param {?} month
                 * @return {?}
                 */
                NxYearViewComponent.prototype._shouldEnableMonth = function (month) {
                    /** @type {?} */
                    var activeYear = this._dateAdapter.getYear(this.activeDate);
                    if (month === undefined || month === null ||
                        this._isYearAndMonthAfterMaxDate(activeYear, month) ||
                        this._isYearAndMonthBeforeMinDate(activeYear, month)) {
                        return false;
                    }
                    if (!this.dateFilter) {
                        return true;
                    }
                    /** @type {?} */
                    var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);
                    // If any date in the month is enabled count the month as enabled.
                    for (var date = firstOfMonth; this._dateAdapter.getMonth(date) === month; date = this._dateAdapter.addCalendarDays(date, 1)) {
                        if (this.dateFilter(date)) {
                            return true;
                        }
                    }
                    return false;
                };
                /**
                 * Tests whether the combination month/year is after this.maxDate, considering
                 * just the month and year of this.maxDate
                 * @private
                 * @param {?} year
                 * @param {?} month
                 * @return {?}
                 */
                NxYearViewComponent.prototype._isYearAndMonthAfterMaxDate = function (year, month) {
                    if (this.maxDate) {
                        /** @type {?} */
                        var maxYear = this._dateAdapter.getYear(this.maxDate);
                        /** @type {?} */
                        var maxMonth = this._dateAdapter.getMonth(this.maxDate);
                        return year > maxYear || (year === maxYear && month > maxMonth);
                    }
                    return false;
                };
                /**
                 * Tests whether the combination month/year is before this.minDate, considering
                 * just the month and year of this.minDate
                 * @private
                 * @param {?} year
                 * @param {?} month
                 * @return {?}
                 */
                NxYearViewComponent.prototype._isYearAndMonthBeforeMinDate = function (year, month) {
                    if (this.minDate) {
                        /** @type {?} */
                        var minYear = this._dateAdapter.getYear(this.minDate);
                        /** @type {?} */
                        var minMonth = this._dateAdapter.getMonth(this.minDate);
                        return year < minYear || (year === minYear && month < minMonth);
                    }
                    return false;
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                NxYearViewComponent.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                /**
                 * Determines whether the user has the RTL layout direction.
                 * @private
                 * @return {?}
                 */
                NxYearViewComponent.prototype._isRtl = function () {
                    return this._dir && this._dir.value === 'rtl';
                };
                return NxYearViewComponent;
            }());
            NxYearViewComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            selector: 'nx-year-view',
                            template: "<table class=\"nx-calendar-table\">\n  <tbody nx-calendar-body\n         allowDisabledSelection=\"true\"\n         [label]=\"_yearLabel\"\n         [rows]=\"_months\"\n         [todayValue]=\"_todayMonth\"\n         [selectedValue]=\"_selectedMonth\"\n         [numCols]=\"_numCols\"\n         [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\n         (selectedValueChange)=\"_monthSelected($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                            exportAs: 'nxYearView',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}:host ::ng-deep .nx-calendar-body .nx-calendar-body-cell-content{margin:0 36px 8px}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:first-child .nx-calendar-body-cell-content{margin-left:8px}:host ::ng-deep .nx-calendar-body tr .nx-calendar-body-cell:last-child .nx-calendar-body-cell-content{margin-right:8px}"]
                        }] }
            ];
            /** @nocollapse */
            NxYearViewComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [NX_DATE_FORMATS,] }] },
                { type: NxDateAdapter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] }
            ]; };
            NxYearViewComponent.propDecorators = {
                activeDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                activeDateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                _nxCalendarBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewChild"], args: [NxCalendarBodyComponent,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @type {?}
             */
            var yearsPerPage$1 = 20;
            /**
             * A calendar that is used as part of the datepicker.
             * \@docs-private
             * @template D
             */
            var NxCalendarComponent = /** @class */ (function () {
                /**
                 * @param {?} _intl
                 * @param {?} _dateAdapter
                 * @param {?} _dateFormats
                 * @param {?} changeDetectorRef
                 */
                function NxCalendarComponent(_intl, _dateAdapter, _dateFormats, changeDetectorRef) {
                    this._intl = _intl;
                    this._dateAdapter = _dateAdapter;
                    this._dateFormats = _dateFormats;
                    /**
                     * Whether the calendar should be started in month or year view.
                     */
                    this.startView = 'month';
                    /**
                     * Emits when the currently selected date changes.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits the year chosen in multiyear view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits the month chosen in year view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when any date is selected.
                     */
                    this._userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError$1('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError$1('MAT_DATE_FORMATS');
                    }
                    this._intlChanges = _intl.changes.subscribe(( /**
                     * @return {?}
                     */function () { return changeDetectorRef.markForCheck(); }));
                }
                Object.defineProperty(NxCalendarComponent.prototype, "startAt", {
                    /**
                     * A date representing the period (month or year) to start the calendar in.
                     * @return {?}
                     */
                    get: function () { return this._startAt; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "selected", {
                    /**
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "minDate", {
                    /**
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._minDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "maxDate", {
                    /**
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () { return this._maxDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "_activeDate", {
                    /**
                     * The current active date. This determines which time period is shown and which date is
                     * highlighted when using keyboard navigation.
                     * @return {?}
                     */
                    get: function () { return this._clampedActiveDate; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "_periodButtonText", {
                    /**
                     * The label for the current calendar view.
                     * @return {?}
                     */
                    get: function () {
                        if (this._currentView === 'month') {
                            return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel);
                        }
                        if (this._currentView === 'year') {
                            return this._dateAdapter.getYearName(this._activeDate);
                        }
                        /** @type {?} */
                        var activeYear = this._dateAdapter.getYear(this._activeDate);
                        /** @type {?} */
                        var firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % yearsPerPage$1, 0, 1));
                        /** @type {?} */
                        var lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage$1 - 1 - activeYear % yearsPerPage$1, 0, 1));
                        return firstYearInView + " \u2013 " + lastYearInView;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "_periodButtonLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._currentView === 'month' ?
                            this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "_prevButtonLabel", {
                    /**
                     * The label for the the previous button.
                     * @return {?}
                     */
                    get: function () {
                        return {
                            'month': this._intl.prevMonthLabel,
                            'year': this._intl.prevYearLabel,
                            'multi-year': this._intl.prevMultiYearLabel
                        }[this._currentView];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCalendarComponent.prototype, "_nextButtonLabel", {
                    /**
                     * The label for the the next button.
                     * @return {?}
                     */
                    get: function () {
                        return {
                            'month': this._intl.nextMonthLabel,
                            'year': this._intl.nextYearLabel,
                            'multi-year': this._intl.nextMultiYearLabel
                        }[this._currentView];
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxCalendarComponent.prototype.ngAfterContentInit = function () {
                    this._activeDate = this.startAt || this._dateAdapter.today();
                    this._currentView = this.startView;
                };
                /**
                 * @return {?}
                 */
                NxCalendarComponent.prototype.ngOnDestroy = function () {
                    this._intlChanges.unsubscribe();
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                NxCalendarComponent.prototype.ngOnChanges = function (changes) {
                    /** @type {?} */
                    var change = changes.minDate || changes.maxDate || changes.dateFilter;
                    if (change && !change.firstChange) {
                        /** @type {?} */
                        var view = this.monthView || this.yearView || this.multiYearView;
                        if (view) {
                            view._init();
                        }
                    }
                };
                /**
                 * Handles date selection in the month view.
                 * @param {?} date
                 * @return {?}
                 */
                NxCalendarComponent.prototype._dateSelected = function (date) {
                    if (!this._dateAdapter.sameDate(date, this.selected)) {
                        this.selectedChange.emit(date);
                    }
                };
                /**
                 * Handles year selection in the multiyear view.
                 * @param {?} normalizedYear
                 * @return {?}
                 */
                NxCalendarComponent.prototype._yearSelectedInMultiYearView = function (normalizedYear) {
                    this.yearSelected.emit(normalizedYear);
                };
                /**
                 * Handles month selection in the year view.
                 * @param {?} normalizedMonth
                 * @return {?}
                 */
                NxCalendarComponent.prototype._monthSelectedInYearView = function (normalizedMonth) {
                    this.monthSelected.emit(normalizedMonth);
                };
                /**
                 * @return {?}
                 */
                NxCalendarComponent.prototype._userSelected = function () {
                    this._userSelection.emit();
                };
                /**
                 * Handles year/month selection in the multi-year/year views.
                 * @param {?} date
                 * @param {?} view
                 * @return {?}
                 */
                NxCalendarComponent.prototype._goToDateInView = function (date, view) {
                    this._activeDate = date;
                    this._currentView = view;
                };
                /**
                 * Handles user clicks on the period label.
                 * @return {?}
                 */
                NxCalendarComponent.prototype._changeViewClicked = function () {
                    this._currentView = this._currentView === 'month' ? 'multi-year' : 'month';
                };
                /**
                 * Handles user clicks on the previous button.
                 * @return {?}
                 */
                NxCalendarComponent.prototype._previousClicked = function () {
                    this._activeDate = this._currentView === 'month' ?
                        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :
                        this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? -1 : -yearsPerPage$1);
                };
                /**
                 * Handles user clicks on the next button.
                 * @return {?}
                 */
                NxCalendarComponent.prototype._nextClicked = function () {
                    this._activeDate = this._currentView === 'month' ?
                        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :
                        this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? 1 : yearsPerPage$1);
                };
                /**
                 * Whether the previous period button is enabled.
                 * @return {?}
                 */
                NxCalendarComponent.prototype._previousEnabled = function () {
                    if (!this.minDate) {
                        return true;
                    }
                    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
                };
                /**
                 * Whether the next period button is enabled.
                 * @return {?}
                 */
                NxCalendarComponent.prototype._nextEnabled = function () {
                    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
                };
                /**
                 * Whether the two dates represent the same view in the current view mode (month or year).
                 * @private
                 * @param {?} date1
                 * @param {?} date2
                 * @return {?}
                 */
                NxCalendarComponent.prototype._isSameView = function (date1, date2) {
                    if (this._currentView === 'month') {
                        return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) &&
                            this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2);
                    }
                    if (this._currentView === 'year') {
                        return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);
                    }
                    // Otherwise we are in 'multi-year' view.
                    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage$1) ===
                        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage$1);
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                NxCalendarComponent.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                return NxCalendarComponent;
            }());
            NxCalendarComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            selector: 'nx-calendar',
                            template: "<div class=\"nx-calendar-header\">\n  <div class=\"nx-calendar-controls\">\n\n    <button class=\"nx-calendar-previous-button\"\n            [disabled]=\"!_previousEnabled()\" (click)=\"_previousClicked()\"\n            [attr.aria-label]=\"_prevButtonLabel\">\n            <nx-icon name=\"chevron-left\"></nx-icon>\n    </button>\n\n    <span class=\"nx-calendar-period-label\">\n      {{_periodButtonText}}\n    </span>\n\n    <button class=\"nx-calendar-next-button\"\n            [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\"\n            [attr.aria-label]=\"_nextButtonLabel\">\n            <nx-icon name=\"chevron-right\"></nx-icon>\n    </button>\n  </div>\n\n  <div class=\"nx-calendar-view-controls\">\n    <button\n        class=\"nx-calendar-change-view-button\"\n        (click)=\"_changeViewClicked()\" [attr.aria-label]=\"_periodButtonLabel\">\n      {{_periodButtonLabel}}\n    </button>\n  </div>\n</div>\n\n<div class=\"nx-calendar-content\" [ngSwitch]=\"_currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  <nx-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"_activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (selectedChange)=\"_dateSelected($event)\"\n      (_userSelection)=\"_userSelected()\">\n  </nx-month-view>\n\n  <nx-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"_activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (monthSelected)=\"_monthSelectedInYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'month')\">\n  </nx-year-view>\n\n  <nx-multi-year-view\n      *ngSwitchCase=\"'multi-year'\"\n      [(activeDate)]=\"_activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'year')\">\n  </nx-multi-year-view>\n</div>\n",
                            host: {
                                'class': 'nx-calendar',
                            },
                            exportAs: 'nxCalendar',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-calendar-content{width:280px;margin:16px auto 0}.nx-calendar-next-button,.nx-calendar-previous-button{background-color:transparent;border:none;cursor:pointer;padding:0;line-height:24px;font-size:24px;color:#006192}.nx-calendar-next-button:focus,.nx-calendar-previous-button:focus{outline:0}.nx-calendar-controls{display:flex;justify-content:center;height:24px}.nx-calendar-period-label{width:216px;font-size:20px;line-height:24px;font-weight:600;color:#414141;text-align:center;letter-spacing:.2px}.nx-calendar-view-controls{text-align:center;height:24px}.nx-calendar-change-view-button{border:none;background-color:transparent;cursor:pointer;margin:8px 0 0;color:#006192;font-size:16px;line-height:16px;font-weight:700;height:16px}.nx-calendar-change-view-button:focus{outline:0}:host-context([data-whatinput=keyboard]) .nx-calendar-change-view-button:focus,:host-context([data-whatinput=keyboard]) .nx-calendar-next-button:focus,:host-context([data-whatinput=keyboard]) .nx-calendar-previous-button:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}button::-moz-focus-inner{border:0}"]
                        }] }
            ];
            /** @nocollapse */
            NxCalendarComponent.ctorParameters = function () { return [
                { type: NxDatepickerIntl },
                { type: NxDateAdapter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [NX_DATE_FORMATS,] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectorRef"] }
            ]; };
            NxCalendarComponent.propDecorators = {
                startAt: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                startView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                minDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                maxDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                dateFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                _userSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                monthView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewChild"], args: [NxMonthViewComponent,] }],
                yearView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewChild"], args: [NxYearViewComponent,] }],
                multiYearView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewChild"], args: [NxMultiYearViewComponent,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate a unique ID for each datepicker instance.
             * @type {?}
             */
            var datepickerUid = 0;
            /**
             * Injection token that determines the scroll handling while the calendar is open.
             * @type {?}
             */
            var NX_DATEPICKER_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["InjectionToken"]('nx-datepicker-scroll-strategy');
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {
                provide: NX_DATEPICKER_SCROLL_STRATEGY,
                deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]],
                useFactory: NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,
            };
            /** @type {?} */
            var DATEPICKER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["InjectionToken"]('DATEPICKER_DEFAULT_OPTIONS');
            /**
             * \@docs-private
             * Component used as the content for the datepicker dialog and popup. We use this instead of using
             * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a
             * place to put additional features of the popup that are not part of the calendar itself in the
             * future. (e.g. confirmation buttons).
             * @template D
             */
            var NxDatepickerContentComponent = /** @class */ (function () {
                /**
                 * @param {?} _intl
                 * @param {?} elementRef
                 * @param {?} _ngZone
                 */
                function NxDatepickerContentComponent(_intl, elementRef, _ngZone) {
                    this._intl = _intl;
                    this.elementRef = elementRef;
                    this._ngZone = _ngZone;
                }
                /**
                 * @return {?}
                 */
                NxDatepickerContentComponent.prototype.ngAfterContentInit = function () {
                    this._focusActiveCell();
                };
                /**
                 * Focuses the active cell after the microtask queue is empty.
                 * @private
                 * @return {?}
                 */
                NxDatepickerContentComponent.prototype._focusActiveCell = function () {
                    var _this = this;
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this.elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();
                        }));
                    }));
                };
                return NxDatepickerContentComponent;
            }());
            NxDatepickerContentComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            selector: 'nx-datepicker-content',
                            template: "<div class=\"nx-datepicker-header\">\n    <button (click)=\"datepicker.close()\" class=\"nx-datepicker-close\">\n        <nx-icon name=\"close\"></nx-icon>\n    </button>\n</div>\n\n<nx-calendar cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker.minDate\"\n    [maxDate]=\"datepicker.maxDate\"\n    [dateFilter]=\"datepicker.dateFilter\"\n    [selected]=\"datepicker.selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (yearSelected)=\"datepicker.selectYear($event)\"\n    (monthSelected)=\"datepicker.selectMonth($event)\"\n    (_userSelection)=\"datepicker.close()\">\n</nx-calendar>\n",
                            host: {
                                'class': 'nx-datepicker-content'
                            },
                            exportAs: 'nxDatepickerContent',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{background-color:#fff;display:flex;flex-flow:column nowrap;box-shadow:0 8px 24px rgba(65,65,65,.35);border:1px solid #d9d9d9;border-radius:4px}.nx-datepicker-header{padding:calc(16px - 1px) 16px 16px;display:flex;height:55px}.nx-datepicker-close{background-color:transparent;border:none;margin-left:auto;cursor:pointer;padding:0;line-height:24px;font-size:24px;color:#006192;outline:0}nx-calendar{width:calc(7 * 40px + 2 * 32px - 2 * 1px);height:calc(48px + 16px + 7 * 40px + 32px - 1px)}"]
                        }] }
            ];
            /** @nocollapse */
            NxDatepickerContentComponent.ctorParameters = function () { return [
                { type: NxDatepickerIntl },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["NgZone"] }
            ]; };
            NxDatepickerContentComponent.propDecorators = {
                _calendar: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewChild"], args: [NxCalendarComponent,] }]
            };
            // TODO(mmalerba): We use a component instead of a directive here so the user can use implicit
            // template reference variables (e.g. #d vs #d="nxDatepicker"). We can change this to a directive
            // if angular adds support for `exportAs: '$implicit'` on directives.
            /**
             * Component responsible for managing the datepicker popup/dialog.
             * @template D
             */
            var NxDatepickerComponent = /** @class */ (function () {
                /**
                 * @param {?} _overlay
                 * @param {?} _ngZone
                 * @param {?} _viewContainerRef
                 * @param {?} _scrollStrategy
                 * @param {?} _dateAdapter
                 * @param {?} _dir
                 * @param {?} _document
                 */
                function NxDatepickerComponent(_overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
                    this._overlay = _overlay;
                    this._ngZone = _ngZone;
                    this._viewContainerRef = _viewContainerRef;
                    this._scrollStrategy = _scrollStrategy;
                    this._dateAdapter = _dateAdapter;
                    this._dir = _dir;
                    this._document = _document;
                    /**
                     * The view that the calendar should start in.
                     */
                    this.startView = 'month';
                    /**
                     * \@docs-private
                     */
                    this.selectedChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits selected year in multiyear view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits selected month in year view.
                     * This doesn't imply a change on the selected date.
                     */
                    this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when the datepicker has been opened.
                     */
                    this.openedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when the datepicker has been closed.
                     */
                    this.closedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    this._opened = false;
                    /**
                     * \@docs-private
                     * The id for the datepicker calendar.
                     */
                    this.id = "nx-datepicker-" + datepickerUid++;
                    this._validSelected = null;
                    /**
                     * The element that was focused before the datepicker was opened.
                     */
                    this._focusedElementBeforeOpen = null;
                    /**
                     * Subscription to value changes in the associated input element.
                     */
                    this._inputSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
                    /**
                     * Emits when the datepicker is disabled.
                     */
                    this._disabledChange = new rxjs__WEBPACK_IMPORTED_MODULE_14__["Subject"]();
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError$1('DateAdapter');
                    }
                }
                Object.defineProperty(NxDatepickerComponent.prototype, "startAt", {
                    /**
                     * The date to open the calendar initially.
                     * @return {?}
                     */
                    get: function () {
                        // If an explicit startAt is set we start there, otherwise we start at whatever the currently
                        // selected value is.
                        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatepickerComponent.prototype, "disabled", {
                    /**
                     * Whether the datepicker pop-up should be disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled === undefined && this._datepickerInput ?
                            this._datepickerInput.disabled : !!this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
                        if (newValue !== this._disabled) {
                            this._disabled = newValue;
                            this._disabledChange.next(newValue);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatepickerComponent.prototype, "opened", {
                    /**
                     * Whether the calendar is open.
                     * @return {?}
                     */
                    get: function () { return this._opened; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { value ? this.open() : this.close(); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatepickerComponent.prototype, "selected", {
                    /**
                     * \@docs-private
                     * The currently selected date.
                     * @return {?}
                     */
                    get: function () { return this._validSelected; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._validSelected = value; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatepickerComponent.prototype, "minDate", {
                    /**
                     * \@docs-private
                     * The minimum selectable date.
                     * @return {?}
                     */
                    get: function () {
                        return this._datepickerInput && this._datepickerInput.min;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatepickerComponent.prototype, "maxDate", {
                    /**
                     * \@docs-private
                     * The maximum selectable date.
                     * @return {?}
                     */
                    get: function () {
                        return this._datepickerInput && this._datepickerInput.max;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatepickerComponent.prototype, "dateFilter", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._datepickerInput && this._datepickerInput._dateFilter;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.ngOnDestroy = function () {
                    this.close();
                    this._inputSubscription.unsubscribe();
                    this._disabledChange.complete();
                    if (this._popupRef) {
                        this._popupRef.dispose();
                        this._popupComponentRef = null;
                    }
                };
                /**
                 * \@docs-private
                 * Selects the given date
                 * @param {?} date
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.select = function (date) {
                    /** @type {?} */
                    var oldValue = this.selected;
                    this.selected = date;
                    if (!this._dateAdapter.sameDate(oldValue, this.selected)) {
                        this.selectedChanged.emit(date);
                    }
                };
                /**
                 * \@docs-private
                 * Emits the selected year in multiyear view
                 * @param {?} normalizedYear
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.selectYear = function (normalizedYear) {
                    this.yearSelected.emit(normalizedYear);
                };
                /**
                 * \@docs-private
                 * Emits selected month in year view
                 * @param {?} normalizedMonth
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.selectMonth = function (normalizedMonth) {
                    this.monthSelected.emit(normalizedMonth);
                };
                /**
                 * \@docs-private
                 * Register an input with this datepicker.
                 * @param {?} input The datepicker input to register with this datepicker.
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.registerInput = function (input) {
                    var _this = this;
                    if (this._datepickerInput) {
                        throw Error('A NxDatepicker can only be associated with a single input.');
                    }
                    this._datepickerInput = input;
                    this._inputSubscription =
                        this._datepickerInput._valueChange.subscribe(( /**
                         * @param {?} value
                         * @return {?}
                         */function (value) { return _this.selected = value; }));
                };
                /**
                 * \@docs-private
                 * Register an input toggle with this datepicker.
                 * @param {?} toggle
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.registerToggle = function (toggle) {
                    if (this._toggleButton) {
                        throw Error('A NxDatepicker can only be associated with a single toggle button.');
                    }
                    this._toggleButton = toggle;
                };
                /**
                 * \@docs-private
                 * Open the calendar.
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.open = function () {
                    if (this._opened || this.disabled) {
                        return;
                    }
                    if (!this._datepickerInput) {
                        throw Error('Attempted to open an NxDatepicker with no associated input.');
                    }
                    if (this._document) {
                        this._focusedElementBeforeOpen = this._document.activeElement;
                    }
                    this._openAsPopup();
                    this._opened = true;
                    this.openedStream.emit();
                };
                /**
                 * \@docs-private
                 * Close the calendar.
                 * @return {?}
                 */
                NxDatepickerComponent.prototype.close = function () {
                    var _this = this;
                    if (!this._opened) {
                        return;
                    }
                    if (this._popupRef && this._popupRef.hasAttached()) {
                        this._popupRef.detach();
                    }
                    if (this._calendarPortal && this._calendarPortal.isAttached) {
                        this._calendarPortal.detach();
                    }
                    /** @type {?} */
                    var completeClose = ( /**
                     * @return {?}
                     */function () {
                        // The `_opened` could've been reset already if
                        // we got two events in quick succession.
                        if (_this._opened) {
                            _this._opened = false;
                            _this.closedStream.emit();
                            _this._focusedElementBeforeOpen = null;
                        }
                    });
                    if (this._focusedElementBeforeOpen &&
                        typeof this._focusedElementBeforeOpen.focus === 'function') {
                        // Because IE moves focus asynchronously, we can't count on it being restored before we've
                        // marked the datepicker as closed. If the event fires out of sequence and the element that
                        // we're refocusing opens the datepicker on focus, the user could be stuck with not being
                        // able to close the calendar at all. We work around it by making the logic, that marks
                        // the datepicker as closed, async as well.
                        this._focusedElementBeforeOpen.focus();
                        setTimeout(completeClose);
                    }
                    else {
                        completeClose();
                    }
                    // if the datepicker toggle button is not focusable, focus the associated input.
                    if (this._toggleButton.tabindex < 0) {
                        this._datepickerInput._focus();
                    }
                };
                /**
                 * Open the calendar as a popup.
                 * @private
                 * @return {?}
                 */
                NxDatepickerComponent.prototype._openAsPopup = function () {
                    var _this = this;
                    if (!this._calendarPortal) {
                        this._calendarPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["ComponentPortal"](NxDatepickerContentComponent, this._viewContainerRef);
                    }
                    if (!this._popupRef) {
                        this._createPopup();
                    }
                    if (!this._popupRef.hasAttached()) {
                        this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
                        this._popupComponentRef.instance.datepicker = this;
                        // Update the position once the calendar has rendered.
                        this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._popupRef.updatePosition();
                        }));
                    }
                };
                /**
                 * Create the popup.
                 * @private
                 * @return {?}
                 */
                NxDatepickerComponent.prototype._createPopup = function () {
                    var _this = this;
                    /** @type {?} */
                    var overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayConfig"]({
                        positionStrategy: this._createPopupPositionStrategy(),
                        hasBackdrop: true,
                        backdropClass: 'nx-overlay-transparent-backdrop',
                        direction: this._dir ? this._dir.value : 'ltr',
                        scrollStrategy: this._scrollStrategy(),
                        panelClass: 'nx-datepicker-popup',
                    });
                    this._popupRef = this._overlay.create(overlayConfig);
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) { return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["ESCAPE"]; })))).subscribe(( /**
                     * @return {?}
                     */function () { return _this.close(); }));
                };
                /**
                 * Create the popup PositionStrategy.
                 * @private
                 * @return {?}
                 */
                NxDatepickerComponent.prototype._createPopupPositionStrategy = function () {
                    return this._overlay.position()
                        .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(), { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
                        .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
                        .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' })
                        .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' });
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                NxDatepickerComponent.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                return NxDatepickerComponent;
            }());
            NxDatepickerComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            selector: 'nx-datepicker',
                            template: '',
                            exportAs: 'nxDatepicker',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush
                        }] }
            ];
            /** @nocollapse */
            NxDatepickerComponent.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [NX_DATEPICKER_SCROLL_STRATEGY,] }] },
                { type: NxDateAdapter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_8__["DOCUMENT"],] }] }
            ]; };
            NxDatepickerComponent.propDecorators = {
                startAt: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                startView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                yearSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                monthSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"], args: ['opened',] }],
                closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"], args: ['closed',] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // tslint:disable:member-ordering
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @type {?}
             */
            var NX_DATEFIELD_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_13__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NxDatefieldDirective; })),
                multi: true
            };
            /** @type {?} */
            var NX_DATEFIELD_VALIDATORS = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALIDATORS"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_13__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NxDatefieldDirective; })),
                multi: true
            };
            /**
             * An event used for datepicker input and change events. We don't always have access to a native
             * input or change event because the event may have been triggered by the user clicking on the
             * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
             * @template D
             */
            var NxDatepickerInputEvent = /** @class */ (function () {
                /**
                 * @param {?} target
                 * @param {?} targetElement
                 */
                function NxDatepickerInputEvent(target, targetElement) {
                    this.target = target;
                    this.targetElement = targetElement;
                    this.value = this.target.value;
                }
                return NxDatepickerInputEvent;
            }());
            /**
             * Directive used to provide date processing functionality to an input.
             * @template D
             */
            var NxDatefieldDirective = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _dateAdapter
                 * @param {?} _dateFormats
                 * @param {?} _formField
                 */
                function NxDatefieldDirective(_elementRef, _dateAdapter, _dateFormats, _formField) {
                    var _this = this;
                    this._elementRef = _elementRef;
                    this._dateAdapter = _dateAdapter;
                    this._dateFormats = _dateFormats;
                    this._formField = _formField;
                    /**
                     * \@docs-private
                     */
                    this.currentFormattedDate = null;
                    this._strict = true;
                    /**
                     * Emits when a `change` event is fired on this `<input>`.
                     */
                    this.dateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when an `input` event is fired on this `<input>`.
                     */
                    this.dateInput = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when the value changes (either due to user input or programmatic change).
                     */
                    this._valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    /**
                     * Emits when the disabled state has changed
                     */
                    this._disabledChange = new _angular_core__WEBPACK_IMPORTED_MODULE_13__["EventEmitter"]();
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    this._cvaOnChange = ( /**
                     * @return {?}
                     */function () { });
                    this._validatorOnChange = ( /**
                     * @return {?}
                     */function () { });
                    this._datepickerSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
                    this._localeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
                    /**
                     * The form control validator for whether the input parses.
                     */
                    this._parseValidator = ( /**
                     * @return {?}
                     */function () {
                        return _this._lastValueValid ?
                            null : { 'nxDatefieldParse': { 'text': _this._elementRef.nativeElement.value } };
                    });
                    /**
                     * The form control validator for the min date.
                     */
                    this._minValidator = ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                        return (!_this.min || !controlValue ||
                            _this._dateAdapter.compareDate(_this.min, controlValue) <= 0) ?
                            null : { 'nxDatefieldMin': { 'min': _this.min, 'actual': controlValue } };
                    });
                    /**
                     * The form control validator for the max date.
                     */
                    this._maxValidator = ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                        return (!_this.max || !controlValue ||
                            _this._dateAdapter.compareDate(_this.max, controlValue) >= 0) ?
                            null : { 'nxDatefieldMax': { 'max': _this.max, 'actual': controlValue } };
                    });
                    /**
                     * The form control validator for the date filter.
                     */
                    this._filterValidator = ( /**
                     * @param {?} control
                     * @return {?}
                     */function (control) {
                        /** @type {?} */
                        var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                        return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue) ?
                            null : { 'nxDatefieldFilter': true };
                    });
                    /**
                     * The combined form control validator for this input.
                     */
                    this._validator = _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);
                    /**
                     * Whether the last value set on the input was valid.
                     */
                    this._lastValueValid = false;
                    if (!this._dateAdapter) {
                        throw createMissingDateImplError('DateAdapter');
                    }
                    if (!this._dateFormats) {
                        throw createMissingDateImplError('NX_DATE_FORMATS');
                    }
                    // Update the displayed date when the locale changes.
                    this._localeSubscription = _dateAdapter.localeChanges.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.value = _this.value;
                    }));
                }
                Object.defineProperty(NxDatefieldDirective.prototype, "datepicker", {
                    /**
                     * The datepicker that this input is associated with.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.registerDatepicker(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.registerDatepicker = function (value) {
                    if (value) {
                        this._datepicker = value;
                        this._datepicker.registerInput(this);
                    }
                };
                Object.defineProperty(NxDatefieldDirective.prototype, "datefieldFilter", {
                    /**
                     * Function that can be used to filter out dates within the datepicker and invalidate values in the datefield.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._dateFilter = value;
                        this._validatorOnChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatefieldDirective.prototype, "value", {
                    /**
                     * Provide or read the current date. It's type <D> depends on the chosen date implementation
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = this._dateAdapter.deserialize(value);
                        this._lastValueValid = !value || this._dateAdapter.isValid(value);
                        value = this._getValidDateOrNull(value);
                        /** @type {?} */
                        var oldDate = this.value;
                        this._value = value;
                        this._elementRef.nativeElement.value =
                            value ? this._dateAdapter.format(value, this._displayFormat || this._dateFormats.display.dateInput) : '';
                        if (!this._dateAdapter.sameDate(oldDate, value)) {
                            this._valueChange.emit(value);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatefieldDirective.prototype, "min", {
                    /**
                     * Sets the minimum valid date.
                     * @return {?}
                     */
                    get: function () { return this._min; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._validatorOnChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatefieldDirective.prototype, "max", {
                    /**
                     * Sets the maximum valid date.
                     * @return {?}
                     */
                    get: function () { return this._max; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                        this._validatorOnChange();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatefieldDirective.prototype, "strict", {
                    /**
                     * If supported by the date implementation enable strict parsing (applies to Moment's parse function here)
                     * @return {?}
                     */
                    get: function () { return this._strict; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._strict = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
                        // parse given text value again
                        this._onInput(this._elementRef.nativeElement.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatefieldDirective.prototype, "parseFormat", {
                    /**
                     * Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS
                     * @return {?}
                     */
                    get: function () { return this._parseFormat; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._parseFormat = value;
                        // parse given text value again
                        this._onInput(this._elementRef.nativeElement.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatefieldDirective.prototype, "displayFormat", {
                    /**
                     * Override the display format given with display.dateInput with the token NX_DATE_FORMATS
                     * @return {?}
                     */
                    get: function () { return this._displayFormat; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._displayFormat = value;
                        this.format();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatefieldDirective.prototype, "disabled", {
                    /**
                     * Whether the datepicker-input is disabled.
                     * @return {?}
                     */
                    get: function () { return !!this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
                        if (this._disabled !== newValue) {
                            this._disabled = newValue;
                            this._disabledChange.emit(newValue);
                        }
                        if (newValue) {
                            // Normally, native input elements automatically blur if they turn disabled. This behavior
                            // is problematic, because it would mean that it triggers another change detection cycle,
                            // which then causes a changed after checked error if the input element was focused before.
                            this._elementRef.nativeElement.blur();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * This will force the current value to be parse again by the given DateAdapter.
                 * That's a convenience method so you can trigger it manually.
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.format = function () {
                    this.value = this.value;
                };
                /**
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    if (this._datepicker) {
                        this._datepickerSubscription =
                            this._datepicker.selectedChanged.subscribe(( /**
                             * @param {?} selected
                             * @return {?}
                             */function (selected) {
                                _this.value = selected;
                                _this._cvaOnChange(selected);
                                _this._onTouched();
                                _this.dateInput.emit(new NxDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                                _this.dateChange.emit(new NxDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                            }));
                    }
                };
                /**
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.ngOnDestroy = function () {
                    this._datepickerSubscription.unsubscribe();
                    this._localeSubscription.unsubscribe();
                    this._valueChange.complete();
                    this._disabledChange.complete();
                };
                /**
                 * \@docs-private
                 * @param {?} fn
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.registerOnValidatorChange = function (fn) {
                    this._validatorOnChange = fn;
                };
                /**
                 * \@docs-private
                 * @param {?} c
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.validate = function (c) {
                    return this._validator ? this._validator(c) : null;
                };
                /**
                 * \@docs-private
                 * @deprecated
                 * \@deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.getPopupConnectionElementRef = function () {
                    return this.getConnectedOverlayOrigin();
                };
                /**
                 * \@docs-private
                 *
                 * Gets the element that the datepicker popup should be connected to.
                 * @return {?} The element to connect the popup to.
                 */
                NxDatefieldDirective.prototype.getConnectedOverlayOrigin = function () {
                    // formfield not yet accessible as we don't have them in a secondary entry point to import yet.
                    // return this._elementRef;
                    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.writeValue = function (value) {
                    this.value = value;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.registerOnChange = function (fn) {
                    this._cvaOnChange = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxDatefieldDirective.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxDatefieldDirective.prototype._onKeydown = function (event) {
                    if (event.altKey && event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__["DOWN_ARROW"]) {
                        this._datepicker.open();
                        event.preventDefault();
                    }
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxDatefieldDirective.prototype._onInput = function (value) {
                    /** @type {?} */
                    var date = this._dateAdapter.parse(value, this._parseFormat || this._dateFormats.parse.dateInput, this.strict);
                    this._lastValueValid = !date || this._dateAdapter.isValid(date);
                    date = this._getValidDateOrNull(date);
                    this._value = date;
                    if (date) {
                        this.currentFormattedDate = this._dateAdapter.format(date, this._displayFormat || this._dateFormats.display.dateInput);
                    }
                    else {
                        this.currentFormattedDate = null;
                    }
                    this._cvaOnChange(date);
                    this._valueChange.emit(date);
                    this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
                };
                /**
                 * @return {?}
                 */
                NxDatefieldDirective.prototype._onChange = function () {
                    this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
                };
                /**
                 * @return {?}
                 */
                NxDatefieldDirective.prototype._focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                /**
                 * @private
                 * @param {?} obj The object to check.
                 * @return {?} The given object if it is both a date instance and valid, otherwise null.
                 */
                NxDatefieldDirective.prototype._getValidDateOrNull = function (obj) {
                    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
                };
                return NxDatefieldDirective;
            }());
            NxDatefieldDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Directive"], args: [{
                            selector: 'input[nxDatefield]',
                            providers: [
                                NX_DATEFIELD_VALUE_ACCESSOR,
                                NX_DATEFIELD_VALIDATORS,
                                // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},
                                { provide: _allianz_ngx_ndbx_input__WEBPACK_IMPORTED_MODULE_4__["NX_INPUT_VALUE_ACCESSOR"], useExisting: NxDatefieldDirective }
                            ],
                            host: {
                                '[attr.aria-haspopup]': 'true',
                                '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                                '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                                '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                                '[disabled]': 'disabled',
                                '(input)': '_onInput($event.target.value)',
                                '(change)': '_onChange()',
                                '(blur)': '_onTouched()',
                                '(keydown)': '_onKeydown($event)',
                            },
                            exportAs: 'nxDatefield',
                        },] }
            ];
            /** @nocollapse */
            NxDatefieldDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ElementRef"] },
                { type: NxDateAdapter, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [NX_DATE_FORMATS,] }] },
                { type: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_3__["NxFormfieldComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }] }
            ]; };
            NxDatefieldDirective.propDecorators = {
                datepicker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['nxDatepicker',] }],
                datefieldFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['nxDatefieldFilter',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['nxMin',] }],
                max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['nxMax',] }],
                strict: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['nxStrict',] }],
                parseFormat: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['nxParseFormat',] }],
                displayFormat: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['nxDisplayFormat',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                dateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }],
                dateInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Can be used to override the icon of a `nxDatepickerToggle`.
             */
            // tslint:disable-next-line:directive-class-suffix
            var NxDatepickerToggleIconComponent = /** @class */ (function () {
                function NxDatepickerToggleIconComponent() {
                }
                return NxDatepickerToggleIconComponent;
            }());
            NxDatepickerToggleIconComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Directive"], args: [{
                            selector: '[nxDatepickerToggleIcon]'
                        },] }
            ];
            /**
             * @template D
             */
            var NxDatepickerToggleComponent = /** @class */ (function () {
                /**
                 * @param {?} _intl
                 * @param {?} _changeDetectorRef
                 * @param {?} _defaultOptions
                 */
                function NxDatepickerToggleComponent(_intl, _changeDetectorRef, _defaultOptions) {
                    this._intl = _intl;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._defaultOptions = _defaultOptions;
                    this._stateChanges = rxjs__WEBPACK_IMPORTED_MODULE_14__["Subscription"].EMPTY;
                    this._tabindex = 0;
                    if (this._defaultOptions && this._defaultOptions.toggleIconTabindex) {
                        this._tabindex = this._defaultOptions.toggleIconTabindex;
                    }
                }
                Object.defineProperty(NxDatepickerToggleComponent.prototype, "datepicker", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._datepicker;
                    },
                    /**
                     * Datepicker instance that the button will toggle.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.registerDatepicker(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxDatepickerToggleComponent.prototype.registerDatepicker = function (value) {
                    if (value) {
                        this._datepicker = value;
                        this._datepicker.registerToggle(this);
                    }
                };
                Object.defineProperty(NxDatepickerToggleComponent.prototype, "disabled", {
                    /**
                     * Whether the toggle button is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDatepickerToggleComponent.prototype, "tabindex", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._tabindex;
                    },
                    /**
                     * Sets the tabindex for the toggle button. Default: 0.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._tabindex !== value) {
                            this._tabindex = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                NxDatepickerToggleComponent.prototype.ngOnChanges = function (changes) {
                    if (changes.datepicker) {
                        this._watchStateChanges();
                    }
                };
                /**
                 * @return {?}
                 */
                NxDatepickerToggleComponent.prototype.ngOnDestroy = function () {
                    this._stateChanges.unsubscribe();
                };
                /**
                 * @return {?}
                 */
                NxDatepickerToggleComponent.prototype.ngAfterContentInit = function () {
                    this._watchStateChanges();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxDatepickerToggleComponent.prototype._open = function (event) {
                    if (this.datepicker && !this.disabled) {
                        this.datepicker.open();
                        event.stopPropagation();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxDatepickerToggleComponent.prototype._watchStateChanges = function () {
                    var _this = this;
                    /** @type {?} */
                    var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["of"])();
                    /** @type {?} */
                    var inputDisabled = this.datepicker && this.datepicker._datepickerInput ?
                        this.datepicker._datepickerInput._disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["of"])();
                    /** @type {?} */
                    var datepickerToggled = this.datepicker ?
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(this.datepicker.openedStream, this.datepicker.closedStream) :
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["of"])();
                    this._stateChanges.unsubscribe();
                    this._stateChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_14__["merge"])(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                };
                return NxDatepickerToggleComponent;
            }());
            NxDatepickerToggleComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Component"], args: [{
                            selector: 'nx-datepicker-toggle',
                            template: "<button class=\"nx-datepicker-toggle-button\"\n        [tabindex]=\"tabindex\"\n        type=\"button\"\n        [attr.aria-label]=\"_intl.openCalendarLabel\"\n        [disabled]=\"disabled\"\n        (click)=\"_open($event)\">\n\n  <svg\n    *ngIf=\"!_customIcon\"\n    class=\"default-icon\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    height=\"24px\"\n    fill=\"currentColor\"\n    focusable=\"false\">\n    <path d=\"M5.2002,17 L5.2002,15 C5.2002,14.45 5.6502,14 6.2002,14 L8.2002,14 C8.7502,14 9.2002,14.45 9.2002,15 L9.2002,17 C9.2002,17.55 8.7502,18 8.2002,\n            18 L6.2002,18 C5.6502,18 5.2002,17.55 5.2002,17 L5.2002,17 Z M20.3992,20.4 L3.5992,20.4 L3.5992,11.464 L3.5992,9.464 L3.5992,8 L20.3992,8 L20.3992,\n            20.4 Z M21.0002,3 L20.0002,3 L19.0002,3 L19.0002,2 C19.0002,1.447 18.5532,1 18.0002,1 C17.4472,1 17.0002,1.447 17.0002,2 L17.0002,3 L16.4002,3 L7.5992,\n            3 L7.0002,3 L7.0002,2 C7.0002,1.447 6.5532,1 6.0002,1 C5.4472,1 5.0002,1.447 5.0002,2 L5.0002,3 L4.0002,3 L3.0002,3 C2.4502,3 2.0002,3.45 2.0002,4 L2.0002,\n            9.464 L2.0002,11.464 L2.0002,21 C2.0002,21.55 2.4502,22 3.0002,22 L21.0002,22 C21.5502,22 22.0002,21.55 22.0002,21 L22.0002,4 C22.0002,3.45 21.5502,3 21.0002,3 L21.0002,3 Z\" id=\"path-1\"></path>\n  </svg>\n\n  <ng-content select=\"[nxDatepickerToggleIcon]\"></ng-content>\n</button>\n",
                            host: {
                                'class': 'nx-datepicker-toggle',
                                '[class.nx-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                                '[class.nx-datepicker-toggle--disabled]': 'disabled'
                            },
                            exportAs: 'nxDatepickerToggle',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{position:relative;display:inline-block;height:24px;width:24px}:host:active{outline:0}.nx-datepicker-toggle-button{border:none;background-color:transparent;outline:0;cursor:pointer;padding:0}.nx-datepicker-toggle-button::-moz-focus-inner{border:0}.default-icon{display:block}:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{cursor:not-allowed}:host-context([data-whatinput=keyboard]) .nx-datepicker-toggle-button:focus{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxDatepickerToggleComponent.ctorParameters = function () { return [
                { type: NxDatepickerIntl },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Inject"], args: [DATEPICKER_DEFAULT_OPTIONS,] }] }
            ]; };
            NxDatepickerToggleComponent.propDecorators = {
                _customIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["ContentChild"], args: [NxDatepickerToggleIconComponent,] }],
                datepicker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"], args: ['for',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }],
                tabindex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDatefieldModule = /** @class */ (function () {
                function NxDatefieldModule() {
                }
                return NxDatefieldModule;
            }());
            NxDatefieldModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_13__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_8__["CommonModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"],
                                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["A11yModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__["NxIconModule"]
                            ],
                            providers: [
                                // Provide our NX_DATE_LOCALE to determine the current language
                                NX_DATE_LOCALE_PROVIDER,
                                NxDatepickerIntl,
                                NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER
                            ],
                            declarations: [
                                NxDatefieldDirective,
                                NxDatepickerComponent,
                                NxDatepickerToggleIconComponent,
                                NxDatepickerToggleComponent,
                                NxDatepickerContentComponent,
                                NxCalendarComponent,
                                NxCalendarBodyComponent,
                                NxMonthViewComponent,
                                NxMultiYearViewComponent,
                                NxYearViewComponent
                            ],
                            exports: [
                                NxDatefieldDirective,
                                NxDatepickerComponent,
                                NxDatepickerToggleIconComponent,
                                NxDatepickerToggleComponent,
                                NxCalendarComponent,
                                NxCalendarBodyComponent,
                                NxMonthViewComponent,
                                NxMultiYearViewComponent,
                                NxYearViewComponent
                            ],
                            entryComponents: [
                                NxDatepickerContentComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-datefield.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-dropdown.js": 
        /*!******************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-dropdown.js ***!
          \******************************************************************************/
        /*! exports provided: NxDropdownModule, NxDropdownSelectChange, SELECT_PANEL_MAX_HEIGHT, NxDropdownComponent, NxDropdownItemChange, NxDropdownItemComponent, NxDropdownGroupComponent, ɵb, ɵa */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownModule", function () { return NxDropdownModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownSelectChange", function () { return NxDropdownSelectChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_MAX_HEIGHT", function () { return SELECT_PANEL_MAX_HEIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownComponent", function () { return NxDropdownComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownItemChange", function () { return NxDropdownItemChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownItemComponent", function () { return NxDropdownItemComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownGroupComponent", function () { return NxDropdownGroupComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return NxDropdownClosedLabelDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return NxDropdownControl; });
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _allianz_ngx_ndbx_checkbox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @allianz/ngx-ndbx/checkbox */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-checkbox.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @allianz/ngx-ndbx/formfield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an exception to be thrown when attempting to assign a non-array value to a select
             * in `multiselect` mode. Note that `undefined` and `null` are still valid values to allow for
             * resetting the value.
             * \@docs-private
             * @return {?}
             */
            function getNxDropdownNonArrayValueError() {
                return Error('Value must be an array in multiselect mode.');
            }
            /**
             * Returns an exception to be thrown when assigning a non-function value to the comparator
             * used to determine if a value corresponds to an option. Note that whether the function
             * actually takes two values and returns a boolean is not checked.
             * @return {?}
             */
            function getNxDropdownNonFunctionValueError() {
                return Error('`compareWith` must be a function.');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @abstract
             */
            var NxDropdownControl = /** @class */ (function (_super) {
                __extends(NxDropdownControl, _super);
                function NxDropdownControl() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    /**
                     * Whether the dropdown should allow multi selection and additional checkboxes are shown.
                     *
                     * Note: Please make sure the value you bind is an array. If not an error is thrown!
                     */
                    _this.isMultiSelect = false;
                    return _this;
                }
                return NxDropdownControl;
            }(_allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_8__["NxFormfieldControl"]));
            NxDropdownControl.propDecorators = {
                isMultiSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxIsMultiselect',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDropdownGroupComponent = /** @class */ (function () {
                function NxDropdownGroupComponent() {
                }
                return NxDropdownGroupComponent;
            }());
            NxDropdownGroupComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Component"], args: [{
                            selector: 'nx-dropdown-group',
                            template: "<div class=\"nx-dropdown-results__group\">\n  <div class=\"nx-dropdown-results__group-label\">{{label}}</div>\n  <ng-content></ng-content>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{display:block}:host:first-child .nx-dropdown-results__group{background-color:rgba(236,236,236,.5)}:host:first-child .nx-dropdown-results__group-label{padding-top:16px}.nx-dropdown-results__group-label{font-style:italic;padding:24px 32px 16px;font-weight:700;font-size:12px;line-height:16px}"]
                        }] }
            ];
            NxDropdownGroupComponent.propDecorators = {
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxLabel',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDropdownItemChange = /** @class */ (function () {
                /**
                 * @param {?} item
                 * @param {?=} isUserInput
                 */
                function NxDropdownItemChange(item, isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.item = item;
                    this.isUserInput = isUserInput;
                }
                return NxDropdownItemChange;
            }());
            /**
             * the unique id counter
             * @type {?}
             */
            var nextId = 0;
            var NxDropdownItemComponent = /** @class */ (function () {
                /**
                 * @param {?} _dropdown
                 * @param {?} group
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 */
                function NxDropdownItemComponent(_dropdown, group, _changeDetectorRef, _elementRef) {
                    var _this = this;
                    this._dropdown = _dropdown;
                    this.group = group;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    this._hidden = false;
                    this._mostRecentViewValue = '';
                    this._id = "nx-dropdown-item-" + nextId++;
                    this._selected = false;
                    /**
                     * Emits whenever the component is destroyed.
                     */
                    this._destroy = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Event emitted when the option is selected or deselected.
                     */
                    // tslint:disable-next-line:no-output-on-prefix
                    this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_11__["EventEmitter"]();
                    /**
                     * Emits when the state of the option changes and any parents have to be notified.
                     */
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    (( /** @type {?} */(this._dropdown))).filterChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) {
                        _this._showOrHideByFilter(value);
                    }));
                    // reset the hidden state when dropdown closes that on next open the user is seeing the full list again
                    (( /** @type {?} */(this._dropdown)))._closedStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._hidden = false;
                    }));
                }
                Object.defineProperty(NxDropdownItemComponent.prototype, "id", {
                    /**
                     * The unique ID of the option.
                     * @return {?}
                     */
                    get: function () { return this._id; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "selected", {
                    /**
                     * Whether the item is selected.
                     * @return {?}
                     */
                    get: function () {
                        return this._selected;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "active", {
                    /**
                     * Whether the item is active.
                     * @return {?}
                     */
                    get: function () {
                        return this._active;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "multiselect", {
                    /**
                     * \@docs-private
                     * Whether the parent dropdown is in multiselect mode.
                     * @return {?}
                     */
                    get: function () {
                        return this._dropdown && this._dropdown.isMultiSelect;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.ngAfterViewChecked = function () {
                    // Since the parent dropdown component could be using the item's label to display the selected values
                    // and it doesn't have a way of knowing if the item's label has changed
                    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
                    // relatively cheap, however we still limit them only to selected options in order to avoid
                    // hitting the DOM too often.
                    if (this._selected) {
                        /** @type {?} */
                        var viewValue = this.viewValue;
                        if (viewValue !== this._mostRecentViewValue) {
                            this._mostRecentViewValue = viewValue;
                            this._stateChanges.next();
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                    this._destroy.next();
                    this._destroy.complete();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._onClick = function (event) {
                    /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */
                    event.preventDefault();
                    event.stopPropagation();
                    this._selectViaInteraction();
                };
                /**
                 * `Selects the option while indicating the selection came from the user. Used to
                 * determine if the select's view -> model callback should be invoked.`
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._selectViaInteraction = function () {
                    this._selected = this.multiselect ? !this._selected : true;
                    this._changeDetectorRef.markForCheck();
                    this._emitSelectionChangeEvent(true);
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.show = function () {
                    this._hidden = false;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.hide = function () {
                    this._hidden = true;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * @private
                 * @param {?} search
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._showOrHideByFilter = function (search) {
                    /** @type {?} */
                    var constraint = (( /** @type {?} */(this._dropdown))).filterFn(search, this.viewValue);
                    this._hidden = constraint ? false : true;
                    this._changeDetectorRef.markForCheck();
                };
                Object.defineProperty(NxDropdownItemComponent.prototype, "_formattedValue", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (( /** @type {?} */(this._dropdown))).valueFormatter(this.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "viewValue", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return (this._elementRef.nativeElement.textContent || '').trim();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.select = function () {
                    if (!this._selected) {
                        this._selected = true;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.deselect = function () {
                    if (this._selected) {
                        this._selected = false;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                /**
                 * @private
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._emitSelectionChangeEvent = function (isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.setActiveStyles = function () {
                    this._active = true;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.setInactiveStyles = function () {
                    this._active = false;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.getLabel = function () {
                    return this.value;
                };
                /**
                 * @param {?} element
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._isContentEmpty = function (element) {
                    return element.children.length === 0 && !element.textContent.trim();
                };
                /**
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._onLabelChange = function () {
                    // trigger change detection when the label content changes for the case that ng-content was empty before.
                    // this is also important when the label comes in deferred, e.g. by a delayed observable,
                    // then first the default label derived from the value is shown
                    // and after the value from the async observable is ready we need to trigger change detection that the derived label
                    // gets hidden again.
                    // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone
                    // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly
                    this._changeDetectorRef.detectChanges();
                };
                return NxDropdownItemComponent;
            }());
            NxDropdownItemComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Component"], args: [{
                            selector: 'nx-dropdown-item',
                            template: "<div #container class=\"nx-dropdown-results__option\"\n     [ngClass]=\"{'nx-dropdown-results__option--selected': selected}\">\n\n   <nx-checkbox *ngIf=\"multiselect\" [checked]=\"selected\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </nx-checkbox>\n\n    <span *ngIf=\"!multiselect\" class=\"nx-dropdown-results__option-checkicon\">\n       <nx-icon name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <ng-container *ngIf=\"!multiselect\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </ng-container>\n</div>\n\n<ng-template #contentTemplate>\n  <div class=\"nx-dropdown-results__option-label\" >\n    <span #content (cdkObserveContent)=\"_onLabelChange()\">\n      <ng-content></ng-content>\n    </span>\n    <ng-container *ngIf=\"_isContentEmpty(content)\">\n      {{_formattedValue}}\n    </ng-container>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[id]': 'id',
                                'role': 'option',
                                '[attr.aria-selected]': 'selected.toString()',
                                '[class.nx-hidden]': '_hidden',
                                '[class.nx-dropdown-item--active]': 'active',
                                '[class.nx-selected]': 'selected',
                                '[class.nx-multiselect]': 'multiselect',
                                '(click)': '_onClick($event)'
                            },
                            styles: [":host{display:block}:host(.nx-hidden){display:none}:host:first-child .nx-dropdown-results__option{padding-top:16px}nx-checkbox{margin-bottom:0}.nx-dropdown-results__option{font-size:20px;line-height:28px;letter-spacing:.2px;padding:0 32px 16px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}.nx-dropdown-results__option-label{overflow:hidden;text-overflow:ellipsis;padding:0 12px;margin:0 -12px}:host(.nx-multiselect) .nx-dropdown-results__option{display:block;padding-left:32px}:host(.nx-multiselect) ::ng-deep .nx-checkbox__label{height:28px;display:flex;align-items:center}:host(.nx-dropdown-item--active),:host:hover{color:#007ab3}@media screen and (-ms-high-contrast:active){:host(.nx-dropdown-item--active),:host:hover{color:highlightText}}:host(.nx-selected) .nx-dropdown-results__option-checkicon{opacity:1}.nx-dropdown-results__option-checkicon{opacity:0;width:16px;height:16px;margin-right:8px}.nx-dropdown-results__option-checkicon nx-icon{font-size:16px}:host-context([data-whatinput=keyboard]).nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host-context([data-whatinput=keyboard]).nx-multiselect.nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:none}:host-context([data-whatinput=keyboard]).nx-multiselect.nx-dropdown-item--active ::ng-deep .nx-checkbox__label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:24px;margin-left:-24px}:host ::ng-deep .nx-checkbox__label{padding:0 4px;margin:0 -4px}"]
                        }] }
            ];
            /** @nocollapse */
            NxDropdownItemComponent.ctorParameters = function () { return [
                { type: NxDropdownControl, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Inject"], args: [NxDropdownControl,] }] },
                { type: NxDropdownGroupComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ElementRef"] }
            ]; };
            NxDropdownItemComponent.propDecorators = {
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxValue',] }],
                onSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Output"] }],
                containerElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewChild"], args: ['container',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // This Directive solely purpose is to mark given ng-template and project it into the required destination.
            var NxDropdownClosedLabelDirective = /** @class */ (function () {
                /**
                 * @param {?} templateRef
                 */
                function NxDropdownClosedLabelDirective(templateRef) {
                    this.templateRef = templateRef;
                }
                return NxDropdownClosedLabelDirective;
            }());
            NxDropdownClosedLabelDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Directive"], args: [{
                            selector: '[nxClosedLabel]'
                        },] }
            ];
            /** @nocollapse */
            NxDropdownClosedLabelDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Change event object that is emitted when the select value has changed.
             * @template T
             */
            var NxDropdownSelectChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} value
                 */
                function NxDropdownSelectChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return NxDropdownSelectChange;
            }());
            // used in calculation of scrolltop to correctly show some space to the top of the panel
            /** @type {?} */
            var itemPadding = 16;
            // Max-height: 6 items x 44px + 16px padding before first item
            /** @type {?} */
            var SELECT_PANEL_MAX_HEIGHT = 280;
            var NxDropdownComponent = /** @class */ (function (_super) {
                __extends(NxDropdownComponent, _super);
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 * @param {?} tabIndex
                 * @param {?} formFieldComponent
                 * @param {?} ngControl
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 */
                function NxDropdownComponent(_changeDetectorRef, _elementRef, _ngZone, tabIndex, formFieldComponent, ngControl, _parentForm, _parentFormGroup) {
                    var _this = _super.call(this) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._elementRef = _elementRef;
                    _this._ngZone = _ngZone;
                    _this.formFieldComponent = formFieldComponent;
                    _this.ngControl = ngControl;
                    _this._parentForm = _parentForm;
                    _this._parentFormGroup = _parentFormGroup;
                    // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here
                    _this.readonly = false;
                    _this._disabled = false;
                    _this._focused = false;
                    /**
                     * Whether or not the overlay panel is open.
                     */
                    _this._panelOpen = false;
                    /**
                     * \@docs-private
                     */
                    _this.errorState = false;
                    /**
                     * The scroltop of the panelBody.
                     */
                    _this._scrollTop = 0;
                    /**
                     * The minimal space between the viewport and the overlay
                     */
                    _this._overlayViewportMargin = 16;
                    /**
                     * \@docs-private
                     * Emits when internal state changes to inform formfield about it.
                     */
                    _this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * The IDs of child options to be passed to the aria-owns attribute.
                     */
                    _this._optionIds = '';
                    _this._tabIndex = 0;
                    /**
                     * \@docs-private
                     */
                    _this.currentFilter = '';
                    /**
                     * Label to describe the component.
                     */
                    _this._ariaLabel = '';
                    _this._style = '';
                    /**
                     * Whether the dropdown should render in its negative style or not.
                     */
                    _this._negative = false;
                    /**
                     * Whether the dropdown should be shown with an additional filter input.
                     */
                    _this.showFilter = false;
                    /**
                     * Text displayed as placeholder for the filter.
                     */
                    _this.filterPlaceholder = '';
                    /**
                     * Event emitted when the select panel has been toggled.
                     */
                    _this.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_11__["EventEmitter"]();
                    /**
                     * Event emitted when the select has been opened.
                     */
                    _this._openedStream = _this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                     * @param {?} o
                     * @return {?}
                     */function (/**
                     * @param {?} o
                     * @return {?}
                     */ o) { return o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["map"])(( /**
                     * @return {?}
                     */function () { })));
                    /**
                     * Event emitted when the select has been closed.
                     */
                    _this._closedStream = _this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(( /**
                     * @param {?} o
                     * @return {?}
                     */function (/**
                     * @param {?} o
                     * @return {?}
                     */ o) { return !o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["map"])(( /**
                     * @return {?}
                     */function () { })));
                    /**
                     * Event emitted when the user types in the filter input.
                     */
                    _this.filterChanges = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Event that emits whenever the raw value of the select changes. This is here primarily
                     * to facilitate the two-way binding for the `value` input.
                     * \@docs-private
                     */
                    _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_11__["EventEmitter"]();
                    /**
                     * Event emitted when the selected value has been changed.
                     */
                    _this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_11__["EventEmitter"]();
                    /**
                     * \@docs-private
                     */
                    _this.optionSelectionChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["defer"])(( /**
                     * @return {?}
                     */function () {
                        if (_this.options) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"]).apply(void 0, __spread(_this.options.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.onSelectionChange; }))));
                        }
                        return _this._ngZone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["switchMap"])(( /**
                     * @return {?}
                     */function () { return _this.optionSelectionChanges; })));
                    }));
                    /**
                     * This position config ensures that the top "start" corner of the overlay
                     * is aligned with with the top "start" of the origin by default (overlapping
                     * the trigger completely). If the panel cannot fit below the trigger, it
                     * will fall back to a position above the trigger.
                     */
                    _this._positions = [{
                            originX: 'start',
                            originY: 'top',
                            overlayX: 'start',
                            overlayY: 'top'
                        }, {
                            originX: 'start',
                            originY: 'center',
                            overlayX: 'start',
                            overlayY: 'center'
                        }, {
                            originX: 'start',
                            originY: 'bottom',
                            overlayX: 'start',
                            overlayY: 'bottom'
                        }];
                    /**
                     * Emits whenever the component is destroyed.
                     */
                    _this._destroy = new rxjs__WEBPACK_IMPORTED_MODULE_9__["Subject"]();
                    /**
                     * Function that transforms the value into a string.
                     * This function is used for displaying and filtering the content
                     * ( Default: (value) => value ? value.toString() : null; ).
                     */
                    _this.valueFormatter = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) {
                        return value == null ? '' : value.toString();
                    });
                    /**
                     * Comparison function to specify which option is displayed. Defaults to object equality.
                     */
                    _this._compareWith = ( /**
                     * @param {?} o1
                     * @param {?} o2
                     * @return {?}
                     */function (o1, o2) { return o1 === o2; });
                    _this._filterFn = ( /**
                     * @param {?} search
                     * @param {?} itemValue
                     * @return {?}
                     */function (search, itemValue) {
                        return itemValue.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) >= 0;
                    });
                    /**
                     * `View -> model callback called when value changes`
                     */
                    _this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * `View -> model callback called when select has been touched`
                     */
                    _this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    if (_this.ngControl) {
                        // Note: we provide the value accessor through here, instead of
                        // the `providers` to avoid running into a circular import.
                        _this.ngControl.valueAccessor = _this;
                    }
                    _this.tabIndex = parseInt(tabIndex, 10) || 0;
                    return _this;
                }
                Object.defineProperty(NxDropdownComponent.prototype, "tabIndex", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.disabled ? -1 : this._tabIndex; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        // If the specified tabIndex value is null or undefined, fall back to the default value.
                        this._tabIndex = value != null ? value : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "value", {
                    /**
                     * Selected value
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (newValue !== this._value) {
                            this.writeValue(newValue);
                            this._value = newValue;
                            this._onChange(newValue);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "disabled", {
                    /**
                     * Whether the dropdown is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "styles", {
                    /**
                     * If set to 'negative', the component is displayed with the negative set of styles.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._style === value) {
                            return;
                        }
                        this._style = value;
                        this._negative = !!this._style.match(/negative/);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "closedDropdownLabel", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._closedDropdownLabel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "selected", {
                    /**
                     * \@docs-private
                     * The currently selected option.
                     * @return {?}
                     */
                    get: function () {
                        return this.isMultiSelect ? this._selectionModel.selected : this._selectionModel.selected[0];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "panelOpen", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._panelOpen;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._panelOpen = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "label", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.formFieldComponent ? this.formFieldComponent.label : '';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "compareWith", {
                    /**
                     * Function to compare the option values with the selected values. The first argument
                     * is a value from an option. The second is a value from the selection. A boolean
                     * should be returned.
                     * @return {?}
                     */
                    get: function () { return this._compareWith; },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (typeof fn !== 'function') {
                            throw getNxDropdownNonFunctionValueError();
                        }
                        this._compareWith = fn;
                        if (this._selectionModel) {
                            // A different comparator means the selection could change.
                            this._initializeSelection();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "filterFn", {
                    /**
                     * Function to be used when the user types into the search filter. The first argument is the user input,
                     * the second argument is the dropdown item value. The dropdown items will use this function to set their
                     * visibility state.
                     * A boolean should be returned.
                     * @return {?}
                     */
                    get: function () { return this._filterFn; },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (typeof fn !== 'function') {
                            throw getNxDropdownNonFunctionValueError();
                        }
                        this._filterFn = fn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "focused", {
                    /**
                     * \@docs-private
                     * Whether the select is focused.
                     * @return {?}
                     */
                    get: function () {
                        return this._focused || this.panelOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "elementRef", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxDropdownComponent.prototype.ngDoCheck = function () {
                    if (this.ngControl) {
                        this.updateErrorState();
                    }
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent.prototype.ngOnInit = function () {
                    this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__["SelectionModel"](this.isMultiSelect);
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._closedDropdownLabel =
                        this._customClosedDropdownLabel && this._customClosedDropdownLabel.templateRef || this._defaultClosedDropdownLabel;
                    this._initKeyManager();
                    this._selectionModel.onChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        event.added.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.select(); }));
                        event.removed.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.deselect(); }));
                    }));
                    this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._resetOptions();
                        _this._initializeSelection();
                    }));
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent.prototype.ngOnDestroy = function () {
                    this._destroy.next();
                    this._destroy.complete();
                };
                /**
                 * \@docs-private
                 * @param {?} control
                 * @param {?} form
                 * @return {?}
                 */
                NxDropdownComponent.prototype.isErrorState = function (control, form) {
                    return !!(control && control.invalid && (control.touched || (form && form.submitted)));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownComponent.prototype.updateErrorState = function () {
                    /** @type {?} */
                    var oldState = this.errorState;
                    /** @type {?} */
                    var parent = this._parentFormGroup || this._parentForm;
                    /** @type {?} */
                    var control = this.ngControl ? ( /** @type {?} */(this.ngControl.control)) : null;
                    /** @type {?} */
                    var newState = this.isErrorState(control, parent);
                    if (newState !== oldState) {
                        this.errorState = newState;
                        this.stateChanges.next();
                    }
                };
                /**
                 * Sets up a key manager to listen to keyboard events on the overlay panel.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._initKeyManager = function () {
                    var _this = this;
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["ActiveDescendantKeyManager"](this.options)
                        .withTypeAhead()
                        .withWrap()
                        .withVerticalOrientation()
                        .withHorizontalOrientation('ltr')
                        .skipPredicate(( /**
                 * @param {?} item
                 * @return {?}
                 */function (/**
                 * @param {?} item
                 * @return {?}
                 */ item) { return item._hidden; }));
                    this._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        // Restore focus to the trigger before closing. Ensures that the focus
                        // position won't be lost if the user got focus into the overlay.
                        _this.closePanel();
                    }));
                    this._keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        if (_this._panelOpen && _this.panel) {
                            // Delay the auto scrolling until all items have settled otherwise the item containers might
                            // not exist yet
                            _this._ngZone.onStable
                                .asObservable()
                                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () { return _this._scrollActiveOptionIntoView(); }));
                        }
                        else if (!_this._panelOpen && !_this.isMultiSelect && _this._keyManager.activeItem) {
                            _this._keyManager.activeItem._selectViaInteraction();
                        }
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._resetOptions = function () {
                    var _this = this;
                    /** @type {?} */
                    var changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"])(this.options.changes, this._destroy);
                    this.optionSelectionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(changedOrDestroyed)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this._onSelect(event.item, event.isUserInput);
                        if (event.isUserInput && !_this.isMultiSelect && _this._panelOpen) {
                            _this.closePanel();
                        }
                    }));
                    // Listen to changes in the internal state of the options and react accordingly.
                    // Handles cases like the labels of the selected options changing.
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_9__["merge"]).apply(void 0, __spread(this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._stateChanges; })))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(changedOrDestroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        // defer it for the next cycle to not run in changed after checked errors
                        // the combination of dropdown-item notifying parent and when the parent
                        // tries to fetch the triggerValue from the child throws these errors
                        setTimeout(( /**
                         * @return {?}
                         */function () {
                            _this._changeDetectorRef.markForCheck();
                            _this.stateChanges.next();
                        }));
                    }));
                    this._setOptionIds();
                };
                /**
                 * Records option IDs to pass to the aria-owns property.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._setOptionIds = function () {
                    this._optionIds = this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option.id; })).join(' ');
                };
                /**
                 * Invoked when an option is clicked.
                 * @private
                 * @param {?} option
                 * @param {?} isUserInput
                 * @return {?}
                 */
                NxDropdownComponent.prototype._onSelect = function (option, isUserInput) {
                    /** @type {?} */
                    var wasSelected = this._selectionModel.isSelected(option);
                    if (option.value == null && !this.isMultiSelect) {
                        option.deselect();
                        this._selectionModel.clear();
                        this._propagateChanges(option.value);
                    }
                    else {
                        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);
                        if (isUserInput) {
                            this._keyManager.setActiveItem(option);
                        }
                        if (this.isMultiSelect) {
                            this._sortValues();
                            if (isUserInput) {
                                // In case the user selected the option with their mouse, we
                                // want to restore focus back to the trigger, in order to
                                // prevent the select keyboard controls from clashing with
                                // the ones from `mat-option`.
                                this.focus();
                            }
                        }
                    }
                    if (wasSelected !== this._selectionModel.isSelected(option)) {
                        this._propagateChanges();
                    }
                    this.stateChanges.next();
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._initializeSelection = function () {
                    var _this = this;
                    // Defer setting the value in order to avoid the "Expression
                    // has changed after it was checked" errors from Angular.
                    Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);
                    }));
                };
                /**
                 * Sets the selected option based on a value. If no option can be
                 * found with the designated value, the select trigger is cleared.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxDropdownComponent.prototype._setSelectionByValue = function (value) {
                    var _this = this;
                    if (this.isMultiSelect && value) {
                        if (!Array.isArray(value)) {
                            throw getNxDropdownNonArrayValueError();
                        }
                        this._selectionModel.clear();
                        value.forEach(( /**
                         * @param {?} currentValue
                         * @return {?}
                         */function (currentValue) { return _this._selectValue(currentValue); }));
                        this._sortValues();
                    }
                    else {
                        this._selectionModel.clear();
                        /** @type {?} */
                        var correspondingOption = this._selectValue(value);
                        // Shift focus to the active item. Note that we shouldn't do this in multiple
                        // mode, because we don't know what option the user interacted with last.
                        if (correspondingOption) {
                            this._keyManager.setActiveItem(correspondingOption);
                        }
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Finds and selects and option based on its value.
                 * @private
                 * @param {?} value
                 * @return {?} Option that has the corresponding value.
                 */
                NxDropdownComponent.prototype._selectValue = function (value) {
                    var _this = this;
                    /** @type {?} */
                    var correspondingOption = this.options.find(( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) {
                        try {
                            // Treat null as a special reset value.
                            return option.value != null && _this._compareWith(option.value, value);
                        }
                        catch (error) {
                            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_11__["isDevMode"])()) {
                                // Notify developers of errors in their comparator.
                                console.warn(error);
                            }
                            return false;
                        }
                    }));
                    if (correspondingOption) {
                        this._selectionModel.select(correspondingOption);
                    }
                    return correspondingOption;
                };
                /**
                 * Emits change event to set the model value.
                 * @private
                 * @param {?=} fallbackValue
                 * @return {?}
                 */
                NxDropdownComponent.prototype._propagateChanges = function (fallbackValue) {
                    /** @type {?} */
                    var valueToEmit = null;
                    if (this.isMultiSelect) {
                        valueToEmit = (( /** @type {?} */(this.selected))).map(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.value; }));
                    }
                    else {
                        valueToEmit = this.selected ? (( /** @type {?} */(this.selected))).value : fallbackValue;
                    }
                    this._value = valueToEmit;
                    this.valueChange.emit(valueToEmit);
                    this._onChange(valueToEmit);
                    this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Sorts the selected values in the selected based on their order in the panel.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._sortValues = function () {
                    if (this.isMultiSelect) {
                        /** @type {?} */
                        var options_1 = this.options.toArray();
                        this._selectionModel.sort(( /**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */function (a, b) { return options_1.indexOf(a) - options_1.indexOf(b); }));
                        this.stateChanges.next();
                    }
                };
                /**
                 * Focuses the select element.
                 * @return {?}
                 */
                NxDropdownComponent.prototype.focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                /**
                 * Opens the panel of the dropdown.
                 * @return {?}
                 */
                NxDropdownComponent.prototype.openPanel = function () {
                    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
                        return;
                    }
                    this._panelOpen = true;
                    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();
                    this._keyManager.withHorizontalOrientation(null);
                    this._highlightCorrectOption();
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Closes the panel of the dropdown.
                 * @return {?}
                 */
                NxDropdownComponent.prototype.closePanel = function () {
                    var _this = this;
                    if (this._panelOpen) {
                        this._panelOpen = false;
                        this._keyManager.withHorizontalOrientation('ltr');
                        this._changeDetectorRef.markForCheck();
                        this._onTouched();
                        this.openedChange.emit(false);
                        // defer the focus if the dropdown triggers actions that detach
                        // a template/view from the DOM to prevent changed after checked errors
                        setTimeout(( /**
                         * @return {?}
                         */function () { return _this.focus(); }));
                    }
                };
                // calculate inital scrollTop when the dropdown opens
                // scrolls the selected item to the middle of the panel if possible
                /**
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._calculateScrollTop = function () {
                    // reset the scrolltop to make calculation easier
                    this.panelBody.nativeElement.scrollTop = 0;
                    this._scrollTop = 0;
                    if (!this.empty) {
                        /** @type {?} */
                        var offset = this._getItemOffset(this._keyManager.activeItem);
                        /** @type {?} */
                        var panelHeight = this.panelBody.nativeElement.offsetHeight;
                        /** @type {?} */
                        var panelRect = this.panelBody.nativeElement.getBoundingClientRect();
                        /** @type {?} */
                        var middleOfPanel = panelRect.top + panelHeight / 2;
                        /** @type {?} */
                        var activeItemRect = this._keyManager.activeItem.containerElement.nativeElement.getBoundingClientRect();
                        if (offset > middleOfPanel) {
                            // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our
                            // target position for the item and subtract it from the offset (which is now always relative to the viewport)
                            // to middle out the text a bit more add half of the height
                            // (this is still a few pixels off because the container is a bit larger than the font)
                            this._scrollTop = offset - middleOfPanel + (activeItemRect.height - itemPadding) / 2;
                            this.panelBody.nativeElement.scrollTop = this._scrollTop;
                        }
                    }
                };
                /**
                 * Scrolls the active option into view.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._scrollActiveOptionIntoView = function () {
                    if (!this.panelOpen || !this._keyManager.activeItem) {
                        return;
                    }
                    /** @type {?} */
                    var activeOptionIndex = this._keyManager.activeItemIndex || 0;
                    /** @type {?} */
                    var itemRect = this._keyManager.activeItem.containerElement.nativeElement.getBoundingClientRect();
                    /** @type {?} */
                    var labelCount = this._countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.groups);
                    this.panelBody.nativeElement.scrollTop = this._getOptionScrollPosition(activeOptionIndex + labelCount, itemRect.height, this.panelBody.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);
                };
                /**
                 * @private
                 * @param {?} optionIndex
                 * @param {?} options
                 * @param {?} optionGroups
                 * @return {?}
                 */
                NxDropdownComponent.prototype._countGroupLabelsBeforeOption = function (optionIndex, options, optionGroups) {
                    if (optionGroups.length) {
                        /** @type {?} */
                        var optionsArray = options.toArray();
                        /** @type {?} */
                        var groups = optionGroups.toArray();
                        /** @type {?} */
                        var groupCounter = 0;
                        for (var i = 0; i < optionIndex + 1; i++) {
                            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
                                groupCounter++;
                            }
                        }
                        return groupCounter;
                    }
                    return 0;
                };
                /**
                 * @private
                 * @param {?} optionIndex
                 * @param {?} optionHeight
                 * @param {?} currentScrollPosition
                 * @param {?} panelHeight
                 * @return {?}
                 */
                NxDropdownComponent.prototype._getOptionScrollPosition = function (optionIndex, optionHeight, currentScrollPosition, panelHeight) {
                    /** @type {?} */
                    var optionOffset = optionIndex * optionHeight + itemPadding;
                    if (this.showFilter) {
                        /** @type {?} */
                        var filterHeight = this.panel.nativeElement.querySelector('.nx-dropdown__filter').getBoundingClientRect().height;
                        optionOffset = optionIndex * optionHeight + filterHeight;
                    }
                    if (optionOffset < currentScrollPosition) {
                        return optionOffset;
                    }
                    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
                        return Math.max(0, optionOffset - panelHeight + optionHeight);
                    }
                    return currentScrollPosition;
                };
                /**
                 * @private
                 * @param {?} item
                 * @return {?}
                 */
                NxDropdownComponent.prototype._getItemOffset = function (item) {
                    /** @type {?} */
                    var itemRect = item.containerElement.nativeElement.getBoundingClientRect();
                    return itemRect.top;
                };
                /**
                 * \@docs-private
                 * Formfield Implementation
                 * @param {?} ids
                 * @return {?}
                 */
                NxDropdownComponent.prototype.setDescribedByIds = function (ids) {
                    this.ariaDescribedby = ids.join(' ');
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxDropdownComponent.prototype.setAriaLabel = function (value) {
                    this._ariaLabel = value;
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent.prototype._getAriaLabel = function () {
                    return this._ariaLabel || (this.formFieldComponent ? this.formFieldComponent.label : null);
                };
                Object.defineProperty(NxDropdownComponent.prototype, "empty", {
                    /**
                     * \@docs-private
                     * Whether the select has a value.
                     * @return {?}
                     */
                    get: function () {
                        return !this._selectionModel || this._selectionModel.isEmpty();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "hasValue", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._selectionModel.hasValue();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent.prototype, "shouldLabelFloat", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.focused || !this.empty;
                    },
                    enumerable: true,
                    configurable: true
                });
                /** End Formfield */
                /** ControlValueAccessor */
                /**
                 * Sets the select's value. Part of the ControlValueAccessor interface
                 * required to integrate with Angular's core forms API.
                 *
                 * @param {?} value New value to be written to the model.
                 * @return {?}
                 */
                NxDropdownComponent.prototype.writeValue = function (value) {
                    if (this.options) {
                        this._setSelectionByValue(value);
                    }
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxDropdownComponent.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxDropdownComponent.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * Disables the select. Part of the ControlValueAccessor interface required
                 * to integrate with Angular's core forms API.
                 *
                 * @param {?} isDisabled Sets whether the component is disabled.
                 * @return {?}
                 */
                NxDropdownComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                    this._changeDetectorRef.markForCheck();
                    this.stateChanges.next();
                };
                /**
                 * End ControlValueAccessor
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent.prototype._handleKeydown = function (event) {
                    this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
                };
                /**
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent.prototype._handleClosedKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["UP_ARROW"] ||
                        keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["LEFT_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["RIGHT_ARROW"];
                    /** @type {?} */
                    var isOpenKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ENTER"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["SPACE"];
                    // Open the select on ALT + arrow key to match the native <select>
                    if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {
                        event.preventDefault(); // prevents the page from scrolling down when pressing space
                        this.openPanel();
                    }
                    else if (!this.isMultiSelect && !this.disabled) {
                        this._keyManager.onKeydown(event);
                    }
                };
                /**
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent.prototype._handleOpenKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    // all events other than the listed ones should be ignored or handled in _onFilter()
                    if (!([_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["DOWN_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["UP_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["HOME"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["END"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ENTER"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["LEFT_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["RIGHT_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["SHIFT"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["SPACE"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["TAB"]].indexOf(keyCode) >= 0)) {
                        return;
                    }
                    /** @type {?} */
                    var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["UP_ARROW"];
                    /** @type {?} */
                    var manager = this._keyManager;
                    /** @type {?} */
                    var allHidden = this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._hidden; })).every(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return Boolean(option); }));
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["HOME"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["END"]) {
                        event.preventDefault();
                        keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["HOME"] ? manager.setFirstItemActive() : manager.setLastItemActive();
                    }
                    else if (isArrowKey && event.altKey) {
                        // Close the select on ALT + arrow key to match the native <select>
                        event.preventDefault();
                        this.closePanel();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ENTER"] && manager.activeItem && !allHidden) {
                        event.preventDefault();
                        manager.activeItem._selectViaInteraction();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ENTER"] && allHidden) {
                        event.preventDefault();
                        this.closePanel();
                    }
                    else if (!this.showFilter && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["SPACE"] && manager.activeItem) {
                        event.preventDefault();
                        manager.activeItem._selectViaInteraction();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["TAB"]) {
                        this.closePanel();
                    }
                    else {
                        /** @type {?} */
                        var previouslyFocusedIndex = manager.activeItemIndex;
                        manager.onKeydown(event);
                        if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem &&
                            manager.activeItemIndex !== previouslyFocusedIndex) {
                            manager.activeItem._selectViaInteraction();
                        }
                    }
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxDropdownComponent.prototype.formatValue = function (value) {
                    return this.valueFormatter(value);
                };
                /**
                 * Called when the user types in the filter input
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent.prototype._onFilter = function (event) {
                    event.preventDefault();
                    this.currentFilter = event.target.value;
                    this.filterChanges.next(event.target.value);
                    /** @type {?} */
                    var allHidden = this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._hidden; })).every(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return Boolean(option); }));
                    if (allHidden) {
                        this._keyManager.setActiveItem(null);
                    }
                    else {
                        this._keyManager.setFirstItemActive();
                    }
                };
                Object.defineProperty(NxDropdownComponent.prototype, "triggerValue", {
                    /**
                     * \@docs-private
                     * The value displayed in the trigger.
                     * @return {?}
                     */
                    get: function () {
                        if (this.empty) {
                            return '';
                        }
                        if (this.isMultiSelect) {
                            /** @type {?} */
                            var selectedOptions = this._selectionModel.selected.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.viewValue; }));
                            return selectedOptions.join(', ');
                        }
                        return this._selectionModel.selected[0].viewValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Highlights the selected item. If no option is selected, it will highlight
                 * the first item instead.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._highlightCorrectOption = function () {
                    if (this._keyManager) {
                        if (this.empty) {
                            this._keyManager.setFirstItemActive();
                        }
                        else {
                            this._keyManager.setActiveItem(this._selectionModel.selected[0]);
                        }
                    }
                };
                /**
                 * Callback that is invoked when the overlay panel has been attached.
                 * @return {?}
                 */
                NxDropdownComponent.prototype._onAttached = function () {
                    var _this = this;
                    this._changeDetectorRef.markForCheck();
                    this.overlayDir.positionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.panelBody.nativeElement.focus();
                        if (_this._keyManager.activeItem) {
                            _this._calculateScrollTop();
                        }
                        _this._changeDetectorRef.markForCheck();
                        _this.openedChange.emit(true);
                        if (_this.showFilter) {
                            _this.filterInput.nativeElement.focus();
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent.prototype._onFocus = function () {
                    if (!this.disabled) {
                        this._focused = true;
                        this.stateChanges.next();
                    }
                };
                /**
                 * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
                 * "blur" to the panel when it opens, causing a false positive.
                 * @return {?}
                 */
                NxDropdownComponent.prototype._onBlur = function () {
                    this._focused = false;
                    if (this.filterInput && this.showFilter) {
                        this._clearFilter();
                    }
                    if (!this.disabled && !this.panelOpen) {
                        this._onTouched();
                        this._changeDetectorRef.markForCheck();
                        this.stateChanges.next();
                    }
                };
                Object.defineProperty(NxDropdownComponent.prototype, "isFilterEmpty", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.currentFilter.length === 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownComponent.prototype._clearFilter = function () {
                    this.filterInput.nativeElement.value = '';
                    this.currentFilter = '';
                    this.filterChanges.next('');
                };
                /**
                 * \@docs-private determines the `aria-activedescendant` to be set on the host.
                 * @return {?}
                 */
                NxDropdownComponent.prototype._getAriaActiveDescendant = function () {
                    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {
                        return this._keyManager.activeItem.id;
                    }
                    return null;
                };
                return NxDropdownComponent;
            }(NxDropdownControl));
            NxDropdownComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Component"], args: [{
                            selector: 'nx-dropdown',
                            template: "\n<!-- input and stuff-->\n<div cdkOverlayOrigin\n    #origin=\"cdkOverlayOrigin\"\n    class=\"nx-dropdown__container\"\n    #trigger>\n  <div class=\"nx-dropdown__rendered\">\n    <ng-container *ngTemplateOutlet=\"closedDropdownLabel\"></ng-container>\n  </div>\n  <div class=\"nx-dropdown__icon\">\n    <nx-icon class=\"nx-dropdown__chevron\" name=\"chevron-down\"></nx-icon>\n  </div>\n</div>\n\n<ng-template #defaultClosedDropdownLabel>\n  <div *ngIf=\"triggerValue\">{{ triggerValue }}</div>\n</ng-template>\n\n<!-- overlay -->\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"panelOpen\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width\"\n  [cdkConnectedOverlayFlexibleDimensions]=\"true\"\n  [cdkConnectedOverlayViewportMargin]=\"_overlayViewportMargin\"\n  [cdkConnectedOverlayPush]=\"true\"\n  (backdropClick)=\"closePanel()\"\n  (attach)=\"_onAttached()\"\n  (detach)=\"closePanel()\">\n\n  <div class=\"nx-dropdown__panel\"\n      (keydown)=\"_handleKeydown($event)\"\n      #panel>\n    <div class=\"nx-dropdown__panel-header\" *ngIf=\"label\">\n      {{ label }}\n    </div>\n    \n    <div class=\"nx-dropdown__panel-body\" tabindex=\"-1\" #panelBody role=\"listbox\" [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\" [attr.aria-multiselectable]=\"isMultiSelect\">\n        <div class=\"nx-dropdown__filter\" *ngIf=\"showFilter\">\n          <input class=\"nx-dropdown__filter-input\" [class.is-filled]=\"!isFilterEmpty\"  #filterInput type=\"text\" (input)=\"_onFilter($event)\" [placeholder]=\"filterPlaceholder\">\n          <span class=\"nx-dropdown__filter-icon\" *ngIf=\"!isFilterEmpty\" (click)=\"_clearFilter()\">\n            <nx-icon name=\"close\"></nx-icon>\n          </span>\n        </div>\n        <ng-content></ng-content>\n      </div>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                { provide: NxDropdownControl, useExisting: NxDropdownComponent },
                                { provide: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_8__["NxFormfieldControl"], useExisting: NxDropdownComponent },
                            ],
                            host: {
                                'role': 'button',
                                '[class.nx-dropdown]': 'true',
                                '[class.is-filled]': 'hasValue',
                                '[class.has-focus]': 'focused',
                                '[class.nx-dropdown--negative]': '_negative',
                                '[class.nx-dropdown--disabled]': 'disabled',
                                '[attr.aria-describedby]': 'ariaDescribedby || null',
                                '[attr.aria-required]': 'required',
                                '[attr.aria-label]': '_getAriaLabel()',
                                '[attr.aria-haspopup]': '"listbox"',
                                '[attr.aria-expanded]': 'panelOpen',
                                '[attr.disabled]': 'disabled || null',
                                '[attr.tabindex]': 'tabIndex',
                                '(keydown)': '_handleKeydown($event)',
                                '(focus)': '_onFocus()',
                                '(blur)': '_onBlur()',
                                '(click)': 'openPanel()'
                            },
                            styles: [":host{display:block}:host:focus{outline:0}:host(.nx-dropdown--negative):focus{font-weight:600}:host(.nx-dropdown--negative){color:#fff}.nx-dropdown__container{display:flex;justify-content:flex-end;cursor:pointer}:host(.nx-dropdown--disabled) .nx-dropdown__container{cursor:not-allowed}.nx-dropdown__rendered{flex:1 1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.nx-dropdown__panel{box-shadow:0 2px 4px rgba(65,65,65,.5);border-radius:4px;background-color:#fff;min-width:100%}.nx-dropdown__panel ::ng-deep .nx-checkbox__label{font-size:20px}.nx-dropdown__panel:focus{outline:0}.nx-dropdown__icon{font-size:24px;line-height:1}.nx-dropdown__panel-header{line-height:16px;font-size:12px;padding:8px 24px;background-color:#ececec;border-top-left-radius:4px;border-top-right-radius:4px;z-index:1;font-weight:600}.nx-dropdown__panel-body{max-height:280px;overflow-y:auto;outline:0}.nx-dropdown__filter{position:relative;padding:16px 32px 24px}.nx-dropdown__filter-input{font-size:20px;border:0;border-bottom:1px solid #d9d9d9;color:#414141;width:100%;outline:0;background-color:transparent;font-weight:300}.nx-dropdown__filter-icon{position:absolute;right:32px;top:16px;cursor:pointer}.nx-dropdown__filter-icon nx-icon{font-size:24px}.nx-dropdown__filter-input.is-filled:focus{color:#007ab3;font-weight:600;border-bottom:1px solid #007ab3;overflow:ellipsis}.nx-dropdown__filter-input.is-filled:focus+.nx-dropdown__filter-icon{color:#007ab3}@media screen and (-ms-high-contrast:active){.nx-dropdown__panel{box-shadow:0 0 0 1px windowText}}"]
                        }] }
            ];
            /** @nocollapse */
            NxDropdownComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["NgZone"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Attribute"], args: ['tabindex',] }] },
                { type: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_8__["NxFormfieldComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_7__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_7__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Optional"] }] }
            ]; };
            NxDropdownComponent.propDecorators = {
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"] }],
                _ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxAriaLabel',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxValue',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxDisabled',] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxRequired',] }],
                styles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxStyle',] }],
                showFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxShowFilter',] }],
                filterPlaceholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxFilterPlaceholder',] }],
                openedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Output"] }],
                _openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Output"], args: ['opened',] }],
                _closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Output"], args: ['closed',] }],
                filterChanges: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Output"], args: ['filterInput',] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Output"], args: ['nxValueChange',] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Output"] }],
                panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewChild"], args: ['panel',] }],
                panelBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewChild"], args: ['panelBody',] }],
                trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewChild"], args: ['trigger',] }],
                filterInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewChild"], args: ['filterInput',] }],
                overlayDir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewChild"], args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["CdkConnectedOverlay"],] }],
                options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ContentChildren"], args: [NxDropdownItemComponent, { descendants: true },] }],
                groups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ContentChildren"], args: [NxDropdownGroupComponent,] }],
                _customClosedDropdownLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ContentChild"], args: [NxDropdownClosedLabelDirective,] }],
                _defaultClosedDropdownLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewChild"], args: ['defaultClosedDropdownLabel',] }],
                valueFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['nxValueFormatter',] }],
                compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"] }],
                filterFn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDropdownModule = /** @class */ (function () {
                function NxDropdownModule() {
                }
                return NxDropdownModule;
            }());
            NxDropdownModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                                _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_8__["NxFormfieldModule"],
                                _allianz_ngx_ndbx_checkbox__WEBPACK_IMPORTED_MODULE_2__["NxCheckboxModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"],
                                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["A11yModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__["NxIconModule"],
                                _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__["ObserversModule"]
                            ],
                            declarations: [
                                NxDropdownComponent,
                                NxDropdownItemComponent,
                                NxDropdownGroupComponent,
                                NxDropdownClosedLabelDirective
                            ],
                            exports: [
                                NxDropdownComponent,
                                NxDropdownItemComponent,
                                NxDropdownGroupComponent,
                                NxDropdownClosedLabelDirective
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-dropdown.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js": 
        /*!*******************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js ***!
          \*******************************************************************************/
        /*! exports provided: NxFormfieldErrorDirective, NxFormfieldLabelDirective, NxFormfieldModule, FORMFIELD_DEFAULT_OPTIONS, NxFormfieldComponent, NxFormfieldControl, ɵe, ɵa, ɵb, ɵd, ɵc */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxFormfieldErrorDirective", function () { return NxFormfieldErrorDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxFormfieldLabelDirective", function () { return NxFormfieldLabelDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxFormfieldModule", function () { return NxFormfieldModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FORMFIELD_DEFAULT_OPTIONS", function () { return FORMFIELD_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxFormfieldComponent", function () { return NxFormfieldComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxFormfieldControl", function () { return NxFormfieldControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function () { return NxFormfieldAppendixDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return NxFormfieldHintDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return NxFormfieldNoteDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function () { return NxFormfieldPrefixDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function () { return NxFormfieldSuffixDirective; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @allianz/ngx-ndbx/utils */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var uniqueId = 0;
            var NxFormfieldErrorDirective = /** @class */ (function () {
                function NxFormfieldErrorDirective() {
                    // create a unique id to be used by aria-described-by
                    /**
                     * Sets the id of the formfield error.
                     */
                    this.id = "nx-formfield-error-" + uniqueId++;
                }
                return NxFormfieldErrorDirective;
            }());
            NxFormfieldErrorDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxFormfieldError], [nxError]',
                            host: {
                                role: 'alert',
                                '[attr.id]': 'id'
                            }
                        },] }
            ];
            NxFormfieldErrorDirective.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A directive for passing more complex custom label content.
             */
            var NxFormfieldLabelDirective = /** @class */ (function () {
                function NxFormfieldLabelDirective() {
                }
                return NxFormfieldLabelDirective;
            }());
            NxFormfieldLabelDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-formfield-label'
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var uniqueId$1 = 0;
            // This Directive solely purpose is to mark given ng-content and project it into the required destination.
            var NxFormfieldHintDirective = /** @class */ (function () {
                function NxFormfieldHintDirective() {
                    /**
                     * Sets the id of the formfield hint.
                     */
                    this.id = "nx-formfield-hint-" + uniqueId$1++;
                }
                return NxFormfieldHintDirective;
            }());
            NxFormfieldHintDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxFormfieldHint]',
                            host: {
                                '[attr.id]': 'id'
                            }
                        },] }
            ];
            NxFormfieldHintDirective.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var uniqueId$2 = 0;
            // This Directive solely purpose is to mark given ng-content and project it into the required destination.
            var NxFormfieldNoteDirective = /** @class */ (function () {
                function NxFormfieldNoteDirective() {
                    /**
                     * Sets the id of the formfield note.
                     */
                    this.id = "nx-formfield-note-" + uniqueId$2++;
                }
                return NxFormfieldNoteDirective;
            }());
            NxFormfieldNoteDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxFormfieldNote]',
                            host: {
                                '[attr.id]': 'id'
                            }
                        },] }
            ];
            NxFormfieldNoteDirective.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @abstract
             * @template T
             */
            var NxFormfieldControl = /** @class */ (function () {
                function NxFormfieldControl() {
                }
                return NxFormfieldControl;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // This Directive solely purpose is to mark given ng-content and project it into the required destination.
            var NxFormfieldSuffixDirective = /** @class */ (function () {
                function NxFormfieldSuffixDirective() {
                }
                return NxFormfieldSuffixDirective;
            }());
            NxFormfieldSuffixDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxFormfieldSuffix]'
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // This Directive solely purpose is to mark given ng-content and project it into the required destination.
            var NxFormfieldPrefixDirective = /** @class */ (function () {
                function NxFormfieldPrefixDirective() {
                }
                return NxFormfieldPrefixDirective;
            }());
            NxFormfieldPrefixDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxFormfieldPrefix]'
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var uniqueId$3 = 0;
            // This Directive solely purpose is to mark given ng-content and project it into the required destination.
            var NxFormfieldAppendixDirective = /** @class */ (function () {
                function NxFormfieldAppendixDirective() {
                    /**
                     * Sets the id of the formfield appendix.
                     */
                    this.id = "nx-formfield-appendix-" + uniqueId$3++;
                }
                return NxFormfieldAppendixDirective;
            }());
            NxFormfieldAppendixDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxFormfieldAppendix]',
                            host: {
                                '[attr.id]': 'id'
                            }
                        },] }
            ];
            NxFormfieldAppendixDirective.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var NX_STYLES = {
                'negative': 'nx-formfield--negative'
            };
            /** @type {?} */
            var FORMFIELD_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('FORMFIELD_DEFAULT_OPTIONS');
            var NxFormfieldComponent = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 * @param {?} renderer
                 * @param {?} _changeDetectorRef
                 * @param {?} _defaultOptions
                 */
                function NxFormfieldComponent(elementRef, renderer, _changeDetectorRef, _defaultOptions) {
                    this.elementRef = elementRef;
                    this.renderer = renderer;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._defaultOptions = _defaultOptions;
                    this._styles = '';
                    this._subscriptions = [];
                }
                Object.defineProperty(NxFormfieldComponent.prototype, "floatLabel", {
                    /**
                     * Whether the label should float once the input is focused or filled (auto, default)
                     * or force it to always float with a value of always to simulate a more static form.
                     * @return {?}
                     */
                    get: function () {
                        return this._floatLabel || (this._defaultOptions && this._defaultOptions.nxFloatLabel) || 'auto';
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._floatLabel) {
                            this._floatLabel = value || 'auto';
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxFormfieldComponent.prototype, "styles", {
                    /**
                     * Sets the styling of the formfield.
                     * If 'negative', a negative set of stylings is used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        if (this._styles === value) {
                            return;
                        }
                        /** @type {?} */
                        var classNames = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_2__["getClassNameList"])(value, NX_STYLES);
                        classNames.forEach(( /**
                         * @param {?} classStr
                         * @return {?}
                         */function (/**
                         * @param {?} classStr
                         * @return {?}
                         */ classStr) {
                            _this.renderer.addClass(_this.elementRef.nativeElement, classStr);
                        }));
                        this._styles = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxFormfieldComponent.prototype, "appearance", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._appearance || (this._defaultOptions && this._defaultOptions.appearance) || 'auto';
                    },
                    /**
                     * **NDBX Expert option**
                     *
                     * Sets the appearance of the formfield.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._appearance !== value) {
                            this._appearance = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxFormfieldComponent.prototype, "_shouldAlwaysFloat", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this.floatLabel === 'always';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxFormfieldComponent.prototype, "shouldLabelFloat", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return (this._control.shouldLabelFloat || this._shouldAlwaysFloat);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxFormfieldComponent.prototype, "control", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._control;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxFormfieldComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    /** @type {?} */
                    var subscription;
                    /** @type {?} */
                    var subscriptions = [];
                    this._validateControlChild();
                    // Subscribe to changes in the child control state in order to update the form field UI.
                    subscription = this._control.stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._syncDescribedByIds();
                        _this._changeDetectorRef.markForCheck();
                    }));
                    subscriptions.push(subscription);
                    // Re-validate when the number of hints changes.
                    subscription = this._hintChildren.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._changeDetectorRef.markForCheck();
                    }));
                    subscriptions.push(subscription);
                    // Update the aria-described by when the number of errors changes.
                    subscription = this._errorChildren.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._syncDescribedByIds();
                        _this._changeDetectorRef.markForCheck();
                    }));
                    subscriptions.push(subscription);
                    this._subscriptions = subscriptions;
                };
                /**
                 * @return {?}
                 */
                NxFormfieldComponent.prototype.ngAfterContentChecked = function () {
                    this._validateControlChild();
                };
                /**
                 * @return {?}
                 */
                NxFormfieldComponent.prototype.ngOnDestroy = function () {
                    this._subscriptions.forEach(( /**
                     * @param {?} subscription
                     * @return {?}
                     */function (subscription) { return subscription.unsubscribe(); }));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxFormfieldComponent.prototype.getDisplayedMessage = function () {
                    if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {
                        return 'error';
                    }
                    return 'hint';
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxFormfieldComponent.prototype._syncDescribedByIds = function () {
                    if (this._control) {
                        /** @type {?} */
                        var ids = [];
                        ids = this._noteChildren.map(( /**
                         * @param {?} hint
                         * @return {?}
                         */function (/**
                         * @param {?} hint
                         * @return {?}
                         */ hint) { return hint.id; }));
                        if (this.getDisplayedMessage() === 'hint') {
                            ids = __spread(this._hintChildren.map(( /**
                                 * @param {?} hint
                                 * @return {?}
                                 */function (/**
                                 * @param {?} hint
                                 * @return {?}
                                 */ hint) { return hint.id; })), ids);
                        }
                        else if (this._errorChildren) {
                            ids = __spread(this._errorChildren.map(( /**
                                 * @param {?} error
                                 * @return {?}
                                 */function (/**
                                 * @param {?} error
                                 * @return {?}
                                 */ error) { return error.id; })), ids);
                        }
                        this._control.setDescribedByIds(ids);
                    }
                };
                // Fail if the required control is missing.
                /**
                 * @protected
                 * @return {?}
                 */
                NxFormfieldComponent.prototype._validateControlChild = function () {
                    if (!this._control) {
                        throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxFormfieldComponent.prototype.getConnectedOverlayOrigin = function () {
                    return this._connectionContainerRef || this.elementRef;
                };
                return NxFormfieldComponent;
            }());
            NxFormfieldComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                            selector: 'nx-formfield',
                            template: "<!--\nWe are building the following structure.\n\n+-----------------------------+ +-----------+\n| Prefix |   Input   | Suffix | |  Appendix |\n+-----------------------------+ +-----------+\n|-----------------Border--------------------|\n+-------------------------------------------+\n|                 Hints                     |\n+-------------------------------------------+\n|                                           |\n|                Messages                   |\n|                                           |\n+-------------------------------------------+\n\n-->\n\n<div class=\"nx-formfield__wrapper\">\n\n\n  <!-- Give a flex context to properly align suffix, input & postfix -->\n  <div class=\"nx-formfield__row\"  #connectionContainer>\n    <div class=\"nx-formfield__flexfield\">\n      <div class=\"nx-formfield__prefix\" *ngIf=\"_prefixChildren.length\">\n          <ng-content select=\"[nxFormfieldPrefix]\"></ng-content>\n      </div>\n\n      <div class=\"nx-formfield__input\">\n        <ng-content></ng-content>\n\n        <!-- This handles the floating whole behavior -->\n        <span class=\"nx-formfield__label-holder\">\n          <label\n            class=\"nx-formfield__label\"\n            [attr.aria-owns]=\"_control.id\"\n            [attr.for]=\"_control.id\">\n            <ng-container *ngIf=\"!_labelChild\">\n              {{ label }}\n            </ng-container>\n            <ng-content select=\"nx-formfield-label\"></ng-content>\n          </label>\n        </span>\n      </div>\n\n      <div class=\"nx-formfield__suffix\" *ngIf=\"_suffixChildren.length\">\n          <ng-content select=\"[nxFormfieldSuffix]\"></ng-content>\n      </div>\n    </div>\n\n    <!-- Appendix is similar to a suffix but visibly outside of the input  -->\n    <div class=\"nx-formfield__appendix\" *ngIf=\"_appendixChildren.length\">\n      <ng-content select=\"[nxFormfieldAppendix]\"></ng-content>\n    </div>\n  </div>\n\n  <!-- Space to render the hints below the textfield -->\n  <div class=\"nx-formfield__hints\" *ngIf=\"_hintChildren.length\">\n      <ng-content select=\"[nxFormfieldHint]\"></ng-content>\n  </div>\n\n  <!-- In case we got some additional information we render them below the given input -->\n  <div class=\"nx-formfield__messages\" [ngSwitch]=\"getDisplayedMessage()\">\n    <div *ngSwitchCase=\"'error'\">\n      <ng-content select=\"[nxFormfieldError]\"></ng-content>\n    </div>\n\n    <div *ngSwitchCase=\"'hint'\">\n      <ng-content select=\"[nxFormfieldNote]\"></ng-content>\n    </div>\n  </div>\n</div>\n\n\n",
                            host: {
                                '[class.nx-formfield]': 'true',
                                '[class.is-disabled]': 'this._control.disabled',
                                '[class.is-readonly]': 'this._control.readonly',
                                '[class.is-filled]': 'this._control.empty === false',
                                '[class.is-focused]': 'this._control.focused',
                                '[class.is-floating]': 'this.shouldLabelFloat',
                                '[class.has-error]': 'this._control.errorState',
                                '[class.has-outline]': 'this.appearance === "outline"'
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            styles: [".nx-formfield{display:block;font-size:20px;color:#414141;text-align:left}.nx-formfield__wrapper{padding-bottom:24px}.nx-formfield__input{position:relative;line-height:28px;letter-spacing:.2px;flex:auto;min-width:0}.nx-formfield__label-holder{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;pointer-events:none;z-index:10;top:-16px;padding-top:16px}.nx-formfield__label{color:inherit;display:block;position:absolute;left:0;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;-webkit-transform-origin:0 0;transform-origin:0 0;transition:transform .15s ease-out,font-size .15s ease-out,-webkit-transform .15s ease-out;font-weight:300;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%;letter-spacing:.2px}.nx-formfield__flexfield{display:inline-flex;align-items:flex-end;width:100%;border-bottom:1px solid currentColor;margin-top:16px;padding-bottom:3px}.nx-formfield__row{display:flex;align-items:center;width:100%}.nx-formfield__input textarea[nxInput]{vertical-align:bottom}.nx-formfield__appendix,.nx-formfield__prefix,.nx-formfield__suffix{flex:none;white-space:nowrap;color:#414141;font-weight:600;letter-spacing:.2px}.nx-formfield__appendix nx-icon.nx-icon--auto,.nx-formfield__prefix nx-icon.nx-icon--auto,.nx-formfield__suffix nx-icon.nx-icon--auto{font-size:24px;font-weight:400}.nx-formfield__appendix nx-icon,.nx-formfield__prefix nx-icon,.nx-formfield__suffix nx-icon{display:block;color:#006192;height:24px}.nx-formfield__appendix nx-password-toggle nx-icon,.nx-formfield__prefix nx-password-toggle nx-icon,.nx-formfield__suffix nx-password-toggle nx-icon{color:#414141}.nx-formfield__prefix,.nx-formfield__suffix{line-height:28px;height:28px;display:inline-flex;align-items:center}.nx-formfield__appendix{margin-left:8px;margin-top:16px;display:flex;border-bottom:1px solid transparent;padding-bottom:3px;align-items:center}.nx-formfield__prefix{margin-right:8px}.nx-formfield__suffix{margin-left:8px}.nx-formfield__hints{text-align:right;color:#414141;font-size:12px;line-height:16px;letter-spacing:.5px;padding-top:8px}.nx-formfield__messages{margin-top:4px}.nx-formfield.is-focused .nx-formfield__label{text-overflow:ellipsis;font-weight:600;font-size:12px}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error){color:#006192}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__label{color:#414141}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__flexfield{border-bottom-color:#007ab3}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error).nx-formfield--negative{color:#fff}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) nx-password-toggle nx-icon{color:#007ab3}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__flexfield{border-color:#006192;box-shadow:0 0 0 2px #009de6}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline.has-error .nx-formfield__flexfield{border-color:#dc3149}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline nx-password-toggle nx-icon{color:#007ab3}.nx-formfield.has-outline{font-size:16px;line-height:24px}.nx-formfield.has-outline .nx-formfield__flexfield{border:1px solid #767676;border-radius:4px;margin-top:28px;min-height:40px;align-items:center;padding-bottom:0}.nx-formfield.has-outline .nx-formfield__label{padding-left:7px;padding-right:7px}.nx-formfield.has-outline .nx-formfield__input{margin-top:0;padding-bottom:0;line-height:38px}.nx-formfield.has-outline .nx-formfield__input input[nxInput],.nx-formfield.has-outline .nx-formfield__input textarea[nxInput]{font-weight:400}.nx-formfield.has-outline .nx-formfield__input textarea[nxInput]{min-height:38px;line-height:24px;padding:7px}.nx-formfield.has-outline .nx-formfield__input input[nxInput]{padding-right:7px;padding-left:7px;line-height:normal}.nx-formfield.has-outline nx-dropdown .nx-dropdown__icon{display:flex}.nx-formfield.has-outline nx-dropdown .nx-dropdown__container{padding-left:7px;height:38px}.nx-formfield.has-outline nx-datepicker-toggle .nx-datepicker-toggle-button{padding:0}.nx-formfield.has-outline .nx-formfield__appendix,.nx-formfield.has-outline .nx-formfield__prefix,.nx-formfield.has-outline .nx-formfield__suffix{font-weight:400}.nx-formfield.has-outline .nx-formfield__prefix,.nx-formfield.has-outline .nx-formfield__suffix{height:38px;line-height:38px}.nx-formfield.has-outline .nx-formfield__prefix{margin-left:7px;margin-right:0}.nx-formfield.has-outline .nx-formfield__suffix{margin-right:7px;margin-left:0}.nx-formfield.has-outline .nx-formfield__appendix{margin-left:8px;display:flex;margin-top:28px;border-top:1px solid transparent;border-bottom:1px solid transparent;padding-bottom:0}.nx-formfield.has-outline .nx-formfield__hints{text-align:left;font-size:16px}.nx-formfield.has-outline.is-readonly .nx-formfield__flexfield{border-color:#c2c2c2;background-color:#f5f5f5}.nx-formfield.is-floating .nx-formfield__label{-webkit-transform:translateY(-22px);transform:translateY(-22px);font-size:12px;font-weight:600;letter-spacing:.5px}.nx-formfield.is-floating.has-outline .nx-formfield__label-holder{top:-24px;padding-top:24px}.nx-formfield.is-floating.has-outline .nx-formfield__label{padding-top:0;-webkit-transform:translateX(-8px) translateY(-29px);transform:translateX(-8px) translateY(-29px);font-size:16px;line-height:24px}.nx-formfield.is-floating.has-outline .nx-formfield__prefix~.nx-formfield__input .nx-formfield__label{-webkit-transform:translateY(-29px);transform:translateY(-29px)}.nx-formfield.has-error{color:#dc3149}.nx-formfield.has-error .nx-formfield__label{font-weight:700}.nx-formfield.has-error.is-floating .nx-formfield__label{color:#414141;font-weight:600}.nx-formfield.has-error.has-outline{color:#414141}.nx-formfield.has-error.has-outline .nx-formfield__flexfield{border-color:#dc3149}.nx-formfield.has-error nx-password-toggle nx-icon{color:#dc3149}.nx-formfield.is-disabled{color:#c2c2c2;cursor:not-allowed;-webkit-text-fill-color:#c2c2c2}.nx-formfield.is-disabled .nx-formfield__hints{color:inherit}.nx-formfield.is-disabled .nx-formfield__flexfield{border-bottom-color:#c2c2c2}.nx-formfield.is-disabled.has-outline .nx-formfield__flexfield{border-color:#c2c2c2}.nx-formfield--negative{color:#fff}.nx-formfield--negative .nx-formfield__hints{color:inherit}.nx-formfield--negative.has-outline .nx-formfield__flexfield{border-color:#fff}.nx-formfield--negative nx-password-toggle nx-icon{color:#fff}", ".c-input{text-align:inherit;font-size:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;line-height:28px;height:28px}.c-input::-ms-clear{display:none}.c-input::-webkit-search-cancel-button,.c-input::-webkit-search-decoration,.c-input::-webkit-search-results-button,.c-input::-webkit-search-results-decoration{display:none;-webkit-appearance:none}textarea.c-input{min-height:28px;height:auto;font-family:inherit}.c-input.is-focused{border:none;outline:0;box-shadow:none}.c-input.is-filled{font-weight:600}.c-input.is-disabled{cursor:not-allowed}textarea.nx-input-element{resize:vertical;overflow:auto}.c-input:invalid,.c-input:required{box-shadow:none}"]
                        }] }
            ];
            /** @nocollapse */
            NxFormfieldComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [FORMFIELD_DEFAULT_OPTIONS,] }] }
            ]; };
            NxFormfieldComponent.propDecorators = {
                _control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [NxFormfieldControl,] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxLabel',] }],
                _labelChild: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChild"], args: [NxFormfieldLabelDirective,] }],
                _hintChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [NxFormfieldHintDirective,] }],
                _noteChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [NxFormfieldNoteDirective,] }],
                _errorChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [NxFormfieldErrorDirective,] }],
                _suffixChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [NxFormfieldSuffixDirective,] }],
                _prefixChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [NxFormfieldPrefixDirective,] }],
                _appendixChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [NxFormfieldAppendixDirective,] }],
                _connectionContainerRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['connectionContainer',] }],
                floatLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxFloatLabel',] }],
                styles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxStyle',] }],
                appearance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxFormfieldModule = /** @class */ (function () {
                function NxFormfieldModule() {
                }
                return NxFormfieldModule;
            }());
            NxFormfieldModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"]
                            ],
                            declarations: [
                                NxFormfieldComponent,
                                NxFormfieldHintDirective,
                                NxFormfieldErrorDirective,
                                NxFormfieldNoteDirective,
                                NxFormfieldPrefixDirective,
                                NxFormfieldSuffixDirective,
                                NxFormfieldAppendixDirective,
                                NxFormfieldLabelDirective
                            ],
                            exports: [
                                NxFormfieldComponent,
                                NxFormfieldHintDirective,
                                NxFormfieldErrorDirective,
                                NxFormfieldNoteDirective,
                                NxFormfieldPrefixDirective,
                                NxFormfieldSuffixDirective,
                                NxFormfieldAppendixDirective,
                                NxFormfieldLabelDirective
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-formfield.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-grid.js": 
        /*!**************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-grid.js ***!
          \**************************************************************************/
        /*! exports provided: NxColComponent, NxLayoutComponent, NxRowComponent, NxGridModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxColComponent", function () { return NxColComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxLayoutComponent", function () { return NxLayoutComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRowComponent", function () { return NxRowComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxGridModule", function () { return NxGridModule; });
            /* harmony import */ var _allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/utils */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} value
             * @return {?}
             */
            function isEmptyArray(value) {
                return (value === undefined || value.length === 0);
            }
            /**
             * add space and return mapClassNames (css)
             * @param {?} aux
             * @param {?} map
             * @return {?}
             */
            function addStyles(aux, map) {
                return ' ' + Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])(aux, [], map);
            }
            /**
             * input='small,medium,large'
             *  map = MAPPING
             * @param {?} input
             * @param {?} map
             * @return {?}
             */
            function addStylesFromDimensions(input, map) {
                /** @type {?} */
                var aux = processSplit(input);
                /** @type {?} */
                var output = '';
                if (aux.length >= 1 && aux.length <= 4) {
                    /** @type {?} */
                    var auxTiny = addStyles(aux[0], map).replace('-{tier}', '');
                    /** @type {?} */
                    var auxSmall = '';
                    /** @type {?} */
                    var auxMedium = '';
                    /** @type {?} */
                    var auxLarge = '';
                    switch (aux.length) {
                        case 1:
                            auxSmall = addStyles(aux[0], map).replace('{tier}', 'small');
                            auxMedium = addStyles(aux[0], map).replace('{tier}', 'medium');
                            auxLarge = addStyles(aux[0], map).replace('{tier}', 'large');
                            break;
                        case 2:
                            auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                            auxMedium = addStyles(aux[1], map).replace('{tier}', 'medium');
                            auxLarge = addStyles(aux[1], map).replace('{tier}', 'large');
                            break;
                        case 3:
                            auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                            auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                            auxLarge = addStyles(aux[2], map).replace('{tier}', 'large');
                            break;
                        default:
                            auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                            auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                            auxLarge = addStyles(aux[3], map).replace('{tier}', 'large');
                            break;
                    }
                    output += ' ' + auxTiny.trim() + ' '
                        + auxSmall.trim() + ' '
                        + auxMedium.trim() + ' '
                        + auxLarge.trim();
                }
                return output;
            }
            // Simple split
            /**
             * @param {?} aux
             * @param {?=} char
             * @return {?}
             */
            function processSplit(aux, char) {
                if (char === void 0) { char = ','; }
                return aux.split(char).map(( /**
                 * @param {?} item
                 * @return {?}
                 */function (/**
                 * @param {?} item
                 * @return {?}
                 */ item) { return item.trim(); }));
            }
            /**
             * @param {?} el
             * @param {?} aux
             * @return {?}
             */
            function validateClassInElement(el, aux) {
                return el.hasAttribute(aux);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAPPING = {
                '': 'nx-grid__column-',
                'xs': 'nx-grid__column-',
                'sm': 'nx-grid__column-small-',
                'md': 'nx-grid__column-medium-',
                'lg': 'nx-grid__column-large-'
            };
            /** @type {?} */
            var MAPPING_ALIGN_SELF = {
                'auto': 'nx-align-self-{tier}-auto',
                'start': 'nx-align-self-{tier}-start',
                'end': 'nx-align-self-{tier}-end',
                'center': 'nx-align-self-{tier}-center',
                'baseline': 'nx-align-self-{tier}-baseline',
                'stretch': 'nx-align-self-{tier}-stretch'
            };
            /** @type {?} */
            var MAPPING_ORDER = {
                'first': 'nx-flex-{tier}-first',
                'last': 'nx-flex-{tier}-last',
                'unordered': 'nx-flex-{tier}-unordered',
            };
            /** @type {?} */
            var OFFSET_MAPPING = {
                '': 'nx-grid--offset-',
                'xs': 'nx-grid--offset-',
                'sm': 'nx-grid--offset-small-',
                'md': 'nx-grid--offset-medium-',
                'lg': 'nx-grid--offset-large-'
            };
            /** @type {?} */
            var MIN = 0;
            /** @type {?} */
            var MAX = 12;
            var NxColComponent = /** @class */ (function () {
                /**
                 * @param {?} el
                 */
                function NxColComponent(el) {
                    this.el = el;
                    this._classNames = [];
                    /**
                     * Number of columns used.
                     *
                     * Values: 1 - 12, default value: 12.
                     */
                    this.col = '';
                    /**
                     * The number of columns the column should be offset.
                     *
                     * Values: 1 - 12, default value: 12.
                     */
                    this.offset = '';
                    /**
                     * The alignment for a column inside the flexible container.
                     */
                    this.itemSelf = null;
                    /**
                     * Order of the column within the row.
                     */
                    this.order = null;
                }
                Object.defineProperty(NxColComponent.prototype, "_columnClasses", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames.join(' ').trim();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxColComponent.prototype.ngOnInit = function () {
                    if (validateClassInElement(this.el.nativeElement.parentElement, 'nxRow')) {
                        // create an array of all classes to not worry about the spaces between the classes
                        // in all logic functions all the time :)
                        // gets joined in get _columnClasses()
                        this._classNames = __spread(this._getColClasses(), this._getOffsetClasses(), this._getAlignSelfClasses(), this._getOrderClasses(), this.el.nativeElement.className.split(' '));
                    }
                    else {
                        this.generateError('Exception: NxColDirective. nxRow don\'t exist');
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxColComponent.prototype._getColClasses = function () {
                    /** @type {?} */
                    var columnClasses = this._mapTiers(this.col, [], MAPPING, ['0']);
                    if (columnClasses.length === 0) {
                        this.generateError('Exception: NxColDirective. Empty nxCol attribute.');
                    }
                    return columnClasses;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxColComponent.prototype._getAlignSelfClasses = function () {
                    /** if itemSelf contains values */
                    if (this.itemSelf) {
                        /** Values: auto, start, end, center, baseline, stretch */
                        return addStylesFromDimensions(this.itemSelf, MAPPING_ALIGN_SELF).split(' ');
                    }
                    return [];
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxColComponent.prototype._getOrderClasses = function () {
                    /** if order-flex */
                    if (this.order) {
                        /** Values: first, last or unordered */
                        return addStylesFromDimensions(this.order, MAPPING_ORDER).split(' ');
                    }
                    return [];
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxColComponent.prototype._getOffsetClasses = function () {
                    return this._mapTiers(this.offset, [], OFFSET_MAPPING);
                };
                /**
                 * @private
                 * @param {?} input
                 * @param {?=} defaults
                 * @param {?=} mapping
                 * @param {?=} exclude
                 * @return {?}
                 */
                NxColComponent.prototype._mapTiers = function (input, defaults, mapping, exclude) {
                    /** @type {?} */
                    var givenTiers = processSplit(input);
                    /** @type {?} */
                    var mappedClasses = [];
                    if (input && !isEmptyArray(givenTiers) && this.checkNotAllowedValues(givenTiers, exclude)) {
                        switch (givenTiers.length) {
                            case 1:
                                this.validateInput(givenTiers[0]);
                                mappedClasses = [Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('', defaults, mapping) + givenTiers[0]];
                                break;
                            case 2:
                                this.validateInput(givenTiers[0], givenTiers[1]);
                                mappedClasses = [
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('xs', defaults, mapping) + givenTiers[0],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('sm', defaults, mapping) + givenTiers[1],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('md', defaults, mapping) + givenTiers[1],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('lg', defaults, mapping) + givenTiers[1]
                                ];
                                break;
                            case 3:
                                this.validateInput(givenTiers[0], givenTiers[1], givenTiers[2]);
                                mappedClasses = [
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('xs', defaults, mapping) + givenTiers[0],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('sm', defaults, mapping) + givenTiers[1],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('md', defaults, mapping) + givenTiers[2],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('lg', defaults, mapping) + givenTiers[2]
                                ];
                                break;
                            case 4:
                                this.validateInput(givenTiers[0], givenTiers[1], givenTiers[2], givenTiers[3]);
                                mappedClasses = [
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('xs', defaults, mapping) + givenTiers[0],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('sm', defaults, mapping) + givenTiers[1],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('md', defaults, mapping) + givenTiers[2],
                                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('lg', defaults, mapping) + givenTiers[3]
                                ];
                                break;
                            default:
                                mappedClasses = [Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])('', defaults, mapping) + '12'];
                                break;
                        }
                    }
                    return mappedClasses;
                };
                /**
                 * \@docs-private
                 * @param {?} min
                 * @param {?} max
                 * @param {?} value
                 * @return {?}
                 */
                NxColComponent.prototype.isValueBetween = function (min, max, value) {
                    try {
                        /** @type {?} */
                        var parsed = parseInt(value, 10);
                        return (max >= parsed && min <= parsed);
                    }
                    catch (error) {
                        this.generateError('Exception: NxColDirective. One argument is not number');
                    }
                };
                /**
                 * \@docs-private
                 * @param {?} values
                 * @param {?} excludes
                 * @return {?}
                 */
                NxColComponent.prototype.checkNotAllowedValues = function (values, excludes) {
                    if (!excludes) {
                        return true;
                    }
                    /** @type {?} */
                    var found = values.find(( /**
                     * @param {?} val
                     * @return {?}
                     */function (/**
                     * @param {?} val
                     * @return {?}
                     */ val) { return excludes.indexOf(val) > -1; }));
                    if (found) {
                        this.generateError("Exception: NxColDirective. Incorrect parameter. " + found + " is not allowed here");
                    }
                    return !found;
                };
                /**
                 * \@docs-private
                 * @param {?} err
                 * @return {?}
                 */
                NxColComponent.prototype.generateError = function (err) {
                    throw new Error(err);
                };
                /**
                 * \@docs-private
                 * @param {...?} value
                 * @return {?}
                 */
                NxColComponent.prototype.validateInput = function () {
                    var _this = this;
                    var value = [];
                    for (var _b = 0; _b < arguments.length; _b++) {
                        value[_b] = arguments[_b];
                    }
                    value.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (/**
                     * @param {?} element
                     * @return {?}
                     */ element) {
                        if (!_this.isValueBetween(MIN, MAX, element)) {
                            _this.generateError("Exception: NxColDirective. Incorrect parameters, values must be between " + MIN + " and " + MAX);
                        }
                    }));
                };
                return NxColComponent;
            }());
            NxColComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: '[nxCol]',
                            template: '<ng-content></ng-content>',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class]': '_columnClasses'
                            },
                            styles: [":host(.nx-grid__column),:host(.nx-grid__column-1),:host(.nx-grid__column-10),:host(.nx-grid__column-11),:host(.nx-grid__column-12),:host(.nx-grid__column-2),:host(.nx-grid__column-3),:host(.nx-grid__column-4),:host(.nx-grid__column-5),:host(.nx-grid__column-6),:host(.nx-grid__column-7),:host(.nx-grid__column-8),:host(.nx-grid__column-9),:host(.nx-grid__column-fit),:host(.nx-grid__column-large),:host(.nx-grid__column-large-1),:host(.nx-grid__column-large-10),:host(.nx-grid__column-large-11),:host(.nx-grid__column-large-12),:host(.nx-grid__column-large-2),:host(.nx-grid__column-large-3),:host(.nx-grid__column-large-4),:host(.nx-grid__column-large-5),:host(.nx-grid__column-large-6),:host(.nx-grid__column-large-7),:host(.nx-grid__column-large-8),:host(.nx-grid__column-large-9),:host(.nx-grid__column-large-fit),:host(.nx-grid__column-medium),:host(.nx-grid__column-medium-1),:host(.nx-grid__column-medium-10),:host(.nx-grid__column-medium-11),:host(.nx-grid__column-medium-12),:host(.nx-grid__column-medium-2),:host(.nx-grid__column-medium-3),:host(.nx-grid__column-medium-4),:host(.nx-grid__column-medium-5),:host(.nx-grid__column-medium-6),:host(.nx-grid__column-medium-7),:host(.nx-grid__column-medium-8),:host(.nx-grid__column-medium-9),:host(.nx-grid__column-medium-fit),:host(.nx-grid__column-small),:host(.nx-grid__column-small-1),:host(.nx-grid__column-small-10),:host(.nx-grid__column-small-11),:host(.nx-grid__column-small-12),:host(.nx-grid__column-small-2),:host(.nx-grid__column-small-3),:host(.nx-grid__column-small-4),:host(.nx-grid__column-small-5),:host(.nx-grid__column-small-6),:host(.nx-grid__column-small-7),:host(.nx-grid__column-small-8),:host(.nx-grid__column-small-9),:host(.nx-grid__column-small-fit){position:relative;width:100%;min-height:1px;padding-right:8px;padding-left:8px}:host(.nx-grid__column){flex-basis:0;flex-grow:1;max-width:100%}:host(.nx-grid__column-fit){flex:0 0 auto;width:auto}:host(.nx-grid__column-1){flex:0 0 8.33333%;max-width:8.33333%}:host(.nx-grid__column-2){flex:0 0 16.66667%;max-width:16.66667%}:host(.nx-grid__column-3){flex:0 0 25%;max-width:25%}:host(.nx-grid__column-4){flex:0 0 33.33333%;max-width:33.33333%}:host(.nx-grid__column-5){flex:0 0 41.66667%;max-width:41.66667%}:host(.nx-grid__column-6){flex:0 0 50%;max-width:50%}:host(.nx-grid__column-7){flex:0 0 58.33333%;max-width:58.33333%}:host(.nx-grid__column-8){flex:0 0 66.66667%;max-width:66.66667%}:host(.nx-grid__column-9){flex:0 0 75%;max-width:75%}:host(.nx-grid__column-10){flex:0 0 83.33333%;max-width:83.33333%}:host(.nx-grid__column-11){flex:0 0 91.66667%;max-width:91.66667%}:host(.nx-grid__column-12){flex:0 0 100%;max-width:100%}.pull-0{right:auto}.pull-1{right:8.33333%}.pull-2{right:16.66667%}.pull-3{right:25%}.pull-4{right:33.33333%}.pull-5{right:41.66667%}.pull-6{right:50%}.pull-7{right:58.33333%}.pull-8{right:66.66667%}.pull-9{right:75%}.pull-10{right:83.33333%}.pull-11{right:91.66667%}.pull-12{right:100%}.push-0{left:auto}.push-1{left:8.33333%}.push-2{left:16.66667%}.push-3{left:25%}.push-4{left:33.33333%}.push-5{left:41.66667%}.push-6{left:50%}.push-7{left:58.33333%}.push-8{left:66.66667%}.push-9{left:75%}.push-10{left:83.33333%}.push-11{left:91.66667%}.push-12{left:100%}:host(.nx-grid--offset-1){margin-left:8.33333%}:host(.nx-grid--offset-2){margin-left:16.66667%}:host(.nx-grid--offset-3){margin-left:25%}:host(.nx-grid--offset-4){margin-left:33.33333%}:host(.nx-grid--offset-5){margin-left:41.66667%}:host(.nx-grid--offset-6){margin-left:50%}:host(.nx-grid--offset-7){margin-left:58.33333%}:host(.nx-grid--offset-8){margin-left:66.66667%}:host(.nx-grid--offset-9){margin-left:75%}:host(.nx-grid--offset-10){margin-left:83.33333%}:host(.nx-grid--offset-11){margin-left:91.66667%}:host(.nx-flex-first){order:-1}:host(.nx-flex-last){order:1}:host(.nx-flex-unordered){order:0}:host(.nx-align-self-auto){-ms-grid-row-align:auto!important;align-self:auto!important}:host(.nx-align-self-start){align-self:flex-start!important}:host(.nx-align-self-end){align-self:flex-end!important}:host(.nx-align-self-center){-ms-grid-row-align:center!important;align-self:center!important}:host(.nx-align-self-baseline){align-self:baseline!important}:host(.nx-align-self-stretch){-ms-grid-row-align:stretch!important;align-self:stretch!important}@media (min-width:320px){:host(.nx-grid__column),:host(.nx-grid__column-1),:host(.nx-grid__column-10),:host(.nx-grid__column-11),:host(.nx-grid__column-12),:host(.nx-grid__column-2),:host(.nx-grid__column-3),:host(.nx-grid__column-4),:host(.nx-grid__column-5),:host(.nx-grid__column-6),:host(.nx-grid__column-7),:host(.nx-grid__column-8),:host(.nx-grid__column-9),:host(.nx-grid__column-fit),:host(.nx-grid__column-large),:host(.nx-grid__column-large-1),:host(.nx-grid__column-large-10),:host(.nx-grid__column-large-11),:host(.nx-grid__column-large-12),:host(.nx-grid__column-large-2),:host(.nx-grid__column-large-3),:host(.nx-grid__column-large-4),:host(.nx-grid__column-large-5),:host(.nx-grid__column-large-6),:host(.nx-grid__column-large-7),:host(.nx-grid__column-large-8),:host(.nx-grid__column-large-9),:host(.nx-grid__column-large-fit),:host(.nx-grid__column-medium),:host(.nx-grid__column-medium-1),:host(.nx-grid__column-medium-10),:host(.nx-grid__column-medium-11),:host(.nx-grid__column-medium-12),:host(.nx-grid__column-medium-2),:host(.nx-grid__column-medium-3),:host(.nx-grid__column-medium-4),:host(.nx-grid__column-medium-5),:host(.nx-grid__column-medium-6),:host(.nx-grid__column-medium-7),:host(.nx-grid__column-medium-8),:host(.nx-grid__column-medium-9),:host(.nx-grid__column-medium-fit),:host(.nx-grid__column-small),:host(.nx-grid__column-small-1),:host(.nx-grid__column-small-10),:host(.nx-grid__column-small-11),:host(.nx-grid__column-small-12),:host(.nx-grid__column-small-2),:host(.nx-grid__column-small-3),:host(.nx-grid__column-small-4),:host(.nx-grid__column-small-5),:host(.nx-grid__column-small-6),:host(.nx-grid__column-small-7),:host(.nx-grid__column-small-8),:host(.nx-grid__column-small-9),:host(.nx-grid__column-small-fit){padding-right:8px;padding-left:8px}:host(.nx-grid__column-small){flex-basis:0;flex-grow:1;max-width:100%}:host(.nx-grid__column-small-fit){flex:0 0 auto;width:auto}:host(.nx-grid__column-small-1){flex:0 0 8.33333%;max-width:8.33333%}:host(.nx-grid__column-small-2){flex:0 0 16.66667%;max-width:16.66667%}:host(.nx-grid__column-small-3){flex:0 0 25%;max-width:25%}:host(.nx-grid__column-small-4){flex:0 0 33.33333%;max-width:33.33333%}:host(.nx-grid__column-small-5){flex:0 0 41.66667%;max-width:41.66667%}:host(.nx-grid__column-small-6){flex:0 0 50%;max-width:50%}:host(.nx-grid__column-small-7){flex:0 0 58.33333%;max-width:58.33333%}:host(.nx-grid__column-small-8){flex:0 0 66.66667%;max-width:66.66667%}:host(.nx-grid__column-small-9){flex:0 0 75%;max-width:75%}:host(.nx-grid__column-small-10){flex:0 0 83.33333%;max-width:83.33333%}:host(.nx-grid__column-small-11){flex:0 0 91.66667%;max-width:91.66667%}:host(.nx-grid__column-small-12){flex:0 0 100%;max-width:100%}.pull-small-0{right:auto}.pull-small-1{right:8.33333%}.pull-small-2{right:16.66667%}.pull-small-3{right:25%}.pull-small-4{right:33.33333%}.pull-small-5{right:41.66667%}.pull-small-6{right:50%}.pull-small-7{right:58.33333%}.pull-small-8{right:66.66667%}.pull-small-9{right:75%}.pull-small-10{right:83.33333%}.pull-small-11{right:91.66667%}.pull-small-12{right:100%}.push-small-0{left:auto}.push-small-1{left:8.33333%}.push-small-2{left:16.66667%}.push-small-3{left:25%}.push-small-4{left:33.33333%}.push-small-5{left:41.66667%}.push-small-6{left:50%}.push-small-7{left:58.33333%}.push-small-8{left:66.66667%}.push-small-9{left:75%}.push-small-10{left:83.33333%}.push-small-11{left:91.66667%}.push-small-12{left:100%}:host(.nx-grid--offset-small-0){margin-left:0}:host(.nx-grid--offset-small-1){margin-left:8.33333%}:host(.nx-grid--offset-small-2){margin-left:16.66667%}:host(.nx-grid--offset-small-3){margin-left:25%}:host(.nx-grid--offset-small-4){margin-left:33.33333%}:host(.nx-grid--offset-small-5){margin-left:41.66667%}:host(.nx-grid--offset-small-6){margin-left:50%}:host(.nx-grid--offset-small-7){margin-left:58.33333%}:host(.nx-grid--offset-small-8){margin-left:66.66667%}:host(.nx-grid--offset-small-9){margin-left:75%}:host(.nx-grid--offset-small-10){margin-left:83.33333%}:host(.nx-grid--offset-small-11){margin-left:91.66667%}:host(.nx-flex-small-first){order:-1}:host(.nx-flex-small-last){order:1}:host(.nx-flex-small-unordered){order:0}:host(.nx-align-self-small-auto){-ms-grid-row-align:auto!important;align-self:auto!important}:host(.nx-align-self-small-start){align-self:flex-start!important}:host(.nx-align-self-small-end){align-self:flex-end!important}:host(.nx-align-self-small-center){-ms-grid-row-align:center!important;align-self:center!important}:host(.nx-align-self-small-baseline){align-self:baseline!important}:host(.nx-align-self-small-stretch){-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:704px){:host(.nx-grid__column),:host(.nx-grid__column-1),:host(.nx-grid__column-10),:host(.nx-grid__column-11),:host(.nx-grid__column-12),:host(.nx-grid__column-2),:host(.nx-grid__column-3),:host(.nx-grid__column-4),:host(.nx-grid__column-5),:host(.nx-grid__column-6),:host(.nx-grid__column-7),:host(.nx-grid__column-8),:host(.nx-grid__column-9),:host(.nx-grid__column-fit),:host(.nx-grid__column-large),:host(.nx-grid__column-large-1),:host(.nx-grid__column-large-10),:host(.nx-grid__column-large-11),:host(.nx-grid__column-large-12),:host(.nx-grid__column-large-2),:host(.nx-grid__column-large-3),:host(.nx-grid__column-large-4),:host(.nx-grid__column-large-5),:host(.nx-grid__column-large-6),:host(.nx-grid__column-large-7),:host(.nx-grid__column-large-8),:host(.nx-grid__column-large-9),:host(.nx-grid__column-large-fit),:host(.nx-grid__column-medium),:host(.nx-grid__column-medium-1),:host(.nx-grid__column-medium-10),:host(.nx-grid__column-medium-11),:host(.nx-grid__column-medium-12),:host(.nx-grid__column-medium-2),:host(.nx-grid__column-medium-3),:host(.nx-grid__column-medium-4),:host(.nx-grid__column-medium-5),:host(.nx-grid__column-medium-6),:host(.nx-grid__column-medium-7),:host(.nx-grid__column-medium-8),:host(.nx-grid__column-medium-9),:host(.nx-grid__column-medium-fit),:host(.nx-grid__column-small),:host(.nx-grid__column-small-1),:host(.nx-grid__column-small-10),:host(.nx-grid__column-small-11),:host(.nx-grid__column-small-12),:host(.nx-grid__column-small-2),:host(.nx-grid__column-small-3),:host(.nx-grid__column-small-4),:host(.nx-grid__column-small-5),:host(.nx-grid__column-small-6),:host(.nx-grid__column-small-7),:host(.nx-grid__column-small-8),:host(.nx-grid__column-small-9),:host(.nx-grid__column-small-fit){padding-right:16px;padding-left:16px}:host(.nx-grid__column-medium){flex-basis:0;flex-grow:1;max-width:100%}:host(.nx-grid__column-medium-fit){flex:0 0 auto;width:auto}:host(.nx-grid__column-medium-1){flex:0 0 8.33333%;max-width:8.33333%}:host(.nx-grid__column-medium-2){flex:0 0 16.66667%;max-width:16.66667%}:host(.nx-grid__column-medium-3){flex:0 0 25%;max-width:25%}:host(.nx-grid__column-medium-4){flex:0 0 33.33333%;max-width:33.33333%}:host(.nx-grid__column-medium-5){flex:0 0 41.66667%;max-width:41.66667%}:host(.nx-grid__column-medium-6){flex:0 0 50%;max-width:50%}:host(.nx-grid__column-medium-7){flex:0 0 58.33333%;max-width:58.33333%}:host(.nx-grid__column-medium-8){flex:0 0 66.66667%;max-width:66.66667%}:host(.nx-grid__column-medium-9){flex:0 0 75%;max-width:75%}:host(.nx-grid__column-medium-10){flex:0 0 83.33333%;max-width:83.33333%}:host(.nx-grid__column-medium-11){flex:0 0 91.66667%;max-width:91.66667%}:host(.nx-grid__column-medium-12){flex:0 0 100%;max-width:100%}.pull-medium-0{right:auto}.pull-medium-1{right:8.33333%}.pull-medium-2{right:16.66667%}.pull-medium-3{right:25%}.pull-medium-4{right:33.33333%}.pull-medium-5{right:41.66667%}.pull-medium-6{right:50%}.pull-medium-7{right:58.33333%}.pull-medium-8{right:66.66667%}.pull-medium-9{right:75%}.pull-medium-10{right:83.33333%}.pull-medium-11{right:91.66667%}.pull-medium-12{right:100%}.push-medium-0{left:auto}.push-medium-1{left:8.33333%}.push-medium-2{left:16.66667%}.push-medium-3{left:25%}.push-medium-4{left:33.33333%}.push-medium-5{left:41.66667%}.push-medium-6{left:50%}.push-medium-7{left:58.33333%}.push-medium-8{left:66.66667%}.push-medium-9{left:75%}.push-medium-10{left:83.33333%}.push-medium-11{left:91.66667%}.push-medium-12{left:100%}:host(.nx-grid--offset-medium-0){margin-left:0}:host(.nx-grid--offset-medium-1){margin-left:8.33333%}:host(.nx-grid--offset-medium-2){margin-left:16.66667%}:host(.nx-grid--offset-medium-3){margin-left:25%}:host(.nx-grid--offset-medium-4){margin-left:33.33333%}:host(.nx-grid--offset-medium-5){margin-left:41.66667%}:host(.nx-grid--offset-medium-6){margin-left:50%}:host(.nx-grid--offset-medium-7){margin-left:58.33333%}:host(.nx-grid--offset-medium-8){margin-left:66.66667%}:host(.nx-grid--offset-medium-9){margin-left:75%}:host(.nx-grid--offset-medium-10){margin-left:83.33333%}:host(.nx-grid--offset-medium-11){margin-left:91.66667%}:host(.nx-flex-medium-first){order:-1}:host(.nx-flex-medium-last){order:1}:host(.nx-flex-medium-unordered){order:0}:host(.nx-align-self-medium-auto){-ms-grid-row-align:auto!important;align-self:auto!important}:host(.nx-align-self-medium-start){align-self:flex-start!important}:host(.nx-align-self-medium-end){align-self:flex-end!important}:host(.nx-align-self-medium-center){-ms-grid-row-align:center!important;align-self:center!important}:host(.nx-align-self-medium-baseline){align-self:baseline!important}:host(.nx-align-self-medium-stretch){-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:992px){:host(.nx-grid__column),:host(.nx-grid__column-1),:host(.nx-grid__column-10),:host(.nx-grid__column-11),:host(.nx-grid__column-12),:host(.nx-grid__column-2),:host(.nx-grid__column-3),:host(.nx-grid__column-4),:host(.nx-grid__column-5),:host(.nx-grid__column-6),:host(.nx-grid__column-7),:host(.nx-grid__column-8),:host(.nx-grid__column-9),:host(.nx-grid__column-fit),:host(.nx-grid__column-large),:host(.nx-grid__column-large-1),:host(.nx-grid__column-large-10),:host(.nx-grid__column-large-11),:host(.nx-grid__column-large-12),:host(.nx-grid__column-large-2),:host(.nx-grid__column-large-3),:host(.nx-grid__column-large-4),:host(.nx-grid__column-large-5),:host(.nx-grid__column-large-6),:host(.nx-grid__column-large-7),:host(.nx-grid__column-large-8),:host(.nx-grid__column-large-9),:host(.nx-grid__column-large-fit),:host(.nx-grid__column-medium),:host(.nx-grid__column-medium-1),:host(.nx-grid__column-medium-10),:host(.nx-grid__column-medium-11),:host(.nx-grid__column-medium-12),:host(.nx-grid__column-medium-2),:host(.nx-grid__column-medium-3),:host(.nx-grid__column-medium-4),:host(.nx-grid__column-medium-5),:host(.nx-grid__column-medium-6),:host(.nx-grid__column-medium-7),:host(.nx-grid__column-medium-8),:host(.nx-grid__column-medium-9),:host(.nx-grid__column-medium-fit),:host(.nx-grid__column-small),:host(.nx-grid__column-small-1),:host(.nx-grid__column-small-10),:host(.nx-grid__column-small-11),:host(.nx-grid__column-small-12),:host(.nx-grid__column-small-2),:host(.nx-grid__column-small-3),:host(.nx-grid__column-small-4),:host(.nx-grid__column-small-5),:host(.nx-grid__column-small-6),:host(.nx-grid__column-small-7),:host(.nx-grid__column-small-8),:host(.nx-grid__column-small-9),:host(.nx-grid__column-small-fit){padding-right:16px;padding-left:16px}:host(.nx-grid__column-large){flex-basis:0;flex-grow:1;max-width:100%}:host(.nx-grid__column-large-fit){flex:0 0 auto;width:auto}:host(.nx-grid__column-large-1){flex:0 0 8.33333%;max-width:8.33333%}:host(.nx-grid__column-large-2){flex:0 0 16.66667%;max-width:16.66667%}:host(.nx-grid__column-large-3){flex:0 0 25%;max-width:25%}:host(.nx-grid__column-large-4){flex:0 0 33.33333%;max-width:33.33333%}:host(.nx-grid__column-large-5){flex:0 0 41.66667%;max-width:41.66667%}:host(.nx-grid__column-large-6){flex:0 0 50%;max-width:50%}:host(.nx-grid__column-large-7){flex:0 0 58.33333%;max-width:58.33333%}:host(.nx-grid__column-large-8){flex:0 0 66.66667%;max-width:66.66667%}:host(.nx-grid__column-large-9){flex:0 0 75%;max-width:75%}:host(.nx-grid__column-large-10){flex:0 0 83.33333%;max-width:83.33333%}:host(.nx-grid__column-large-11){flex:0 0 91.66667%;max-width:91.66667%}:host(.nx-grid__column-large-12){flex:0 0 100%;max-width:100%}.pull-large-0{right:auto}.pull-large-1{right:8.33333%}.pull-large-2{right:16.66667%}.pull-large-3{right:25%}.pull-large-4{right:33.33333%}.pull-large-5{right:41.66667%}.pull-large-6{right:50%}.pull-large-7{right:58.33333%}.pull-large-8{right:66.66667%}.pull-large-9{right:75%}.pull-large-10{right:83.33333%}.pull-large-11{right:91.66667%}.pull-large-12{right:100%}.push-large-0{left:auto}.push-large-1{left:8.33333%}.push-large-2{left:16.66667%}.push-large-3{left:25%}.push-large-4{left:33.33333%}.push-large-5{left:41.66667%}.push-large-6{left:50%}.push-large-7{left:58.33333%}.push-large-8{left:66.66667%}.push-large-9{left:75%}.push-large-10{left:83.33333%}.push-large-11{left:91.66667%}.push-large-12{left:100%}:host(.nx-grid--offset-large-0){margin-left:0}:host(.nx-grid--offset-large-1){margin-left:8.33333%}:host(.nx-grid--offset-large-2){margin-left:16.66667%}:host(.nx-grid--offset-large-3){margin-left:25%}:host(.nx-grid--offset-large-4){margin-left:33.33333%}:host(.nx-grid--offset-large-5){margin-left:41.66667%}:host(.nx-grid--offset-large-6){margin-left:50%}:host(.nx-grid--offset-large-7){margin-left:58.33333%}:host(.nx-grid--offset-large-8){margin-left:66.66667%}:host(.nx-grid--offset-large-9){margin-left:75%}:host(.nx-grid--offset-large-10){margin-left:83.33333%}:host(.nx-grid--offset-large-11){margin-left:91.66667%}:host(.nx-flex-large-first){order:-1}:host(.nx-flex-large-last){order:1}:host(.nx-flex-large-unordered){order:0}:host(.nx-align-self-large-auto){-ms-grid-row-align:auto!important;align-self:auto!important}:host(.nx-align-self-large-start){align-self:flex-start!important}:host(.nx-align-self-large-end){align-self:flex-end!important}:host(.nx-align-self-large-center){-ms-grid-row-align:center!important;align-self:center!important}:host(.nx-align-self-large-baseline){align-self:baseline!important}:host(.nx-align-self-large-stretch){-ms-grid-row-align:stretch!important;align-self:stretch!important}}"]
                        }] }
            ];
            /** @nocollapse */
            NxColComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            NxColComponent.propDecorators = {
                col: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxCol',] }],
                offset: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxColOffset',] }],
                itemSelf: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxAlignSelf',] }],
                order: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxColOrder',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxLayoutComponent = /** @class */ (function () {
                function NxLayoutComponent() {
                    this._classNames = '';
                    /**
                     * \@docs-private
                     */
                    this.grid = true;
                }
                Object.defineProperty(NxLayoutComponent.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * Type of layout.
                     *
                     * Values: grid | grid nogutters | grid maxwidth. Default value: grid.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        this._classNames = value;
                        this.grid = !!this._classNames.match(/grid/);
                        this.noGutters = !!this._classNames.match(/nogutters/);
                        this.maxWidth = !!this._classNames.match(/maxwidth/);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxLayoutComponent;
            }());
            NxLayoutComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: '[nxLayout]',
                            template: '<ng-content></ng-content>',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-grid]': 'grid',
                                '[class.nx-grid--no-gutters]': 'noGutters',
                                '[class.nx-grid--max-width]': 'maxWidth'
                            },
                            styles: [":host(.nx-grid){position:relative;margin-left:auto;margin-right:auto;padding-right:8px;padding-left:8px}@media (min-width:704px){:host(.nx-grid){padding-right:32px;padding-left:32px}}:host(.nx-grid--no-gutters) ::ng-deep{padding-left:0;padding-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row{margin-left:0;margin-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row>[class*=nx-grid__column]{padding-left:0;padding-right:0}:host(.nx-grid--max-width){width:100%}@media (min-width:992px){:host(.nx-grid--max-width){width:1184px;max-width:100%}}"]
                        }] }
            ];
            NxLayoutComponent.propDecorators = {
                classNames: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxLayout',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAPPING_JUSTIFY = {
                'start': 'nx-justify-content-{tier}-start',
                'end': 'nx-justify-content-{tier}-end',
                'center': 'nx-justify-content-{tier}-center',
                'between': 'nx-justify-content-{tier}-between',
                'around': 'nx-justify-content-{tier}-around'
            };
            /** @type {?} */
            var MAPPING_ALIGN_ITEMS = {
                'start': 'nx-align-items-{tier}-start',
                'end': 'nx-align-items-{tier}-end',
                'center': 'nx-align-items-{tier}-center',
                'baseline': 'nx-align-items-{tier}-baseline',
                'stretch': 'nx-align-items-{tier}-stretch'
            };
            /** @type {?} */
            var MAPPING_ALIGN_CONTENT = {
                'start': 'nx-align-content-{tier}-start',
                'end': 'nx-align-content-{tier}-end',
                'center': 'nx-align-content-{tier}-center',
                'between': 'nx-align-content-{tier}-between',
                'around': 'nx-align-content-{tier}-around',
                'stretch': 'nx-align-content-{tier}-stretch'
            };
            /** @type {?} */
            var MAPPING_WRAP = {
                'wrap': 'nx-flex-{tier}-wrap',
                'nowrap': 'nx-flex-{tier}-nowrap',
                'reverse': 'nx-flex-{tier}-wrap-reverse'
            };
            /** @type {?} */
            var MAPPING_LAYOUT = {
                'row': 'nx-grid__row',
                'row-reverse': 'nx-grid__row-reverse'
            };
            var NxRowComponent = /** @class */ (function () {
                /**
                 * @param {?} el
                 */
                function NxRowComponent(el) {
                    this.el = el;
                    this.ROW = 'row';
                    this.ROW_RESERVE = 'row-reverse';
                    this._classNames = '';
                    /**
                     * General
                     */
                    this._nxRow = this.ROW;
                    /* Input row variables */
                    /**
                     * Align items on the main axis (horizontally).
                     */
                    this.nxRowJustify = null;
                    /**
                     * Similar to nxRowAlignItems, but instead of aligning flex items, it aligns flex lines.
                     */
                    this.nxRowAlignContent = null;
                    /**
                     * The default alignment for items inside the flexible container.
                     */
                    this.nxRowAlignItems = null;
                    /**
                     * How the flexible items should be wrapped.
                     */
                    this.nxRowWrap = null;
                }
                Object.defineProperty(NxRowComponent.prototype, "nxRow", {
                    /**
                     * Values: row | row-reverse
                     *
                     * Default value: row
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== '') {
                            this._nxRow = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxRowComponent.prototype.ngOnInit = function () {
                    if (this._nxRow === this.ROW ||
                        this._nxRow === this.ROW_RESERVE) {
                        /** add row style */
                        this._classNames = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_0__["mapClassNames"])(this._nxRow, [], MAPPING_LAYOUT);
                        /** if not empty nxRowWrap, split input and add style */
                        if (this.nxRowWrap) {
                            /** possibles atributes: wrap,reverse,no-wrap */
                            this._classNames += addStylesFromDimensions(this.nxRowWrap, MAPPING_WRAP);
                        }
                        /** if not empty nxRowJustify, add style */
                        if (this.nxRowJustify) {
                            /** possibles atributes: start,end,center,between,around */
                            this._classNames += addStylesFromDimensions(this.nxRowJustify, MAPPING_JUSTIFY);
                        }
                        /** if not empty nxRowAlignContent, add style */
                        if (this.nxRowAlignContent) {
                            /** possibles atributes: start,end,center,between,stetch */
                            this._classNames += addStylesFromDimensions(this.nxRowAlignContent, MAPPING_ALIGN_CONTENT);
                        }
                        /** if not empty nxRowAlignItems, add style */
                        if (this.nxRowAlignItems) {
                            /** possibles atributes: start,end,center,around,stetch */
                            this._classNames += addStylesFromDimensions(this.nxRowAlignItems, MAPPING_ALIGN_ITEMS);
                        }
                        this._classNames += ' ' + this.el.nativeElement.className;
                        this._classNames = this._classNames.trim();
                    }
                    else {
                        throw new Error('nxRow is incorrect');
                    }
                };
                return NxRowComponent;
            }());
            NxRowComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: '[nxRow]',
                            template: '<ng-content></ng-content>',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class]': '_classNames'
                            },
                            styles: [":host{display:flex;flex-wrap:wrap;margin-right:-8px;margin-left:-8px;position:relative}:host(.nx-flex-row){flex-direction:row!important}:host(.nx-flex-column){flex-direction:column!important}:host(.nx-flex-row-reverse){flex-direction:row-reverse!important}:host(.nx-flex-column-reverse){flex-direction:column-reverse!important}:host(.nx-flex-wrap){flex-wrap:wrap!important}:host(.nx-flex-nowrap){flex-wrap:nowrap!important}:host(.nx-flex-wrap-reverse){flex-wrap:wrap-reverse!important}:host(.nx-justify-content-start){justify-content:flex-start!important}:host(.nx-justify-content-end){justify-content:flex-end!important}:host(.nx-justify-content-center){justify-content:center!important}:host(.nx-justify-content-between){justify-content:space-between!important}:host(.nx-justify-content-around){justify-content:space-around!important}:host(.nx-align-items-start){align-items:flex-start!important}:host(.nx-align-items-end){align-items:flex-end!important}:host(.nx-align-items-center){align-items:center!important}:host(.nx-align-items-baseline){align-items:baseline!important}:host(.nx-align-items-stretch){align-items:stretch!important}:host(.nx-align-content-start){align-content:flex-start!important}:host(.nx-align-content-end){align-content:flex-end!important}:host(.nx-align-content-center){align-content:center!important}:host(.nx-align-content-between){align-content:space-between!important}:host(.nx-align-content-around){align-content:space-around!important}:host(.nx-align-content-stretch){align-content:stretch!important}@media (min-width:320px){:host{margin-right:-8px;margin-left:-8px;position:relative}:host(.nx-flex-small-row){flex-direction:row!important}:host(.nx-flex-small-column){flex-direction:column!important}:host(.nx-flex-small-row-reverse){flex-direction:row-reverse!important}:host(.nx-flex-small-column-reverse){flex-direction:column-reverse!important}:host(.nx-flex-small-wrap){flex-wrap:wrap!important}:host(.nx-flex-small-nowrap){flex-wrap:nowrap!important}:host(.nx-flex-small-wrap-reverse){flex-wrap:wrap-reverse!important}:host(.nx-justify-content-small-start){justify-content:flex-start!important}:host(.nx-justify-content-small-end){justify-content:flex-end!important}:host(.nx-justify-content-small-center){justify-content:center!important}:host(.nx-justify-content-small-between){justify-content:space-between!important}:host(.nx-justify-content-small-around){justify-content:space-around!important}:host(.nx-align-items-small-start){align-items:flex-start!important}:host(.nx-align-items-small-end){align-items:flex-end!important}:host(.nx-align-items-small-center){align-items:center!important}:host(.nx-align-items-small-baseline){align-items:baseline!important}:host(.nx-align-items-small-stretch){align-items:stretch!important}:host(.nx-align-content-small-start){align-content:flex-start!important}:host(.nx-align-content-small-end){align-content:flex-end!important}:host(.nx-align-content-small-center){align-content:center!important}:host(.nx-align-content-small-between){align-content:space-between!important}:host(.nx-align-content-small-around){align-content:space-around!important}:host(.nx-align-content-small-stretch){align-content:stretch!important}}@media (min-width:704px){:host{margin-right:-16px;margin-left:-16px;position:relative}:host(.nx-flex-medium-row){flex-direction:row!important}:host(.nx-flex-medium-column){flex-direction:column!important}:host(.nx-flex-medium-row-reverse){flex-direction:row-reverse!important}:host(.nx-flex-medium-column-reverse){flex-direction:column-reverse!important}:host(.nx-flex-medium-wrap){flex-wrap:wrap!important}:host(.nx-flex-medium-nowrap){flex-wrap:nowrap!important}:host(.nx-flex-medium-wrap-reverse){flex-wrap:wrap-reverse!important}:host(.nx-justify-content-medium-start){justify-content:flex-start!important}:host(.nx-justify-content-medium-end){justify-content:flex-end!important}:host(.nx-justify-content-medium-center){justify-content:center!important}:host(.nx-justify-content-medium-between){justify-content:space-between!important}:host(.nx-justify-content-medium-around){justify-content:space-around!important}:host(.nx-align-items-medium-start){align-items:flex-start!important}:host(.nx-align-items-medium-end){align-items:flex-end!important}:host(.nx-align-items-medium-center){align-items:center!important}:host(.nx-align-items-medium-baseline){align-items:baseline!important}:host(.nx-align-items-medium-stretch){align-items:stretch!important}:host(.nx-align-content-medium-start){align-content:flex-start!important}:host(.nx-align-content-medium-end){align-content:flex-end!important}:host(.nx-align-content-medium-center){align-content:center!important}:host(.nx-align-content-medium-between){align-content:space-between!important}:host(.nx-align-content-medium-around){align-content:space-around!important}:host(.nx-align-content-medium-stretch){align-content:stretch!important}}@media (min-width:992px){:host{margin-right:-16px;margin-left:-16px;position:relative}:host(.nx-flex-large-row){flex-direction:row!important}:host(.nx-flex-large-column){flex-direction:column!important}:host(.nx-flex-large-row-reverse){flex-direction:row-reverse!important}:host(.nx-flex-large-column-reverse){flex-direction:column-reverse!important}:host(.nx-flex-large-wrap){flex-wrap:wrap!important}:host(.nx-flex-large-nowrap){flex-wrap:nowrap!important}:host(.nx-flex-large-wrap-reverse){flex-wrap:wrap-reverse!important}:host(.nx-justify-content-large-start){justify-content:flex-start!important}:host(.nx-justify-content-large-end){justify-content:flex-end!important}:host(.nx-justify-content-large-center){justify-content:center!important}:host(.nx-justify-content-large-between){justify-content:space-between!important}:host(.nx-justify-content-large-around){justify-content:space-around!important}:host(.nx-align-items-large-start){align-items:flex-start!important}:host(.nx-align-items-large-end){align-items:flex-end!important}:host(.nx-align-items-large-center){align-items:center!important}:host(.nx-align-items-large-baseline){align-items:baseline!important}:host(.nx-align-items-large-stretch){align-items:stretch!important}:host(.nx-align-content-large-start){align-content:flex-start!important}:host(.nx-align-content-large-end){align-content:flex-end!important}:host(.nx-align-content-large-center){align-content:center!important}:host(.nx-align-content-large-between){align-content:space-between!important}:host(.nx-align-content-large-around){align-content:space-around!important}:host(.nx-align-content-large-stretch){align-content:stretch!important}}"]
                        }] }
            ];
            /** @nocollapse */
            NxRowComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            NxRowComponent.propDecorators = {
                nxRow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                nxRowJustify: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxRowJustify',] }],
                nxRowAlignContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxRowAlignContent',] }],
                nxRowAlignItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxRowAlignItems',] }],
                nxRowWrap: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['nxRowWrap',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxGridModule = /** @class */ (function () {
                function NxGridModule() {
                }
                return NxGridModule;
            }());
            NxGridModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            declarations: [
                                NxLayoutComponent,
                                NxRowComponent,
                                NxColComponent
                            ],
                            exports: [
                                NxLayoutComponent,
                                NxRowComponent,
                                NxColComponent
                            ],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-grid.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js": 
        /*!**************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js ***!
          \**************************************************************************/
        /*! exports provided: NxIconModule, NxIconComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxIconModule", function () { return NxIconModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxIconComponent", function () { return NxIconComponent; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxIconComponent = /** @class */ (function () {
                /**
                 * @param {?} el
                 */
                function NxIconComponent(el) {
                    this.el = el;
                    /**
                     * Whether the icon has an outline.
                     */
                    this.outline = false;
                    /**
                     * Whether the icon is filled.
                     */
                    this.fill = false;
                    this._size = 'auto';
                }
                Object.defineProperty(NxIconComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * Sets the name for specifing the icon.
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        this.el.nativeElement.classList.remove('nx-icon--' + this.name);
                        this._name = name;
                        this.el.nativeElement.classList.add('nx-icon--' + this.name);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxIconComponent.prototype, "size", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._size;
                    },
                    /**
                     * Specifies the size of the icon.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._size === value) {
                            return;
                        }
                        this._size = value;
                        this.el.nativeElement.classList.add('nx-icon--' + this.size);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxIconComponent;
            }());
            NxIconComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                            selector: 'nx-icon',
                            template: '<ng-content></ng-content>',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-icon--outline]': 'outline',
                                '[class.nx-icon--fill]': 'fill',
                                '[class.nx-icon--auto]': 'size === "auto"',
                            },
                            styles: ["@charset \"UTF-8\";:host{speak:none;font-style:normal;font-weight:400;font-variant:normal;text-transform:none;line-height:1;display:inline-flex;align-items:center;justify-content:center}:host:before{font-family:PatternLab-Icon;font-size:inherit}:host(.nx-icon--arrow-up):before{content:\"\uE900\"}:host(.nx-icon--arrow-down):before{content:\"\uE901\"}:host(.nx-icon--arrow-left):before{content:\"\uE902\"}:host(.nx-icon--arrow-right):before{content:\"\uE903\"}:host(.nx-icon--arrow-up-slim):before{content:\"\uE904\"}:host(.nx-icon--arrow-down-slim):before{content:\"\uE905\"}:host(.nx-icon--arrow-left-slim):before{content:\"\uE906\"}:host(.nx-icon--arrow-right-slim):before{content:\"\uE907\"}:host(.nx-icon--paperclip):before{content:\"\uE908\"}:host(.nx-icon--chevron-up):before{content:\"\uE909\"}:host(.nx-icon--chevron-down):before{content:\"\uE90A\"}:host(.nx-icon--chevron-left):before{content:\"\uE90B\"}:host(.nx-icon--chevron-right):before{content:\"\uE90C\"}:host(.nx-icon--bookmark-o):before{content:\"\uE90D\"}:host(.nx-icon--calendar):before{content:\"\uE90E\"}:host(.nx-icon--arrow-upload):before{content:\"\uE90F\"}:host(.nx-icon--phone-o):before{content:\"\uE910\"}:host(.nx-icon--check):before{content:\"\uE911\"}:host(.nx-icon--check-circle):before{content:\"\uE912\"}:host(.nx-icon--close):before{content:\"\uE913\"}:host(.nx-icon--close-circle):before{content:\"\uE914\"}:host(.nx-icon--credit-card-o):before{content:\"\uE915\"}:host(.nx-icon--trash):before{content:\"\uE916\"}:host(.nx-icon--download):before{content:\"\uE917\"}:host(.nx-icon--exclamation-circle):before{content:\"\uE918\"}:host(.nx-icon--exclamation-circle-o):before{content:\"\uE919\"}:host(.nx-icon--exclamation-triangle):before{content:\"\uE91A\"}:host(.nx-icon--file):before{content:\"\uE91B\"}:host(.nx-icon--bolt):before{content:\"\uE91C\"}:host(.nx-icon--bolt-o):before{content:\"\uE91D\"}:host(.nx-icon--ellipsis-v):before{content:\"\uE91E\"}:host(.nx-icon--ellipsis-h):before{content:\"\uE91F\"}:host(.nx-icon--info-circle):before{content:\"\uE920\"}:host(.nx-icon--info-circle-o):before{content:\"\uE921\"}:host(.nx-icon--list):before{content:\"\uE922\"}:host(.nx-icon--location):before{content:\"\uE923\"}:host(.nx-icon--lock):before{content:\"\uE924\"}:host(.nx-icon--lock-o):before{content:\"\uE925\"}:host(.nx-icon--mail):before{content:\"\uE926\"}:host(.nx-icon--mail-o):before{content:\"\uE927\"}:host(.nx-icon--bars):before{content:\"\uE928\"}:host(.nx-icon--telegram):before{content:\"\uE929\"}:host(.nx-icon--user):before{content:\"\uE92A\"}:host(.nx-icon--user-o):before{content:\"\uE92B\"}:host(.nx-icon--user-business):before{content:\"\uE92C\"}:host(.nx-icon--user-business-o):before{content:\"\uE92D\"}:host(.nx-icon--users):before{content:\"\uE92E\"}:host(.nx-icon--users-o):before{content:\"\uE92F\"}:host(.nx-icon--print-o):before{content:\"\uE930\"}:host(.nx-icon--search):before{content:\"\uE931\"}:host(.nx-icon--setting):before{content:\"\uE932\"}:host(.nx-icon--share):before{content:\"\uE933\"}:host(.nx-icon--facebook):before{content:\"\uE934\"}:host(.nx-icon--google-plus):before{content:\"\uE935\"}:host(.nx-icon--twitter):before{content:\"\uE936\"}:host(.nx-icon--instagram):before{content:\"\uE937\"}:host(.nx-icon--facebook-circle):before{content:\"\uE938\"}:host(.nx-icon--google-circle):before{content:\"\uE939\"}:host(.nx-icon--twitter-circle):before{content:\"\uE93A\"}:host(.nx-icon--instagram-circle):before{content:\"\uE93B\"}:host(.nx-icon--mail-circle):before{content:\"\uE93C\"}:host(.nx-icon--youtube-circle):before{content:\"\uE93D\"}:host(.nx-icon--star):before{content:\"\uE93E\"}:host(.nx-icon--star-half-full):before{content:\"\uE93F\"}:host(.nx-icon--star-o):before{content:\"\uE940\"}:host(.nx-icon--file-text):before{content:\"\uE941\"}:host(.nx-icon--microphone):before{content:\"\uE942\"}:host(.nx-icon--clock):before{content:\"\uE943\"}:host(.nx-icon--clock-o):before{content:\"\uE944\"}:host(.nx-icon--product-a-z):before{content:\"\uE945\"}:host(.nx-icon--product-animal-cat):before{content:\"\uE946\"}:host(.nx-icon--product-animal-dog):before{content:\"\uE947\"}:host(.nx-icon--product-animal-horse):before{content:\"\uE948\"}:host(.nx-icon--product-animal-hunting-deer):before{content:\"\uE949\"}:host(.nx-icon--product-animal-paw):before{content:\"\uE94A\"}:host(.nx-icon--product-arrow-direction-path):before{content:\"\uE94B\"}:host(.nx-icon--product-at-sign):before{content:\"\uE94C\"}:host(.nx-icon--product-balance-scale):before{content:\"\uE94D\"}:host(.nx-icon--product-bank-monument-info):before{content:\"\uE94E\"}:host(.nx-icon--product-battery):before{content:\"\uE94F\"}:host(.nx-icon--speech-bubble-o):before{content:\"\uE950\"}:host(.nx-icon--arrow-first):before{content:\"\uE951\"}:host(.nx-icon--arrow-last):before{content:\"\uE952\"}:host(.nx-icon--plus):before{content:\"\uE953\"}:host(.nx-icon--minus):before{content:\"\uE954\"}:host(.nx-icon--product-bed):before{content:\"\uE955\"}:host(.nx-icon--product-bike):before{content:\"\uE956\"}:host(.nx-icon--product-board-paper-note):before{content:\"\uE957\"}:host(.nx-icon--product-book):before{content:\"\uE958\"}:host(.nx-icon--product-brain):before{content:\"\uE959\"}:host(.nx-icon--product-broken-glass):before{content:\"\uE95A\"}:host(.nx-icon--product-broken-window):before{content:\"\uE95B\"}:host(.nx-icon--product-broom-clean):before{content:\"\uE95C\"}:host(.nx-icon--product-buggy):before{content:\"\uE95D\"}:host(.nx-icon--product-building):before{content:\"\uE95E\"}:host(.nx-icon--product-bullhorn):before{content:\"\uE95F\"}:host(.nx-icon--product-calculator):before{content:\"\uE960\"}:host(.nx-icon--product-calendar):before{content:\"\uE961\"}:host(.nx-icon--product-camera):before{content:\"\uE962\"}:host(.nx-icon--product-candle):before{content:\"\uE963\"}:host(.nx-icon--product-car-accident):before{content:\"\uE964\"}:host(.nx-icon--product-car-front):before{content:\"\uE965\"}:host(.nx-icon--product-car-small):before{content:\"\uE966\"}:host(.nx-icon--product-car-tacho-fast):before{content:\"\uE967\"}:host(.nx-icon--product-car-trailer):before{content:\"\uE968\"}:host(.nx-icon--product-car):before{content:\"\uE969\"}:host(.nx-icon--product-caravan):before{content:\"\uE96A\"}:host(.nx-icon--product-certificate):before{content:\"\uE96B\"}:host(.nx-icon--product-check-paper):before{content:\"\uE96C\"}:host(.nx-icon--product-check):before{content:\"\uE96D\"}:host(.nx-icon--product-city):before{content:\"\uE96E\"}:host(.nx-icon--product-cleanup-trash):before{content:\"\uE96F\"}:host(.nx-icon--product-clock):before{content:\"\uE970\"}:host(.nx-icon--product-cloud):before{content:\"\uE971\"}:host(.nx-icon--product-cog-wheel):before{content:\"\uE972\"}:host(.nx-icon--product-cog-wheels):before{content:\"\uE973\"}:host(.nx-icon--product-coins-money):before{content:\"\uE974\"}:host(.nx-icon--product-communication):before{content:\"\uE975\"}:host(.nx-icon--product-computer):before{content:\"\uE976\"}:host(.nx-icon--product-couch):before{content:\"\uE977\"}:host(.nx-icon--product-credit-card):before{content:\"\uE978\"}:host(.nx-icon--product-cross-triangle):before{content:\"\uE979\"}:host(.nx-icon--product-cross):before{content:\"\uE97A\"}:host(.nx-icon--product-danger):before{content:\"\uE97B\"}:host(.nx-icon--product-data-exchange):before{content:\"\uE97C\"}:host(.nx-icon--product-diversity):before{content:\"\uE97D\"}:host(.nx-icon--product-dollar):before{content:\"\uE97E\"}:host(.nx-icon--product-door):before{content:\"\uE97F\"}:host(.nx-icon--product-electric-plug):before{content:\"\uE980\"}:host(.nx-icon--product-excavator):before{content:\"\uE981\"}:host(.nx-icon--product-expensive-objects-jewelery):before{content:\"\uE982\"}:host(.nx-icon--product-eye-overview-sight):before{content:\"\uE983\"}:host(.nx-icon--product-family):before{content:\"\uE984\"}:host(.nx-icon--product-folder):before{content:\"\uE985\"}:host(.nx-icon--product-guide-navigation):before{content:\"\uE986\"}:host(.nx-icon--product-hand-click-info):before{content:\"\uE987\"}:host(.nx-icon--product-hand-finger-pointing):before{content:\"\uE988\"}:host(.nx-icon--product-hand-get-money):before{content:\"\uE989\"}:host(.nx-icon--product-hand-thumbs-up):before{content:\"\uE98A\"}:host(.nx-icon--product-headset-support):before{content:\"\uE98B\"}:host(.nx-icon--product-health-bag-doctor):before{content:\"\uE98C\"}:host(.nx-icon--product-health-stethoscope):before{content:\"\uE98D\"}:host(.nx-icon--product-heart-employee-engagement):before{content:\"\uE98E\"}:host(.nx-icon--product-heart):before{content:\"\uE98F\"}:host(.nx-icon--product-helmet):before{content:\"\uE990\"}:host(.nx-icon--product-help-information):before{content:\"\uE991\"}:host(.nx-icon--product-help-question):before{content:\"\uE992\"}:host(.nx-icon--product-help):before{content:\"\uE993\"}:host(.nx-icon--product-home-office):before{content:\"\uE994\"}:host(.nx-icon--product-hourglass):before{content:\"\uE995\"}:host(.nx-icon--product-house-broken-window):before{content:\"\uE996\"}:host(.nx-icon--product-house-fire):before{content:\"\uE997\"}:host(.nx-icon--product-house-important):before{content:\"\uE998\"}:host(.nx-icon--product-house-money):before{content:\"\uE999\"}:host(.nx-icon--product-house-safe):before{content:\"\uE99A\"}:host(.nx-icon--product-house-water-damage):before{content:\"\uE99B\"}:host(.nx-icon--product-house):before{content:\"\uE99C\"}:host(.nx-icon--product-important-info):before{content:\"\uE99D\"}:host(.nx-icon--product-info-sheet):before{content:\"\uE99E\"}:host(.nx-icon--product-injury-plaster):before{content:\"\uE99F\"}:host(.nx-icon--product-job-processes):before{content:\"\uE9A0\"}:host(.nx-icon--product-law):before{content:\"\uE9A1\"}:host(.nx-icon--product-light-bulb-idea):before{content:\"\uE9A2\"}:host(.nx-icon--product-locate-position):before{content:\"\uE9A3\"}:host(.nx-icon--product-lock):before{content:\"\uE9A4\"}:host(.nx-icon--product-mail):before{content:\"\uE9A5\"}:host(.nx-icon--product-money-banknote):before{content:\"\uE9A6\"}:host(.nx-icon--product-money-exchange):before{content:\"\uE9A7\"}:host(.nx-icon--product-money-suitcase):before{content:\"\uE9A8\"}:host(.nx-icon--product-motorcycle):before{content:\"\uE9A9\"}:host(.nx-icon--product-mouse):before{content:\"\uE9AA\"}:host(.nx-icon--product-newspaper):before{content:\"\uE9AB\"}:host(.nx-icon--product-notebook):before{content:\"\uE9AC\"}:host(.nx-icon--product-office-chair):before{content:\"\uE9AD\"}:host(.nx-icon--product-pages-documents):before{content:\"\uE9AE\"}:host(.nx-icon--product-paper-document):before{content:\"\uE9AF\"}:host(.nx-icon--product-paper-lock):before{content:\"\uE9B0\"}:host(.nx-icon--product-partner-handshake):before{content:\"\uE9B1\"}:host(.nx-icon--product-pen):before{content:\"\uE9B2\"}:host(.nx-icon--product-pension-rocker-chair):before{content:\"\uE9B3\"}:host(.nx-icon--product-people-collaboration):before{content:\"\uE9B4\"}:host(.nx-icon--product-people-communication-external):before{content:\"\uE9B5\"}:host(.nx-icon--product-people-communication-internal):before{content:\"\uE9B6\"}:host(.nx-icon--product-people-connect):before{content:\"\uE9B7\"}:host(.nx-icon--product-person-heart-people-love):before{content:\"\uE9B8\"}:host(.nx-icon--product-person):before{content:\"\uE9B9\"}:host(.nx-icon--product-phone-call):before{content:\"\uE9BA\"}:host(.nx-icon--product-plane):before{content:\"\uE9BB\"}:host(.nx-icon--product-plus-minus):before{content:\"\uE9BC\"}:host(.nx-icon--product-plus):before{content:\"\uE9BD\"}:host(.nx-icon--product-present):before{content:\"\uE9BE\"}:host(.nx-icon--product-puzzle-pieces):before{content:\"\uE9BF\"}:host(.nx-icon--product-puzzle):before{content:\"\uE9C0\"}:host(.nx-icon--product-radio):before{content:\"\uE9C1\"}:host(.nx-icon--product-repair):before{content:\"\uE9C2\"}:host(.nx-icon--product-rewards):before{content:\"\uE9C3\"}:host(.nx-icon--product-rocket):before{content:\"\uE9C4\"}:host(.nx-icon--product-save):before{content:\"\uE9C5\"}:host(.nx-icon--product-search-document):before{content:\"\uE9C6\"}:host(.nx-icon--product-search):before{content:\"\uE9C7\"}:host(.nx-icon--product-share-chart):before{content:\"\uE9C8\"}:host(.nx-icon--product-share-graph-arrow-down):before{content:\"\uE9C9\"}:host(.nx-icon--product-share-graph-arrow-up):before{content:\"\uE9CA\"}:host(.nx-icon--product-sharing-connect):before{content:\"\uE9CB\"}:host(.nx-icon--product-shield-hand):before{content:\"\uE9CC\"}:host(.nx-icon--product-shield):before{content:\"\uE9CD\"}:host(.nx-icon--product-shopping-cart):before{content:\"\uE9CE\"}:host(.nx-icon--product-smartphone):before{content:\"\uE9CF\"}:host(.nx-icon--product-Soccer):before{content:\"\uE9D0\"}:host(.nx-icon--product-social-media-facebook-messenger):before{content:\"\uE9D1\"}:host(.nx-icon--product-social-media-facebook):before{content:\"\uE9D2\"}:host(.nx-icon--product-social-media-linkedin):before{content:\"\uE9D3\"}:host(.nx-icon--product-social-media-twitter):before{content:\"\uE9D4\"}:host(.nx-icon--product-social-media-whatsapp):before{content:\"\uE9D5\"}:host(.nx-icon--product-sport-sailing-ship):before{content:\"\uE9D6\"}:host(.nx-icon--product-sport-trainer):before{content:\"\uE9D7\"}:host(.nx-icon--product-sports-car):before{content:\"\uE9D8\"}:host(.nx-icon--product-sports):before{content:\"\uE9D9\"}:host(.nx-icon--product-star-event):before{content:\"\uE9DA\"}:host(.nx-icon--product-stars-sky-galaxy):before{content:\"\uE9DB\"}:host(.nx-icon--product-steering-wheel):before{content:\"\uE9DC\"}:host(.nx-icon--product-stock-data-graph):before{content:\"\uE9DD\"}:host(.nx-icon--product-stove-cooker):before{content:\"\uE9DE\"}:host(.nx-icon--product-strategy):before{content:\"\uE9DF\"}:host(.nx-icon--product-student-school-graduation):before{content:\"\uE9E0\"}:host(.nx-icon--product-survey):before{content:\"\uE9E1\"}:host(.nx-icon--product-SUV-car):before{content:\"\uE9E2\"}:host(.nx-icon--product-tablet-ipad-apps):before{content:\"\uE9E3\"}:host(.nx-icon--product-target):before{content:\"\uE9E4\"}:host(.nx-icon--product-thief):before{content:\"\uE9E5\"}:host(.nx-icon--product-to-do-list):before{content:\"\uE9E6\"}:host(.nx-icon--product-tooth):before{content:\"\uE9E7\"}:host(.nx-icon--product-tv):before{content:\"\uE9E8\"}:host(.nx-icon--product-umbrella-protection):before{content:\"\uE9E9\"}:host(.nx-icon--product-video-camera):before{content:\"\uE9EA\"}:host(.nx-icon--product-wall-balance):before{content:\"\uE9EB\"}:host(.nx-icon--product-washer):before{content:\"\uE9EC\"}:host(.nx-icon--product-water-tap):before{content:\"\uE9ED\"}:host(.nx-icon--product-watering-can):before{content:\"\uE9EE\"}:host(.nx-icon--product-wheelchair):before{content:\"\uE9EF\"}:host(.nx-icon--product-world-globe):before{content:\"\uE9F0\"}:host(.nx-icon--product-world-wide-we):before{content:\"\uE9F1\"}:host(.nx-icon--arrow-download):before{content:\"\uE9F2\"}:host(.nx-icon--phone):before{content:\"\uE9F3\"}:host(.nx-icon--youtube):before{content:\"\uE9F4\"}:host(.nx-icon--whatsapp):before{content:\"\uE9F5\"}:host(.nx-icon--youtube-circle-play):before{content:\"\uE9F6\"}:host(.nx-icon--linkedin-circle):before{content:\"\uE9F7\"}:host(.nx-icon--file-document):before{content:\"\uE9F8\"}:host(.nx-icon--eps-text):before{content:\"\uE9F9\"}:host(.nx-icon--file-flag):before{content:\"\uE9FA\"}:host(.nx-icon--img-text):before{content:\"\uE9FB\"}:host(.nx-icon--play):before{content:\"\uE9FC\"}:host(.nx-icon--dot):before{content:\"\uE9FD\"}:host(.nx-icon--jpg-text):before{content:\"\uE9FE\"}:host(.nx-icon--mp3-text):before{content:\"\uE9FF\"}:host(.nx-icon--pdf-text):before{content:\"\uEA00\"}:host(.nx-icon--pod-text):before{content:\"\uEA01\"}:host(.nx-icon--ppt-text):before{content:\"\uEA02\"}:host(.nx-icon--tiff-text):before{content:\"\uEA03\"}:host(.nx-icon--txt-text):before{content:\"\uEA04\"}:host(.nx-icon--vid-text):before{content:\"\uEA05\"}:host(.nx-icon--xls-text):before{content:\"\uEA06\"}:host(.nx-icon--eps):before{content:\"\uEA07\"}:host(.nx-icon--img):before{content:\"\uEA08\"}:host(.nx-icon--jpg):before{content:\"\uEA09\"}:host(.nx-icon--mp3):before{content:\"\uEA0A\"}:host(.nx-icon--pdf):before{content:\"\uEA0B\"}:host(.nx-icon--pod):before{content:\"\uEA0C\"}:host(.nx-icon--ppt):before{content:\"\uEA0D\"}:host(.nx-icon--tiff):before{content:\"\uEA0E\"}:host(.nx-icon--txt):before{content:\"\uEA0F\"}:host(.nx-icon--vid):before{content:\"\uEA10\"}:host(.nx-icon--xls):before{content:\"\uEA11\"}:host(.nx-icon--trash-o):before{content:\"\uEA12\"}:host(.nx-icon--bell-o):before{content:\"\uEA13\"}:host(.nx-icon--bell-off-o):before{content:\"\uEA14\"}:host(.nx-icon--bell-off):before{content:\"\uEA15\"}:host(.nx-icon--bell):before{content:\"\uEA16\"}:host(.nx-icon--bookmark):before{content:\"\uEA17\"}:host(.nx-icon--calendar-date-check-o):before{content:\"\uEA18\"}:host(.nx-icon--calendar-date-check):before{content:\"\uEA19\"}:host(.nx-icon--calendar-default):before{content:\"\uEA20\"}:host(.nx-icon--calendar-reminder-o):before{content:\"\uEA21\"}:host(.nx-icon--calendar-reminder):before{content:\"\uEA22\"}:host(.nx-icon--chat-o):before{content:\"\uEA23\"}:host(.nx-icon--chat):before{content:\"\uEA24\"}:host(.nx-icon--chevron-down-small):before{content:\"\uEA25\"}:host(.nx-icon--chevron-left-circle-o):before{content:\"\uEA26\"}:host(.nx-icon--chevron-left-circle):before{content:\"\uEA27\"}:host(.nx-icon--chevron-left-small):before{content:\"\uEA28\"}:host(.nx-icon--chevron-right-circle-o):before{content:\"\uEA29\"}:host(.nx-icon--chevron-right-circle):before{content:\"\uEA30\"}:host(.nx-icon--chevron-right-small):before{content:\"\uEA31\"}:host(.nx-icon--chevron-up-small):before{content:\"\uEA32\"}:host(.nx-icon--close-circle-o):before{content:\"\uEA33\"}:host(.nx-icon--credit-card):before{content:\"\uEA34\"}:host(.nx-icon--duplicate):before{content:\"\uEA35\"}:host(.nx-icon--e-mail-read-o):before{content:\"\uEA36\"}:host(.nx-icon--e-mail-read):before{content:\"\uEA37\"}:host(.nx-icon--edit):before{content:\"\uEA38\"}:host(.nx-icon--exclamation-triangle-o):before{content:\"\uEA39\"}:host(.nx-icon--export-and-share):before{content:\"\uEA40\"}:host(.nx-icon--filter):before{content:\"\uEA41\"}:host(.nx-icon--in-progress):before{content:\"\uEA42\"}:host(.nx-icon--launch):before{content:\"\uEA43\"}:host(.nx-icon--location-o):before{content:\"\uEA44\"}:host(.nx-icon--lock-unlock-o):before{content:\"\uEA45\"}:host(.nx-icon--lock-unlock):before{content:\"\uEA46\"}:host(.nx-icon--microphone-default):before{content:\"\uEA47\"}:host(.nx-icon--microphone-mute-o):before{content:\"\uEA48\"}:host(.nx-icon--microphone-mute):before{content:\"\uEA49\"}:host(.nx-icon--minus-circle-o):before{content:\"\uEA50\"}:host(.nx-icon--minus-circle):before{content:\"\uEA51\"}:host(.nx-icon--password-hide-o):before{content:\"\uEA52\"}:host(.nx-icon--password-hide):before{content:\"\uEA53\"}:host(.nx-icon--password-show-o):before{content:\"\uEA54\"}:host(.nx-icon--password-show):before{content:\"\uEA55\"}:host(.nx-icon--pause):before{content:\"\uEA56\"}:host(.nx-icon--pen):before{content:\"\uEA57\"}:host(.nx-icon--phone-chat-o):before{content:\"\uEA58\"}:host(.nx-icon--phone-chat):before{content:\"\uEA59\"}:host(.nx-icon--plus-circle-o):before{content:\"\uEA60\"}:host(.nx-icon--plus-circle):before{content:\"\uEA61\"}:host(.nx-icon--popout):before{content:\"\uEA62\"}:host(.nx-icon--print):before{content:\"\uEA63\"}:host(.nx-icon--refresh):before{content:\"\uEA64\"}:host(.nx-icon--sentiment-dissatisfied):before{content:\"\uEA65\"}:host(.nx-icon--sentiment-neutral):before{content:\"\uEA66\"}:host(.nx-icon--sentiment-satisfied):before{content:\"\uEA67\"}:host(.nx-icon--sentiment-very-dissatisfied):before{content:\"\uEA68\"}:host(.nx-icon--sentiment-very-satisfied):before{content:\"\uEA69\"}:host(.nx-icon--set-timer):before{content:\"\uEA70\"}:host(.nx-icon--setting-o):before{content:\"\uEA71\"}:host(.nx-icon--slider-graph-o):before{content:\"\uEA72\"}:host(.nx-icon--speech-bubble-dots-o):before{content:\"\uEA73\"}:host(.nx-icon--speech-bubble-dots):before{content:\"\uEA74\"}:host(.nx-icon--speech-bubble):before{content:\"\uEA75\"}:host(.nx-icon--card-o):before{content:\"\uEA76\"}:host(.nx-icon--cobrowsing-o):before{content:\"\uEA77\"}:host(.nx-icon--linkedin):before{content:\"\uEB02\"}:host(.nx-icon--messenger-circle):before{content:\"\uEB03\"}:host(.nx-icon--messenger):before{content:\"\uEB04\"}:host(.nx-icon--whatsapp-circle):before{content:\"\uEB05\"}:host(.nx-icon--xing-circle):before{content:\"\uEB07\"}:host(.nx-icon--xing):before{content:\"\uEB08\"}:host(.nx-icon--product-bereaved-dependent-pension):before{content:\"\uEB09\"}:host(.nx-icon--product-car-mobility):before{content:\"\uEB10\"}:host(.nx-icon--product-care-insurance):before{content:\"\uEB11\"}:host(.nx-icon--product-fortune):before{content:\"\uEB12\"}:host(.nx-icon--product-health):before{content:\"\uEB13\"}:host(.nx-icon--product-income-precaution):before{content:\"\uEB14\"}:host(.nx-icon--product-mobility):before{content:\"\uEB15\"}:host(.nx-icon--product-pet-health-insurance):before{content:\"\uEB16\"}:host(.nx-icon--product-pet-owner-liability):before{content:\"\uEB17\"}:host(.nx-icon--product-precaution):before{content:\"\uEB18\"}:host(.nx-icon--product-private-pension):before{content:\"\uEB19\"}:host(.nx-icon--product-travel):before{content:\"\uEB20\"}:host(.nx-icon--save-o):before{content:\"\uEB21\"}:host(.nx-icon--back):before{content:\"\uEB22\"}:host(.nx-icon--product-apartment-building):before{content:\"\uEB23\"}:host(.nx-icon--product-garage):before{content:\"\uEB24\"}:host(.nx-icon--product-hydro-power):before{content:\"\uEB25\"}:host(.nx-icon--product-keys):before{content:\"\uEB26\"}:host(.nx-icon--product-laptop):before{content:\"\uEB27\"}:host(.nx-icon--product-nature-leaf):before{content:\"\uEB28\"}:host(.nx-icon--product-power-pylon):before{content:\"\uEB29\"}:host(.nx-icon--product-solar-power-modules):before{content:\"\uEB30\"}:host(.nx-icon--product-telematic-car-front):before{content:\"\uEB31\"}:host(.nx-icon--product-telematic-car-side):before{content:\"\uEB32\"}:host(.nx-icon--product-thermal-power-plant):before{content:\"\uEB33\"}:host(.nx-icon--product-thermometer):before{content:\"\uEB34\"}:host(.nx-icon--product-thunderstorm):before{content:\"\uEB35\"}:host(.nx-icon--product-tires-wheel):before{content:\"\uEB36\"}:host(.nx-icon--product-truck):before{content:\"\uEB37\"}:host(.nx-icon--product-voice-of-the-customer):before{content:\"\uEB38\"}:host(.nx-icon--product-wind-turbine-offshore):before{content:\"\uEB39\"}:host(.nx-icon--product-wind-turbine-onshore):before{content:\"\uEB40\"}:host(.nx-icon--sidebar-left):before{content:\"\uEB41\"}:host(.nx-icon--sidebar-right):before{content:\"\uEB42\"}:host(.nx-icon--auto){font-size:inherit}:host(.nx-icon--s){font-size:24px}:host(.nx-icon--m){font-size:48px}:host(.nx-icon--l){font-size:72px}:host(.nx-icon--xl){font-size:96px}:host(.nx-icon--outline){border-radius:50%;border:1px solid;width:2em;height:2em}:host(.nx-icon--outline).nx-icon--s{border-width:1px;width:40px;height:40px}:host(.nx-icon--outline).nx-icon--m{border-width:2px;width:80px;height:80px}:host(.nx-icon--outline).nx-icon--l{border-width:3px;width:120px;height:120px}:host(.nx-icon--outline).nx-icon--xl{border-width:4px;width:160px;height:160px}:host(.nx-icon--fill){border-radius:50%;width:2em;height:2em;background:#000;color:#fff}:host(.nx-icon--fill).nx-icon--s{width:40px;height:40px}:host(.nx-icon--fill).nx-icon--m{width:80px;height:80px}:host(.nx-icon--fill).nx-icon--l{width:120px;height:120px}:host(.nx-icon--fill).nx-icon--xl{width:160px;height:160px}"]
                        }] }
            ];
            /** @nocollapse */
            NxIconComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
            ]; };
            NxIconComponent.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                outline: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                fill: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxIconModule = /** @class */ (function () {
                function NxIconModule() {
                }
                return NxIconModule;
            }());
            NxIconModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            declarations: [NxIconComponent],
                            exports: [NxIconComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-icon.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-input.js": 
        /*!***************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-input.js ***!
          \***************************************************************************/
        /*! exports provided: NxInputModule, NX_INPUT_VALUE_ACCESSOR, NxInputDirective, NxPasswordToggleComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxInputModule", function () { return NxInputModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_INPUT_VALUE_ACCESSOR", function () { return NX_INPUT_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxInputDirective", function () { return NxInputDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPasswordToggleComponent", function () { return NxPasswordToggleComponent; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @allianz/ngx-ndbx/formfield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js");
            /* harmony import */ var _allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @allianz/ngx-ndbx/utils */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var NX_INPUT_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_7__["InjectionToken"]('NX_INPUT_VALUE_ACCESSOR');
            /** @type {?} */
            var INVALID_TYPES = [
                'button',
                'checkbox',
                'file',
                'hidden',
                'image',
                'radio',
                'range',
                'reset',
                'submit'
            ];
            var ɵ0 = /**
             * @param {?} t
             * @return {?}
             */ function (/**
             * @param {?} t
             * @return {?}
             */ t) { return Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__["getSupportedInputTypes"])().has(t); };
            /** @type {?} */
            var NEVER_EMPTY = [
                'date',
                'datetime',
                'datetime-local',
                'month',
                'time',
                'week'
            ].filter((ɵ0));
            /** @type {?} */
            var nextUniqueId = 0;
            var NxInputDirective = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} ngControl
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 * @param {?} _errorStateMatcher
                 * @param {?} inputValueAccessor
                 */
                function NxInputDirective(_elementRef, ngControl, _parentForm, _parentFormGroup, _errorStateMatcher, inputValueAccessor) {
                    this._elementRef = _elementRef;
                    this.ngControl = ngControl;
                    this._parentForm = _parentForm;
                    this._parentFormGroup = _parentFormGroup;
                    this._errorStateMatcher = _errorStateMatcher;
                    this._type = 'text';
                    this._uid = "nx-input-" + nextUniqueId++;
                    this._disabled = false;
                    this._required = false;
                    this._readonly = false;
                    /**
                     * \@docs-private
                     */
                    this.errorState = false;
                    /**
                     * \@docs-private
                     */
                    this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.focused = false;
                    this.id = this.id;
                    // This will enable other directives to plugin itself as the value accessor
                    // by using the NX_INPUT_VALUE_ACCESSOR Token. Default is the given input field.
                    // TODO eliminate injected dateValueAccessor once we have intra-package support in ng-packagr
                    // See the datefield for details.
                    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;
                    this._previousNativeValue = this.value;
                }
                Object.defineProperty(NxInputDirective.prototype, "id", {
                    /**
                     * The id of the input.
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._id = value || this._uid;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxInputDirective.prototype, "value", {
                    /**
                     * The input element's value.
                     * @return {?}
                     */
                    get: function () { return this._inputValueAccessor.value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this.value) {
                            this._inputValueAccessor.value = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxInputDirective.prototype, "readonly", {
                    /**
                     * Whether the element is readonly.
                     * @return {?}
                     */
                    get: function () { return this._readonly; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._readonly = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        this.stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxInputDirective.prototype, "disabled", {
                    /**
                     * Whether the input is disabled.
                     * @return {?}
                     */
                    get: function () {
                        if (this.ngControl && this.ngControl.disabled !== null) {
                            return this.ngControl.disabled;
                        }
                        return this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value);
                        // Browsers may not fire the blur event if the input is disabled too quickly.
                        // Reset from here to ensure that the element doesn't become stuck.
                        if (this.focused) {
                            this.focused = false;
                            this.stateChanges.next();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxInputDirective.prototype, "required", {
                    /**
                     * Whether the element is required.
                     * @return {?}
                     */
                    get: function () { return this._required; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxInputDirective.prototype, "type", {
                    /**
                     * Sets the type of the input element (e.g. password, text etc).
                     * @return {?}
                     */
                    get: function () { return this._type; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._type = value || 'text';
                        this._validateType();
                        // When using Angular inputs, developers are no longer able to set the properties on the native
                        // input element. To ensure that bindings for `type` work, we need to sync the setter
                        // with the native property. Textarea elements don't support the type property or attribute.
                        if (!this._isTextarea() && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__["getSupportedInputTypes"])().has(this._type)) {
                            this._elementRef.nativeElement.type = this._type;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxInputDirective.prototype, "elementRef", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxInputDirective.prototype._onInput = function () {
                    // force to to run change detection so we know about changes in the native form input
                };
                /**
                 * @param {?} isFocused
                 * @return {?}
                 */
                NxInputDirective.prototype._focusChanged = function (isFocused) {
                    if (isFocused !== this.focused && !this.readonly) {
                        this.focused = isFocused;
                        this.stateChanges.next();
                    }
                };
                /**
                 * @return {?}
                 */
                NxInputDirective.prototype.ngOnChanges = function () {
                    this.stateChanges.next();
                };
                /**
                 * @return {?}
                 */
                NxInputDirective.prototype.ngOnDestroy = function () {
                    this.stateChanges.complete();
                };
                /**
                 * @return {?}
                 */
                NxInputDirective.prototype.ngDoCheck = function () {
                    if (this.ngControl) {
                        // We need to re-evaluate this on every change detection cycle, because there are some
                        // error triggers that we can't subscribe to (e.g. parent form submissions). This means
                        // that whatever logic is in here has to be super lean or we risk destroying the performance.
                        this.updateErrorState();
                    }
                    else {
                        // When the input isn't used together with `@angular/forms`, we need to check manually for
                        // changes to the native `value` property in order to update the floating label.
                        this._dirtyCheckNativeValue();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxInputDirective.prototype.updateErrorState = function () {
                    /** @type {?} */
                    var oldState = this.errorState;
                    /** @type {?} */
                    var parent = this._parentFormGroup || this._parentForm;
                    /** @type {?} */
                    var control = this.ngControl ? ( /** @type {?} */(this.ngControl.control)) : null;
                    /** @type {?} */
                    var newState = this._errorStateMatcher.isErrorState(control, parent);
                    if (newState !== oldState) {
                        this.errorState = newState;
                        this.stateChanges.next();
                    }
                };
                /**
                 * Set a list of ids that is currently describing this input
                 * (if you have hints and errors for example).
                 * @param {?} ids
                 * @return {?}
                 */
                NxInputDirective.prototype.setDescribedByIds = function (ids) {
                    this._ariaDescribedby = ids.join(' ');
                };
                // allow to set a arial label value in case there
                // is not possibility to display a proper label
                /**
                 * Method to set the aria label.
                 * This is required if you use the input outside of a formfield
                 * where you don't have a label connected.
                 * @param {?} value
                 * @return {?}
                 */
                NxInputDirective.prototype.setAriaLabel = function (value) {
                    this._ariaLabel = value;
                };
                /**
                 * @protected
                 * @return {?}
                 */
                NxInputDirective.prototype._isBadInput = function () {
                    // The `validity` property won't be present on platform-server.
                    /** @type {?} */
                    var validity = (( /** @type {?} */(this._elementRef.nativeElement))).validity;
                    return validity && validity.badInput;
                };
                Object.defineProperty(NxInputDirective.prototype, "empty", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @protected
                 * @return {?}
                 */
                NxInputDirective.prototype._isNeverEmpty = function () {
                    return NEVER_EMPTY.indexOf(this._type) > -1;
                };
                /**
                 * @protected
                 * @return {?}
                 */
                NxInputDirective.prototype._isTextarea = function () {
                    /** @type {?} */
                    var nativeElement = this._elementRef.nativeElement;
                    return nativeElement.nodeName ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;
                };
                /**
                 * @protected
                 * @return {?}
                 */
                NxInputDirective.prototype._validateType = function () {
                    if (INVALID_TYPES.indexOf(this._type) > -1) {
                        throw new Error("Input of type '" + this._type + "' is not supported");
                    }
                };
                Object.defineProperty(NxInputDirective.prototype, "shouldLabelFloat", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.focused || !this.empty;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @protected
                 * @return {?}
                 */
                NxInputDirective.prototype._dirtyCheckNativeValue = function () {
                    /** @type {?} */
                    var newValue = this.value;
                    if (this._previousNativeValue !== newValue) {
                        this._previousNativeValue = newValue;
                        this.stateChanges.next();
                    }
                };
                return NxInputDirective;
            }());
            NxInputDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Directive"], args: [{
                            selector: 'input[nxInput], textarea[nxInput], select[nxInput]',
                            host: {
                                '[class.c-input]': 'true',
                                '[attr.id]': 'id',
                                '[class.is-filled]': 'empty === false',
                                '[class.is-disabled]': 'disabled',
                                '[class.has-error]': 'errorState',
                                '[class.is-focused]': 'focused',
                                '[attr.aria-label]': '_ariaLabel || null',
                                '[attr.aria-describedby]': '_ariaDescribedby || null',
                                '[attr.aria-invalid]': 'errorState',
                                '[attr.aria-required]': 'required.toString()',
                                '(blur)': '_focusChanged(false)',
                                '(focus)': '_focusChanged(true)',
                                '(input)': '_onInput()',
                            },
                            providers: [{ provide: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_5__["NxFormfieldControl"], useExisting: NxInputDirective }],
                        },] }
            ];
            /** @nocollapse */
            NxInputDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["ElementRef"] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Self"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Optional"] }] },
                { type: _allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_6__["ErrorStateMatcher"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Inject"], args: [NX_INPUT_VALUE_ACCESSOR,] }] }
            ]; };
            NxInputDirective.propDecorators = {
                _ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"], args: ['nxAriaLabel',] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }],
                readonly: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }],
                type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var visibilityIcons = {
                show: 'password-show-o',
                hide: 'password-hide-o'
            };
            var NxPasswordToggleComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxPasswordToggleComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * \@docs-private
                     */
                    this._currentIcon = visibilityIcons['show'];
                    /**
                     * \@docs-private
                     */
                    this._pressed = false;
                    this._ariaLabel = 'Show password';
                }
                Object.defineProperty(NxPasswordToggleComponent.prototype, "ariaLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._ariaLabel;
                    },
                    /**
                     * Sets the aria-label needed for accessibility.
                     * Notice that this `aria-label` should describe the initial action according to the status of the visibility.
                     * E.g if you have an `input[type=password]` at the beginning then the
                     * password will be hidden and the correct aria-label would be 'Show password.'
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._ariaLabel) {
                            this._ariaLabel = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxPasswordToggleComponent.prototype.ngAfterViewInit = function () {
                    if (!this.control) {
                        console.warn('You need to pass an input as a control to the password toggle.');
                    }
                    else {
                        // show the right icon according to the initial type of the input
                        this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];
                    }
                };
                /**
                 * Toggles the type of the input.
                 * @return {?}
                 */
                NxPasswordToggleComponent.prototype.toggleInputType = function () {
                    if (this.control) {
                        this.control.type = this.control.type === 'password' ? 'text' : 'password';
                        this._pressed = !this._pressed;
                        this.toggleIcon();
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPasswordToggleComponent.prototype.toggleIcon = function () {
                    this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];
                };
                /**
                 * \@docs-private
                 * @param {?} $event
                 * @return {?}
                 */
                NxPasswordToggleComponent.prototype._onKeydown = function ($event) {
                    if ($event && ($event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["ENTER"] || $event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_8__["SPACE"])) {
                        this.toggleInputType();
                    }
                };
                Object.defineProperty(NxPasswordToggleComponent.prototype, "tabindex", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        if (this.control) {
                            return this.control.disabled ? -1 : 0;
                        }
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxPasswordToggleComponent;
            }());
            NxPasswordToggleComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Component"], args: [{
                            selector: 'nx-password-toggle',
                            template: "<nx-icon\n      aria-hidden=\"true\"\n      [name]=\"_currentIcon\">\n    </nx-icon>",
                            host: {
                                '[attr.aria-label]': 'ariaLabel',
                                '[attr.tabindex]': 'tabindex',
                                '[attr.aria-pressed]': '_pressed',
                                'role': 'button',
                                '(click)': 'toggleInputType()',
                                '(keydown)': '_onKeydown($event)'
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_7__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{position:relative;display:inline-block;height:24px;width:24px;cursor:pointer}:host:focus{outline:0}:host-context([data-whatinput=keyboard]):focus ::ng-deep nx-icon{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}:host-context(.is-disabled){pointer-events:none}"]
                        }] }
            ];
            /** @nocollapse */
            NxPasswordToggleComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["ChangeDetectorRef"] }
            ]; };
            NxPasswordToggleComponent.propDecorators = {
                control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }],
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxInputModule = /** @class */ (function () {
                function NxInputModule() {
                }
                return NxInputModule;
            }());
            NxInputModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_7__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"],
                                _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_5__["NxFormfieldModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_9__["NxIconModule"]
                            ],
                            declarations: [
                                NxInputDirective,
                                NxPasswordToggleComponent
                            ],
                            exports: [
                                _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_5__["NxFormfieldModule"],
                                NxInputDirective,
                                NxPasswordToggleComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-input.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-menu.js": 
        /*!**************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-menu.js ***!
          \**************************************************************************/
        /*! exports provided: NxMenuModule, NxMenuComponent, NxMenuLinkDirective, NxMenuButtonComponent, NxMenuButtonIconDirective, NxMenuItemDirective */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMenuModule", function () { return NxMenuModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMenuComponent", function () { return NxMenuComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMenuLinkDirective", function () { return NxMenuLinkDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMenuButtonComponent", function () { return NxMenuButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMenuButtonIconDirective", function () { return NxMenuButtonIconDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMenuItemDirective", function () { return NxMenuItemDirective; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This components is a collapsible menu for usage on smaller devices.
             * Can contain any content, but usually [nxMenuLink], [nxMenuGroup] and [nxAction].
             */
            var NxMenuComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxMenuComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._open = false;
                }
                Object.defineProperty(NxMenuComponent.prototype, "open", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._open;
                    },
                    /**
                     * Whether the menu is open or closed.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var open = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        if (open !== this._open) {
                            this._open = open;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /* Toggles the open state of the menu. */
                /**
                 * @return {?}
                 */
                NxMenuComponent.prototype.toggle = function () {
                    this.open = !this.open;
                };
                return NxMenuComponent;
            }());
            NxMenuComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            selector: 'nx-menu',
                            template: "<div class=\"nx-menu__wrapper\" *ngIf=\"open\">\n  <ng-content></ng-content>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[attr.aria-expanded]': 'open'
                            },
                            styles: [":host(.nx-menu){display:block}.nx-menu__wrapper{position:fixed;top:60px;left:0;right:0;bottom:0;z-index:1;overflow:auto;background:#fff}::ng-deep .nx-menu__link{display:block;padding:12px 0;font-size:18px;line-height:24px;outline:0}::ng-deep .nx-menu__link+.nx-menu__link{margin-top:8px}::ng-deep [data-whatinput=keyboard] .nx-menu__link:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px;outline:0}::ng-deep .nx-menu__item.nx-menu__item--large,::ng-deep .nx-menu__item.nx-menu__item--small{padding:24px;border-bottom:1px solid #d9d9d9}::ng-deep .nx-menu__item.nx-menu__item--large{padding-left:64px}"]
                        }] }
            ];
            /** @nocollapse */
            NxMenuComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
            ]; };
            NxMenuComponent.propDecorators = {
                open: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This is a menu link.
             * It adds styling to a link and is usually used within a [nxMenuItem].
             */
            var NxMenuLinkDirective = /** @class */ (function () {
                function NxMenuLinkDirective() {
                }
                return NxMenuLinkDirective;
            }());
            NxMenuLinkDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: 'a[nxMenuLink]',
                            host: {
                                class: 'nx-menu__link'
                            }
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This is a menu item is used to structure content whithin a menu.
             */
            var NxMenuItemDirective = /** @class */ (function () {
                function NxMenuItemDirective() {
                    this._size = 's';
                }
                Object.defineProperty(NxMenuItemDirective.prototype, "size", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._size;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._size = value === 'l' ? 'l' : 's';
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxMenuItemDirective;
            }());
            NxMenuItemDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: '[nxMenuItem]',
                            host: {
                                class: 'nx-menu__item',
                                '[class.nx-menu__item--small]': 'size === "s"',
                                '[class.nx-menu__item--large]': 'size === "l"'
                            }
                        },] }
            ];
            NxMenuItemDirective.propDecorators = {
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['nxMenuItem',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@title MenuButton
             */
            var NxMenuButtonComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxMenuButtonComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._expandable = false;
                    this._expanded = false;
                    this._type = 'root';
                }
                Object.defineProperty(NxMenuButtonComponent.prototype, "expandable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._expandable;
                    },
                    /**
                     * Whether this menu button is expandable or not. Will add a caret icon.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._expandable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMenuButtonComponent.prototype, "expanded", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._expanded;
                    },
                    /**
                     * Whether this menu button is expanded or not.
                     * Only works in combination with the `expandable` option set to `true`.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._expanded = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMenuButtonComponent.prototype, "type", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._type;
                    },
                    /**
                     * The type of this menu button.
                     * Can be `primary` or `secondary`, defaults to `primary`.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value === 'root' || value === 'nested') {
                            this._type = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxMenuButtonComponent;
            }());
            NxMenuButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: '[nxMenuButton]',
                            template: "<ng-content select=\"[nxMenuButtonIcon]\"></ng-content>\n<span class=\"nx-menu-button__label\">\n  <ng-content></ng-content>\n</span>\n<nx-icon *ngIf=\"expandable\" class=\"nx-menu-button__expand-icon\" name=\"chevron-down\"></nx-icon>\n",
                            host: {
                                '[class.is-expanded]': 'expandable && expanded',
                                '[class.is-expandable]': 'expandable',
                                '[class.nx-menu-button--nested]': 'type === "nested"',
                                '[class.nx-menu-button--root]': 'type === "root"',
                                'class': 'nx-menu-button'
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{display:flex;align-items:center;background-color:#fff;color:#414141;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;box-shadow:none;border:none;margin:0;cursor:pointer;line-height:24px;font-weight:400;font-size:18px;width:100%;text-decoration:none;padding:24px}:host:hover{background-color:#ececec}:host.is-expanded{font-weight:700;background-color:#007ab3;border-color:#007ab3;color:#fff}:host.is-expanded .nx-menu-button__expand-icon{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}:host.nx-menu-button--nested{background-color:#f5f5f5}:host.nx-menu-button--nested.is-expanded{background-color:#c1ebfb;border-color:#c1ebfb;color:#414141}:host::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]):focus{box-shadow:inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff;border-radius:8px;border:none}.nx-menu-button__expand-icon{display:flex;justify-content:center;transition:.2s;-webkit-transform:rotateZ(0);transform:rotateZ(0);width:16px;height:24px;margin-right:8px;flex:0 0 auto;font-size:24px}.nx-menu-button__label{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;flex:1 1 auto;text-align:left;line-height:1;padding:4px 0}::ng-deep .nx-menu-button__icon{margin-right:16px;height:24px;font-weight:400;flex:0 0 auto}"]
                        }] }
            ];
            /** @nocollapse */
            NxMenuButtonComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
            ]; };
            NxMenuButtonComponent.propDecorators = {
                expandable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                expanded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['nxType',] }]
            };
            /**
             * Icon that can be added to a [nxButton].
             */
            var NxMenuButtonIconDirective = /** @class */ (function () {
                function NxMenuButtonIconDirective() {
                }
                return NxMenuButtonIconDirective;
            }());
            NxMenuButtonIconDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                            selector: '[nxMenuButtonIcon]',
                            host: {
                                class: 'nx-menu-button__icon'
                            }
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var EXPORTED_MODULES = [
                NxMenuComponent,
                NxMenuLinkDirective,
                NxMenuItemDirective,
                NxMenuButtonComponent,
                NxMenuButtonIconDirective,
            ];
            var NxMenuModule = /** @class */ (function () {
                function NxMenuModule() {
                }
                return NxMenuModule;
            }());
            NxMenuModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_1__["NxIconModule"]],
                            declarations: EXPORTED_MODULES,
                            exports: EXPORTED_MODULES
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-menu.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-message.js": 
        /*!*****************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-message.js ***!
          \*****************************************************************************/
        /*! exports provided: NxMessageModule, NxMessageComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMessageModule", function () { return NxMessageModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMessageComponent", function () { return NxMessageComponent; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ICONS = {
                info: 'info-circle',
                error: 'exclamation-circle',
                success: 'check-circle',
                warning: 'exclamation-triangle'
            };
            var NxMessageComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxMessageComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._context = 'regular';
                    this._showIcon = false;
                    this._closable = false;
                    this._closeButtonLabel = 'Close dialog';
                    /**
                     * Event emitted when the close icon of the message has been clicked.
                     */
                    this.closeEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                }
                Object.defineProperty(NxMessageComponent.prototype, "context", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._context;
                    },
                    /**
                     * Sets the context of the message.
                     * The message box will color accordingly. Default: 'regular'
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._context) {
                            this._context = value;
                            this._icon = this.getIconName();
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "showIcon", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._showIcon;
                    },
                    /**
                     * Whether an icon that belongs to the context of the message should be displayed.
                     * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.
                     * \@deletion-target 9.0.0
                     *
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._showIcon = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "closable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._closable;
                    },
                    /**
                     * Whether a message should have a close icon in order to be dismissed.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                        if (newValue !== this._closable) {
                            this._closable = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "icon", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._icon;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "closeButtonLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._closeButtonLabel;
                    },
                    /**
                     * Sets the label of the close button of the message.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._closeButtonLabel) {
                            this._closeButtonLabel = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxMessageComponent.prototype._emitCloseEvent = function () {
                    this.closeEvent.emit();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxMessageComponent.prototype.getIconName = function () {
                    if (this._context === 'info') {
                        return ICONS.info;
                    }
                    else if (this._context === 'error') {
                        return ICONS.error;
                    }
                    else if (this._context === 'success') {
                        return ICONS.success;
                    }
                    else if (this._context === 'warning') {
                        return ICONS.warning;
                    }
                    return '';
                };
                return NxMessageComponent;
            }());
            NxMessageComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            selector: 'nx-message',
                            template: "<nx-icon *ngIf=\"showIcon && context !== 'regular'\"\n         class=\"nx-message__icon\"\n         [name]=\"icon\"\n         size=\"s\">\n</nx-icon>\n<button\n  *ngIf=\"closable\"\n  (click)=\"_emitCloseEvent()\"\n  [attr.aria-label]=\"closeButtonLabel\"\n  tabindex=\"0\"\n  class=\"nx-message__close-icon\">\n    <nx-icon\n      name=\"close\"\n      size=\"s\"\n      aria-hidden=\"true\">\n    </nx-icon>\n</button>\n\n\n<div class=\"nx-message__content-wrapper\">\n  <div class=\"nx-message__content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            exportAs: 'nxMessage',
                            host: {
                                '[class.context-info]': 'context === "info"',
                                '[class.context-error]': 'context === "error"',
                                '[class.context-success]': 'context === "success"',
                                '[class.context-warning]': 'context === "warning"',
                                '[class.nx-message--closable]': 'closable'
                            },
                            styles: [":host{width:100%;color:#414141;display:flex;align-items:flex-start;position:relative;background-color:#fff;border:1px solid;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:23px;margin:12px 0;font-size:16px;line-height:24px}.nx-message__content-wrapper{max-width:100%}:host,:host(.context-regular){border-color:#414141}:host(.context-info){border-color:#496ebd}:host(.context-info) .nx-message__icon{color:#496ebd}:host(.context-error){border-color:#dc3149}:host(.context-error) .nx-message__icon{color:#dc3149}:host(.context-success){border-color:#1e8927}:host(.context-success) .nx-message__icon{color:#1e8927}:host(.context-warning){border-color:#efbe25}:host(.context-warning) .nx-message__icon{color:#efbe25}.nx-message__icon{margin-right:16px}@media (max-width:703px){:host{padding:31px;display:block}:host(.context-error) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-info) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-success) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-warning) .nx-message__icon~.nx-message__content-wrapper .nx-message__content{display:inline;margin-left:31px}.nx-message__icon{position:absolute}}:host(.nx-message--closable){padding-right:39px}@media (max-width:703px){:host(.nx-message--closable){padding-right:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:0;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{font-size:16px;color:nx-colors(grey-tones,grey-tone-1)}:host-context([data-whatinput=keyboard]) .nx-message__close-icon:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
                        }] }
            ];
            /** @nocollapse */
            NxMessageComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] }
            ]; };
            NxMessageComponent.propDecorators = {
                context: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['nxContext',] }],
                showIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                closable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                closeButtonLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                closeEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"], args: ['close',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxMessageModule = /** @class */ (function () {
                function NxMessageModule() {
                }
                return NxMessageModule;
            }());
            NxMessageModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_1__["NxIconModule"]
                            ],
                            declarations: [
                                NxMessageComponent
                            ],
                            exports: [
                                NxMessageComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-message.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-natural-language-form.js": 
        /*!*******************************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-natural-language-form.js ***!
          \*******************************************************************************************/
        /*! exports provided: NxNaturalLanguageFormModule, NxNaturalLanguageFormComponent, NxWordComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNaturalLanguageFormModule", function () { return NxNaturalLanguageFormModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNaturalLanguageFormComponent", function () { return NxNaturalLanguageFormComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxWordComponent", function () { return NxWordComponent; });
            /* harmony import */ var _allianz_ngx_ndbx_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/input */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-input.js");
            /* harmony import */ var _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @allianz/ngx-ndbx/formfield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js");
            /* harmony import */ var _allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @allianz/ngx-ndbx/utils */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _allianz_ngx_ndbx_popover__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @allianz/ngx-ndbx/popover */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-popover.js");
            /* harmony import */ var _allianz_ngx_ndbx_dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @allianz/ngx-ndbx/dropdown */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-dropdown.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxWordComponent = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} _renderer
                 * @param {?} _overlay
                 */
                function NxWordComponent(elementRef, _changeDetectorRef, _renderer, _overlay) {
                    this.elementRef = elementRef;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._renderer = _renderer;
                    this._overlay = _overlay;
                    this.subscription = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                    this.subscriptionValues = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                    /**
                     * \@docs-private
                     */
                    this.hasErrors = false;
                    /**
                     * \@docs-private
                     */
                    this.inputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.currentTextWidth = 0;
                    // this will apply different min-widths to our component through our styles
                    /**
                     * Provide a hint for a minimal width. The actual size will be determined for inputs for each change.
                     */
                    this.size = 'regular';
                }
                /**
                 * @return {?}
                 */
                NxWordComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._validateControlChild();
                    this.subscription = this._control.stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.hasErrors = _this._control.errorState;
                        _this._changeDetectorRef.markForCheck();
                    }));
                    // if we have a ngcontrol available stick to its valueChanges subject
                    if (this._control.ngControl) {
                        this.subscriptionValues = this._control.ngControl.valueChanges.subscribe(( /**
                         * @param {?} value
                         * @return {?}
                         */function (/**
                         * @param {?} value
                         * @return {?}
                         */ value) {
                            _this.updateCurrentTextWidth();
                            _this.inputChanges.next();
                        }));
                        // in any other case it is a bre input and input changes are signaled through simple state changes
                    }
                    else {
                        this.subscriptionValues = this._control.stateChanges.subscribe(( /**
                         * @param {?} value
                         * @return {?}
                         */function (/**
                         * @param {?} value
                         * @return {?}
                         */ value) {
                            _this.updateCurrentTextWidth();
                            _this.inputChanges.next();
                        }));
                    }
                    this._control.setAriaLabel(this.label);
                };
                /**
                 * @return {?}
                 */
                NxWordComponent.prototype.ngOnDestroy = function () {
                    this.subscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * Calculate the width of the full text given by the input,
                 * that value is bound to this component so it can grow.
                 * The involved input is known to have a width of 100% an will fit the additional space given
                 * which completes the auto growing behavior.
                 * @return {?}
                 */
                NxWordComponent.prototype.updateCurrentTextWidth = function () {
                    // provide the canvas only lazy
                    if (!this.measureCanvas) {
                        this.measureCanvas = this._renderer.createElement('canvas');
                    }
                    /** @type {?} */
                    var ctx = this.measureCanvas.getContext('2d');
                    /** @type {?} */
                    var inputRef = this._control.elementRef;
                    /** @type {?} */
                    var styles = window.getComputedStyle(inputRef.nativeElement);
                    ctx.font = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_2__["getFontShorthand"])(styles);
                    /** @type {?} */
                    var metrics = ctx.measureText(this._control.value);
                    // add 1px (cursor width) to prevent jumping of the text on blur.
                    /** @type {?} */
                    var newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;
                    // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent
                    // Works as promised as long as there is not other tag around the word. Not expected but possible.
                    /** @type {?} */
                    var parent = this.elementRef.nativeElement.parentElement;
                    /** @type {?} */
                    var parentMeasurement = parent.getBoundingClientRect();
                    // Limit to own given minimal width
                    this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);
                    // Limit to container width
                    this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);
                    this._popover.updatePosition();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxWordComponent.prototype.repositionError = function () {
                    if (this._popover) {
                        this._popover.updatePosition();
                    }
                };
                // Fail if the required control is missing.
                /**
                 * @protected
                 * @return {?}
                 */
                NxWordComponent.prototype._validateControlChild = function () {
                    if (!this._control) {
                        throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxWordComponent.prototype.getConnectedOverlayOrigin = function () {
                    return this.elementRef;
                };
                Object.defineProperty(NxWordComponent.prototype, "isFocused", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._control.focused;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxWordComponent.prototype, "isFilled", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return !this._control.empty;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxWordComponent.prototype, "hasDropdown", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return Boolean(this._dropdown);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxWordComponent;
            }());
            NxWordComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["Component"], args: [{
                            selector: 'nx-word',
                            template: "<div\n  class=\"nx-word__input-wrapper\"\n  [nxPopoverTriggerFor]=\"popoverHover\"\n  nxPopoverTrigger='manual'\n  nxPopoverCloseable=\"false\"\n  nxPopoverDirection=\"top\"\n  [nxPopoverShow]=\"hasErrors && _errorChildren.length > 0\">\n\n  <!-- We only allow formfield controls here -->\n  <div *ngIf=\"!hasDropdown\" class=\"nx-word__inner-wrapper\">\n    <ng-content select=\"[nxInput]\"></ng-content>\n  </div>\n  <ng-content select=\"nx-dropdown\"></ng-content>\n</div>\n\n<nx-popover #popoverHover>\n  <ng-content select=\"[nxError]\"></ng-content>\n</nx-popover>\n",
                            host: {
                                '[class.size-short]': 'size == "short"',
                                '[class.size-regular]': 'size == "regular"',
                                '[class.size-long]': 'size == "long"',
                                '[class.has-error]': 'hasErrors',
                                '[class.is-focused]': 'isFocused',
                                '[class.is-filled]': 'isFilled',
                                '[class.has-dropdown]': 'hasDropdown',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{display:inline-block;position:relative;font-weight:400;text-align:center;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;width:100%}:host .nx-word__inner-wrapper{border-bottom:2px solid #d9d9d9}:host.size-short{min-width:80px}:host.size-regular{min-width:152px}:host.size-long{min-width:360px}@media (max-width:991px){:host.size-long{min-width:280px}}@media (max-width:703px){:host.size-long{min-width:248px}}:host ::ng-deep .c-input{display:inline-block;text-align:inherit;font-size:inherit;line-height:inherit;background:0 0;color:inherit;border:none;outline:0;margin:0;width:100%;max-width:100%;height:auto;box-shadow:none;padding:0 8px}:host ::ng-deep .c-input.is-focused{outline:0;box-shadow:none;border-bottom-width:2px}:host ::ng-deep .c-input.is-filled,:host ::ng-deep .c-input.is-focused{color:#006192;font-weight:400}:host ::ng-deep .c-input.is-disabled{cursor:not-allowed}:host ::ng-deep .c-input::-ms-clear{display:none}:host ::ng-deep nx-dropdown{position:relative;border-bottom:2px solid #d9d9d9}:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:inherit;margin-bottom:-2px}:host ::ng-deep nx-dropdown.is-filled{border-color:#007ab3;color:#006192}:host ::ng-deep nx-dropdown .nx-dropdown__icon{line-height:inherit}:host ::ng-deep .nx-word__input-wrapper{width:100%}:host(.is-filled) .nx-word__inner-wrapper,:host(.is-focused) .nx-word__inner-wrapper{border-color:#007ab3}:host(.has-error) .nx-word__inner-wrapper{border-color:#dc3149}:host.has-error ::ng-deep nx-dropdown{color:#dc3149;border-color:#dc3149}:host.has-error ::ng-deep .c-input.has-error{color:#dc3149}:host-context(.is-negative) ::ng-deep .nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown.is-filled{border-color:#fff;color:#fff}:host-context(.is-negative) ::ng-deep .c-input{color:#fff}:host-context(.is-negative) .nx-word__inner-wrapper{border-color:#fff}.nx-word__inner-wrapper{height:52px}@media (max-width:991px){:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:26px}.nx-word__inner-wrapper{height:36px}}:host-context(.nx-natural-language-form--small) .nx-word__inner-wrapper{height:36px}:host-context(.nx-natural-language-form--small) ::ng-deep nx-dropdown .nx-dropdown__container{margin-bottom:2px}"]
                        }] }
            ];
            /** @nocollapse */
            NxWordComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["Renderer2"] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"] }
            ]; };
            NxWordComponent.propDecorators = {
                _control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ContentChild"], args: [_allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_1__["NxFormfieldControl"],] }],
                _errorChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ContentChildren"], args: [_allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_1__["NxFormfieldErrorDirective"],] }],
                _popover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ViewChild"], args: [_allianz_ngx_ndbx_popover__WEBPACK_IMPORTED_MODULE_4__["NxPopoverTriggerDirective"],] }],
                _dropdown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ContentChild"], args: [_allianz_ngx_ndbx_dropdown__WEBPACK_IMPORTED_MODULE_5__["NxDropdownComponent"],] }],
                currentTextWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["HostBinding"], args: ['style.width.px',] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["Input"], args: ['nxSize',] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["Input"], args: ['nxLabel',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_SIZE = 'large';
            var NxNaturalLanguageFormComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxNaturalLanguageFormComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._negative = false;
                    /**
                     * \@docs-private
                     */
                    this.resizeEvent$ = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.updatePopoversSubscription = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                    /**
                     * \@docs-private
                     */
                    this._size = DEFAULT_SIZE;
                }
                Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative set of stylings should be used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "size", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._size;
                    },
                    /**
                     * Sets the size of the NLF. Default value: large
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._size = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.onResize = function (event) {
                    this.resizeEvent$.next();
                };
                /**
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    // Collect all words and listen for changes so we can update any open error popover
                    // which would otherwise get wrongly positioned.
                    /** @type {?} */
                    var subjects = this._words.map(( /**
                     * @param {?} word
                     * @return {?}
                     */function (word) { return word.inputChanges; }));
                    /** @type {?} */
                    var source = Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"]).apply(void 0, __spread(subjects));
                    this.updatePopoversSubscription = source.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.updatePositionPopovers();
                    }));
                    this.resizeObservable = this.resizeEvent$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["throttleTime"])(500), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["delay"])(100));
                    this.resizeObservable.subscribe(( /**
                     * @return {?}
                     */function () { return _this.resizeWords(); }));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.resizeWords = function () {
                    this._words.forEach(( /**
                     * @param {?} word
                     * @return {?}
                     */function (word) {
                        word.updateCurrentTextWidth();
                    }));
                };
                /**
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.ngOnDestroy = function () {
                    this.updatePopoversSubscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.updatePositionPopovers = function () {
                    if (this._words) {
                        this._words.forEach(( /**
                         * @param {?} word
                         * @return {?}
                         */function (word) {
                            word.repositionError();
                        }));
                    }
                };
                return NxNaturalLanguageFormComponent;
            }());
            NxNaturalLanguageFormComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["Component"], args: [{
                            selector: 'nx-natural-language-form',
                            template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.is-negative]': 'negative',
                                '[class.nx-natural-language-form--small]': 'size === "small"',
                                '[class.nx-natural-language-form--large]': 'size === "large"',
                            },
                            styles: [":host{display:block;padding-top:72px;padding-bottom:80px;color:#414141;font-weight:300;font-size:40px;line-height:52px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}:host.is-negative{color:#fff}@media (max-width:991px){:host{font-size:26px;line-height:36px}}@media (max-width:703px){:host{font-size:26px}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:26px;line-height:32px;letter-spacing:.3px}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}"]
                        }] }
            ];
            /** @nocollapse */
            NxNaturalLanguageFormComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ChangeDetectorRef"] }
            ]; };
            NxNaturalLanguageFormComponent.propDecorators = {
                _words: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["ContentChildren"], args: [NxWordComponent,] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["Input"], args: ['nxNegative',] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["Input"] }],
                onResize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["HostListener"], args: ['window:orientationchange', ['$event'],] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["HostListener"], args: ['window:resize', ['$event'],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxNaturalLanguageFormModule = /** @class */ (function () {
                function NxNaturalLanguageFormModule() {
                }
                return NxNaturalLanguageFormModule;
            }());
            NxNaturalLanguageFormModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_9__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_10__["CommonModule"],
                                _allianz_ngx_ndbx_input__WEBPACK_IMPORTED_MODULE_0__["NxInputModule"],
                                _allianz_ngx_ndbx_popover__WEBPACK_IMPORTED_MODULE_4__["NxPopoverModule"]
                            ],
                            declarations: [
                                NxNaturalLanguageFormComponent,
                                NxWordComponent
                            ],
                            exports: [
                                NxNaturalLanguageFormComponent,
                                NxWordComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-natural-language-form.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-popover.js": 
        /*!*****************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-popover.js ***!
          \*****************************************************************************/
        /*! exports provided: NxPopoverModule, NxPopoverComponent, NxPopoverTriggerDirective, NxPopoverContentDirective */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverModule", function () { return NxPopoverModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverComponent", function () { return NxPopoverComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverTriggerDirective", function () { return NxPopoverTriggerDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverContentDirective", function () { return NxPopoverContentDirective; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Popover content that will be rendered lazily
             * after the popover is opened for the first time.
             */
            var NxPopoverContentDirective = /** @class */ (function () {
                /**
                 * @param {?} _template
                 */
                function NxPopoverContentDirective(_template) {
                    this._template = _template;
                }
                return NxPopoverContentDirective;
            }());
            NxPopoverContentDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Directive"], args: [{
                            selector: 'ng-template[nxPopoverContent]'
                        },] }
            ];
            /** @nocollapse */
            NxPopoverContentDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPopoverComponent = /** @class */ (function () {
                function NxPopoverComponent() {
                    /**
                     * Event emitted when the popover is closed.
                     */
                    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_5__["EventEmitter"]();
                    /**
                     * \@docs-private
                     */
                    this.closeButtonClick = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.showCloseButton = false;
                    /**
                     * \@docs-private
                     */
                    this.arrowStyle = {};
                }
                /**
                 * @return {?}
                 */
                NxPopoverComponent.prototype.ngOnDestroy = function () {
                    this.closed.complete();
                };
                // emit to notify the popover trigger directive that the close button was clicked
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverComponent.prototype.emitButtonClick = function () {
                    this.closeButtonClick.next();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverComponent.prototype.emitClosedEvent = function () {
                    this.closed.emit();
                };
                Object.defineProperty(NxPopoverComponent.prototype, "classList", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        if (this.direction) {
                            return ["nx-popover--" + this.direction];
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxPopoverComponent;
            }());
            NxPopoverComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Component"], args: [{
                            selector: 'nx-popover',
                            template: "<ng-template>\n  <div [ngClass]=\"classList\" role=\"tooltip\" aria-hidden=\"false\">\n    <div class=\"nx-popover__content\">\n        <div class=\"nx-popover__arrow\" [ngStyle]=\"arrowStyle\">\n          </div>\n      <span aria-hidden=\"true\" class=\"nx-popover__close-icon\" (click)=\"emitButtonClick()\"\n            *ngIf=\"showCloseButton\">\n        <nx-icon name=\"close\"></nx-icon>\n      </span>\n      <span [id]=\"id\">\n        <ng-content></ng-content>\n        <ng-container [ngTemplateOutlet]=\"_lazyContent?._template\"></ng-container>\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ChangeDetectionStrategy"].OnPush,
                            exportAs: 'nxPopover',
                            styles: [".nx-popover__content{background-color:#fff;border:1px solid #d9d9d9;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:23px;display:inline-block;font-size:16px}.nx-popover__close-icon{position:absolute;top:4px;right:4px;cursor:pointer;font-size:16px;line-height:16px}[data-whatintent=mouse] .nx-popover__content:focus{outline:0}.nx-popover__arrow{width:12px;height:12px;background-color:inherit;position:absolute;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);border-top:1px solid #d9d9d9;border-left:1px solid #d9d9d9}.nx-popover--top .nx-popover__arrow{-webkit-transform:translate(-50%,0) rotate(225deg);transform:translate(-50%,0) rotate(225deg);bottom:-5px;box-shadow:2px 2px 1px 1px #fff,-2px -2px 4px rgba(65,65,65,.5)}.nx-popover--right .nx-popover__arrow{-webkit-transform:translate(0,-50%) rotate(-45deg);transform:translate(0,-50%) rotate(-45deg);left:-5px}.nx-popover--bottom .nx-popover__arrow{-webkit-transform:translate(-50%,0) rotate(45deg);transform:translate(-50%,0) rotate(45deg);top:-5px}.nx-popover--left .nx-popover__arrow{-webkit-transform:translate(0,-50%) rotate(135deg);transform:translate(0,-50%) rotate(135deg);right:-5px}"]
                        }] }
            ];
            /** @nocollapse */
            NxPopoverComponent.ctorParameters = function () { return []; };
            NxPopoverComponent.propDecorators = {
                templateRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_5__["TemplateRef"],] }],
                _lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ContentChild"], args: [NxPopoverContentDirective,] }],
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Output"], args: ['nxClosed',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId = 0;
            /** @type {?} */
            var fallbacks = [
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top',
                    offsetX: 0,
                    offsetY: 16
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'bottom',
                    offsetX: 0,
                    offsetY: -16
                },
                {
                    originX: 'center',
                    originY: 'bottom',
                    overlayX: 'center',
                    overlayY: 'top',
                    offsetX: 0,
                    offsetY: 16
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'top',
                    offsetX: 0,
                    offsetY: 16
                },
                {
                    originX: 'end',
                    originY: 'center',
                    overlayX: 'start',
                    overlayY: 'center',
                    offsetX: 16,
                    offsetY: 0
                },
                {
                    originX: 'start',
                    originY: 'center',
                    overlayX: 'end',
                    overlayY: 'center',
                    offsetX: -16,
                    offsetY: 0
                },
                {
                    originX: 'center',
                    originY: 'top',
                    overlayX: 'center',
                    overlayY: 'bottom',
                    offsetX: 0,
                    offsetY: -16
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom',
                    offsetX: 0,
                    offsetY: -16
                }
            ];
            var NxPopoverTriggerDirective = /** @class */ (function () {
                /**
                 * @param {?} overlay
                 * @param {?} elementRef
                 * @param {?} viewContainerRef
                 * @param {?} eventManager
                 */
                function NxPopoverTriggerDirective(overlay, elementRef, viewContainerRef, eventManager) {
                    this.overlay = overlay;
                    this.elementRef = elementRef;
                    this.viewContainerRef = viewContainerRef;
                    this.eventManager = eventManager;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._show = false;
                    this._closeable = null;
                    /**
                     * \@docs-private
                     */
                    this.id = 'nx-popover-' + nextId++;
                    /**
                     * An event is emitted if the visibility status of the popover changes.
                     */
                    this.changeShow = new _angular_core__WEBPACK_IMPORTED_MODULE_5__["EventEmitter"]();
                    /**
                     * Sets the desired direction to open the popover. E.g., right, left, bottom, top
                     */
                    this.direction = 'right';
                    /**
                     * Whether the popover will be opened automatically.
                     */
                    this.popoverInitialVisible = false;
                    /**
                     * An event is emitted when the visibility of the popopver changes.
                     */
                    this.visibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_5__["EventEmitter"]();
                    /**
                     * Whether the popover opens in modal state.
                     */
                    this.modal = false;
                    // If nxPopoverTrigger equals to 'hover' the popover opens on mouseenter and closes on mouseout.
                    // If nxPopoverTrigger equals to 'click' the popover opens on click and closes on a click of the close icon or pressing ESC key.
                    // If nxPopoverTrigger equals to 'manual' the popover opens only when programatically requested.
                    /**
                     * Sets the way to trigger the popover. Options are hover, click, manual
                     */
                    this.trigger = 'click';
                    /**
                     * Sets the scroll strategy. 'close' closes the popover on scroll while 'reposition' scrolls the popover with the origin.
                     */
                    this.scrollStrategy = 'close';
                    this._documentClickObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["fromEvent"])(document, 'click');
                }
                Object.defineProperty(NxPopoverTriggerDirective.prototype, "show", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._show;
                    },
                    /**
                     * Whether to show or hide the popover.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        if (this._show !== value) {
                            this._show = value;
                            if (this._show) {
                                this.openPopover();
                            }
                            else {
                                this.closePopover();
                            }
                            this.changeShow.emit(this._show);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPopoverTriggerDirective.prototype, "closeable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._closeable;
                    },
                    /**
                     * Whether to show a close button. By default a close icon is only shown for trigger type click.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._closeable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        if (this.popover) {
                            this.popover.showCloseButton = this.isCloseable();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.onMouseEnter = function () {
                    if (this.trigger === 'hover') {
                        this.openPopover();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.onMouseExit = function () {
                    if (this.trigger === 'hover') {
                        this.closePopover();
                    }
                };
                /**
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.ngOnInit = function () {
                    this.popover.showCloseButton = this.isCloseable();
                };
                /**
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    this.popover.id = this.id;
                    this.eventManager.addGlobalEventListener('window', 'keyup.esc', ( /**
                     * @return {?}
                     */function () {
                        _this.closePopover();
                    }));
                    this.popover.closeButtonClick.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.closePopover();
                    }));
                    if (this.popoverInitialVisible || this._show) {
                        this.openPopover();
                    }
                };
                /**
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.ngOnDestroy = function () {
                    this.closePopover();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                Object.defineProperty(NxPopoverTriggerDirective.prototype, "isOpen", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.overlayRef && this.createOverlay().hasAttached();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.isCloseable = function () {
                    return (this.trigger === 'click' && this._closeable === null) || this._closeable;
                };
                /**
                 * Update the popover with the given position strategy.
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.updatePosition = function () {
                    if (this._positionStrategy) {
                        this._positionStrategy.apply();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.handleClick = function () {
                    if (this.trigger === 'click') {
                        if (this.isOpen) {
                            this.closePopover();
                        }
                        else {
                            this.openPopover();
                        }
                    }
                };
                /**
                 * Open the popover instance.
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.open = function () {
                    this.show = true;
                };
                /**
                 * Close the popover instance.
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.close = function () {
                    this.show = false;
                };
                /**
                 * Toggle the popover instance.
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.toggle = function () {
                    this.show = !this.show;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.openPopover = function () {
                    if (!this.createOverlay().hasAttached()) {
                        this._embeddedViewRef = this.createOverlay().attach(this.portal);
                        if (!this.modal && this.trigger === 'click') {
                            this.waitForClose();
                        }
                    }
                };
                // detaches the overlay
                // we are listening to the detachments observable which will then emit the nxClosed event
                // on the popover component
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.closePopover = function () {
                    if (this.overlayRef) {
                        this.overlayRef.detach();
                        this._embeddedViewRef = null;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.createOverlay = function () {
                    if (!this.overlayRef) {
                        this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](this.popover.templateRef, this.viewContainerRef);
                        /** @type {?} */
                        var overlayState = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayConfig"]();
                        overlayState.positionStrategy = this.getPosition();
                        this._positionStrategy = overlayState.positionStrategy;
                        if (this.scrollStrategy === 'reposition') {
                            overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
                        }
                        else {
                            overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
                        }
                        overlayState.scrollStrategy.enable();
                        if (this.modal && this.trigger === 'click') {
                            overlayState.hasBackdrop = true;
                        }
                        this.overlayRef = this.overlay.create(overlayState);
                        this.subscribeToPositions(( /** @type {?} */(overlayState.positionStrategy)));
                        this._subscribeToDetach();
                        if (this.modal) {
                            this._subscribeToBackdropClick();
                        }
                    }
                    return this.overlayRef;
                };
                /**
                 * @private
                 * @param {?} position
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.subscribeToPositions = function (position) {
                    var _this = this;
                    position.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} change
                     * @return {?}
                     */function (/**
                     * @param {?} change
                     * @return {?}
                     */ change) {
                        /** @type {?} */
                        var pair = change.connectionPair;
                        _this.positionOverlay(pair);
                        _this.positionArrow(pair);
                        // These position changes arrive too late,
                        // We have to trigger the change detection manually
                        // as it's detached from any render hierarchy
                        // and only updated by the overlay when attached.
                        if (_this._embeddedViewRef && !_this._embeddedViewRef.destroyed) {
                            _this._embeddedViewRef.detectChanges();
                        }
                    }));
                };
                // for modal popovers close the popover on backdrop clicks
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype._subscribeToBackdropClick = function () {
                    var _this = this;
                    this.overlayRef.backdropClick().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        _this.closePopover();
                    }));
                };
                // Emit the nxClosed event on the popover component when the overlay detaches
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype._subscribeToDetach = function () {
                    var _this = this;
                    this.overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.popover.emitClosedEvent();
                    }));
                };
                // subscribe to document clicks when trigger='click' to close the popover on clicks on the background
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.waitForClose = function () {
                    var _this = this;
                    return this._documentClickObservable
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) { return event.target; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(( /**
                     * @param {?} target
                     * @return {?}
                     */function (/**
                     * @param {?} target
                     * @return {?}
                     */ target) { return !_this.elementRef.nativeElement.contains(target); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this.popover.closed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this.closePopover();
                    }));
                };
                /**
                 * @private
                 * @param {?} pair
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.positionOverlay = function (pair) {
                    if (pair.originX === 'end' && pair.overlayX === 'start') {
                        this.popover.direction = 'right';
                    }
                    else if (pair.originY === 'bottom' && pair.overlayY === 'top') {
                        this.popover.direction = 'bottom';
                    }
                    else if (pair.originX === 'start' && pair.overlayX === 'end') {
                        this.popover.direction = 'left';
                    }
                    else if (pair.originY === 'top' && pair.overlayY === 'bottom') {
                        this.popover.direction = 'top';
                    }
                };
                /**
                 * @private
                 * @param {?} pair
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.positionArrow = function (pair) {
                    /** @type {?} */
                    var parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;
                    /** @type {?} */
                    var parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;
                    /** @type {?} */
                    var parentElementLeftOffset = this.overlayRef.overlayElement.parentElement.offsetLeft;
                    /** @type {?} */
                    var overlayElementLeftOffset = this.overlayRef.overlayElement.offsetLeft;
                    // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.
                    /** @type {?} */
                    var targetPosition = (parentElementPositionX + parentElementWidth) - (parentElementLeftOffset + overlayElementLeftOffset);
                    if (pair.originX === pair.overlayX) {
                        /** @type {?} */
                        var direction = 'left';
                        /** @type {?} */
                        var arrowStyle = {};
                        arrowStyle[direction] = targetPosition + 'px';
                        this.popover.arrowStyle = arrowStyle;
                    }
                    if ((pair.originY === 'bottom' || pair.originY === 'top') && pair.overlayX === 'center') {
                        this.popover.arrowStyle = { left: targetPosition + 'px' };
                    }
                    if ((pair.originX === 'end' || pair.originX === 'start') && pair.overlayY === 'center') {
                        this.popover.arrowStyle = { top: '50%' };
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective.prototype.getPosition = function () {
                    /** @type {?} */
                    var positions;
                    /** @type {?} */
                    var offsetX = 0;
                    /** @type {?} */
                    var offsetY = 0;
                    if (this.direction === 'top') {
                        positions = [{
                                overlayX: 'center',
                                overlayY: 'bottom',
                                originX: 'center',
                                originY: 'top'
                            }];
                        offsetX = 0;
                        offsetY = -20;
                    }
                    else if (this.direction === 'right') {
                        positions = [{
                                overlayX: 'start',
                                overlayY: 'center',
                                originX: 'end',
                                originY: 'center'
                            }];
                        offsetX = 20;
                        offsetY = 0;
                    }
                    else if (this.direction === 'bottom') {
                        positions = [{
                                overlayX: 'center',
                                overlayY: 'top',
                                originX: 'center',
                                originY: 'bottom'
                            }];
                        offsetX = 0;
                        offsetY = 20;
                    }
                    else if (this.direction === 'left') {
                        positions = [{
                                overlayX: 'end',
                                overlayY: 'center',
                                originX: 'start',
                                originY: 'center'
                            }];
                        offsetX = -20;
                        offsetY = 0;
                    }
                    return this.overlay.position().flexibleConnectedTo(this.elementRef)
                        .withPositions(__spread(positions, fallbacks))
                        .withDefaultOffsetX(offsetX)
                        .withDefaultOffsetY(offsetY);
                };
                return NxPopoverTriggerDirective;
            }());
            NxPopoverTriggerDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Directive"], args: [{
                            selector: '[nxPopoverTriggerFor]',
                            exportAs: 'nxPopoverTrigger',
                            host: {
                                '(click)': 'handleClick()',
                                'aria-haspopup': 'true',
                                '[attr.aria-expanded]': 'isOpen',
                                '[attr.aria-describedby]': 'isOpen ? id : null'
                            }
                        },] }
            ];
            /** @nocollapse */
            NxPopoverTriggerDirective.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewContainerRef"] },
                { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["EventManager"] }
            ]; };
            NxPopoverTriggerDirective.propDecorators = {
                changeShow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Output"], args: ['nxPopoverShowChange',] }],
                show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverShow',] }],
                closeable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverCloseable',] }],
                popover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverTriggerFor',] }],
                direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverDirection',] }],
                popoverInitialVisible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverInitialVisible',] }],
                visibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverVisibleChange',] }],
                modal: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverModal',] }],
                trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverTrigger',] }],
                scrollStrategy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"], args: ['nxPopoverScrollStrategy',] }],
                onMouseEnter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["HostListener"], args: ['mouseenter',] }],
                onMouseExit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["HostListener"], args: ['mouseleave',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["HostListener"], args: ['touchstart',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPopoverModule = /** @class */ (function () {
                function NxPopoverModule() {
                }
                return NxPopoverModule;
            }());
            NxPopoverModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_8__["NxIconModule"]
                            ],
                            declarations: [
                                NxPopoverTriggerDirective,
                                NxPopoverComponent,
                                NxPopoverContentDirective
                            ],
                            exports: [
                                NxPopoverTriggerDirective,
                                NxPopoverComponent,
                                NxPopoverContentDirective
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-popover.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-sidebar.js": 
        /*!*****************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-sidebar.js ***!
          \*****************************************************************************/
        /*! exports provided: NxSidebarModule, MAX_WIDTH, MIN_WIDTH, AUTO_COLLAPSE_WIDTH, RESIZE_STEP_SIZE, NxSidebarComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxSidebarModule", function () { return NxSidebarModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_WIDTH", function () { return MAX_WIDTH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MIN_WIDTH", function () { return MIN_WIDTH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTO_COLLAPSE_WIDTH", function () { return AUTO_COLLAPSE_WIDTH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESIZE_STEP_SIZE", function () { return RESIZE_STEP_SIZE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxSidebarComponent", function () { return NxSidebarComponent; });
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAX_WIDTH = 400;
            /** @type {?} */
            var MIN_WIDTH = 56;
            /** @type {?} */
            var AUTO_COLLAPSE_WIDTH = 168;
            /** @type {?} */
            var RESIZE_STEP_SIZE = 20;
            var NxSidebarComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} renderer
                 * @param {?} _element
                 */
                function NxSidebarComponent(_changeDetectorRef, renderer, _element) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this.renderer = renderer;
                    this._element = _element;
                    /**
                     * Emits the new width of the sidebar on resize or on close/open event.
                     */
                    this.widthChange = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                    this._resizeable = false;
                    this._minWidth = MIN_WIDTH;
                    this._resizeHandleAriaLabel = '';
                    this._open = true;
                    this._width = 0;
                    this._resizing = false;
                    this._previousWidth = 0;
                    this._isMobile = false;
                    this._resizeWidth = 0;
                    this._unsubscribeListeners = [];
                    this._onResize = this._onResize.bind(this);
                    this._onResizeEnd = this._onResizeEnd.bind(this);
                }
                Object.defineProperty(NxSidebarComponent.prototype, "resizeable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._resizeable;
                    },
                    /**
                     * If set to `true` this will enable dynamic resizing of the sidebar.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
                        if (newValue !== this._resizeable) {
                            this._resizeable = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSidebarComponent.prototype, "minWidth", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._minWidth;
                    },
                    /**
                     * Sets the minimal width (in pixel) of the sidebar.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._minWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceNumberProperty"])(value) || MIN_WIDTH;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSidebarComponent.prototype, "resizeHandleAriaLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._resizeHandleAriaLabel;
                    },
                    /**
                     * This sets the accessibility label for the resize handle of the sidebar.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._resizeHandleAriaLabel) {
                            this._resizeHandleAriaLabel = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSidebarComponent.prototype, "open", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._open;
                    },
                    /**
                     * This reflects the current open state of the sidebar.
                     * It will be `true` if the sidebar is expanded and `false` if the sidebar is closed.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
                        if (newValue !== this._open) {
                            this._open = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSidebarComponent.prototype, "width", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._width;
                    },
                    /**
                     * This sets the width of the sidebar.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Math.max(value, this.minWidth);
                        if (newValue !== this._width) {
                            this._width = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxSidebarComponent.prototype.ngOnInit = function () {
                    this.width = this._element.nativeElement.clientWidth;
                };
                /**
                 * @return {?}
                 */
                NxSidebarComponent.prototype.ngOnDestroy = function () {
                    this._removeDragEventListeners();
                };
                /**
                 * This will expand the sidebar to its full width.
                 * @return {?}
                 */
                NxSidebarComponent.prototype.expand = function () {
                    this.open = true;
                };
                /**
                 * This will close the sidebar to its minimal width.
                 * @return {?}
                 */
                NxSidebarComponent.prototype.close = function () {
                    this.open = false;
                };
                /**
                 * This will close or expand the sidebar depending if its expanded or closed.
                 * @return {?}
                 */
                NxSidebarComponent.prototype.toggle = function () {
                    if (this.open) {
                        this.close();
                    }
                    else {
                        this.expand();
                    }
                    this._emitWidthChange(this._sidebarElementWidth);
                };
                Object.defineProperty(NxSidebarComponent.prototype, "_sidebarElementWidth", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        if (this._resizing) {
                            return this._resizeWidth;
                        }
                        return this.open ? this.width : this.minWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxSidebarComponent.prototype._onResizeStart = function (event) {
                    if (event.type.startsWith('touch')) {
                        event = event.changedTouches[0];
                    }
                    this._resizeStartX = event.screenX;
                    this._resizeStartWidth = this.open ? this.width : this.minWidth;
                    this._resizeWidth = this.width;
                    this._attachDragEventListeners();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxSidebarComponent.prototype._onResize = function (event) {
                    this._resizing = true;
                    if (event.type.startsWith('touch')) {
                        event = event.changedTouches[0];
                    }
                    /** @type {?} */
                    var dx = event.screenX - this._resizeStartX;
                    this._resizeWidth = Math.max(this.minWidth, this._resizeStartWidth + dx);
                    this.open = this._resizeWidth > this.minWidth;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxSidebarComponent.prototype._onResizeEnd = function (event) {
                    this._resizing = false;
                    this._removeDragEventListeners();
                    if (this._isMouseDrag(this._resizeStartX, event.screenX)) {
                        if (this._resizeWidth < AUTO_COLLAPSE_WIDTH) {
                            this.open = false;
                            this._emitWidthChange(this._sidebarElementWidth);
                        }
                        else {
                            this.open = true;
                            this.width = Math.min(MAX_WIDTH, this._resizeWidth);
                            this._emitWidthChange(this.width);
                        }
                    }
                    this._resizeWidth = 0;
                };
                /**
                 * @return {?}
                 */
                NxSidebarComponent.prototype._onToggleClick = function () {
                    this.toggle();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxSidebarComponent.prototype._onResizeHandleClick = function (event) {
                    if (this._isMouseDrag(this._resizeStartX, event.screenX)) {
                        return;
                    }
                    this.toggle();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxSidebarComponent.prototype._onSidebarKeydown = function (event) {
                    if (event.which === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["SPACE"]) {
                        event.preventDefault();
                        this.toggle();
                    }
                    else if (event.which === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]) {
                        this.width = this.width - RESIZE_STEP_SIZE;
                        if (this.width <= AUTO_COLLAPSE_WIDTH) {
                            this.open = false;
                            this.width = AUTO_COLLAPSE_WIDTH + 1;
                        }
                        this._emitWidthChange(this.width);
                    }
                    else if (event.which === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]) {
                        if (this.open) {
                            this.width = Math.min(MAX_WIDTH, this.width + RESIZE_STEP_SIZE);
                        }
                        else {
                            this.open = true;
                            this.width = Math.max(this.width, AUTO_COLLAPSE_WIDTH);
                        }
                        this._emitWidthChange(this.width);
                    }
                };
                /**
                 * @private
                 * @param {?} width
                 * @return {?}
                 */
                NxSidebarComponent.prototype._emitWidthChange = function (width) {
                    this.widthChange.emit(width);
                };
                /**
                 * @private
                 * @param {?} startX
                 * @param {?} endX
                 * @return {?}
                 */
                NxSidebarComponent.prototype._isMouseDrag = function (startX, endX) {
                    return Math.abs(endX - startX) > 5;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxSidebarComponent.prototype._attachDragEventListeners = function () {
                    this._unsubscribeListeners.push(this.renderer.listen('document', 'mousemove', this._onResize));
                    this._unsubscribeListeners.push(this.renderer.listen('document', 'mouseup', this._onResizeEnd));
                    this._unsubscribeListeners.push(this.renderer.listen('document', 'touchmove', this._onResize));
                    this._unsubscribeListeners.push(this.renderer.listen('document', 'touchend', this._onResizeEnd));
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxSidebarComponent.prototype._removeDragEventListeners = function () {
                    this._unsubscribeListeners.forEach(( /**
                     * @param {?} unsubscribe
                     * @return {?}
                     */function (/**
                     * @param {?} unsubscribe
                     * @return {?}
                     */ unsubscribe) { return unsubscribe(); }));
                };
                return NxSidebarComponent;
            }());
            NxSidebarComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                            template: "<div class=\"nx-sidebar__box\"\n  [attr.aria-expanded]=\"open\">\n  <div class=\"nx-sidebar__content\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"nx-sidebar__toggle\">\n    <button class=\"nx-sidebar__toggle-button\"\n        (click)=\"_onToggleClick()\"\n        [attr.aria-label]=\"resizeHandleAriaLabel\"\n        type=\"button\">\n        <nx-icon name=\"chevron-left\" aria-hidden=\"true\"></nx-icon>\n        <nx-icon name=\"chevron-left\" aria-hidden=\"true\"></nx-icon>\n    </button>\n  </div>\n</div>\n\n<button class=\"nx-sidebar__handle\"\n  *ngIf=\"resizeable\"\n  tabindex=\"0\"\n  type=\"button\"\n  (mousedown)=\"_onResizeStart($event)\"\n  (keydown)=\"_onSidebarKeydown($event)\"\n  (touchstart)=\"_onResizeStart($event)\"\n  (click)=\"_onResizeHandleClick($event)\"\n  [attr.aria-label]=\"resizeHandleAriaLabel\"></button>\n",
                            selector: 'nx-sidebar',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.is-resizing]': '_resizing',
                                '[class.is-closed]': '!open',
                                '[style.width.px]': "_sidebarElementWidth"
                            },
                            styles: [":host{position:relative;height:100%;transition:width .15s;display:flex;flex:0 0 auto;width:280px}:host.is-resizing{transition:none}@media (max-width:703px){:host{width:100%;position:absolute;transition:none}:host .nx-sidebar__handle{display:none}}:host.is-closed .nx-sidebar__toggle-button{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}.nx-sidebar__toggle{display:flex;padding:16px 0;justify-content:flex-end;flex-shrink:0}.nx-sidebar__toggle::after,.nx-sidebar__toggle::before{content:'';display:block;flex:0 1 24px}.nx-sidebar__handle{position:absolute;right:-14px;top:0;bottom:0;display:flex;flex:0 0 16px;justify-content:center;align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;box-shadow:none;background:0 0;margin:0;cursor:col-resize;color:#c2c2c2;outline:0;z-index:1}.nx-sidebar__handle::before{content:'||';font-size:14px;letter-spacing:-1px;font-weight:600;color:inherit}.nx-sidebar__handle::-moz-focus-inner{border:0}.nx-sidebar__toggle-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;box-shadow:none;background:0 0;margin:0;padding:0;cursor:pointer;color:#414141;outline:0;white-space:nowrap;font-size:22px}.nx-sidebar__toggle-button:hover{color:#999}.nx-sidebar__toggle-button:active{color:#5b5b5b}:host-context([data-whatinput=keyboard]) .nx-sidebar__toggle-button:focus{box-shadow:0 0 0 4px #009de6;border-radius:4px}.nx-sidebar__toggle-button>nx-icon:last-child{margin-left:-16px}.nx-sidebar__toggle-button::-moz-focus-inner{border:0}.nx-sidebar__box{height:100%;flex:1 1 100%;display:flex;overflow:hidden;flex-direction:column;background-color:#f5f5f5}@media screen and (-ms-high-contrast:active){.nx-sidebar__handle::before{box-shadow:0 0 0 6px window,0 0 0 8px windowText}.nx-sidebar__toggle-button{border:1px solid windowText;padding-top:4px}.nx-sidebar__box{border-right:1px solid windowText}}.nx-sidebar__content{flex:1 1 100%;overflow:hidden;overflow-y:auto;padding-top:16px}"]
                        }] }
            ];
            /** @nocollapse */
            NxSidebarComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"] }
            ]; };
            NxSidebarComponent.propDecorators = {
                widthChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"] }],
                resizeable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                minWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }],
                resizeHandleAriaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxSidebarModule = /** @class */ (function () {
                function NxSidebarModule() {
                }
                return NxSidebarModule;
            }());
            NxSidebarModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_0__["NxIconModule"]],
                            declarations: [NxSidebarComponent],
                            exports: [NxSidebarComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-sidebar.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-tree.js": 
        /*!**************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-tree.js ***!
          \**************************************************************************/
        /*! exports provided: NxTreeModule, NxTreeComponent, NxTreeFlatDataSource, NxFlatTreeControl, ɵb, ɵc, ɵa, ɵd, ɵe */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTreeModule", function () { return NxTreeModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTreeComponent", function () { return NxTreeComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTreeFlatDataSource", function () { return NxTreeFlatDataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxFlatTreeControl", function () { return NxFlatTreeControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return NxTreeNodeComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function () { return NxTreeNodeDefDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return NxTreeNodeOutletDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function () { return NxTreeNodePaddingDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function () { return NxTreeNodeToggleDirective; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/tree */ "./node_modules/@angular/cdk/esm2015/tree.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Outlet for nested CdkNode. Put `[nxTreeNodeOutlet]` on a tag to place children dataNodes
             * inside the outlet.
             */
            var NxTreeNodeOutletDirective = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 */
                function NxTreeNodeOutletDirective(viewContainer) {
                    this.viewContainer = viewContainer;
                }
                return NxTreeNodeOutletDirective;
            }());
            NxTreeNodeOutletDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxTreeNodeOutlet]'
                        },] }
            ];
            /** @nocollapse */
            NxTreeNodeOutletDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wrapper for the CdkTable with NDBX design styles.
             * @template T
             */
            var NxTreeComponent = /** @class */ (function (_super) {
                __extends(NxTreeComponent, _super);
                function NxTreeComponent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return NxTreeComponent;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTree"]));
            NxTreeComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                            selector: 'nx-tree',
                            exportAs: 'nxTree',
                            template: "<ng-container nxTreeNodeOutlet></ng-container>",
                            host: {
                                'class': 'nx-tree',
                                'role': 'tree',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTree"], useExisting: NxTreeComponent }],
                            styles: [":host.nx-tree{display:block}.nx-tree__node{display:block;overflow:hidden}"]
                        }] }
            ];
            NxTreeComponent.propDecorators = {
                _nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [NxTreeNodeOutletDirective,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wrapper for the CdkTree node with NDBX design styles.
             * @template T
             */
            var NxTreeNodeComponent = /** @class */ (function (_super) {
                __extends(NxTreeNodeComponent, _super);
                function NxTreeNodeComponent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return NxTreeNodeComponent;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeNode"]));
            NxTreeNodeComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                            selector: 'nx-tree-node',
                            exportAs: 'nxTreeNode',
                            inputs: ['disabled', 'tabIndex'],
                            host: {
                                '[attr.aria-expanded]': 'isExpanded',
                                '[attr.aria-level]': 'role === "treeitem" ? level : null',
                                '[attr.role]': 'role',
                                'class': 'nx-tree__node',
                                '[class.is-expanded]': 'isExpanded'
                            },
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeNode"], useExisting: NxTreeNodeComponent }],
                            template: "<div class=\"nx-tree__node-box\">\n  <ng-content></ng-content>\n</div>\n"
                        }] }
            ];
            /**
             * Wrapper for the CdkTree node definition with NDBX design styles.
             * @template T
             */
            var NxTreeNodeDefDirective = /** @class */ (function (_super) {
                __extends(NxTreeNodeDefDirective, _super);
                function NxTreeNodeDefDirective() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return NxTreeNodeDefDirective;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeNodeDef"]));
            NxTreeNodeDefDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxTreeNodeDef]',
                            inputs: [
                                'when: nxTreeNodeDefWhen'
                            ],
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeNodeDef"], useExisting: NxTreeNodeDefDirective }]
                        },] }
            ];
            NxTreeNodeDefDirective.propDecorators = {
                data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxTreeNode',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Regex used to split a string on its CSS units.
             * @type {?}
             */
            var cssUnitPattern = /([A-Za-z%]+)$/;
            /**
             * Indent for the children tree dataNodes.
             * This directive will add left-padding to the node to show hierarchy.
             * @template T
             */
            var NxTreeNodePaddingDirective = /** @class */ (function () {
                /**
                 * @param {?} _treeNode
                 * @param {?} _tree
                 * @param {?} _renderer
                 * @param {?} _element
                 * @param {?} _dir
                 */
                function NxTreeNodePaddingDirective(_treeNode, _tree, _renderer, _element, _dir) {
                    var _this = this;
                    this._treeNode = _treeNode;
                    this._tree = _tree;
                    this._renderer = _renderer;
                    this._element = _element;
                    this._dir = _dir;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    /**
                     * CSS units used for the indentation value.
                     */
                    this.indentUnits = 'px';
                    this._offset = 0;
                    this._indent = 24;
                    this._setPadding();
                    if (this._dir) {
                        this._dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () { return _this._setPadding(); }));
                    }
                }
                Object.defineProperty(NxTreeNodePaddingDirective.prototype, "level", {
                    /**
                     * The level of depth of the tree node. The padding will be `level * indent` pixels.
                     * @return {?}
                     */
                    get: function () { return this._level; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._level = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value);
                        this._setPadding();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTreeNodePaddingDirective.prototype, "offset", {
                    /**
                     * The offset is added once on top of each indent. Default number is 0.
                     * @return {?}
                     */
                    get: function () { return this._offset; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._offset = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value);
                        this._setPadding();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTreeNodePaddingDirective.prototype, "indent", {
                    /**
                     * The indent for each level. Can be a number or a CSS string.
                     * Default number 24px from material design menu sub-menu spec.
                     * @return {?}
                     */
                    get: function () { return this._indent; },
                    /**
                     * @param {?} indent
                     * @return {?}
                     */
                    set: function (indent) {
                        /** @type {?} */
                        var value = indent;
                        /** @type {?} */
                        var units = 'px';
                        if (typeof indent === 'string') {
                            /** @type {?} */
                            var parts = indent.split(cssUnitPattern);
                            value = parts[0];
                            units = parts[1] || units;
                        }
                        this.indentUnits = units;
                        this._indent = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceNumberProperty"])(value);
                        this._setPadding();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxTreeNodePaddingDirective.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * The padding indent value for the tree node. Returns a string with px numbers if not null.
                 * @return {?}
                 */
                NxTreeNodePaddingDirective.prototype._paddingIndent = function () {
                    /** @type {?} */
                    var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)
                        ? this._tree.treeControl.getLevel(this._treeNode.data)
                        : null;
                    /** @type {?} */
                    var level = this._level || nodeLevel;
                    return level ? "" + (level * this._indent + this._offset) + this.indentUnits : null;
                };
                /**
                 * @return {?}
                 */
                NxTreeNodePaddingDirective.prototype._setPadding = function () {
                    /** @type {?} */
                    var padding = this._paddingIndent();
                    /** @type {?} */
                    var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
                    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);
                };
                return NxTreeNodePaddingDirective;
            }());
            NxTreeNodePaddingDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxTreeNodePadding]',
                        },] }
            ];
            /** @nocollapse */
            NxTreeNodePaddingDirective.ctorParameters = function () { return [
                { type: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeNode"] },
                { type: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTree"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_1__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            NxTreeNodePaddingDirective.propDecorators = {
                level: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxTreeNodePadding',] }],
                offset: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxTreeNodePaddingOffset',] }],
                indent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxTreeNodePaddingIndent',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wrapper for the CdkTree's toggle with NDBX design styles.
             * @template T
             */
            var NxTreeNodeToggleDirective = /** @class */ (function (_super) {
                __extends(NxTreeNodeToggleDirective, _super);
                function NxTreeNodeToggleDirective() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.recursive = false;
                    return _this;
                }
                return NxTreeNodeToggleDirective;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeNodeToggle"]));
            NxTreeNodeToggleDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[nxTreeNodeToggle]',
                            host: {
                                '(click)': '_toggle($event)',
                            },
                            providers: [{ provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeNodeToggle"], useExisting: NxTreeNodeToggleDirective }]
                        },] }
            ];
            NxTreeNodeToggleDirective.propDecorators = {
                recursive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['nxTreeNodeToggleRecursive',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTreeModule = /** @class */ (function () {
                function NxTreeModule() {
                }
                return NxTreeModule;
            }());
            NxTreeModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["CdkTreeModule"], _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"]],
                            declarations: [NxTreeComponent, NxTreeNodeComponent, NxTreeNodeDefDirective,
                                NxTreeNodePaddingDirective, NxTreeNodeToggleDirective, NxTreeNodeOutletDirective],
                            exports: [NxTreeComponent, NxTreeNodeComponent, NxTreeNodeDefDirective,
                                NxTreeNodePaddingDirective, NxTreeNodeToggleDirective, NxTreeNodeOutletDirective]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Tree flattener to convert a normal type of node to node with children & level information.
             * Transform nested nodes of type `T extends NxTreeNode` to flattened nodes of type `F extends NxFlatTreeNode`.
             *
             * For example, the input data of type `T` is nested, and contains its children data:
             *   SomeNode: {
             *     key: 'Fruits',
             *     children: [
             *       NodeOne: {
             *         key: 'Apple',
             *       },
             *       NodeTwo: {
             *        key: 'Pear',
             *      }
             *    ]
             *  }
             *  After flattener flatten the tree, the structure will become
             *  SomeNode: {
             *    key: 'Fruits',
             *    expandable: true,
             *    level: 1
             *  },
             *  NodeOne: {
             *    key: 'Apple',
             *    expandable: false,
             *    level: 2
             *  },
             *  NodeTwo: {
             *   key: 'Pear',
             *   expandable: false,
             *   level: 2
             * }
             * and the output flattened type is `F extends NxFlatTreeNode` with additional information.
             * @template T, F
             */
            var NxTreeFlattener = /** @class */ (function () {
                function NxTreeFlattener() {
                }
                /**
                 * @param {?} node
                 * @param {?} level
                 * @return {?}
                 */
                NxTreeFlattener.prototype.transformFunction = function (node, level) {
                    var children = node.children, rest = Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__rest"])(node, ["children"]);
                    return ( /** @type {?} */(Object.assign({}, rest, { level: level, expandable: Array.isArray(children) && children.length > 0 })));
                };
                /**
                 * @param {?} node
                 * @return {?}
                 */
                NxTreeFlattener.prototype.getLevel = function (node) {
                    return node.level;
                };
                /**
                 * @param {?} node
                 * @return {?}
                 */
                NxTreeFlattener.prototype.isExpandable = function (node) {
                    return node.expandable;
                };
                /**
                 * @param {?} node
                 * @return {?}
                 */
                NxTreeFlattener.prototype.getChildren = function (node) {
                    return ( /** @type {?} */(node.children));
                };
                /**
                 * @param {?} node
                 * @param {?} level
                 * @param {?} resultNodes
                 * @param {?} parentMap
                 * @return {?}
                 */
                NxTreeFlattener.prototype._flattenNode = function (node, level, resultNodes, parentMap) {
                    var _this = this;
                    /** @type {?} */
                    var flatNode = this.transformFunction(node, level);
                    resultNodes.push(flatNode);
                    if (this.isExpandable(flatNode)) {
                        /** @type {?} */
                        var childrenNodes = this.getChildren(node);
                        if (Array.isArray(childrenNodes)) {
                            this._flattenChildren(childrenNodes, level, resultNodes, parentMap);
                        }
                        else {
                            childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1)).subscribe(( /**
                             * @param {?} children
                             * @return {?}
                             */function (/**
                             * @param {?} children
                             * @return {?}
                             */ children) {
                                _this._flattenChildren(children, level, resultNodes, parentMap);
                            }));
                        }
                    }
                    return resultNodes;
                };
                /**
                 * @param {?} children
                 * @param {?} level
                 * @param {?} resultNodes
                 * @param {?} parentMap
                 * @return {?}
                 */
                NxTreeFlattener.prototype._flattenChildren = function (children, level, resultNodes, parentMap) {
                    var _this = this;
                    children.forEach(( /**
                     * @param {?} child
                     * @param {?} index
                     * @return {?}
                     */function (child, index) {
                        /** @type {?} */
                        var childParentMap = parentMap.slice();
                        childParentMap.push(index != children.length - 1); // tslint:disable-line
                        _this._flattenNode(child, level + 1, resultNodes, childParentMap);
                    }));
                };
                /**
                 * Flatten a list of node type T to flattened version of node F.
                 * Please note that type T may be nested, and the length of `structuredData` may be different
                 * from that of returned list `F[]`.
                 * @param {?} structuredData
                 * @return {?}
                 */
                NxTreeFlattener.prototype.flattenNodes = function (structuredData) {
                    var _this = this;
                    /** @type {?} */
                    var resultNodes = [];
                    structuredData.forEach(( /**
                     * @param {?} node
                     * @return {?}
                     */function (/**
                     * @param {?} node
                     * @return {?}
                     */ node) { return _this._flattenNode(node, 0, resultNodes, []); }));
                    return resultNodes;
                };
                /**
                 * Expand flattened node with current expansion status.
                 * The returned list may have different length.
                 * @param {?} nodes
                 * @param {?} treeControl
                 * @return {?}
                 */
                NxTreeFlattener.prototype.expandFlattenedNodes = function (nodes, treeControl) {
                    var _this = this;
                    /** @type {?} */
                    var results = [];
                    /** @type {?} */
                    var currentExpand = [];
                    currentExpand[0] = true;
                    nodes.forEach(( /**
                     * @param {?} node
                     * @return {?}
                     */function (/**
                     * @param {?} node
                     * @return {?}
                     */ node) {
                        /** @type {?} */
                        var expand = true;
                        for (var i = 0; i <= _this.getLevel(node); i++) {
                            expand = expand && currentExpand[i];
                        }
                        if (expand) {
                            results.push(node);
                        }
                        if (_this.isExpandable(node)) {
                            currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);
                        }
                    }));
                    return results;
                };
                return NxTreeFlattener;
            }());
            /**
             * Data source for flat tree.
             * The data source need to handle expansion/collapsion of the tree node and change the data feed
             * to `NxTree`.
             * The nested tree nodes of type `T extends NxTreeNode` are flattened through `NxTreeFlattener`, and converted
             * to type `F extends NxFlatTreeNode` for `NxTree` to consume.
             * @template T, F
             */
            var NxTreeFlatDataSource = /** @class */ (function (_super) {
                __extends(NxTreeFlatDataSource, _super);
                /**
                 * @param {?} treeControl
                 * @param {?=} initialData
                 */
                function NxTreeFlatDataSource(treeControl, initialData) {
                    if (initialData === void 0) { initialData = []; }
                    var _this = _super.call(this) || this;
                    _this.treeControl = treeControl;
                    _this._flattenedData = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                    _this._expandedData = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                    _this._data = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                    _this._treeFlattener = new NxTreeFlattener();
                    _this.data = initialData;
                    return _this;
                }
                Object.defineProperty(NxTreeFlatDataSource.prototype, "data", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._data.value; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._data.next(value);
                        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));
                        this.treeControl.dataNodes = this._flattenedData.value;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} collectionViewer
                 * @return {?}
                 */
                NxTreeFlatDataSource.prototype.connect = function (collectionViewer) {
                    var _this = this;
                    /** @type {?} */
                    var changes = [
                        collectionViewer.viewChange,
                        this.treeControl.expansionModel.onChange,
                        this._flattenedData
                    ];
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["merge"]).apply(void 0, __spread(changes)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(( /**
                     * @return {?}
                     */function () {
                        _this._expandedData.next(_this._treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this.treeControl));
                        return _this._expandedData.value;
                    })));
                };
                /**
                 * @return {?}
                 */
                NxTreeFlatDataSource.prototype.disconnect = function () {
                    // no op
                };
                return NxTreeFlatDataSource;
            }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["DataSource"]));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Flat tree control.
             * Able to expand/collapse a subtree recursively for flattened tree.
             * @template F
             */
            var NxFlatTreeControl = /** @class */ (function (_super) {
                __extends(NxFlatTreeControl, _super);
                function NxFlatTreeControl() {
                    return _super.call(this, ( /**
                     * @param {?} node
                     * @return {?}
                     */function (/**
                     * @param {?} node
                     * @return {?}
                     */ node) { return node.level; }), ( /**
                     * @param {?} node
                     * @return {?}
                     */function (/**
                     * @param {?} node
                     * @return {?}
                     */ node) { return node.expandable; })) || this;
                }
                return NxFlatTreeControl;
            }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_8__["FlatTreeControl"]));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-tree.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js": 
        /*!***************************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js ***!
          \***************************************************************************/
        /*! exports provided: isString, pad, formatDate, formatDateHuman, mapClassNames, getClassNameList, appendClasses, removeClasses, parseDate, getFontShorthand, numberOfDecimals, clamp, ErrorStateMatcher */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function () { return isString; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pad", function () { return pad; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDate", function () { return formatDate; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDateHuman", function () { return formatDateHuman; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapClassNames", function () { return mapClassNames; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getClassNameList", function () { return getClassNameList; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendClasses", function () { return appendClasses; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeClasses", function () { return removeClasses; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseDate", function () { return parseDate; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFontShorthand", function () { return getFontShorthand; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numberOfDecimals", function () { return numberOfDecimals; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function () { return clamp; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorStateMatcher", function () { return ErrorStateMatcher; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} value
             * @return {?}
             */
            function isString(value) {
                return typeof value === 'string';
            }
            /**
             * @param {?} str
             * @param {?=} length
             * @param {?=} padCharacter
             * @return {?}
             */
            function pad(str, length, padCharacter) {
                if (length === void 0) { length = 2; }
                if (padCharacter === void 0) { padCharacter = '0'; }
                if (!isString(str) || str.length >= length) {
                    return str;
                }
                while (str.length < length) {
                    str = padCharacter + str;
                }
                return str;
            }
            // DATE -> YYYY-MM-DD
            /**
             * @param {?} date
             * @return {?}
             */
            function formatDate(date) {
                /** @type {?} */
                var dateOfBirth = [
                    String(date.getFullYear()),
                    pad(String(date.getMonth() + 1)),
                    pad(String(date.getDate()))
                ].join('-');
                return dateOfBirth;
            }
            /**
             * @param {?} date
             * @return {?}
             */
            function formatDateHuman(date) {
                /** @type {?} */
                var dateOfBirth = [
                    pad(String(date.getDate())),
                    pad(String(date.getMonth() + 1)),
                    String(date.getFullYear())
                ].join('-');
                return dateOfBirth;
            }
            /*
              Purpose of this function is to allow a list of short keywords
              expand to longer bem class names with will then be applied to the classname value.
            
              This function will map a list of keys to values in a MAPPING list.
              Whatever value is found will replace the keyword.
              Every keyword not found will just transfered wiithmout modifying.
            */
            /**
             * @param {?} value
             * @param {?=} DEFAULTS
             * @param {?=} MAPPING
             * @return {?}
             */
            function mapClassNames(value, DEFAULTS, MAPPING) {
                if (DEFAULTS === void 0) { DEFAULTS = []; }
                if (MAPPING === void 0) { MAPPING = {}; }
                /** @type {?} */
                var sanitizedList = __spread(DEFAULTS);
                if (typeof value === 'string') {
                    /** @type {?} */
                    var mappedClasses = getClassNameList(value, MAPPING);
                    sanitizedList = __spread(sanitizedList, mappedClasses);
                }
                return sanitizedList.join(' ').trim();
            }
            /**
             * @param {?} value
             * @param {?=} MAPPING
             * @return {?}
             */
            function getClassNameList(value, MAPPING) {
                if (MAPPING === void 0) { MAPPING = {}; }
                /** @type {?} */
                var mappedClasses = [];
                if (typeof value === 'string') {
                    /** @type {?} */
                    var classNames = value.split(' ');
                    /** @type {?} */
                    var keys_1 = Object.keys(MAPPING);
                    mappedClasses = classNames.map(( /**
                     * @param {?} className
                     * @return {?}
                     */function (/**
                     * @param {?} className
                     * @return {?}
                     */ className) {
                        if (keys_1.indexOf(className) > -1) {
                            return MAPPING[className];
                        }
                        else {
                            return className;
                        }
                    }));
                }
                return mappedClasses;
            }
            /**
             * @param {?} renderer
             * @param {?} element
             * @param {?} classes
             * @return {?}
             */
            function appendClasses(renderer, element, classes) {
                if (renderer && element && classes) {
                    classes.split(' ').forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (/**
                     * @param {?} item
                     * @return {?}
                     */ item) {
                        renderer.addClass(element.nativeElement, item);
                    }));
                }
            }
            /**
             * @param {?} renderer
             * @param {?} element
             * @param {?} classes
             * @return {?}
             */
            function removeClasses(renderer, element, classes) {
                if (renderer && element && classes) {
                    classes.split(' ').forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (/**
                     * @param {?} item
                     * @return {?}
                     */ item) {
                        renderer.removeClass(element.nativeElement, item);
                    }));
                }
            }
            // YYYY-MM-DD -> DATE
            /**
             * @param {?} dateString
             * @return {?}
             */
            function parseDate(dateString) {
                return new Date(dateString);
            }
            // Manually compose a font shorthand defintion as it's not
            // guaranteed to be given by the computed style object.
            /**
             * @param {?} style
             * @return {?}
             */
            function getFontShorthand(style) {
                var font = style.font, fontStyle = style.fontStyle, fontVariant = style.fontVariant, fontWeight = style.fontWeight, fontSize = style.fontSize, lineHeight = style.lineHeight, fontFamily = style.fontFamily;
                if (font.length > 0) {
                    return font;
                }
                return fontStyle + " " + fontVariant + " " + fontWeight + " " + fontSize + "/" + lineHeight + " " + fontFamily;
            }
            /**
             * @param {?} number
             * @return {?}
             */
            function numberOfDecimals(number) {
                /** @type {?} */
                var parsed = Number(number);
                if (Number.isNaN(parsed) || Number.isInteger(parsed)) {
                    return 0;
                }
                /** @type {?} */
                var match = (parsed.toString()).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
                if (!match[1]) {
                    return 0;
                }
                return match[1].length;
            }
            /**
             * @param {?} value
             * @param {?=} min
             * @param {?=} max
             * @return {?}
             */
            function clamp(value, min, max) {
                if (min === void 0) { min = 0; }
                if (max === void 0) { max = 1; }
                return Math.max(min, Math.min(max, value));
            }
            /**
             * Provider that defines when form controls have an error.
             */
            var ErrorStateMatcher = /** @class */ (function () {
                function ErrorStateMatcher() {
                }
                /**
                 * @param {?} control
                 * @param {?} form
                 * @return {?}
                 */
                ErrorStateMatcher.prototype.isErrorState = function (control, form) {
                    return !!(control && control.invalid && (control.touched || (form && form.submitted)));
                };
                return ErrorStateMatcher;
            }());
            ErrorStateMatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] }
            ];
            /** @nocollapse */ ErrorStateMatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["defineInjectable"])({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx-utils.js.map
            /***/ 
        }),
        /***/ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx.js": 
        /*!*********************************************************************!*\
          !*** ./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx.js ***!
          \*********************************************************************/
        /*! exports provided: NdbxModule, NxButtonModule, NxButtonComponent, NxIconButtonComponent, NxCheckboxModule, NxCheckboxChangeEvent, NxCheckboxGroupComponent, NxCheckboxComponent, NxRadioModule, NxRadioGroupComponent, NxRadioComponent, NxCopytextModule, NxCopytextComponent, NxHeadlineModule, NxHeadlineComponent, NxLinkModule, NxLinkComponent, NxCircleToggleModule, NxMobileToggleButtonComponent, ToggleChangeEvent, NxCircleToggleComponent, NxIconToggleButtonComponent, NxCircleToggleGroupComponent, NxListModule, NxListComponent, NxRadioToggleModule, NxRadioToggleComponent, NxCheckboxCircleModule, NxCheckboxCircleComponent, NxSpinnerComponent, NxSpinnerModule, NxModalModule, NxModalActionsDirective, NxModalContentDirective, NxModalComponent, NxOpenModalOnClickDirective, NxModalService, NxSwitcherModule, NxSwitcherComponent, NxPopoverModule, NxPopoverComponent, NxPopoverTriggerDirective, NxPopoverContentDirective, NxTaglistModule, NxTaglistComponent, NxImageModule, NxFigureComponent, NxImageDirective, NxRadioCircleModule, NxRadioCircleComponent, NxRadioCircleSvgButtonComponent, NxRadioCircleIconButtonComponent, NxVideoModule, NxVideoComponent, NxDropdownModule, NxDropdownSelectChange, SELECT_PANEL_MAX_HEIGHT, NxDropdownComponent, NxDropdownItemChange, NxDropdownItemComponent, NxDropdownGroupComponent, NxAutocompleteModule, NxAutocompleteOptionSelected, NxAutocompleteOptionComponent, NxAutocompleteSelectedEvent, NxAutocompleteComponent, getNxAutocompleteMissingPanelError, NX_AUTOCOMPLETE_VALUE_ACCESSOR, NxAutocompleteTriggerDirective, NxNaturalLanguageFormModule, NxNaturalLanguageFormComponent, NxWordComponent, NxMessageModule, NxMessageComponent, NxPageSearchModule, NxPageSearchComponent, NxRatingModule, NxRatingComponent, NxNumberStepperModule, NxNumberStepperComponent, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective, NxNumberStepperIntl, NxPaginationModule, NxPaginationComponent, DefaultPaginationTexts, NX_PAGINATION_TEXTS, NxPaginationUtils, NxDynamicTableModule, NxDynamicTableComponent, NxExpansionPanelComponent, NxAccordionDirective, NxAccordionModule, NxTabsModule, NxTabComponent, NxTabChangeEvent, NxTabGroupComponent, NxTabHeaderComponent, NxTabBodyComponent, NxTabLabelDirective, NxTabNavBarComponent, NxTabLinkDirective, BREAKPOINT_MOBILE, BREAKPOINT_TABLET, BREAKPOINT_DESKTOP, MappedStyles, NxCardComponent, NxCardModule, ɵp, ɵq, ɵs, ɵr, ɵt, ɵa, ɵb, ɵc, ɵn, ɵm, ɵd, ɵg, ɵh, ɵj, ɵi, ɵo, ɵl, ɵe, ɵf, ɵu, ɵk */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NdbxModule", function () { return NdbxModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxButtonModule", function () { return NxButtonModule$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxButtonComponent", function () { return NxButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxIconButtonComponent", function () { return NxIconButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxModule", function () { return NxCheckboxModule$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxChangeEvent", function () { return NxCheckboxChangeEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxGroupComponent", function () { return NxCheckboxGroupComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxComponent", function () { return NxCheckboxComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioModule", function () { return NxRadioModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioGroupComponent", function () { return NxRadioGroupComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioComponent", function () { return NxRadioComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCopytextModule", function () { return NxCopytextModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCopytextComponent", function () { return NxCopytextComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxHeadlineModule", function () { return NxHeadlineModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxHeadlineComponent", function () { return NxHeadlineComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxLinkModule", function () { return NxLinkModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxLinkComponent", function () { return NxLinkComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCircleToggleModule", function () { return NxCircleToggleModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMobileToggleButtonComponent", function () { return NxMobileToggleButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleChangeEvent", function () { return ToggleChangeEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCircleToggleComponent", function () { return NxCircleToggleComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxIconToggleButtonComponent", function () { return NxIconToggleButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCircleToggleGroupComponent", function () { return NxCircleToggleGroupComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxListModule", function () { return NxListModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxListComponent", function () { return NxListComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioToggleModule", function () { return NxRadioToggleModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioToggleComponent", function () { return NxRadioToggleComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxCircleModule", function () { return NxCheckboxCircleModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCheckboxCircleComponent", function () { return NxCheckboxCircleComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxSpinnerComponent", function () { return NxSpinnerComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxSpinnerModule", function () { return NxSpinnerModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxModalModule", function () { return NxModalModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxModalActionsDirective", function () { return NxModalActionsDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxModalContentDirective", function () { return NxModalContentDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxModalComponent", function () { return NxModalComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxOpenModalOnClickDirective", function () { return NxOpenModalOnClickDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxModalService", function () { return NxModalService; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxSwitcherModule", function () { return NxSwitcherModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxSwitcherComponent", function () { return NxSwitcherComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverModule", function () { return NxPopoverModule$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverComponent", function () { return NxPopoverComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverTriggerDirective", function () { return NxPopoverTriggerDirective$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPopoverContentDirective", function () { return NxPopoverContentDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTaglistModule", function () { return NxTaglistModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTaglistComponent", function () { return NxTaglistComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxImageModule", function () { return NxImageModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxFigureComponent", function () { return NxFigureComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxImageDirective", function () { return NxImageDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioCircleModule", function () { return NxRadioCircleModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioCircleComponent", function () { return NxRadioCircleComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioCircleSvgButtonComponent", function () { return NxRadioCircleSvgButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRadioCircleIconButtonComponent", function () { return NxRadioCircleIconButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxVideoModule", function () { return NxVideoModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxVideoComponent", function () { return NxVideoComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownModule", function () { return NxDropdownModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownSelectChange", function () { return NxDropdownSelectChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_MAX_HEIGHT", function () { return SELECT_PANEL_MAX_HEIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownComponent", function () { return NxDropdownComponent$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownItemChange", function () { return NxDropdownItemChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownItemComponent", function () { return NxDropdownItemComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDropdownGroupComponent", function () { return NxDropdownGroupComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteModule", function () { return NxAutocompleteModule$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteOptionSelected", function () { return NxAutocompleteOptionSelected; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteOptionComponent", function () { return NxAutocompleteOptionComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteSelectedEvent", function () { return NxAutocompleteSelectedEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteComponent", function () { return NxAutocompleteComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNxAutocompleteMissingPanelError", function () { return getNxAutocompleteMissingPanelError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_AUTOCOMPLETE_VALUE_ACCESSOR", function () { return NX_AUTOCOMPLETE_VALUE_ACCESSOR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAutocompleteTriggerDirective", function () { return NxAutocompleteTriggerDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNaturalLanguageFormModule", function () { return NxNaturalLanguageFormModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNaturalLanguageFormComponent", function () { return NxNaturalLanguageFormComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxWordComponent", function () { return NxWordComponent$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMessageModule", function () { return NxMessageModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxMessageComponent", function () { return NxMessageComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPageSearchModule", function () { return NxPageSearchModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPageSearchComponent", function () { return NxPageSearchComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRatingModule", function () { return NxRatingModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxRatingComponent", function () { return NxRatingComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNumberStepperModule", function () { return NxNumberStepperModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNumberStepperComponent", function () { return NxNumberStepperComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNumberStepperPrefixDirective", function () { return NxNumberStepperPrefixDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNumberStepperSuffixDirective", function () { return NxNumberStepperSuffixDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxNumberStepperIntl", function () { return NxNumberStepperIntl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPaginationModule", function () { return NxPaginationModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPaginationComponent", function () { return NxPaginationComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultPaginationTexts", function () { return DefaultPaginationTexts; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NX_PAGINATION_TEXTS", function () { return NX_PAGINATION_TEXTS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxPaginationUtils", function () { return NxPaginationUtils; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDynamicTableModule", function () { return NxDynamicTableModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxDynamicTableComponent", function () { return NxDynamicTableComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxExpansionPanelComponent", function () { return NxExpansionPanelComponent$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAccordionDirective", function () { return NxAccordionDirective$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxAccordionModule", function () { return NxAccordionModule$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabsModule", function () { return NxTabsModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabComponent", function () { return NxTabComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabChangeEvent", function () { return NxTabChangeEvent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabGroupComponent", function () { return NxTabGroupComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabHeaderComponent", function () { return NxTabHeaderComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabBodyComponent", function () { return NxTabBodyComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabLabelDirective", function () { return NxTabLabelDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabNavBarComponent", function () { return NxTabNavBarComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxTabLinkDirective", function () { return NxTabLinkDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_MOBILE", function () { return BREAKPOINT_MOBILE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_TABLET", function () { return BREAKPOINT_TABLET; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BREAKPOINT_DESKTOP", function () { return BREAKPOINT_DESKTOP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MappedStyles", function () { return MappedStyles$1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCardComponent", function () { return NxCardComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NxCardModule", function () { return NxCardModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp", function () { return nxAccordionAnimations; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵq", function () { return NxExpansionPanelBodyDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵs", function () { return NxExpansionPanelDescriptionDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵr", function () { return NxExpansionPanelHeaderComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵt", function () { return NxExpansionPanelTitleDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return NX_BUTTON_HOST_BINDINGS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return NxButtonBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function () { return ToggleButton; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn", function () { return NxDropdownClosedLabelDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function () { return NxDropdownControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function () { return NxListIconComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function () { return fadeIn; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function () { return fadeOut; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function () { return scaleDown; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function () { return scaleUp; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo", function () { return NxAutoResizeDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function () { return NxRadioCircleButton; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function () { return NxRadioToggleButtonBaseComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function () { return NxRadioToggleButtonComponent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵu", function () { return NxTabGroupBase; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function () { return NxTagComponent; });
            /* harmony import */ var _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @allianz/ngx-ndbx/base */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-base.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var _allianz_ngx_ndbx_checkbox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @allianz/ngx-ndbx/checkbox */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-checkbox.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _allianz_ngx_ndbx_natural_language_form__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @allianz/ngx-ndbx/natural-language-form */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-natural-language-form.js");
            /* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
            /* harmony import */ var _allianz_ngx_ndbx_popover__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @allianz/ngx-ndbx/popover */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-popover.js");
            /* harmony import */ var _allianz_ngx_ndbx_dropdown__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @allianz/ngx-ndbx/dropdown */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-dropdown.js");
            /* harmony import */ var _allianz_ngx_ndbx_grid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @allianz/ngx-ndbx/grid */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-grid.js");
            /* harmony import */ var _allianz_ngx_ndbx_autocomplete__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @allianz/ngx-ndbx/autocomplete */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-autocomplete.js");
            /* harmony import */ var _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @allianz/ngx-ndbx/formfield */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-formfield.js");
            /* harmony import */ var _allianz_ngx_ndbx_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @allianz/ngx-ndbx/button */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-button.js");
            /* harmony import */ var _allianz_ngx_ndbx_input__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @allianz/ngx-ndbx/input */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-input.js");
            /* harmony import */ var _allianz_ngx_ndbx_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @allianz/ngx-ndbx/core */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-core.js");
            /* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! decimal.js */ "./node_modules/decimal.js/decimal.js");
            /* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/ __webpack_require__.n(decimal_js__WEBPACK_IMPORTED_MODULE_15__);
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm2015/table.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/cdk/accordion */ "./node_modules/@angular/cdk/esm2015/accordion.js");
            /* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _allianz_ngx_ndbx_accordion__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @allianz/ngx-ndbx/accordion */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-accordion.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var _allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @allianz/ngx-ndbx/utils */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-utils.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NdbxModule = /** @class */ (function () {
                function NdbxModule() {
                }
                /**
                 * @return {?}
                 */
                NdbxModule.forRoot = function () {
                    return {
                        ngModule: NdbxModule
                    };
                };
                return NdbxModule;
            }());
            NdbxModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{},] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_SIZE = 'medium';
            /** @type {?} */
            var DEFAULT_TYPE = 'primary';
            /** @type {?} */
            var NX_BUTTON_HOST_BINDINGS = {
                '[class.nx-button--primary]': 'type === "primary"',
                '[class.nx-button--secondary]': 'type === "secondary"',
                '[class.nx-button--tertiary]': 'type === "tertiary"',
                '[class.nx-button--cta]': 'type === "cta"',
                '[class.nx-button--emphasis]': 'type === "emphasis"',
                '[class.nx-button--large]': 'size === "large"',
                '[class.nx-button--medium]': 'size === "medium"',
                '[class.nx-button--small-medium]': 'size === "small-medium"',
                '[class.nx-button--small]': 'size === "small"',
                '[class.nx-button--block]': 'block',
                '[class.nx-button--negative]': 'negative',
            };
            /**
             * \@docs-private
             */
            var NxButtonBase = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 */
                function NxButtonBase(_changeDetectorRef, _elementRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    /**
                     * \@docs-private
                     */
                    this.type = DEFAULT_TYPE;
                    /**
                     * \@docs-private
                     */
                    this.size = DEFAULT_SIZE;
                    /**
                     * \@docs-private
                     */
                    this.negative = false;
                    /**
                     * \@docs-private
                     */
                    this.block = false;
                }
                Object.defineProperty(NxButtonBase.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        this._classNames = value;
                        var _b = __read(this._classNames.match(/primary|secondary|tertiary|cta|emphasis/) || [DEFAULT_TYPE], 1), _c = _b[0], type = _c === void 0 ? null : _c;
                        this.type = ( /** @type {?} */(type));
                        var _d = __read(this._classNames.match(/small-medium|small|medium|large/) || [DEFAULT_SIZE], 1), _e = _d[0], size = _e === void 0 ? null : _e;
                        this.size = ( /** @type {?} */(size));
                        this.negative = /negative/.test(this._classNames);
                        this.block = /block/.test(this._classNames);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxButtonBase.prototype, "elementRef", {
                    /**
                     * \@docs-private
                     * getter used for the modal component as a quickfix
                     * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
                     * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
                     * way to reach the elementRef of the component until the modal gets refactored.
                     * @return {?}
                     */
                    get: function () {
                        return this._elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxButtonBase;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxButtonComponent = /** @class */ (function (_super) {
                __extends(NxButtonComponent, _super);
                /**
                 * @param {?} changeDetectorRef
                 * @param {?} elementRef
                 */
                function NxButtonComponent(changeDetectorRef, elementRef) {
                    return _super.call(this, changeDetectorRef, elementRef) || this;
                }
                return NxButtonComponent;
            }(NxButtonBase));
            NxButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            template: "<span class=\"nx-button__content-wrapper\">\n  <ng-content></ng-content>\n</span>\n",
                            // tslint:disable-next-line:component-selector
                            selector: 'button[nxButton]',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: NX_BUTTON_HOST_BINDINGS,
                            inputs: ['classNames:nxButton'],
                            styles: [":host{border:2px solid transparent;border-radius:4px;cursor:pointer;font-size:16px;font-weight:600;letter-spacing:1px;line-height:24px;margin:0 0 24px;padding:10px 30px;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s,box-shadow .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:auto;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;min-height:48px}:host:disabled{cursor:not-allowed}:host:focus{outline:transparent solid 2px}:host::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]).nx-button--negative:focus,:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-button--primary){color:#fff;background-color:#007ab3}:host(.nx-button--primary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--primary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--primary):disabled{background-color:rgba(0,122,179,.4);border-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--primary.nx-button--negative){background-color:#fff;border-color:#fff;color:#006192}:host(.nx-button--primary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--primary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--primary.nx-button--negative):disabled{background-color:rgba(255,255,255,.4);border-color:transparent;color:rgba(65,65,65,.3)}:host(.nx-button--secondary){background-color:transparent;border-color:#007ab3;color:#006192}:host(.nx-button--secondary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--secondary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--secondary):disabled{background-color:transparent;border-color:rgba(0,122,179,.4);color:rgba(0,97,146,.4)}:host(.nx-button--secondary.nx-button--negative){color:#fff;border-color:#fff}:host(.nx-button--secondary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--secondary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--secondary.nx-button--negative):disabled{background-color:transparent;border-color:rgba(255,255,255,.4);color:rgba(255,255,255,.4)}:host(.nx-button--tertiary){background-color:transparent;color:#006192}:host(.nx-button--tertiary):hover{background-color:#ececec}:host(.nx-button--tertiary):active{background-color:#d9d9d9;box-shadow:none}:host(.nx-button--tertiary):disabled{background-color:transparent;color:rgba(0,97,146,.4)}:host(.nx-button--tertiary.nx-button--negative){color:#fff}:host(.nx-button--tertiary.nx-button--negative):hover{background-color:#d9d9d9;color:#006192}:host(.nx-button--tertiary.nx-button--negative):active{background-color:#c2c2c2;color:#006192}:host(.nx-button--tertiary.nx-button--negative):disabled{background-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--large){font-size:20px;min-height:72px;padding:22px 46px;line-height:24px}@media (max-width:703px){:host{display:block;width:100%}:host(.nx-button--large){padding:22px 30px}}:host(.nx-button--small-medium){display:inline-block;font-size:16px;padding:6px 22px;text-transform:none;line-height:24px;min-height:40px;width:auto}:host(.nx-button--small){display:inline-block;font-size:14px;padding:6px 14px;text-transform:none;line-height:16px;min-height:32px;width:auto}:host(.nx-button--cta){background-color:#3da556;color:#fff}:host(.nx-button--cta):hover{background-color:#348357}:host(.nx-button--cta):active{background-color:#276442}:host(.nx-button--cta):disabled{background-color:rgba(61,165,86,.4)}:host(.nx-button--emphasis){background-color:#f86200;color:#fff}:host(.nx-button--emphasis):hover{background-color:#e15200}:host(.nx-button--emphasis):active{background-color:#c15500}:host(.nx-button--emphasis):disabled{background-color:rgba(248,98,0,.4)}@media (min-width:704px){:host(.nx-button--block){display:block;width:100%}}:host .nx-button__content-wrapper{display:flex;align-items:center;justify-content:center}:host([nxiconbutton]){padding:0;font-size:24px;flex:0 0 auto}:host([nxiconbutton]).nx-button--small{width:32px;font-size:16px}:host([nxiconbutton]).nx-button--small-medium{width:40px}:host([nxiconbutton]).nx-button--medium{width:48px}:host([nxiconbutton]).nx-button--large{width:72px}"]
                        }] }
            ];
            /** @nocollapse */
            NxButtonComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxIconButtonComponent = /** @class */ (function (_super) {
                __extends(NxIconButtonComponent, _super);
                /**
                 * @param {?} changeDetectorRef
                 * @param {?} elementRef
                 */
                function NxIconButtonComponent(changeDetectorRef, elementRef) {
                    return _super.call(this, changeDetectorRef, elementRef) || this;
                }
                return NxIconButtonComponent;
            }(NxButtonBase));
            NxIconButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: 'button[nxIconButton]',
                            template: "<span class=\"nx-button__content-wrapper\">\n  <ng-content></ng-content>\n</span>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: NX_BUTTON_HOST_BINDINGS,
                            inputs: ['classNames:nxIconButton'],
                            styles: [":host{border:2px solid transparent;border-radius:4px;cursor:pointer;font-size:16px;font-weight:600;letter-spacing:1px;line-height:24px;margin:0 0 24px;padding:10px 30px;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s,box-shadow .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:auto;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;min-height:48px}:host:disabled{cursor:not-allowed}:host:focus{outline:transparent solid 2px}:host::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]).nx-button--negative:focus,:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-button--primary){color:#fff;background-color:#007ab3}:host(.nx-button--primary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--primary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--primary):disabled{background-color:rgba(0,122,179,.4);border-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--primary.nx-button--negative){background-color:#fff;border-color:#fff;color:#006192}:host(.nx-button--primary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--primary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--primary.nx-button--negative):disabled{background-color:rgba(255,255,255,.4);border-color:transparent;color:rgba(65,65,65,.3)}:host(.nx-button--secondary){background-color:transparent;border-color:#007ab3;color:#006192}:host(.nx-button--secondary):hover:not(:disabled):not(:active){background-color:#075994;border-color:#075994;color:#fff}:host(.nx-button--secondary):active{background-color:#003781;border-color:#003781;box-shadow:none;color:#fff}:host(.nx-button--secondary):disabled{background-color:transparent;border-color:rgba(0,122,179,.4);color:rgba(0,97,146,.4)}:host(.nx-button--secondary.nx-button--negative){color:#fff;border-color:#fff}:host(.nx-button--secondary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--secondary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--secondary.nx-button--negative):disabled{background-color:transparent;border-color:rgba(255,255,255,.4);color:rgba(255,255,255,.4)}:host(.nx-button--tertiary){background-color:transparent;color:#006192}:host(.nx-button--tertiary):hover{background-color:#ececec}:host(.nx-button--tertiary):active{background-color:#d9d9d9;box-shadow:none}:host(.nx-button--tertiary):disabled{background-color:transparent;color:rgba(0,97,146,.4)}:host(.nx-button--tertiary.nx-button--negative){color:#fff}:host(.nx-button--tertiary.nx-button--negative):hover{background-color:#d9d9d9;color:#006192}:host(.nx-button--tertiary.nx-button--negative):active{background-color:#c2c2c2;color:#006192}:host(.nx-button--tertiary.nx-button--negative):disabled{background-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--large){font-size:20px;min-height:72px;padding:22px 46px;line-height:24px}@media (max-width:703px){:host{display:block;width:100%}:host(.nx-button--large){padding:22px 30px}}:host(.nx-button--small-medium){display:inline-block;font-size:16px;padding:6px 22px;text-transform:none;line-height:24px;min-height:40px;width:auto}:host(.nx-button--small){display:inline-block;font-size:14px;padding:6px 14px;text-transform:none;line-height:16px;min-height:32px;width:auto}:host(.nx-button--cta){background-color:#3da556;color:#fff}:host(.nx-button--cta):hover{background-color:#348357}:host(.nx-button--cta):active{background-color:#276442}:host(.nx-button--cta):disabled{background-color:rgba(61,165,86,.4)}:host(.nx-button--emphasis){background-color:#f86200;color:#fff}:host(.nx-button--emphasis):hover{background-color:#e15200}:host(.nx-button--emphasis):active{background-color:#c15500}:host(.nx-button--emphasis):disabled{background-color:rgba(248,98,0,.4)}@media (min-width:704px){:host(.nx-button--block){display:block;width:100%}}:host .nx-button__content-wrapper{display:flex;align-items:center;justify-content:center}:host([nxiconbutton]){padding:0;font-size:24px;flex:0 0 auto}:host([nxiconbutton]).nx-button--small{width:32px;font-size:16px}:host([nxiconbutton]).nx-button--small-medium{width:40px}:host([nxiconbutton]).nx-button--medium{width:48px}:host([nxiconbutton]).nx-button--large{width:72px}"]
                        }] }
            ];
            /** @nocollapse */
            NxIconButtonComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxButtonModule$1 = /** @class */ (function () {
                function NxButtonModule$1() {
                }
                return NxButtonModule$1;
            }());
            NxButtonModule$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxButtonComponent, NxIconButtonComponent],
                            exports: [NxButtonComponent, NxIconButtonComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId = 0;
            var NxCheckboxChangeEvent = /** @class */ (function () {
                /**
                 * @param {?} checked
                 * @param {?} value
                 * @param {?} checkbox
                 */
                function NxCheckboxChangeEvent(checked, value, checkbox) {
                    this.checked = checked;
                    this.value = value;
                    this.checkbox = checkbox;
                }
                return NxCheckboxChangeEvent;
            }());
            var NxCheckboxGroupComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} ngControl
                 */
                function NxCheckboxGroupComponent(_changeDetectorRef, ngControl) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this.ngControl = ngControl;
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._id = "nx-checkbox-group-" + nextId++;
                    this._disabled = false;
                    this._negative = false;
                    this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    if (this.ngControl) {
                        // Note: we provide the value accessor through here, instead of
                        // the `providers` to avoid running into a circular import.
                        this.ngControl.valueAccessor = this;
                    }
                }
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Sets the Id of the checkbox group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._id !== value) {
                            this._id = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * Sets the name of the checkboxes inside the nx-checkbox-group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._name = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Disables all checkboxes inside the nx-checkbox-group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._label) {
                            this._label.disabled = this._disabled;
                        }
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Set the negative styles for all the checkboxes inside the nx-checkbox-group
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "labelSize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._labelSize;
                    },
                    /**
                     * Sets the label size of the checkboxes inside the group
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._labelSize = value;
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxGroupComponent.prototype, "required", {
                    /**
                     * Whether the nx-checkbox-group are required.
                     * @return {?}
                     */
                    get: function () {
                        return this._required;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    if (this.ngControl) {
                        this._value = this._checkboxes.filter(( /**
                         * @param {?} checkbox
                         * @return {?}
                         */function (/**
                         * @param {?} checkbox
                         * @return {?}
                         */ checkbox) { return checkbox.checked; })).map(( /**
                         * @param {?} cb
                         * @return {?}
                         */function (/**
                         * @param {?} cb
                         * @return {?}
                         */ cb) { return cb.value; }));
                        // Defer setting the value in order to avoid the "Expression
                        // has changed after it was checked" errors from Angular.
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this._onChange(_this._value);
                        }));
                    }
                    this._updateSelectedCheckboxFromValue();
                    this._checkboxes.changes.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._value = _this._checkboxes.filter(( /**
                         * @param {?} checkbox
                         * @return {?}
                         */function (/**
                         * @param {?} checkbox
                         * @return {?}
                         */ checkbox) { return checkbox.checked; })).map(( /**
                         * @param {?} cb
                         * @return {?}
                         */function (/**
                         * @param {?} cb
                         * @return {?}
                         */ cb) { return cb.value; }));
                        if (_this.ngControl) {
                            _this.ngControl.control.setValue(_this._value);
                        }
                        _this._updateSelectedCheckboxFromValue();
                    }));
                };
                /**
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.writeValue = function (value) {
                    if (this._value) {
                        this._value = value;
                    }
                    this._updateSelectedCheckboxFromValue();
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype._updateSelectedCheckboxFromValue = function () {
                    var _this = this;
                    if (this._checkboxes !== null) {
                        if (this._value) {
                            this._checkboxes.map(( /**
                             * @param {?} checkbox
                             * @return {?}
                             */function (/**
                             * @param {?} checkbox
                             * @return {?}
                             */ checkbox) {
                                if (_this._value.indexOf(checkbox.value) !== -1) {
                                    checkbox.checked = true;
                                }
                            }));
                        }
                    }
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxGroupComponent.prototype.change = function (value) {
                    value = this._checkboxes.filter(( /**
                     * @param {?} checkbox
                     * @return {?}
                     */function (/**
                     * @param {?} checkbox
                     * @return {?}
                     */ checkbox) { return checkbox.checked; })).map(( /**
                     * @param {?} cb
                     * @return {?}
                     */function (/**
                     * @param {?} cb
                     * @return {?}
                     */ cb) { return cb.value; }));
                    this._onChange(value);
                    if (this._onTouched) {
                        this._onTouched();
                    }
                    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));
                };
                return NxCheckboxGroupComponent;
            }());
            NxCheckboxGroupComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-checkbox-group',
                            template: "<div>\n  <div class=\"nx-checkbox-group__label\">\n    <ng-content select=\"nx-label\"></ng-content>\n  </div>\n  <div class=\"nx-checkbox-group__errors\">\n    <ng-content select=\"nx-error\"></ng-content>\n  </div>\n  <div class=\"nx-checkbox-group__controls\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-checkbox-group]': 'true',
                                '[class.nx-checkbox-group--negative]': 'negative',
                                '[attr.id]': 'id',
                                '[attr.required]': 'required',
                                '[attr.disabled]': 'disabled || null',
                                '[attr.aria-labelledby]': 'this._label?.id  || null',
                                '[attr.role]': '"group"',
                            },
                            styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}:host.nx-checkbox-group--negative ::ng-deep nx-error,:host.nx-checkbox-group--negative ::ng-deep nx-icon.nx-error__icon,:host.nx-checkbox-group--negative ::ng-deep nx-label{color:#fff}"]
                        }] }
            ];
            /** @nocollapse */
            NxCheckboxGroupComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Self"] }] }
            ]; };
            NxCheckboxGroupComponent.propDecorators = {
                _checkboxes: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return NxCheckboxComponent; })), { descendants: true },] }],
                _label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_0__["NxLabelComponent"]; })), {},] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                labelSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            var NxCheckboxComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} checkboxGroup
                 */
                function NxCheckboxComponent(_changeDetectorRef, checkboxGroup) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this.checkboxGroup = checkboxGroup;
                    this._id = (nextId++).toString();
                    this._disabled = false;
                    this._negative = false;
                    this._labelSize = 'small';
                    this._checked = false;
                    this._name = null;
                    this._indeterminate = false;
                    /**
                     * An event emitted when the indeterminate value has changed
                     */
                    this.indeterminateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"](false);
                    /**
                     * An event emitted when the checked value has changed.
                     *
                     * Emits the boolean checked value of the changed checkbox.
                     */
                    this.checkedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"](false);
                    /**
                     * An event emitted when the checked value has changed.
                     *
                     * Emits a NxCheckboxChangeEvent.
                     */
                    this.checkboxChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this.onChangeCallback = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxCheckboxComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return "nx-checkbox-" + this._id;
                    },
                    /**
                     * Id of the checkbox.
                     *
                     * If not set, the checkbox gets an incremented value by default.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._id) {
                            this._id = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;
                    },
                    /**
                     * Name of the checkbox.
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        this._name = name;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;
                    },
                    /**
                     * Whether the checkbox is disabled.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this._disabled) {
                            this._disabled = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "labelSize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;
                    },
                    /**
                     * Sets the label size of the checkbox. Default value: small
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._labelSize = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;
                    },
                    /**
                     * Whether the checkbox has negative styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this._negative) {
                            this._negative = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "checked", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._checked;
                    },
                    /**
                     * Whether the checkbox is checked.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this._checked) {
                            if (this._indeterminate) {
                                this._setIndeterminate(false);
                            }
                            this._setChecked(newValue);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "indeterminate", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._indeterminate;
                    },
                    /**
                     * Whether the checkbox is indeterminated.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._indeterminate !== newValue) {
                            if (this._checked) {
                                this._setChecked(false);
                            }
                            this._setIndeterminate(newValue);
                        }
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "required", {
                    /**
                     * Whether the checkbox is required.
                     * @return {?}
                     */
                    get: function () {
                        return this._required;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxComponent.prototype, "value", {
                    /**
                     * Sets the value of the checkbox. Default value is the checked status.
                     * @return {?}
                     */
                    get: function () {
                        return this._value ? this._value : this.checked.toString();
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._value = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._controlInvalid = function () {
                    return !!(this.checkboxGroup && this.checkboxGroup.ngControl && this.checkboxGroup.ngControl.invalid
                        && this.checkboxGroup.ngControl.touched);
                };
                /**
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.ngOnInit = function () {
                    var _this = this;
                    if (this.checkboxGroup) {
                        this.name = this.checkboxGroup.name;
                        // when relevant properties of the parent like name and disabled change
                        // we need to let change detection know that the template needs an update
                        this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._changeDetectorRef.markForCheck();
                        }));
                    }
                };
                /**
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.ngOnDestroy = function () {
                    if (this._parentChangeSubscription) {
                        this._parentChangeSubscription.unsubscribe();
                    }
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._setIndeterminate = function (value) {
                    this._indeterminate = value;
                    this.indeterminateChange.emit(this._indeterminate);
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._setChecked = function (value) {
                    this._checked = value;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Toggles the checked state of the checkbox.
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.toggle = function () {
                    this.checked = !this.checked;
                    this.onChangeCallback(this.checked);
                    if (this.checkboxGroup !== null) {
                        this.checkboxGroup.change(this);
                    }
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.writeValue = function (value) {
                    if (value === null) {
                        value = false;
                    }
                    if (value !== this.checked) {
                        this.checked = value;
                    }
                };
                /**
                 * @param {?} onChange
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.registerOnChange = function (onChange) {
                    this.onChangeCallback = onChange;
                };
                /**
                 * @param {?} onTouched
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.registerOnTouched = function (onTouched) {
                    this.onTouchedCallback = onTouched;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCheckboxComponent.prototype.touch = function () {
                    this.onTouchedCallback();
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._onInputClick = function (event) {
                    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
                    event.stopPropagation();
                    if (!this.disabled) {
                        this.toggle();
                        this.checkedChange.emit(this._checked);
                        this.checkboxChange.emit(this._createChangeEvent(this._checked));
                    }
                };
                /**
                 * \@docs-private
                 * @private
                 * @param {?} checkedValue
                 * @return {?}
                 */
                NxCheckboxComponent.prototype._createChangeEvent = function (checkedValue) {
                    /** @type {?} */
                    var event = new NxCheckboxChangeEvent(checkedValue, this.value, this);
                    event.checked = checkedValue;
                    event.value = this.value;
                    event.checkbox = this;
                    return event;
                };
                return NxCheckboxComponent;
            }());
            NxCheckboxComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-checkbox',
                            template: "<input\n  type=\"checkbox\"\n  [id]=\"id\"\n  [name]=\"name\"\n  [checked]=\"checked\"\n  [indeterminate]=\"indeterminate\" [disabled]=\"disabled\"\n  (blur)=\"touch()\"\n  [attr.aria-labelledby]=\"id + '-label'\"\n  (click)=\"_onInputClick($event)\"\n  class=\"nx-checkbox__input\"\n  [value]=\"value\"\n>\n\n<label [id]=\"id + '-label'\" [attr.for]=\"id\" class=\"nx-checkbox__label\">\n    <span class=\"nx-checkbox__control\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <div *ngIf=\"indeterminate\" class=\"nx-checkbox__indeterminate-indicator\"></div>\n    </span>\n    <div class=\"nx-checkbox__label-text\">\n        <ng-content></ng-content>\n    </div>\n</label>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-checkbox]': 'true',
                                '[class.disabled]': 'disabled',
                                '[class.nx-checkbox--label-large]': 'labelSize === "large"',
                                '[class.nx-checkbox--negative]': 'negative',
                                '[attr.required]': 'required',
                                '[class.has-error]': '_controlInvalid() || null',
                                '[attr.aria-invalid]': '_controlInvalid() || null',
                            },
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxCheckboxComponent; })),
                                    multi: true
                                }
                            ],
                            styles: [":host{display:block;position:relative;margin-bottom:16px}:host.has-error .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control,:host.ng-invalid .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:#dc3149;border-color:#dc3149}:host.has-error .nx-checkbox__control,:host.ng-invalid .nx-checkbox__control{border-color:#dc3149}:host.has-error .nx-checkbox__indeterminate-indicator,:host.ng-invalid .nx-checkbox__indeterminate-indicator{background-color:#dc3149}.nx-checkbox__input{opacity:0;position:absolute}.nx-checkbox__label{font-size:16px;line-height:24px;cursor:pointer;display:flex}:host(.nx-checkbox--label-large) .nx-checkbox__label{font-size:20px;line-height:28px;letter-spacing:.2px}.nx-checkbox__label-text{padding:0;margin-left:12px}.nx-checkbox__control{background-color:#fff;border:2px solid #767676;border-radius:4px;color:#fff;font-size:20px;height:24px;width:24px;min-width:24px;display:flex;justify-content:center;align-items:center;z-index:0;cursor:pointer}.nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{border-radius:4px}.nx-checkbox__indeterminate-indicator{background-color:#007ab3;height:2px;width:10px}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:#007ab3;border-color:#007ab3}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:#ececec;border-color:#c2c2c2;cursor:not-allowed}.nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:#c2c2c2}.nx-checkbox__input:disabled+.nx-checkbox__label{cursor:not-allowed;color:#c2c2c2}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#c2c2c2}:host(.nx-checkbox--negative) .nx-checkbox__control{border-color:#fff;background-color:transparent}:host(.nx-checkbox--negative) .nx-checkbox__label{color:#fff}:host(.nx-checkbox--negative) .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{color:#000;background-color:#fff;border-color:#fff}:host(.nx-checkbox--negative) .nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{color:rgba(255,255,255,.4);border-color:transparent;background-color:rgba(194,194,194,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label{color:rgba(255,255,255,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:rgba(153,153,153,.4);border-color:rgba(217,217,217,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:rgba(217,217,217,.4)}@media screen and (-ms-high-contrast:active){.nx-checkbox__input:focus+.nx-checkbox__label{color:#fff}.nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control::after{background-color:#fff}.nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{border-color:#fff}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{border-color:#ff0;color:#ff0}.nx-checkbox__input:focus:checked+.nx-checkbox__label .nx-checkbox__control{background-color:none;border-color:#fff;color:#fff}.nx-checkbox__label{color:#ff0}.nx-checkbox__input:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#ff0}.nx-checkbox__input:indeterminate:focus+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#fff}}:host:not(.nx-checkbox--negative):not(.ng-invalid):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:#075994}:host:not(.nx-checkbox--negative):not(.ng-invalid):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#075994}:host:not(.nx-checkbox--negative):not(.ng-invalid):not(.has-error):hover .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:#075994}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:#003781}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#003781}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:#003781}:host-context([data-whatinput=keyboard]) .nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxCheckboxComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: NxCheckboxGroupComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] }
            ]; };
            NxCheckboxComponent.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                labelSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                indeterminate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                indeterminateChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                checkedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                checkboxChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxCheckboxModule$1 = /** @class */ (function () {
                function NxCheckboxModule$1() {
                }
                return NxCheckboxModule$1;
            }());
            NxCheckboxModule$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [
                                NxCheckboxComponent,
                                NxCheckboxGroupComponent,
                            ],
                            exports: [
                                NxCheckboxComponent,
                                NxCheckboxGroupComponent,
                            ],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"],
                                _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_0__["NxLabelModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The change event object emitted by the radio group and radio button.
             */
            var NxRadioChange = /** @class */ (function () {
                /**
                 * The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value.
                 * @param {?} source
                 * @param {?} value
                 */
                function NxRadioChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return NxRadioChange;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$1 = 0;
            var NxRadioGroupComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} ngControl
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 */
                function NxRadioGroupComponent(_changeDetectorRef, ngControl, _parentForm, _parentFormGroup) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this.ngControl = ngControl;
                    this._parentForm = _parentForm;
                    this._parentFormGroup = _parentFormGroup;
                    // emits when the internal state changes on properties which are relevant
                    // for the radio buttons so that they can mark themself for check
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    this._id = "nx-radio-group-" + nextId$1++;
                    this._disabled = false;
                    this._negative = false;
                    this._required = false;
                    /**
                     * An event is dispatched on each group value change.
                     */
                    this.groupValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._name = "nx-radio-group-" + nextId$1++;
                    this._value = null;
                    // The currently selected radio button; should match _value
                    this._selected = null;
                    this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    if (this.ngControl) {
                        // Note: we provide the value accessor through here, instead of
                        // the `providers` to avoid running into a circular import.
                        this.ngControl.valueAccessor = this;
                    }
                }
                Object.defineProperty(NxRadioGroupComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Sets the Id of the radio group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._id !== value) {
                            this._id = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioGroupComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Whether every radio button in this group should be disabled.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        // inform childs about the change where CD should be triggered
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioGroupComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the radio group should have negative styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioGroupComponent.prototype, "required", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._required;
                    },
                    /**
                     * Sets if at least an option should be selected.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioGroupComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix
                    /**
                     * Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null).
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._name = value;
                        this._stateChanges.next();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioGroupComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * Sets the value of the selected radion button in this group (Default: null).
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (this._value !== newValue) {
                            // Set this before proceeding to ensure no circular loop occurs with selection.
                            this._value = newValue;
                            this._updateSelectedRadioFromValue();
                            this._checkSelectedRadioButton();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.ngAfterContentInit = function () {
                    this._updateSelectedRadioFromValue();
                    this._checkSelectedRadioButton();
                };
                /**
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.writeValue = function (value) {
                    this.value = value;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * \@docs-private this is meant to be called by the radio buttons in this group
                 * @param {?} value
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.change = function (value) {
                    this.value = value;
                    this._onChange(value);
                    this.groupValueChange.emit(new NxRadioChange(this._selected, this._value));
                };
                /**
                 * \@docs-private this is meant to be called by the radio buttons in this group.
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.touch = function () {
                    if (this._onTouched) {
                        this._onTouched();
                    }
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype._updateSelectedRadioFromValue = function () {
                    var _this = this;
                    // If the value already matches the selected radio, do nothing.
                    /** @type {?} */
                    var isAlreadySelected = this._selected != null && this._selected.value === this._value;
                    if (this._radios != null && !isAlreadySelected) {
                        this._selected = null;
                        this._radios.forEach(( /**
                         * @param {?} radio
                         * @return {?}
                         */function (/**
                         * @param {?} radio
                         * @return {?}
                         */ radio) {
                            radio.checked = _this.value === radio.value;
                            if (radio.checked) {
                                _this._selected = radio;
                            }
                        }));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxRadioGroupComponent.prototype._checkSelectedRadioButton = function () {
                    if (this._selected && !this._selected.checked) {
                        this._selected.checked = true;
                    }
                };
                return NxRadioGroupComponent;
            }());
            NxRadioGroupComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-radio-group',
                            template: "<div>\n  <div class=\"nx-radio-group__label\">\n    <ng-content select=\"nx-label\"></ng-content>\n  </div>\n  <div class=\"nx-radio-group__errors\">\n    <ng-content select=\"nx-error\"></ng-content>\n  </div>\n  <div class=\"nx-radio-group__controls\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                'role': 'radiogroup',
                                '[attr.id]': 'id',
                                '[attr.required]': 'required',
                                '[class.nx-radio-group--negative]': 'negative',
                                '[attr.aria-labelledby]': 'this._label?.id  || null'
                            },
                            styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}"]
                        }] }
            ];
            /** @nocollapse */
            NxRadioGroupComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Self"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] }
            ]; };
            NxRadioGroupComponent.propDecorators = {
                _label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return _allianz_ngx_ndbx_base__WEBPACK_IMPORTED_MODULE_0__["NxLabelComponent"]; })), {},] }],
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['id',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxDisabled',] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                groupValueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxGroupValueChange',] }],
                _radios: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                         * @return {?}
                                         */function () { return NxRadioComponent; })), { descendants: true },] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }]
            };
            var NxRadioComponent = /** @class */ (function () {
                /**
                 * @param {?} radioGroup
                 * @param {?} _changeDetectorRef
                 */
                function NxRadioComponent(radioGroup, _changeDetectorRef) {
                    this.radioGroup = radioGroup;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._id = "nx-radio-" + nextId$1++;
                    this._name = null;
                    this._labelSize = 'big';
                    this._negative = false;
                    /**
                     * An event is dispatched on each value change.
                     */
                    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._value = null;
                    this._checked = false;
                    this._disabled = false;
                    this._required = false;
                    this.onChangeCallback = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxRadioComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Sets the id of the radio component.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._id !== value) {
                            this._id = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "inputId", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.id + "-input";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "labelId", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.id + "-label";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (this.radioGroup && this.radioGroup.name) ? this.radioGroup.name : this._name;
                    },
                    // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix
                    /**
                     * Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null).
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._name !== value) {
                            this._name = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "labelSize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._labelSize;
                    },
                    /**
                     * Sets the label size of the radio button.
                     * The default value is `big`.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._labelSize !== value) {
                            this._labelSize = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this.radioGroup ? this.radioGroup.negative : this._negative;
                    },
                    /**
                     * Whether the negative set of styles should be used.
                     *
                     * If the radio button is placed in a radio group, the negative value
                     * is overwritten by the group's negative value.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._negative !== newValue) {
                            this._negative = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._value;
                    },
                    /**
                     * Sets the value of the form control element (Default: null).
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._value) {
                            this._value = value;
                            this.onChangeCallback(value);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "checked", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._checked;
                    },
                    /**
                     * Whether the radio component is selected.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._checked !== value) {
                            this._checked = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "disabled", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled || (this.radioGroup && this.radioGroup.disabled);
                    },
                    /**
                     * Whether the radio button should be disabled or not.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioComponent.prototype, "required", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._required || (this.radioGroup && this.radioGroup.required);
                    },
                    /**
                     * Sets if at least a radio button should be selected.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._required = value;
                        // needed when the outer component is set to onPush because it is a native property
                        // on the host element
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxRadioComponent.prototype.ngOnInit = function () {
                    var _this = this;
                    if (this.radioGroup) {
                        this.name = this.radioGroup.name;
                        // when relevant properties of the parent like name and disabled change
                        // we need to let change detection know that the template needs an update
                        this._parentChangeSubscription = this.radioGroup._stateChanges.subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._changeDetectorRef.markForCheck();
                        }));
                        if (this.radioGroup.value === this._value) {
                            this._checked = true;
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                NxRadioComponent.prototype.ngOnDestroy = function () {
                    if (this._parentChangeSubscription) {
                        this._parentChangeSubscription.unsubscribe();
                    }
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxRadioComponent.prototype.writeValue = function (value) {
                    if (value === this._value) {
                        this._checked = true;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * @param {?} onChange
                 * @return {?}
                 */
                NxRadioComponent.prototype.registerOnChange = function (onChange) {
                    this.onChangeCallback = onChange;
                };
                /**
                 * @param {?} onTouched
                 * @return {?}
                 */
                NxRadioComponent.prototype.registerOnTouched = function (onTouched) {
                    this.onTouchedCallback = onTouched;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioComponent.prototype.touch = function () {
                    this.onTouchedCallback();
                    if (this.radioGroup) {
                        this.radioGroup.touch();
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxRadioComponent.prototype._onInputChange = function (event) {
                    event.stopPropagation();
                    this._checked = true;
                    this.valueChange.emit(new NxRadioChange(this, this._value));
                    this.onChangeCallback(this.value);
                    if (this.radioGroup && this.value !== this.radioGroup.value) {
                        this.radioGroup.change(this.value);
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxRadioComponent.prototype._onInputClick = function (event) {
                    // make sure click event propagation on the visually hidden input
                    // are stopped to prevent multiple events bubbling up.
                    event.stopPropagation();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioComponent.prototype._controlInvalid = function () {
                    /** @type {?} */
                    var form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);
                    return !!(this.radioGroup && this.radioGroup.ngControl && this.radioGroup.ngControl.invalid
                        && (this.radioGroup.ngControl.touched || (form && form.submitted)));
                };
                return NxRadioComponent;
            }());
            NxRadioComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-radio',
                            template: "<input\n  type=\"radio\"\n  [id]=\"inputId\"\n  [attr.name]=\"name\"\n  [disabled]=\"disabled\"\n  (blur)=\"touch()\"\n  (change)=\"_onInputChange($event)\"\n  (click)=\"_onInputClick($event)\"\n  [checked]=\"checked\"\n  [attr.aria-labelledby]=\"labelId\"\n  class=\"nx-radio__input\">\n<label [id]=\"labelId\" [attr.for]=\"inputId\" class=\"nx-radio__label\">\n    <div class=\"nx-radio__circle\">\n      <div class=\"nx-radio__dot\"></div>\n    </div>\n    <span class=\"nx-radio__label--text\"><ng-content></ng-content></span>\n</label>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxRadioComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                '[attr.required]': 'required',
                                '[class.nx-radio-button--small-label]': 'labelSize === "small"',
                                '[class.nx-radio-button--big-label]': 'labelSize === "big"',
                                '[class.nx-radio--negative]': 'negative',
                                '[class.has-error]': '_controlInvalid() || null',
                                '[attr.aria-invalid]': '_controlInvalid() || null'
                            },
                            styles: [":host{display:block;position:relative}:host.has-error .nx-radio__circle,:host.ng-invalid .nx-radio__circle{border-color:#dc3149}:host.has-error .nx-radio__input:checked+.nx-radio__label .nx-radio__dot,:host.ng-invalid .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:#dc3149}.nx-radio__input{opacity:0;position:absolute}:host(.nx-radio-button--small-label) .nx-radio__label{font-size:16px;line-height:24px}:host(.nx-radio-button--big-label) .nx-radio__label{font-size:20px;line-height:28px}:host.nx-radio--negative .nx-radio__label--text{color:#fff}:host.nx-radio--negative .nx-radio__circle{border-color:#fff}:host.nx-radio--negative .nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background:#fff}:host.nx-radio--negative .nx-radio__input:disabled+.nx-radio__label{opacity:.4}.nx-radio__label{color:#414141;cursor:pointer;display:inline-flex;position:relative;align-items:center}.nx-radio__circle{border:2px solid #007ab3;border-radius:50%;width:24px;min-width:24px;height:24px;margin-right:12px;position:relative;display:flex;justify-content:center;align-items:center}.nx-radio__dot{width:8px;height:8px;background-color:transparent;border-radius:50%;transition:background-color .2s}.nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:#007ab3}.nx-radio__input:disabled+.nx-radio__label{cursor:not-allowed;color:#c2c2c2}.nx-radio__input:disabled+.nx-radio__label .nx-radio__circle{border-color:#c2c2c2}.nx-radio__input:checked:disabled+.nx-radio__label .nx-radio__dot{background-color:#c2c2c2}:host-context([data-whatinput=keyboard]) .nx-radio__input:focus+.nx-radio__label .nx-radio__circle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host:not(.nx-radio--negative):not(.ng-invalid):not(.has-error):hover .nx-radio__input:not([disabled])+.nx-radio__label .nx-radio__circle{border-color:#075994}:host:not(.nx-radio--negative):not(.ng-invalid):not(.has-error):hover .nx-radio__input:not([disabled]):checked+.nx-radio__label .nx-radio__dot{background-color:#075994}:host:not(.nx-radio--negative):not(.ng-invalid):not(.has-error):active .nx-radio__input:not([disabled])+.nx-radio__label .nx-radio__circle{border-color:#003781}:host:not(.nx-radio--negative):not(.ng-invalid):not(.has-error):active .nx-radio__input:not([disabled]):checked+.nx-radio__label .nx-radio__dot{background-color:#003781}@media screen and (-ms-high-contrast:active){.nx-radio__input:checked+.nx-radio__label .nx-radio__dot{background-color:windowText}.nx-radio__input:focus+.nx-radio__label{color:highlightText}.nx-radio__input:focus+.nx-radio__label .nx-radio__dot{background-color:highlightText}}"]
                        }] }
            ];
            /** @nocollapse */
            NxRadioComponent.ctorParameters = function () { return [
                { type: NxRadioGroupComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxRadioComponent.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['id',] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['name',] }],
                labelSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxValueChange',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxChecked',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxDisabled',] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxRadioModule = /** @class */ (function () {
                function NxRadioModule() {
                }
                return NxRadioModule;
            }());
            NxRadioModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxRadioComponent, NxRadioGroupComponent],
                            exports: [NxRadioComponent, NxRadioGroupComponent],
                            imports: [
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_TYPE$1 = 'normal';
            var NxCopytextComponent = /** @class */ (function () {
                function NxCopytextComponent() {
                    /**
                     * \@docs-private
                     */
                    this.type = DEFAULT_TYPE$1;
                    /**
                     * \@docs-private
                     */
                    this.negative = false;
                }
                Object.defineProperty(NxCopytextComponent.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * Sets the type and whether the negative set of styling should be used.
                     *
                     * You can combine the values of type NxCopytextType and 'negative'.
                     *
                     * Default type: 'normal'
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        this._classNames = value;
                        var _b = __read(this._classNames.match(/small|medium|normal|large/) || [DEFAULT_TYPE$1], 1), _c = _b[0], type = _c === void 0 ? null : _c;
                        this.type = ( /** @type {?} */(type));
                        this.negative = !!this._classNames.match(/negative/);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxCopytextComponent;
            }());
            NxCopytextComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: 'p[nxCopytext]',
                            template: "<ng-content></ng-content>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-copy]': 'true',
                                '[class.nx-copy--small]': 'type === "small"',
                                '[class.nx-copy--medium]': 'type === "medium"',
                                '[class.nx-copy--normal]': 'type === "normal"',
                                '[class.nx-copy--large]': 'type === "large"',
                                '[class.nx-copy--negative]': 'negative',
                            },
                            styles: [":host{margin:0 0 32px;font-size:16px;font-size:var(--body-03-font-size,16px);line-height:24px;line-height:var(--body-03-line-height,24px);font-weight:400;font-weight:var(--body-03-font-weight,400);letter-spacing:0;letter-spacing:var(--body-03-letter-spacing,0)}:host.nx-copy.nx-copy{font-weight:400}:host(.nx-copy--negative){color:#fff}:host(.nx-copy--small){font-size:12px;font-size:var(--body-05-font-size,12px);line-height:16px;line-height:var(--body-05-line-height,16px);font-weight:600;font-weight:var(--body-05-font-weight,600);letter-spacing:.5px;letter-spacing:var(--body-05-letter-spacing,.5px)}:host(.nx-copy--medium){font-size:14px;font-size:var(--body-04-font-size,14px);line-height:20px;line-height:var(--body-04-line-height,20px);font-weight:600;font-weight:var(--body-04-font-weight,600);letter-spacing:.2px;letter-spacing:var(--body-04-letter-spacing,.2px)}:host(.nx-copy--large){font-size:18px;font-size:var(--body-02-font-size,18px);line-height:24px;line-height:var(--body-02-line-height,24px);font-weight:400;font-weight:var(--body-02-font-weight,400);letter-spacing:.2px;letter-spacing:var(--body-02-letter-spacing,.2px)}"]
                        }] }
            ];
            NxCopytextComponent.propDecorators = {
                classNames: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxCopytext',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxCopytextModule = /** @class */ (function () {
                function NxCopytextModule() {
                }
                return NxCopytextModule;
            }());
            NxCopytextModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxCopytextComponent],
                            exports: [NxCopytextComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_TYPE$2 = 'section';
            var NxHeadlineComponent = /** @class */ (function () {
                function NxHeadlineComponent() {
                    /**
                     * \@docs-private
                     */
                    this.type = DEFAULT_TYPE$2;
                    /**
                     * \@docs-private
                     */
                    this.negative = false;
                }
                Object.defineProperty(NxHeadlineComponent.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * Changes the type of the headline which affects the visual appearance.
                     * You can combine a HeadlineType and 'negative'.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        this._classNames = value;
                        /** @type {?} */
                        var typeRegex = /page-bold-caps|page|section|subsection-large|subsection-medium|subsection-small|subsection-xsmall/;
                        var _b = __read(this._classNames.match(typeRegex) || [DEFAULT_TYPE$2], 1), _c = _b[0], type = _c === void 0 ? null : _c;
                        this.type = ( /** @type {?} */(type));
                        this.negative = !!this._classNames.match(/negative/);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxHeadlineComponent;
            }());
            NxHeadlineComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: '[nxHeadline]',
                            template: "<ng-content></ng-content>",
                            host: {
                                '[class.nx-heading--page]': 'type === "page"',
                                '[class.nx-heading--page-bold-caps]': 'type === "page-bold-caps"',
                                '[class.nx-heading--section]': 'type === "section"',
                                '[class.nx-heading--subsection-large]': 'type === "subsection-large"',
                                '[class.nx-heading--subsection-medium]': 'type === "subsection-medium"',
                                '[class.nx-heading--subsection-small]': 'type === "subsection-small"',
                                '[class.nx-heading--subsection-xsmall]': 'type === "subsection-xsmall"',
                                '[class.nx-heading--negative]': 'negative',
                            },
                            styles: [":host{margin:0}:host ::ng-deep nx-link,:host ::ng-deep nx-link a,:host a{color:#006192;font-size:inherit;font-weight:600;letter-spacing:inherit;text-decoration:none}:host(.nx-heading--page-bold-caps){font-size:54px;font-size:var(--heading-01-font-size,54px);line-height:60px;line-height:var(--heading-01-line-height,60px);font-weight:var(--heading-01-font-weight,300);letter-spacing:.3px;letter-spacing:var(--heading-01-letter-spacing,.3px);font-weight:700;text-transform:uppercase;margin-bottom:8px}@media (max-width:703px){:host(.nx-heading--page-bold-caps){font-size:40px;font-size:var(--heading-01-small-font-size,40px);line-height:48px;line-height:var(--heading-01-small-line-height,48px)}}:host(.nx-heading--page){font-size:54px;font-size:var(--heading-01-font-size,54px);line-height:60px;line-height:var(--heading-01-line-height,60px);font-weight:300;font-weight:var(--heading-01-font-weight,300);letter-spacing:.3px;letter-spacing:var(--heading-01-letter-spacing,.3px);margin-bottom:40px}@media (max-width:703px){:host(.nx-heading--page){font-size:40px;font-size:var(--heading-01-small-font-size,40px);line-height:48px;line-height:var(--heading-01-small-line-height,48px)}}:host(.nx-heading--section){font-size:40px;font-size:var(--heading-02-font-size,40px);line-height:48px;line-height:var(--heading-02-line-height,48px);font-weight:300;font-weight:var(--heading-02-font-weight,300);letter-spacing:.3px;letter-spacing:var(--heading-02-letter-spacing,.3px);margin-bottom:48px}@media (max-width:703px){:host(.nx-heading--section){font-size:35px;font-size:var(--heading-02-small-font-size,35px);line-height:40px;line-height:var(--heading-02-small-line-height,40px)}}:host(.nx-heading--subsection-large){font-size:30px;font-size:var(--heading-03-font-size,30px);line-height:36px;line-height:var(--heading-03-line-height,36px);font-weight:300;font-weight:var(--heading-03-font-weight,300);letter-spacing:.3px;letter-spacing:var(--heading-03-letter-spacing,.3px);margin-bottom:32px}@media (max-width:703px){:host(.nx-heading--subsection-large){font-size:26px;font-size:var(--heading-03-small-font-size,26px);line-height:32px;line-height:var(--heading-03-small-line-height,32px)}}:host(.nx-heading--subsection-medium){font-size:26px;font-size:var(--heading-04-font-size,26px);line-height:32px;line-height:var(--heading-04-line-height,32px);font-weight:300;font-weight:var(--heading-04-font-weight,300);letter-spacing:.3px;letter-spacing:var(--heading-04-letter-spacing,.3px);margin-bottom:40px}@media (max-width:703px){:host(.nx-heading--subsection-medium){font-size:24px;font-size:var(--heading-04-small-font-size,24px);line-height:32px;line-height:var(--heading-04-small-line-height,32px)}}:host(.nx-heading--subsection-small){font-size:24px;font-size:var(--heading-05-font-size,24px);line-height:32px;line-height:var(--heading-05-line-height,32px);font-weight:600;font-weight:var(--heading-05-font-weight,600);letter-spacing:.2px;letter-spacing:var(--heading-05-letter-spacing,.2px);margin-bottom:32px}@media (max-width:703px){:host(.nx-heading--subsection-small){font-size:20px;font-size:var(--heading-05-small-font-size,20px);line-height:28px;line-height:var(--heading-05-small-line-height,28px)}}:host(.nx-heading--subsection-xsmall){font-size:20px;font-size:var(--heading-06-font-size,20px);line-height:28px;line-height:var(--heading-06-line-height,28px);font-weight:300;font-weight:var(--heading-06-font-weight,300);letter-spacing:.2px;letter-spacing:var(--heading-06-letter-spacing,.2px);margin-bottom:24px}@media (max-width:703px){:host(.nx-heading--subsection-xsmall){font-size:18px;font-size:var(--heading-06-small-font-size,18px);line-height:28px;line-height:var(--heading-06-small-line-height,28px)}}:host(.nx-heading--negative){color:#fff}:host(.nx-heading--negative) ::ng-deep a{color:#fff}"]
                        }] }
            ];
            NxHeadlineComponent.propDecorators = {
                classNames: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxHeadline',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxHeadlineModule = /** @class */ (function () {
                function NxHeadlineModule() {
                }
                return NxHeadlineModule;
            }());
            NxHeadlineModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxHeadlineComponent],
                            exports: [NxHeadlineComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAPPING = {
                'black': 'nx-link--black',
                'negative': 'nx-link--negative',
                'text': 'nx-link--text',
                'block': 'nx-link--block',
                'icon-right': 'nx-link--icon-right'
            };
            /** @type {?} */
            var DEFAULT_CLASSES = ['nx-link'];
            var NxLinkComponent = /** @class */ (function (_super) {
                __extends(NxLinkComponent, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _renderer
                 */
                function NxLinkComponent(_elementRef, _renderer) {
                    var _this = _super.call(this, MAPPING, DEFAULT_CLASSES, _elementRef, _renderer) || this;
                    _this._renderer = _renderer;
                    return _this;
                }
                /**
                 * @return {?}
                 */
                NxLinkComponent.prototype.ngAfterContentInit = function () {
                    // Add a specific link class that the css gets more specific than the nx-icon css
                    /** @type {?} */
                    var icons = this.elementRef.nativeElement.querySelectorAll('nx-icon');
                    for (var i = 0; i < icons.length; i++) {
                        this._renderer.addClass(icons[i], 'nx-link__icon');
                    }
                };
                Object.defineProperty(NxLinkComponent.prototype, "elementRef", {
                    /**
                     * \@docs-private
                     * getter used for the modal component as a quickfix
                     * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
                     * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
                     * way to reach the elementRef of the component until the modal gets refactored.
                     * @return {?}
                     */
                    get: function () {
                        return this._elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxLinkComponent;
            }(_allianz_ngx_ndbx_core__WEBPACK_IMPORTED_MODULE_14__["MappedStyles"]));
            NxLinkComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-link',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            template: '<ng-content></ng-content>',
                            inputs: ['classNames: nxStyle'],
                            styles: [":host{display:inline-block;color:#006192;cursor:pointer;font-size:16px;font-weight:600;letter-spacing:1px;position:relative;text-decoration:none;transition:color .2s,box-shadow .2s;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;line-height:24px}:host:hover{color:#008ed6}:host::ng-deep a:active{color:#003781}:host::ng-deep a{display:flex}:host-context([data-whatinput=keyboard])::ng-deep a:focus{border-radius:4px;outline:0;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-link--negative){color:#fff}:host(.nx-link--negative):hover{color:#c2c2c2}:host(.nx-link--negative)::ng-deep a:active{color:#999}:host(.nx-link--negative)::ng-deep a[aria-disabled],:host(.nx-link--negative)::ng-deep a[disabled]{color:rgba(255,255,255,.4)}:host(.nx-link--black){color:#414141}:host(.nx-link--black):hover{color:#999}:host(.nx-link--black)::ng-deep a:active{color:#5b5b5b}:host(.nx-link--black)::ng-deep a[aria-disabled],:host(.nx-link--black)::ng-deep a[disabled]{color:#c2c2c2}.nx-link--text{font-weight:700;text-transform:none;letter-spacing:normal;border-radius:4px}:host::ng-deep .c-icon,:host::ng-deep nx-icon.nx-link__icon{line-height:24px;font-size:24px;margin:0 8px 0 0}:host::ng-deep .c-icon::before,:host::ng-deep nx-icon.nx-link__icon::before{line-height:inherit;font-size:inherit;width:24px;height:24px}:host(.nx-link--icon-right)::ng-deep .c-icon,:host(.nx-link--icon-right)::ng-deep nx-icon.nx-link__icon{order:2;margin:0 0 0 8px}:host::ng-deep a[aria-disabled],:host::ng-deep a[disabled]{cursor:not-allowed;color:rgba(0,97,146,.4)}:host::ng-deep a[aria-disabled]:active,:host::ng-deep a[disabled]:active{color:#006192}:host::ng-deep a[aria-disabled]:focus,:host::ng-deep a[disabled]:focus{outline:0;box-shadow:none}"]
                        }] }
            ];
            /** @nocollapse */
            NxLinkComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Renderer2"] }
            ]; };
            NxLinkComponent.propDecorators = {
                icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [_allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconComponent"],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxLinkModule = /** @class */ (function () {
                function NxLinkModule() {
                }
                return NxLinkModule;
            }());
            NxLinkModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxLinkComponent],
                            exports: [NxLinkComponent]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @abstract
             */
            var ToggleButton = /** @class */ (function () {
                function ToggleButton() {
                }
                return ToggleButton;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$2 = 0;
            var NxCircleToggleGroupComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxCircleToggleGroupComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._id = "nx-circle-toggle-group-" + nextId$2++;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * An event emitted when the selection changes. Outputs the value of the currently selected button.
                     */
                    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._name = "toggle-group-" + nextId$2++;
                    this._negative = false;
                    this._responsive = true;
                    this.onChangeCallback = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) { });
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Id of the circle toggle group.
                     *
                     * If not set, the circle toggle group gets an incremented value by default.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._id = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * Name that is used for accessibility.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._name = value;
                        this.updateToggleButtonsNames();
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Whether the circle toggle group is disabled.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._disabled !== newValue) {
                            this._disabled = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                        if (this.buttons) {
                            this.buttons.forEach(( /**
                             * @param {?} button
                             * @return {?}
                             */function (/**
                             * @param {?} button
                             * @return {?}
                             */ button) { return button.disabled = value; }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the circle toggle group uses the negative styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this.negative !== newValue) {
                            this._negative = newValue;
                        }
                        if (this.buttons) {
                            this.buttons.forEach(( /**
                             * @param {?} button
                             * @return {?}
                             */function (/**
                             * @param {?} button
                             * @return {?}
                             */ button) { return button.negative = value; }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._value;
                    },
                    /**
                     * The value of the selected circle toggle in the circle toggle group.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.writeValue(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "responsive", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._responsive;
                    },
                    /**
                     * Whether the circle toggle group has a responsive behavior.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this.responsive) {
                            this._responsive = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.writeValue = function (value) {
                    if (this.value !== value) {
                        this._value = value;
                        this.notifySelectedChild(value);
                    }
                };
                /**
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    this.subscribeToSelectionChanges();
                    // react if a content child is deleted, added etc.
                    this.buttons.changes
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["startWith"])(this.buttons), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                 * @param {?} toggles
                 * @return {?}
                 */function (/**
                 * @param {?} toggles
                 * @return {?}
                 */ toggles) { return toggles.length > 0; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["tap"])(( /**
                     * @param {?} toggles
                     * @return {?}
                     */function (/**
                     * @param {?} toggles
                     * @return {?}
                     */ toggles) { return Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        toggles.forEach(( /**
                         * @param {?} toggle
                         * @return {?}
                         */function (/**
                         * @param {?} toggle
                         * @return {?}
                         */ toggle) { return toggle.toggleButton.resetClasses(); }));
                        _this.buttons.first.toggleButton.setFirstButton();
                        _this.buttons.last.toggleButton.setLastButton();
                    })); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this.subscribeToSelectionChanges(); }));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.subscribeToSelectionChanges = function () {
                    var _this = this;
                    /** @type {?} */
                    var changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"])(this.buttons.changes, this._destroyed);
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"]).apply(void 0, __spread(this.buttons.map(( /**
                     * @param {?} button
                     * @return {?}
                     */function (/**
                     * @param {?} button
                     * @return {?}
                     */ button) { return button.selectionChange; })))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(changedOrDestroyed))
                        .subscribe(( /**
                 * @param {?} change
                 * @return {?}
                 */function (change) {
                        _this.onChangeCallback(change.value);
                        _this.valueChange.emit(change.value);
                    }));
                };
                /**
                 * \@docs-private
                 * inform the selected button if the group selection is set programattically at the beginning
                 * @param {?} newValue
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.notifySelectedChild = function (newValue) {
                    if (this.buttons) {
                        /** @type {?} */
                        var selected = this.buttons.find(( /**
                         * @param {?} button
                         * @return {?}
                         */function (button) { return button.value === newValue; }));
                        if (selected) {
                            selected.setGroupSelection();
                        }
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.updateToggleButtonsNames = function () {
                    var _this = this;
                    if (this.buttons) {
                        this.buttons.forEach(( /**
                         * @param {?} button
                         * @return {?}
                         */function (/**
                         * @param {?} button
                         * @return {?}
                         */ button) { return button.name = _this.name; }));
                    }
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.registerOnChange = function (fn) {
                    this.onChangeCallback = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.registerOnTouched = function (fn) {
                    this.onTouchedCallback = fn;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxCircleToggleGroupComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "selectedButton", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.buttons ? this.buttons.find(( /**
                         * @param {?} button
                         * @return {?}
                         */function (/**
                         * @param {?} button
                         * @return {?}
                         */ button) { return button.checked; })) : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleGroupComponent.prototype, "buttons", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._buttons;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxCircleToggleGroupComponent;
            }());
            NxCircleToggleGroupComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-circle-toggle-group',
                            template: "<ng-content></ng-content>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxCircleToggleGroupComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                '[class.is-responsive]': 'responsive',
                                '[class.is-disabled]': 'disabled',
                                '[attr.aria-disabled]': 'disabled',
                                '[attr.aria-labelledby]': 'name',
                                '[attr.name]': 'name',
                                '[attr.id]': 'id',
                                '[class.nx-circle-toggle-group]': 'true',
                                'role': 'radiogroup'
                            },
                            styles: [":host{display:flex;flex-wrap:wrap;flex-direction:column;justify-content:space-around}@media (min-width:320px){:host{flex-direction:row}}:host(.is-responsive){flex-direction:column}@media (min-width:704px){:host(.is-responsive){flex-direction:row}}"]
                        }] }
            ];
            /** @nocollapse */
            NxCircleToggleGroupComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxCircleToggleGroupComponent.propDecorators = {
                _buttons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [ToggleButton,] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                responsive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxMobileToggleButtonComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxMobileToggleButtonComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this.checked = false;
                    this.negative = false;
                    this.disabled = false;
                }
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxMobileToggleButtonComponent.prototype.setFirstButton = function () {
                    this.isFirst = true;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxMobileToggleButtonComponent.prototype.setLastButton = function () {
                    this.isLast = true;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxMobileToggleButtonComponent.prototype.resetClasses = function () {
                    this.isFirst = false;
                    this.isLast = false;
                    this._changeDetectorRef.markForCheck();
                };
                return NxMobileToggleButtonComponent;
            }());
            NxMobileToggleButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-mobile-toggle-button',
                            template: "<nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n<span class=\"nx-toggle-button__label-text\">{{label}}</span>\n<span *ngIf=\"hint\" class=\"nx-toggle-button__label-hint\">({{hint}})</span>\n\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.is-disabled]': 'disabled',
                                '[class.is-negative]': 'negative',
                                '[class.is-first]': 'isFirst',
                                '[class.is-last]': 'isLast',
                                '[class.is-flipped]': 'checked'
                            },
                            styles: [":host{display:none;position:relative;transition:background-color .2s,border-color .2s,color .2s;flex-direction:row;border-width:1px 2px;border-color:#007ab3;border-style:solid;padding:11px 31px;width:100%;justify-content:center;align-items:center}@media (max-width:703px){:host-context(.is-responsive){display:flex}}.nx-toggle-button__label-hint{color:#007ab3;font-weight:nx-font-weights(light);line-height:20px;font-size:14px}.nx-toggle-button__label-text{padding-top:0;padding-right:4px;font-weight:600;color:#007ab3}.nx-toggle-button__mobile-check{font-size:24px;height:24px;display:inline-block;opacity:0;margin-right:8px;color:#fff}:host(.is-flipped.nx-toggle-button__mobile-check){opacity:1}:host(.is-first){border-top-width:2px;border-radius:4px 4px 0 0}:host(.is-last){border-bottom-width:2px;border-radius:0 0 4px 4px}:host(.is-flipped){background:#007ab3}:host(.is-flipped) .nx-toggle-button__label-hint,:host(.is-flipped) .nx-toggle-button__label-text{color:#fff}:host(.is-negative){border-color:#fff}:host(.is-negative) .nx-toggle-button__label-hint,:host(.is-negative) .nx-toggle-button__label-text,:host(.is-negative) .nx-toggle-button__mobile-check{color:#fff}:host(.is-negative.is-flipped){background-color:#fff}:host(.is-negative.is-flipped) .nx-toggle-button__label-hint,:host(.is-negative.is-flipped) .nx-toggle-button__label-text,:host(.is-negative.is-flipped) .nx-toggle-button__mobile-check{color:#007ab3}:host(.is-disabled){opacity:.4;cursor:not-allowed}"]
                        }] }
            ];
            /** @nocollapse */
            NxMobileToggleButtonComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxMobileToggleButtonComponent.propDecorators = {
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                hint: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ToggleChangeEvent = /** @class */ (function () {
                /**
                 * @param {?} button
                 * @param {?} value
                 */
                function ToggleChangeEvent(button, value) {
                    this.button = button;
                    this.value = value;
                }
                return ToggleChangeEvent;
            }());
            /** @type {?} */
            var nextId$3 = 0;
            var NxCircleToggleComponent = /** @class */ (function (_super) {
                __extends(NxCircleToggleComponent, _super);
                /**
                 * @param {?} toggleGroup
                 * @param {?} _checkedDispatcher
                 * @param {?} _changeDetectorRef
                 */
                function NxCircleToggleComponent(/** @docs-private */ toggleGroup, _checkedDispatcher, _changeDetectorRef) {
                    var _this = _super.call(this) || this;
                    _this.toggleGroup = toggleGroup;
                    _this._checkedDispatcher = _checkedDispatcher;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._id = "toggle-button-" + nextId$3++;
                    /**
                     * \@docs-private
                     */
                    _this.inGroup = false;
                    _this._name = null;
                    /**
                     * An event that is emitted when the checked state fo the circle toggle changes.
                     */
                    _this.checkedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * An event that is emitted when the checked state of the circle toggle changes.
                     * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
                     */
                    _this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    _this._checked = false;
                    _this._value = null;
                    _this._iconName = null;
                    _this._svg = null;
                    _this._svgChecked = null;
                    _this._label = null;
                    _this._hint = null;
                    _this._hover = false;
                    /**
                     * touched is set to true on touch devices.
                     */
                    _this._touched = false;
                    _this._removeUniqueSelectionListener = ( /**
                     * @return {?}
                     */function () { });
                    _this.onChangeCallback = ( /**
                     * @param {?} checked
                     * @return {?}
                     */function (checked) { });
                    _this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                    if (_this.toggleGroup) {
                        _this.name = _this.toggleGroup.name;
                    }
                    return _this;
                }
                Object.defineProperty(NxCircleToggleComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Id of the circle toggle.
                     *
                     * If not set, the circle toggle gets an incremented value by default.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._id = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * Name that is used for accessibility.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._name = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "checked", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._checked;
                    },
                    /**
                     * Whether the circle toggle is checked.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this.checked !== newValue) {
                            this._checked = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._value;
                    },
                    /**
                     * The value that is used in the model.
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        this._value = newValue;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "iconName", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._iconName;
                    },
                    /**
                     * Id of the icon that should be displayed.
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        this._iconName = name;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "svg", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._svg;
                    },
                    /**
                     * SVG that is displayed if the circle toggle is unchecked.
                     * @param {?} src
                     * @return {?}
                     */
                    set: function (src) {
                        this._svg = src;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "svgChecked", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._svgChecked;
                    },
                    /**
                     * SVG that is displayed if the circle toggle is checked.
                     * @param {?} src
                     * @return {?}
                     */
                    set: function (src) {
                        this._svgChecked = src;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "label", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._label;
                    },
                    /**
                     * Label displayed below the circle.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._label = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "hint", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._hint;
                    },
                    /**
                     * Additional hint displayed below the label.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._hint = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the circle toggle uses the negative set of styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this.negative !== newValue) {
                            this._negative = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "responsive", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._responsive;
                    },
                    /**
                     * Whether the circle toggle has a responsive behavior.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this.responsive !== newValue) {
                            this._responsive = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Whether the circle toggle is disabled.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this.disabled !== newValue) {
                            this._disabled = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.onMouseEnter = function () {
                    if (!this._touched) {
                        this._hover = true;
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.onMouseLeave = function () {
                    if (!this._touched) {
                        this._hover = false;
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.onTouchStart = function () {
                    this._touched = true;
                };
                /**
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.ngOnInit = function () {
                    if (this.toggleGroup) {
                        this.attachListenerForGroup();
                    }
                };
                /**
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    if (this.toggleGroup) {
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this.inGroup = true;
                            _this.negative = _this.toggleGroup.negative;
                            _this.disabled = _this.toggleGroup.disabled;
                            _this.responsive = _this.toggleGroup.responsive;
                            _this.id = _this.toggleGroup.id + ("-button-" + nextId$3++);
                        }));
                    }
                };
                /**
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.ngOnDestroy = function () {
                    // function returned by the listener
                    this._removeUniqueSelectionListener();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.attachListenerForGroup = function () {
                    var _this = this;
                    this._removeUniqueSelectionListener =
                        this._checkedDispatcher.listen(( /**
                         * @param {?} groupId
                         * @param {?} buttonId
                         * @return {?}
                         */function (groupId, buttonId) {
                            if (_this.id !== buttonId && groupId === _this.toggleGroup.id) {
                                _this.checked = false;
                            }
                        }));
                };
                /**
                 * @param {?} newValue
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.writeValue = function (newValue) {
                    this.checked = newValue;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.registerOnChange = function (fn) {
                    this.onChangeCallback = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.registerOnTouched = function (fn) {
                    this.onTouchedCallback = fn;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.toggle = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    if ((this.toggleGroup && this.checked) || this.disabled) {
                        return;
                    }
                    else {
                        this.checked = !this.checked;
                        this.onChangeCallback(this.checked);
                        this.checkedChange.emit(this.checked);
                        this.selectionChange.emit(new ToggleChangeEvent(this, this.value));
                        if (this.toggleGroup) {
                            this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
                        }
                    }
                };
                /**
                 * \@docs-private
                 *
                 * method called by the group if the internal value of the group is changed programatically,
                 * does not trigger change emission
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.setGroupSelection = function () {
                    // propagate changes only if the value in the group is different than the button checked value
                    if (!this.checked) {
                        this.checked = !this.checked;
                        this.onChangeCallback(this.checked);
                        this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
                    }
                };
                Object.defineProperty(NxCircleToggleComponent.prototype, "svgButton", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return !!this.svg && !!this.svgChecked;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "svgUrl", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var useFilledSvg = this.checked || (!this.disabled && this._hover);
                        if (this.negative) {
                            useFilledSvg = !useFilledSvg;
                        }
                        return useFilledSvg ? this.svgChecked : this.svg;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCircleToggleComponent.prototype, "type", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.toggleGroup ? 'radio' : 'checkbox';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxCircleToggleComponent.prototype.handleEnterKey = function (event) {
                    if (!this.toggleGroup) {
                        this.toggle(event);
                    }
                };
                return NxCircleToggleComponent;
            }(ToggleButton));
            NxCircleToggleComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-circle-toggle',
                            template: "<input [id]=\"id + '-input'\"\n       class=\"nx-circle-toggle__input\"\n       [attr.aria-labelledby]=\"id + '-label'\"\n       [type]=\"type\"\n       [attr.name]=\"name\"\n       [checked]=\"checked\"\n       [disabled]= \"disabled\"\n       [attr.aria-checked]=\"checked\"\n       (keydown.enter)=\"handleEnterKey($event)\"\n       (click)=\"toggle($event)\">\n<label class=\"nx-circle-toggle__label\"\n  [for]=\"id + '-input'\"\n  [id]=\"id + '-label'\">\n    <nx-icon-toggle-button\n      [label]=\"label\"\n      [hint]=\"hint\"\n      [checked]=\"checked\"\n      [icon]=\"iconName\"\n      [negative]=\"negative\"\n      [svg]=\"svgUrl\"\n      [disabled]=\"disabled\"\n      [inGroup]=\"inGroup\"\n      [touched]=\"_touched\">\n    </nx-icon-toggle-button>\n    <!-- The mobile toggle button is needed for the responsive mobile version of the component.\n    The display swtich is handled in the css. -->\n    <nx-mobile-toggle-button\n      [label]=\"label\"\n      [hint]=\"hint\"\n      [checked]=\"checked\"\n      [negative]=\"negative\"\n      [disabled]=\"disabled\">\n    </nx-mobile-toggle-button>\n</label>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                {
                                    provide: ToggleButton,
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxCircleToggleComponent; }))
                                },
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxCircleToggleComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                '[class.nx-toggle-circle]': 'true',
                                '[class.in-group]': 'inGroup',
                                '[class.is-disabled]': 'disabled',
                                '[class.is-responsive]': 'responsive'
                            },
                            styles: [":host{display:inline-block;vertical-align:top;position:relative}:host:not(.is-responsive){opacity:.9999}:host .nx-circle-toggle__input{opacity:0;position:absolute}:host:not(.in-group){margin-right:64px}@media (max-width:703px){:host:not(.in-group){margin-right:48px}}:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__check-focus,:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__icon-wrapper{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep nx-mobile-toggle-button{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;z-index:1}"]
                        }] }
            ];
            /** @nocollapse */
            NxCircleToggleComponent.ctorParameters = function () { return [
                { type: NxCircleToggleGroupComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__["UniqueSelectionDispatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxCircleToggleComponent.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                checkedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                iconName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['icon',] }],
                svg: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                svgChecked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                hint: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                responsive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                toggleButton: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [NxMobileToggleButtonComponent,] }],
                onMouseEnter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['mouseenter',] }],
                onMouseLeave: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['mouseleave',] }],
                onTouchStart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['touchstart',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxIconToggleButtonComponent = /** @class */ (function () {
                function NxIconToggleButtonComponent() {
                    this.inGroup = true;
                }
                return NxIconToggleButtonComponent;
            }());
            NxIconToggleButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-icon-toggle-button',
                            template: "<div class=\"nx-toggle-circle__icon-wrapper\">\n  <ng-container *ngIf=\"!inGroup\">\n    <span class=\"nx-toggle-circle__check-icon\">\n      <nx-icon name=\"check\"></nx-icon>\n    </span>\n    <div class=\"nx-toggle-circle__check-focus\"></div>\n  </ng-container>\n  <span class=\"nx-toggle-circle__icon\">\n    <nx-icon size=\"m\" *ngIf=\"icon\" [name]=\"icon\"></nx-icon>\n    <img *ngIf=\"svgUrl\" class=\"nx-toggle-circle__icon-image\" [src]=\"svgUrl\" />\n  </span>\n</div>\n<span [class.is-label-bold]=\"hint\" class=\"nx-toggle-circle__label-text\">{{label}}</span>\n<span *ngIf=\"hint\" class=\"nx-toggle-circle__label-hint\">{{hint}}</span>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-circle-button]': 'true',
                                '[class.is-flipped]': 'checked',
                                '[class.has-checkmark]': '!inGroup',
                                '[class.is-disabled]': 'disabled',
                                '[class.is-negative]': 'negative',
                                '[class.is-touched]': 'touched'
                            },
                            styles: ["@media (max-width:703px){:host-context(.is-responsive){display:none}}:host{display:flex;flex-direction:column;padding:0;align-items:center;cursor:pointer}:host .nx-toggle-circle__label-text{position:relative;display:inline-block;padding-top:12px;line-height:24px;font-size:16px;max-width:16rem;z-index:1;color:#414141}@media screen and (-ms-high-contrast:active){:host .nx-toggle-circle__label-text{color:#fff}}:host .is-label-bold{font-weight:700}:host .nx-toggle-circle__icon-wrapper{height:80px;width:80px;border-radius:50%;border:2px solid #007ab3;display:flex;align-items:center;justify-content:center;transition:background-color .2s,border-color .2s,box-shadow .2s}:host .nx-toggle-circle__check-icon{background-color:#3da556;border-radius:50%;border:2px solid #fff;color:#fff;font-size:24px;width:32px;height:32px;margin-left:12px;position:absolute;top:-8px;right:calc(50% - 48px);transition:opacity .3s;z-index:1;opacity:0;display:flex;justify-content:center;align-content:center}:host .nx-toggle-circle__check-focus{border-radius:50%;width:28px;height:28px;position:absolute;top:-6px;right:calc(50% - 48px + 2px);z-index:-1;opacity:0;transition:box-shadow .2s}:host .nx-toggle-circle__label-hint{color:#414141;display:inline-block;line-height:24px;font-size:16px;transition:color .2s;z-index:1}@media screen and (-ms-high-contrast:active){:host .nx-toggle-circle__label-hint{color:#fff}}@media (max-width:703px){:host .is-label-bold{font-weight:400}:host .nx-toggle-circle__label-hint{font-weight:300}:host .nx-toggle-circle__label-hint .nx-toggle-circle__icon-wrapper{width:64px;height:64px}:host .nx-toggle-circle__label-hint .nx-toggle-circle__icon nx-icon{font-size:32px}:host .nx-toggle-circle__label-hint .nx-toggle-circle__check-icon{right:calc(50% - 40px)}:host .nx-toggle-circle__label-hint .nx-toggle-circle__icon-image{width:64px;height:64px}}:host .nx-toggle-circle__icon{display:flex;justify-content:center;align-content:center}:host .nx-toggle-circle__icon nx-icon{color:#007ab3}:host .nx-toggle-circle__icon-image{pointer-events:none;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.is-flipped) .nx-toggle-circle__icon-wrapper{background:#007ab3}:host(.is-flipped) .nx-toggle-circle__icon nx-icon{color:#fff}:host(.is-flipped) .nx-toggle-circle__check-focus,:host(.is-flipped) .nx-toggle-circle__check-icon{opacity:1}:host:not(.is-disabled):not(.is-negative):not(.is-touched):hover .nx-toggle-circle__icon-wrapper{border-color:#006192;background:#006192}:host:not(.is-disabled):not(.is-negative):not(.is-touched):hover:not(.is-flipped) .nx-toggle-circle__icon-wrapper{border-color:#007ab3;background:#007ab3}:host:not(.is-disabled):not(.is-negative):not(.is-touched):hover .nx-toggle-circle__icon nx-icon{color:#fff}:host:hover.is-flipped:not(.has-checkmark){cursor:auto}:host(.is-disabled){opacity:.4;cursor:not-allowed}:host(.is-negative) .nx-toggle-circle__icon-wrapper{border-color:#fff;background-color:transparent}:host(.is-negative) .nx-toggle-circle__icon nx-icon,:host(.is-negative) .nx-toggle-circle__label-hint,:host(.is-negative) .nx-toggle-circle__label-text{color:#fff}:host(.is-negative):not(.is-disabled):not(.is-touched):hover .nx-toggle-circle__icon-wrapper,:host(.is-negative.is-flipped) .nx-toggle-circle__icon-wrapper{border-color:#fff;background-color:#fff}:host(.is-negative):not(.is-disabled):not(.is-touched):hover .nx-toggle-circle__icon nx-icon,:host(.is-negative.is-flipped) .nx-toggle-circle__icon nx-icon{color:#007ab3}"]
                        }] }
            ];
            NxIconToggleButtonComponent.propDecorators = {
                inGroup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                hint: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                svgUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['svg',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                touched: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxCircleToggleModule = /** @class */ (function () {
                function NxCircleToggleModule() {
                }
                return NxCircleToggleModule;
            }());
            NxCircleToggleModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [
                                NxCircleToggleGroupComponent,
                                NxCircleToggleComponent,
                                NxIconToggleButtonComponent,
                                NxMobileToggleButtonComponent
                            ],
                            exports: [
                                NxCircleToggleGroupComponent,
                                NxIconToggleButtonComponent,
                                NxCircleToggleComponent,
                                NxMobileToggleButtonComponent
                            ],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_TYPE$3 = 'normal';
            var NxListComponent = /** @class */ (function () {
                function NxListComponent() {
                    /**
                     * \@docs-private
                     */
                    this.negative = false;
                    /**
                     * \@docs-private
                     */
                    this.orderedCircle = false;
                }
                Object.defineProperty(NxListComponent.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * Sets the visual appearance of the list. You can combine different values:
                     *
                     * xsmall | small | normal: The listed input values are expanded to the underlying BEM conform styles based
                     * on modifiers. Defaults to normal.
                     *
                     * negative: Display the list with a negative set of styling.
                     *
                     * ordered-circle: Display the list item numbers in a color filled circle.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        this._classNames = value;
                        var _b = __read(this._classNames.match(/xsmall|small|normal/) || [DEFAULT_TYPE$3], 1), _c = _b[0], type = _c === void 0 ? null : _c;
                        this.type = ( /** @type {?} */(type));
                        this.negative = !!this._classNames.match(/negative/);
                        this.orderedCircle = !!this._classNames.match(/ordered-circle/);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxListComponent;
            }());
            NxListComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: 'ul[nxList], ol[nxList]',
                            template: '<ng-content></ng-content>',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-list--xsmall]': 'type === "xsmall"',
                                '[class.nx-list--small]': 'type === "small"',
                                '[class.nx-list--normal]': 'type === "normal"',
                                '[class.nx-list--negative]': 'negative',
                                '[class.nx-list--ordered-circle]': 'orderedCircle',
                            },
                            styles: [":host{color:#414141;list-style:none;margin-bottom:32px;padding:0;counter-reset:list}:host(.nx-list--normal){font-size:18px;line-height:24px;letter-spacing:.2px}:host(.nx-list--small){font-size:16px;line-height:24px}:host(.nx-list--xsmall){font-size:14px;line-height:20px;letter-spacing:.2px}:host(.nx-list--xsmall):not(ol)::ng-deep li:not([nxlisticon])::before{top:6px}:host(.nx-list--xsmall) ::ng-deep .nx-list__icon{top:-2px}:host(ol.nx-list--xsmall.nx-list--ordered-circle) ::ng-deep li:not([nxlisticon])::before{top:-2px}:host(ol.nx-list--xsmall.nx-list--ordered-circle) ::ng-deep li:not([nxlisticon])::after{top:-2px}:host(.nx-list--negative){color:#fff}:host(.nx-list--negative) ::ng-deep .nx-list__icon{color:#fff}:host ::ng-deep .nx-list__icon{position:absolute;left:0;top:0;font-size:24px;color:#5a5360}:host ::ng-deep li{margin-bottom:16px;padding-left:36px;position:relative}:host(ul) ::ng-deep>li:not([nxlisticon]):before{background-color:#5a5360;border-radius:50%;content:\"\";display:inline-block;height:8px;width:8px;margin-right:16px;position:absolute;left:8px;top:8px}:host(ol) ::ng-deep>li:not([nxlisticon]):before{counter-increment:list;content:counter(list);position:absolute;font-size:inherit;font-weight:700;display:inline-block;width:24px;text-align:center;left:3px}:host ::ng-deep li>::ng-deep ol,:host ::ng-deep li>::ng-deep ul{margin-bottom:16px;margin-top:16px}:host(ol.nx-list--ordered-circle) ::ng-deep>li:not([nxlisticon]):before{width:24px;font-size:16px;line-height:24px;color:#fff;font-weight:400;left:0;z-index:2}:host(ol.nx-list--ordered-circle) ::ng-deep>li:not([nxlisticon]):after{border-radius:50%;width:24px;height:24px;background-color:#5a5360;left:0;top:0;content:'';position:absolute}:host(ol.nx-list--ordered-circle.nx-list--negative)::ng-deep>li:not([nxlisticon]):after{background-color:#fff}:host(ol.nx-list--ordered-circle.nx-list--negative)::ng-deep>li:not([nxlisticon]):before{color:#5a5360}:host(ul.nx-list--negative) ::ng-deep>li:not([nxlisticon]):before{background-color:#fff}"]
                        }] }
            ];
            NxListComponent.propDecorators = {
                classNames: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxList',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxListIconComponent = /** @class */ (function () {
                function NxListIconComponent() {
                }
                return NxListIconComponent;
            }());
            NxListIconComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: 'li[nxListIcon]',
                            template: "\n    <span class=\"nx-list__icon\">\n      <nx-icon [name]='name'></nx-icon>\n    </span>\n    <ng-content></ng-content>"
                        }] }
            ];
            NxListIconComponent.propDecorators = {
                viewRefPrefix: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['viewRefPrefix', { read: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewContainerRef"] },] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxListIcon',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxListModule = /** @class */ (function () {
                function NxListModule() {
                }
                return NxListModule;
            }());
            NxListModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxListComponent, NxListIconComponent],
                            imports: [_allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]],
                            exports: [NxListComponent, NxListIconComponent],
                            bootstrap: [_allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconComponent"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$4 = 0;
            /**
             * \@docs-private
             */
            var NxRadioToggleButtonBaseComponent = /** @class */ (function () {
                /**
                 * @param {?} renderer
                 */
                function NxRadioToggleButtonBaseComponent(renderer) {
                    this.renderer = renderer;
                    /**
                     * \@docs-private
                     */
                    this.toggleButtonId = 'nx-radio-toggle-button-' + nextId$4++;
                }
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxRadioToggleButtonBaseComponent.prototype.triggerInputClick = function (event) {
                    event.stopPropagation();
                    this.toggleInput.nativeElement.click();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioToggleButtonBaseComponent.prototype.setFirstButton = function () {
                    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--first');
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioToggleButtonBaseComponent.prototype.setLastButton = function () {
                    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--last');
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioToggleButtonBaseComponent.prototype.resetClasses = function () {
                    Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["removeClasses"])(this.renderer, this.labelContainer, 'nx-radio-toggle__label-container--first nx-radio-toggle__label-container--last');
                };
                return NxRadioToggleButtonBaseComponent;
            }());
            NxRadioToggleButtonBaseComponent.propDecorators = {
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }],
                labelContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['toggleButtonLabelContainer',] }],
                toggleInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['toggleInput',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$5 = 0;
            /** @type {?} */
            var MAPPING$1 = {
                'negative': 'nx-radio-toggle--negative',
                'small': 'nx-radio-toggle--small',
            };
            var NxRadioToggleComponent = /** @class */ (function () {
                /**
                 * @param {?} renderer
                 * @param {?} _changeDetectorRef
                 */
                function NxRadioToggleComponent(renderer, _changeDetectorRef) {
                    this.renderer = renderer;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._toggleId = (nextId$5++).toString();
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    this._disabled = false;
                    // emits to signal children to run change detection
                    this._disableChange = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.toggleButtons = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["QueryList"]();
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                    this.onChangeCallback = ( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) { });
                }
                Object.defineProperty(NxRadioToggleComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Sets the component to the disabled state.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var coerced = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._disabled !== coerced) {
                            this._disabled = coerced;
                            this._disableChange.next();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioToggleComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * Sets the name used for accessibility.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._name !== value) {
                            this._name = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.ngAfterViewInit = function () {
                    this.subscribeToToggleButtonsChange();
                };
                /**
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    /** @type {?} */
                    var changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"])(this.toggleButtons.changes, this._destroyed);
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"]).apply(void 0, __spread(this.toggleButtons.map(( /**
                     * @param {?} button
                     * @return {?}
                     */function (button) { return button.onChecked; })))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(changedOrDestroyed))
                        .subscribe(( /**
                 * @param {?} change
                 * @return {?}
                 */function (change) {
                        _this._selection = change.value;
                        _this.onChangeCallback(_this._selection);
                    }));
                };
                /**
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                    this._disableChange.complete();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.subscribeToToggleButtonsChange = function () {
                    var _this = this;
                    this.toggleButtons.changes
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["startWith"])(this.toggleButtons), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                 * @param {?} toggles
                 * @return {?}
                 */function (/**
                 * @param {?} toggles
                 * @return {?}
                 */ toggles) { return toggles.length > 0; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} toggles
                     * @return {?}
                     */function (toggles) {
                        toggles.forEach(( /**
                         * @param {?} toggle
                         * @return {?}
                         */function (/**
                         * @param {?} toggle
                         * @return {?}
                         */ toggle) {
                            toggle.resetClasses();
                            if (toggle.value === _this.selection) {
                                // We need to defer the selection for the edge case that the button with the value of this.selection
                                // didn't exist yet but was added afterwards to prevent changed after checked errors
                                setTimeout(( /**
                                 * @return {?}
                                 */function () { return toggle.select(); }));
                            }
                        }));
                        toggles.first.setFirstButton();
                        toggles.last.setLastButton();
                    }));
                };
                /**
                 * @param {?} onChangeCallback
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.registerOnChange = function (onChangeCallback) {
                    this.onChangeCallback = onChangeCallback;
                };
                /**
                 * @param {?} onTouchedCallback
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.registerOnTouched = function (onTouchedCallback) {
                    this.onTouchedCallback = onTouchedCallback;
                };
                /**
                 * Preselects the respective options.
                 * @param {?} value
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.writeValue = function (value) {
                    var _this = this;
                    this._selection = value;
                    /** @type {?} */
                    var correspondingButton = this.toggleButtons.find(( /**
                     * @param {?} button
                     * @return {?}
                     */function (button) { return button.value === _this._selection; }));
                    if (correspondingButton) {
                        (( /** @type {?} */(correspondingButton))).select();
                    }
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxRadioToggleComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                Object.defineProperty(NxRadioToggleComponent.prototype, "id", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return "nx-radio-toggle-" + this._toggleId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioToggleComponent.prototype, "style", {
                    /**
                     * Sets the modifiers for the component.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        /** @type {?} */
                        var modifierClasses = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["mapClassNames"])(value, [], MAPPING$1);
                        modifierClasses.split(' ')
                            .forEach(( /**
                     * @param {?} className
                     * @return {?}
                     */function (/**
                     * @param {?} className
                     * @return {?}
                     */ className) { return _this.renderer.addClass(_this.toggleContainer.nativeElement, className); }));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioToggleComponent.prototype, "selection", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._selection;
                    },
                    /**
                     * \@docs-private
                     * @param {?} selection
                     * @return {?}
                     */
                    set: function (selection) {
                        this._selection = selection;
                        this.onChangeCallback(selection);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxRadioToggleComponent;
            }());
            NxRadioToggleComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-radio-toggle',
                            template: "<div #toggleContainer class=\"nx-radio-toggle\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n   <ng-content></ng-content>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxRadioToggleComponent; })),
                                    multi: true
                                }
                            ],
                            styles: [".nx-radio-toggle{display:flex;height:100%}.nx-radio-toggle:focus+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#006192}.nx-radio-toggle:hover+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#075994}@media (max-width:703px){.nx-radio-toggle{flex-direction:column;text-align:center;width:100%;justify-content:center;align-items:center}}"]
                        }] }
            ];
            /** @nocollapse */
            NxRadioToggleComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxRadioToggleComponent.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxDisabled',] }],
                toggleContainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['toggleContainer',] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxName',] }],
                toggleButtons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxRadioToggleButtonBaseComponent,] }],
                writeValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSelection',] }],
                style: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxStyle',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxRadioToggleButtonChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} value
                 */
                function NxRadioToggleButtonChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return NxRadioToggleButtonChange;
            }());
            var NxRadioToggleButtonComponent = /** @class */ (function (_super) {
                __extends(NxRadioToggleButtonComponent, _super);
                /**
                 * @param {?} radioToggle
                 * @param {?} renderer
                 * @param {?} _changeDetectorRef
                 * @param {?} _toggleDispatcher
                 */
                function NxRadioToggleButtonComponent(radioToggle, renderer, _changeDetectorRef, _toggleDispatcher) {
                    var _this = _super.call(this, renderer) || this;
                    _this.radioToggle = radioToggle;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._toggleDispatcher = _toggleDispatcher;
                    /**
                     * \@docs-private
                     */
                    // emits when the button is checked to notify the group
                    _this.onChecked = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    _this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    _this._disabled = false;
                    _this._selected = false;
                    /**
                     * Unregister function for _expansionDispatcher.
                     */
                    _this._removeUniqueSelectionListener = ( /**
                     * @return {?}
                     */function () { });
                    _this._removeUniqueSelectionListener = _this._toggleDispatcher.listen(( /**
                     * @param {?} id
                     * @param {?} radioToggleId
                     * @return {?}
                     */function (id, radioToggleId) {
                        if (_this.radioToggle && _this.radioToggle.id === radioToggleId && _this.id !== id) {
                            _this._selected = false;
                            // need to let change detector know in case that the select() function was called on another button
                            _this._changeDetectorRef.markForCheck();
                        }
                    }));
                    _this.radioToggle._disableChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(_this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._changeDetectorRef.markForCheck();
                    }));
                    return _this;
                }
                Object.defineProperty(NxRadioToggleButtonComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled || (this.radioToggle && this.radioToggle.disabled);
                    },
                    /**
                     * \@docs-private
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioToggleButtonComponent.prototype, "selected", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._selected;
                    },
                    /**
                     * Sets the checked state and notify siblings and the parent group about the change
                     * @param {?} value
                     * @return {?}
                     */
                    // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
                    // To select a button without firing the event use the select() function
                    set: function (value) {
                        if (this._selected !== value) {
                            this._selected = value;
                            if (this._selected) {
                                this._notifySiblings();
                                this._emitCheckedEvent();
                            }
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxRadioToggleButtonComponent.prototype.ngOnDestroy = function () {
                    this._removeUniqueSelectionListener();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                Object.defineProperty(NxRadioToggleButtonComponent.prototype, "toggleId", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.radioToggle.id;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioToggleButtonComponent.prototype, "id", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.toggleButtonId;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @private
                 * @return {?}
                 */
                NxRadioToggleButtonComponent.prototype._notifySiblings = function () {
                    /** @type {?} */
                    var toggleId = this.radioToggle ? this.radioToggle.id : this.id;
                    this._toggleDispatcher.notify(this.id, toggleId);
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxRadioToggleButtonComponent.prototype._emitCheckedEvent = function () {
                    this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));
                };
                // Does NOT emit the onChecked event. Useful when you need to set initial
                // state. Used by the parent to set checked states on initialization and during
                // writeValue() changes.
                /**
                 * @return {?}
                 */
                NxRadioToggleButtonComponent.prototype.select = function () {
                    if (!this._selected) {
                        this._selected = true;
                        this._notifySiblings();
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * @return {?}
                 */
                NxRadioToggleButtonComponent.prototype.onKeyupSpace = function () {
                    this._selected = false;
                    this._notifySiblings();
                };
                return NxRadioToggleButtonComponent;
            }(NxRadioToggleButtonBaseComponent));
            NxRadioToggleButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-radio-toggle-button',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            template: "<input [attr.id]=\"toggleButtonId\"\n    #toggleInput\n    [attr.name]=\"toggleId\"\n    [checked]=\"selected\"\n    class=\"nx-radio-toggle__input\"\n    type=\"radio\"\n    (click)=\"selected = true\"\n    [disabled]=\"disabled\">\n<div (click)=\"triggerInputClick($event)\" #toggleButtonLabelContainer class=\"nx-radio-toggle__label-container\">\n  <label [attr.for]=\"toggleButtonId\" class=\"nx-radio-toggle__label\">\n      <nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n      <ng-content></ng-content>\n  </label>\n</div>\n\n\n",
                            providers: [
                                {
                                    provide: NxRadioToggleButtonBaseComponent, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxRadioToggleButtonComponent; }))
                                }
                            ],
                            styles: [":host{display:flex;position:relative;flex-direction:row}.nx-radio-toggle__input{opacity:0;position:absolute}.nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#003781;border-color:#003781;color:#fff}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#b2d7e8;border-color:#b2d7e8;color:#fff;cursor:not-allowed}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:not-allowed}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#007ab3;border-color:#007ab3;color:#fff;cursor:default}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:default}@media screen and (-ms-high-contrast:active){.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#ff0;cursor:default;border-color:inherit}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{background-color:#000}}.nx-toggle-button__mobile-check{display:none;font-size:24px;margin-right:8px;height:24px}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:14px;min-height:16px;padding:6px;text-transform:none;line-height:16px}.nx-radio-toggle{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:4px 0 0 4px;border-width:2px 0 2px 2px}@media (max-width:703px){:host{width:100%}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-toggle-button__mobile-check{display:inline-block}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{line-height:24px;padding:11px 31px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px 2px 1px;border-radius:4px 4px 0 0}}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:0 4px 4px 0;border-width:2px}@media (max-width:703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:1px 2px 2px;border-radius:0 0 4px 4px}}.nx-radio-toggle__label-container{padding:10px 30px;border:2px solid #007ab3;border-radius:0;border-width:2px 0 2px 2px;color:#007ab3;cursor:pointer;flex-grow:1;font-size:16px;font-weight:600;line-height:24px;text-align:center;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s;display:flex;align-items:center;height:100%;min-height:24px}@media (max-width:703px){.nx-radio-toggle__label-container{border-width:1px 2px;justify-content:center;padding:11px 31px}}.nx-radio-toggle__label-container:hover{background-color:#075994;border-color:#075994;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#c2c2c2;border-color:#c2c2c2;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#d9d9d9}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container{border-color:#fff;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container:hover{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}.nx-radio-toggle__label{display:flex;align-items:center;cursor:pointer}:host-context([data-whatinput=keyboard]) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;z-index:1}"]
                        }] }
            ];
            /** @nocollapse */
            NxRadioToggleButtonComponent.ctorParameters = function () { return [
                { type: NxRadioToggleComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return NxRadioToggleComponent; })),] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__["UniqueSelectionDispatcher"] }
            ]; };
            NxRadioToggleButtonComponent.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxDisabled',] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSelected',] }],
                onKeyupSpace: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['keyup.space',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxRadioToggleModule = /** @class */ (function () {
                function NxRadioToggleModule() {
                }
                return NxRadioToggleModule;
            }());
            NxRadioToggleModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxRadioToggleComponent, NxRadioToggleButtonComponent],
                            exports: [NxRadioToggleComponent, NxRadioToggleButtonComponent],
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_16__["FormsModule"], _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$6 = 0;
            /**
             * @deprecated Use `nx-circle-toggle` instead
             * \@deletion-target 8.0.0
             */
            var NxCheckboxCircleComponent = /** @class */ (function () {
                function NxCheckboxCircleComponent() {
                    this._id = (nextId$6++).toString();
                    /**
                     * An event emitted when the checked value has changed.
                     */
                    this.checkedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"](false);
                    this.onChangeCallback = ( /**
                     * @param {?} checked
                     * @return {?}
                     */function (checked) { });
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                    console.warn('`nx-checkbox-circle` is deprecated. Use `nx-circle-toggle` instead.');
                }
                Object.defineProperty(NxCheckboxCircleComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return "nx-checkbox-circle-" + this._id;
                    },
                    /**
                     * Id of the checkbox.
                     * If not set, the checkbox gets an incremented value by default.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._id) {
                            this._id = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxCheckboxCircleComponent.prototype.writeValue = function (value) {
                    this.checked = value;
                    this.checkedChange.emit(value);
                };
                /**
                 * @param {?} onChange
                 * @return {?}
                 */
                NxCheckboxCircleComponent.prototype.registerOnChange = function (onChange) {
                    this.onChangeCallback = onChange;
                };
                /**
                 * @param {?} onTouched
                 * @return {?}
                 */
                NxCheckboxCircleComponent.prototype.registerOnTouched = function (onTouched) {
                    this.onTouchedCallback = onTouched;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxCheckboxCircleComponent.prototype.setDisabledState = function (isDisabled) {
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxCheckboxCircleComponent.prototype.toggle = function () {
                    this.writeValue(!this.checked);
                    this.onChangeCallback(this.checked);
                };
                Object.defineProperty(NxCheckboxCircleComponent.prototype, "svgButton", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return !!this.svg && !!this.svgChecked;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCheckboxCircleComponent.prototype, "svgUrl", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.checked ? this.svgChecked : this.svg;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxCheckboxCircleComponent;
            }());
            NxCheckboxCircleComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-checkbox-circle',
                            template: "<input [id]=\"id\" class=\"nx-checkbox-circle__input\" [name]=\"name\" [attr.aria-labelledby]=\"id + '-label'\"\n    type=\"checkbox\" [checked]=\"checked\" (click)=\"toggle()\">\n<label class=\"nx-checkbox-circle__label\" [for]=\"id\"\n  [id]=\"id + '-label'\">\n  <span class=\"nx-checkbox-circle__check-icon\">\n    <nx-icon name=\"check-circle\"></nx-icon>\n  </span>\n  <span class=\"nx-checkbox-circle__icon\">\n    <nx-icon *ngIf=\"iconName\" [name]=\"iconName\"></nx-icon>\n    <img *ngIf=\"svgButton\" class=\"nx-checkbox-circle__icon-image\" [src]=\"svgUrl\"\n    />\n  </span>\n  <span class=\"nx-checkbox-circle__label-text\">\n    {{label}}\n  </span>\n</label>\n",
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxCheckboxCircleComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                '[class.is-checked]': 'checked'
                            },
                            styles: [":host{display:inline-block;margin-right:65px;vertical-align:top;position:relative}.nx-checkbox-circle__icon-image{height:100%}.nx-checkbox-circle__label-text{display:inline-block;max-width:16rem}.nx-checkbox-circle__input{opacity:0;position:absolute}.nx-checkbox-circle__check-icon{background-color:#f5f5f5;border-radius:50%;color:#3da556;display:block;font-size:31px;text-align:center;line-height:1;width:32px;height:32px;margin-left:1.6rem;padding:0;position:absolute;top:0;left:50%;opacity:0;transition:opacity .3s;z-index:1}@media (max-width:703px){:host{margin-right:48px}.nx-checkbox-circle__check-icon{width:28px;height:28px;font-size:27px;left:45%}}:host(.is-checked) .nx-checkbox-circle__check-icon{opacity:1;transition:opacity .3s}.nx-checkbox-circle__icon{border:2px solid #007ab3;border-radius:50%;content:\"\";display:block;height:8rem;width:8rem;left:50%;margin-left:-4rem;position:absolute;top:5px;transition:background-color .2s,border-color .2s,box-shadow .2s}.nx-checkbox-circle__icon nx-icon{border-radius:50%;color:#007ab3;display:block;font-size:4.8rem;position:absolute;text-align:center;margin:1.4rem;z-index:1}.nx-checkbox-circle__icon:hover{border-color:#006192;cursor:pointer}.nx-checkbox-circle__icon:hover nx-icon{color:#006192}:host(.is-checked) .nx-checkbox-circle__icon{background-color:#007ab3}@media screen and (-ms-high-contrast:active){:host(.is-checked) .nx-checkbox-circle__icon{color:#000}}:host(.is-checked) .nx-checkbox-circle__icon:hover{background-color:#006192;border-color:#006192}:host(.is-checked) .nx-checkbox-circle__icon nx-icon{color:#fff}.nx-checkbox-circle__label{display:inline-block;font-size:16px;font-weight:600;line-height:20px;margin-right:8px;padding:9.5rem 0 0;position:relative;text-align:center}@media (max-width:703px){.nx-checkbox-circle__icon{width:6.4rem;height:6.4rem;margin-left:-3.2rem}.nx-checkbox-circle__icon nx-icon{margin:1.1rem;font-size:4rem}.nx-checkbox-circle__label{margin-right:6px;padding:8rem 0 0;font-size:14px;line-height:16px}}.nx-checkbox-circle__text{display:block;position:absolute;text-align:center;left:0;top:5px;font-size:22px;line-height:8rem;width:8rem;height:8rem;color:#007ab3;border-radius:50%;border:2px solid #007ab3;z-index:0;cursor:pointer}.nx-checkbox-circle__text:hover{color:#006192;border-color:#006192}@media (max-width:703px){.nx-checkbox-circle__text{font-size:18px;line-height:6.4rem;width:6.4rem;height:6.4rem}}:host-context([data-whatinput=keyboard]) .nx-checkbox-circle__input:focus+.nx-checkbox-circle__label ::ng-deep .nx-checkbox-circle__icon{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxCheckboxCircleComponent.ctorParameters = function () { return []; };
            NxCheckboxCircleComponent.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                checkedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                iconName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxIcon',] }],
                svg: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSvg',] }],
                svgChecked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSvgChecked',] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxLabel',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxCheckboxCircleModule = /** @class */ (function () {
                function NxCheckboxCircleModule() {
                }
                return NxCheckboxCircleModule;
            }());
            NxCheckboxCircleModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxCheckboxCircleComponent],
                            exports: [NxCheckboxCircleComponent],
                            imports: [
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"],
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_SIZE$1 = 'small';
            var NxSpinnerComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxSpinnerComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._size = DEFAULT_SIZE$1;
                    this._negative = false;
                }
                Object.defineProperty(NxSpinnerComponent.prototype, "size", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._size;
                    },
                    /**
                     * Sets the size of the spinner. Default is 'small'.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._size) {
                            this._size = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSpinnerComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the spinner should use a negative styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._negative) {
                            this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxSpinnerComponent;
            }());
            NxSpinnerComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-spinner',
                            template: "<div class=\"nx-spinner__spin-block\">\n  <div class=\"nx-spinner__edge-left\"></div>\n  <div class=\"nx-spinner__edge-right\"></div>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-spinner--small]': 'size === "small"',
                                '[class.nx-spinner--medium]': 'size === "medium"',
                                '[class.nx-spinner--large]': 'size === "large"',
                                '[class.nx-spinner--negative]': 'negative',
                                '[attr.role]': '"status"',
                                '[attr.aria-busy]': '"true"',
                                '[attr.aria-live]': '"assertive"',
                            },
                            styles: ["@-webkit-keyframes spin{0%{-webkit-transform:rotate(45deg);transform:rotate(45deg)}100%{-webkit-transform:rotate(405deg);transform:rotate(405deg)}}@keyframes spin{0%{-webkit-transform:rotate(45deg);transform:rotate(45deg)}100%{-webkit-transform:rotate(405deg);transform:rotate(405deg)}}:host{position:relative;display:block}:host(.nx-spinner--small){width:16px;height:16px}:host(.nx-spinner--medium){width:24px;height:24px}:host(.nx-spinner--large){width:40px;height:40px}.nx-spinner__spin-block{width:100%;height:100%;-webkit-transform:rotate(45deg);transform:rotate(45deg);border-style:solid;border-radius:50%;border-color:#007ab3 #ececec #ececec;-webkit-animation-name:spin;animation-name:spin;-webkit-animation-duration:.8s;animation-duration:.8s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:linear;animation-timing-function:linear}:host(.nx-spinner--small) .nx-spinner__spin-block{border-width:calc(1.6px)}:host(.nx-spinner--medium) .nx-spinner__spin-block{border-width:calc(2.4px)}:host(.nx-spinner--large) .nx-spinner__spin-block{border-width:calc(4px)}.nx-spinner__edge-left,.nx-spinner__edge-right{width:12%;height:12%;border-radius:50%;background-color:#007ab3;position:absolute;top:4%}.nx-spinner__edge-left{left:4%}.nx-spinner__edge-right{right:4%}:host(.nx-spinner--negative) .nx-spinner__spin-block{border-color:#fff rgba(250,247,239,.35) rgba(250,247,239,.35)}:host(.nx-spinner--negative) .nx-spinner__edge-left,:host(.nx-spinner--negative) .nx-spinner__edge-right{background-color:#fff}"]
                        }] }
            ];
            /** @nocollapse */
            NxSpinnerComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxSpinnerComponent.propDecorators = {
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSize',] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxSpinnerModule = /** @class */ (function () {
                function NxSpinnerModule() {
                }
                return NxSpinnerModule;
            }());
            NxSpinnerModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [
                                NxSpinnerComponent
                            ],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"]
                            ],
                            exports: [
                                NxSpinnerComponent
                            ],
                            bootstrap: [],
                            providers: []
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxModalService = /** @class */ (function () {
                function NxModalService() {
                    this.subject = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    this.close$ = this.subject.asObservable();
                }
                /**
                 * @return {?}
                 */
                NxModalService.prototype.close = function () {
                    this.subject.next();
                };
                return NxModalService;
            }());
            NxModalService.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Injectable"] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var fadeIn = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animation"])([
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ opacity: 0 }),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])('300ms', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ opacity: 1 }))
            ]);
            /** @type {?} */
            var fadeOut = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animation"])(Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])('300ms', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ opacity: 0 })));
            /** @type {?} */
            var scaleUp = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animation"])([
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ transform: 'scale(1)', opacity: 1 }),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])('250ms', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ transform: 'scale(1.3)', opacity: 0 }))
            ]);
            /** @type {?} */
            var scaleDown = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animation"])([
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ transform: 'scale(1.3)', opacity: 0 }),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])('250ms', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ transform: 'scale(1)', opacity: 1 }))
            ]);
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll.
             */
            var NxModalActionsDirective = /** @class */ (function () {
                function NxModalActionsDirective() {
                }
                return NxModalActionsDirective;
            }());
            NxModalActionsDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: '[nxModalActions]',
                            host: {
                                '[class.nx-modal__actions]': 'true'
                            }
                        },] }
            ];
            /**
             * Scrollable container for the content of a modal.
             */
            var NxModalContentDirective = /** @class */ (function () {
                function NxModalContentDirective() {
                }
                return NxModalContentDirective;
            }());
            NxModalContentDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: '[nxModalContent]',
                            host: {
                                '[class.nx-modal__content]': 'true'
                            }
                        },] }
            ];
            var NxModalComponent = /** @class */ (function () {
                /**
                 * @param {?} modalService
                 * @param {?} eventManager
                 * @param {?} _changeDetectorRef
                 */
                function NxModalComponent(modalService, eventManager, _changeDetectorRef) {
                    this.modalService = modalService;
                    this.eventManager = eventManager;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._closeButtonLabel = 'Close dialog';
                    /**
                     * Whether the modal view should close when the user hits the escape key.
                     * Default is true.
                     */
                    this.hideOnEsc = true;
                    /**
                     * Whether the modal view should close when the user clicks on the backdrop.
                     * Default is true.
                     */
                    this.hideOnClickOutside = true;
                    /**
                     * Whether the modal view should have a close icon in the upper right corner.
                     * Default is true.
                     */
                    this.showCloseIcon = true;
                    /**
                     * An event emitted when the user clicks on the backdrop or uses the built-in close button.
                     * This event can be applied in conjunction with the custom open state handling
                     * of a modal to close it when requested by the user.
                     */
                    this.closeEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this.closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                }
                Object.defineProperty(NxModalComponent.prototype, "closeButtonLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._closeButtonLabel;
                    },
                    /**
                     * Sets the 'aria-label' of the modal close button needed for accessibility.
                     *
                     * Default value is 'Close dialog'.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._closeButtonLabel) {
                            this._closeButtonLabel = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxModalComponent.prototype.ngOnInit = function () {
                    var _this = this;
                    this.closeSubscription = this.modalService.close$.subscribe(( /**
                     * @return {?}
                     */function () { return _this.closeEvent.emit(); }));
                    this.eventManager.addGlobalEventListener('window', 'keyup.esc', ( /**
                     * @return {?}
                     */function () {
                        if (_this.hideOnEsc) {
                            _this.modalService.close();
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                NxModalComponent.prototype.ngOnDestroy = function () {
                    this.closeSubscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxModalComponent.prototype.clickOutsideModal = function () {
                    if (this.hideOnClickOutside) {
                        this.modalService.close();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxModalComponent.prototype.closeButtonClick = function () {
                    this.modalService.close();
                };
                /**
                 * \@docs-private
                 * @param {?} evt
                 * @return {?}
                 */
                NxModalComponent.prototype.cancelClick = function (evt) {
                    evt.stopPropagation();
                };
                return NxModalComponent;
            }());
            NxModalComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-modal',
                            template: "<div class=\"nx-modal\" role=\"dialog\" cdkTrapFocus cdkTrapFocusAutoCapture cdkFocusInitial>\n  <div class=\"nx-modal__backdrop\" (click)=\"clickOutsideModal()\">\n    <div class=\"nx-modal__position\">\n      <div class=\"nx-modal__container\" (click)=\"cancelClick($event)\" [@scaleUpDown]>\n\n        <button\n          (click)=\"closeButtonClick()\"\n          *ngIf=\"showCloseIcon\"\n          [attr.aria-label]=\"closeButtonLabel\"\n          class=\"nx-modal__close\"\n          type=\"button\">\n          <nx-icon name=\"close\"></nx-icon>\n        </button>\n\n        <div class=\"nx-modal__content-wrapper\">\n          <ng-container *ngIf=\"body else projectContent\">\n            <ng-container *ngTemplateOutlet=\"body\"></ng-container>\n          </ng-container>\n\n          <ng-template #projectContent>\n            <ng-content></ng-content>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            animations: [
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["trigger"])('fadeInOut', [
                                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])(':enter', [
                                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["useAnimation"])(fadeIn),
                                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["query"])('@scaleUpDown', [
                                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animateChild"])()
                                        ])
                                    ]),
                                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])(':leave', [
                                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["query"])('@scaleUpDown', [
                                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animateChild"])()
                                        ]),
                                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["useAnimation"])(fadeOut)
                                    ])
                                ]),
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["trigger"])('scaleUpDown', [
                                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])(':enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["useAnimation"])(scaleDown)),
                                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])(':leave', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["useAnimation"])(scaleUp))
                                ])
                            ],
                            host: {
                                '[@fadeInOut]': '',
                                '[class.nx-modal--fixed-width]': 'size === "fixed"'
                            },
                            styles: [".nx-modal{display:flex;position:fixed;width:100vw;height:100vh;top:0;bottom:0;left:0;right:0;z-index:100;align-items:center;justify-content:center;transition:opacity .3s}.nx-modal__backdrop{background-color:rgba(0,0,0,.35);height:100%;left:0;position:absolute;top:0;width:100%;z-index:-1}.nx-modal__position{position:absolute;display:inline-block;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);z-index:20}.nx-modal__container{border-radius:4px;background:#fff;box-shadow:0 8px 24px rgba(65,65,65,.35)}.nx-modal__content-wrapper{padding:40px 40px 48px;max-height:calc(100vh - 48px);overflow-y:auto}@media (max-width:703px){.nx-modal__content-wrapper{max-height:70vh;padding:40px 32px 48px}}.nx-modal__close{background-color:transparent;border:none;color:#414141;cursor:pointer;position:absolute;top:16px;right:16px;height:24px;outline:0;padding:0}.nx-modal__close nx-icon{font-size:24px}.nx-modal__close::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .nx-modal__close:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}@media (max-width:703px){.nx-modal__position{width:100%}.nx-modal__container{position:relative;max-width:calc(100vw - 16px);max-height:70vh;margin:0 auto}}:host(.nx-modal--fixed-width) .nx-modal__container{width:736px}::ng-deep .nx-modal__actions{height:72px;border-top:1px solid #d9d9d9;display:flex;align-items:center;justify-content:flex-end;padding:0 40px;position:absolute;bottom:0;background:#fff;left:0;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}::ng-deep .nx-modal__content{overflow-y:auto;max-height:calc(100vh - 72px - 48px)}@media (max-width:703px){::ng-deep .nx-modal__content{max-height:calc(70vh - 72px - 48px)}}"]
                        }] }
            ];
            /** @nocollapse */
            NxModalComponent.ctorParameters = function () { return [
                { type: NxModalService },
                { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["EventManager"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxModalComponent.propDecorators = {
                closeButtonLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                body: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxBody',] }],
                hideOnEsc: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxHideOnEsc',] }],
                hideOnClickOutside: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxHideOnClickOutside',] }],
                showCloseIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxShowCloseIcon',] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSize',] }],
                closeEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxClose',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxOpenModalOnClickDirective = /** @class */ (function () {
                /**
                 * @param {?} templateRef
                 * @param {?} viewContainer
                 * @param {?} modalService
                 */
                function NxOpenModalOnClickDirective(templateRef, viewContainer, modalService) {
                    var _this = this;
                    this.templateRef = templateRef;
                    this.viewContainer = viewContainer;
                    this.modalService = modalService;
                    /**
                     * \@docs-private
                     */
                    this.clickHandler = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        _this.viewContainer.clear();
                        // instantiate the template onto which this directive is applied
                        /** @type {?} */
                        var viewRef = _this.viewContainer.createEmbeddedView(_this.templateRef);
                        // we need to mark the viewRef explicitly if the modal is used inside another
                        // component that is using onPush change detection
                        viewRef.markForCheck();
                        event.preventDefault();
                        event.stopPropagation();
                    });
                }
                /**
                 * @return {?}
                 */
                NxOpenModalOnClickDirective.prototype.ngOnInit = function () {
                    var _this = this;
                    this.subscription = this.modalService.close$.subscribe(( /**
                     * @return {?}
                     */function () { return _this.viewContainer.clear(); }));
                };
                /**
                 * @return {?}
                 */
                NxOpenModalOnClickDirective.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this.elements.forEach(( /**
                     * @param {?} el
                     * @return {?}
                     */function (/**
                     * @param {?} el
                     * @return {?}
                     */ el) {
                        if (el.removeEventListener) {
                            el.removeEventListener('click', _this.clickHandler);
                        }
                    }));
                    this.subscription.unsubscribe();
                };
                Object.defineProperty(NxOpenModalOnClickDirective.prototype, "nxOpenModalOnClick", {
                    /**
                     * One or multiple template reference variables pointing to elements
                     * which should trigger opening the modal on click.
                     *
                     * Value: A single template reference variable or an array of template reference variables.
                     * @param {?} elements
                     * @return {?}
                     */
                    set: function (elements) {
                        var _this = this;
                        // also support the case where only one element is passed, check for the length property to be sure elements is an array
                        if (elements.length) {
                            this.elements = elements;
                        }
                        else {
                            this.elements = [elements];
                        }
                        // add a click event listener to any element passed as property to this directive
                        this.elements.forEach(( /**
                         * @param {?} el
                         * @return {?}
                         */function (/**
                         * @param {?} el
                         * @return {?}
                         */ el) {
                            if (el.addEventListener) {
                                el.addEventListener('click', _this.clickHandler);
                                // workaround until refactoring: if the reference is a component
                                // reference the component has to implement a getter to its own elementRef
                            }
                            else if (el.elementRef) {
                                el.elementRef.nativeElement.addEventListener('click', _this.clickHandler);
                            }
                            else {
                                console.warn("nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.", el);
                            }
                        }));
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxOpenModalOnClickDirective;
            }());
            NxOpenModalOnClickDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{ selector: '[nxOpenModalOnClick]' },] }
            ];
            /** @nocollapse */
            NxOpenModalOnClickDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewContainerRef"] },
                { type: NxModalService }
            ]; };
            NxOpenModalOnClickDirective.propDecorators = {
                nxOpenModalOnClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxModalModule = /** @class */ (function () {
                function NxModalModule() {
                }
                // define the modal service on root level as an application wide singleton,
                // assuming that we only display one modal at a time, which seems quite reasonable
                // this is static and named "forRoot" by convention
                /**
                 * @return {?}
                 */
                NxModalModule.forRoot = function () {
                    return {
                        ngModule: NxModalModule,
                        providers: [NxModalService]
                    };
                };
                return NxModalModule;
            }());
            NxModalModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_27__["A11yModule"], _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]],
                            declarations: [
                                NxModalComponent,
                                NxOpenModalOnClickDirective,
                                NxModalActionsDirective,
                                NxModalContentDirective
                            ],
                            exports: [
                                NxModalComponent,
                                NxOpenModalOnClickDirective,
                                NxModalActionsDirective,
                                NxModalContentDirective
                            ],
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$7 = 0;
            var NxSwitcherComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxSwitcherComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._id = "nx-switcher-" + nextId$7++;
                    this._labelPosition = 'right';
                    this._name = null;
                    this._checked = false;
                    this._big = false;
                    this._labelSize = 'large';
                    this._negative = false;
                    this._disabled = false;
                    /**
                     * An event is dispatched each time the switcher value is changed
                     */
                    this.checkedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this.onChangeCallback = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxSwitcherComponent.prototype, "id", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    /**
                     * Sets the id of the switcher
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._id = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSwitcherComponent.prototype, "labelPosition", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._labelPosition;
                    },
                    /**
                     * Specifies the placement of the label
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._labelPosition = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSwitcherComponent.prototype, "name", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * Sets the label text of the switcher
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._name = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSwitcherComponent.prototype, "checked", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._checked;
                    },
                    /**
                     * Whether the switcher is checked (on) or unchecked (off)
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._checked = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSwitcherComponent.prototype, "big", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._big;
                    },
                    /**
                     * Whether the big switcher is used
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._big = newValue;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSwitcherComponent.prototype, "labelSize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._labelSize;
                    },
                    /**
                     * Sets the size of the label
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._labelSize = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSwitcherComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the style for a dark background is used
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._negative = newValue;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxSwitcherComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Whether the switcher is in the disabled state
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._disabled = newValue;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Allows to toggle between the states
                 * @return {?}
                 */
                NxSwitcherComponent.prototype.toggle = function () {
                    if (!this.disabled) {
                        this.checked = !this.checked;
                        this.onChangeCallback(this.checked);
                        this.checkedChange.emit(this.checked);
                    }
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxSwitcherComponent.prototype.writeValue = function (value) {
                    if (value === null) {
                        value = false;
                    }
                    if (value !== this.checked) {
                        this.checked = value;
                    }
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxSwitcherComponent.prototype.registerOnChange = function (fn) {
                    this.onChangeCallback = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxSwitcherComponent.prototype.registerOnTouched = function (fn) {
                    this.onTouchedCallback = fn;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxSwitcherComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxSwitcherComponent.prototype.touch = function () {
                    this.onTouchedCallback();
                };
                return NxSwitcherComponent;
            }());
            NxSwitcherComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-switcher',
                            template: "<input type=\"checkbox\" [id]=\"id\" [attr.name]=\"name\" [disabled]=\"disabled\" [checked]=\"checked\" (click)=\"toggle()\" (blur)=\"touch()\"\n  role=\"switch\"\n  [attr.aria-checked]=\"checked\"\n  class=\"nx-switcher__input\">\n<label [attr.for]=\"id\" class=\"nx-switcher__label\">\n    <div class=\"nx-switcher__toggle\">\n      <div class=\"nx-switcher__dot\">\n        <nx-icon *ngIf=\"big\" name=\"check\"></nx-icon>\n      </div>\n    </div>\n  <ng-content></ng-content>\n</label>\n\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxSwitcherComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id
                                    and on label click the input click is not triggered (double id problem) */
                                '[attr.id]': 'null',
                                '[class.is-negative]': 'negative',
                                '[class.is-checked]': 'checked',
                                '[class.is-big]': 'big',
                                '[class.nx-switcher--small-label]': 'labelSize === "small"',
                                '[class.is-disabled]': 'disabled',
                                '[class.is-swapped]': 'labelPosition === "left"'
                            },
                            styles: [":host{position:relative;display:flex}:host(.is-swapped) .nx-switcher__label{flex-direction:row-reverse}:host(.is-swapped) .nx-switcher__label .nx-switcher__toggle{margin-left:12px}.nx-switcher__input{opacity:0;position:absolute}.nx-switcher__label{font-size:20px;font-size:var(--body-01-font-size,20px);line-height:28px;line-height:var(--body-01-line-height,28px);font-weight:400;font-weight:var(--body-01-font-weight,400);letter-spacing:.2px;letter-spacing:var(--body-01-letter-spacing,.2px);white-space:nowrap;cursor:pointer;display:flex;position:relative;align-items:center}.nx-switcher__toggle{position:relative;display:inline-block;width:48px;height:24px;background-color:#767676;border-radius:16px;transition:background-color .2s}@media screen and (-ms-high-contrast:active){.nx-switcher__label{color:#ff0}.nx-switcher__toggle{background-color:#c2c2c2;color:#ff0}}:host(:not(.is-swapped)) .nx-switcher__toggle{margin-right:12px}.nx-switcher__dot{position:absolute;height:20px;width:20px;left:2px;bottom:2px;background-color:#fff;border-radius:16px;-webkit-transform:translate(0);transform:translate(0);transition:transform .2s;transition:transform .2s,-webkit-transform .2s}:host(.is-checked) .nx-switcher__dot{-webkit-transform:translate(24px);transform:translate(24px)}:host(.is-checked) .nx-switcher__toggle{background-color:#007ab3;background-color:var(--interaction-primary,#007ab3)}@media screen and (-ms-high-contrast:active){:host(.is-checked) .nx-switcher__toggle{background-color:#ff0;color:#ff0}.nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{color:#fff}}:host(.is-checked.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host(.is-big) .nx-switcher__toggle{width:56px;height:32px}:host(.is-big) .nx-switcher__dot{height:28px;width:28px}:host(.is-big) nx-icon{position:absolute;top:2px;left:2px;font-size:24px;opacity:0;color:#007ab3;color:var(--interaction-primary,#007ab3)}:host(.is-big).is-checked nx-icon{opacity:1;transition:opacity .2s}:host(.nx-switcher--small-label) .nx-switcher__label{font-size:16px;font-size:var(--body-03-font-size,16px);line-height:24px;line-height:var(--body-03-line-height,24px);font-weight:400;font-weight:var(--body-03-font-weight,400);letter-spacing:0;letter-spacing:var(--body-03-letter-spacing,0)}:host(.is-negative) .nx-switcher__label{color:#fff}:host(.is-negative) .nx-switcher__dot{background-color:#fff}:host(.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host-context([data-whatinput=keyboard]) .nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.is-disabled) .nx-switcher__toggle{background-color:#c2c2c2;background-color:var(--disabled-01,#c2c2c2)}:host(.is-disabled) .nx-switcher__dot{background-color:#fff;opacity:.4}:host(.is-disabled) .nx-switcher__label{cursor:not-allowed;color:#c2c2c2;color:var(--disabled-01,#c2c2c2)}:host(.is-disabled) nx-icon{color:#c2c2c2;color:var(--disabled-01,#c2c2c2)}"]
                        }] }
            ];
            /** @nocollapse */
            NxSwitcherComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxSwitcherComponent.propDecorators = {
                id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                big: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxBig',] }],
                labelSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxNegative',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                checkedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['checkedChange',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxSwitcherModule = /** @class */ (function () {
                function NxSwitcherModule() {
                }
                return NxSwitcherModule;
            }());
            NxSwitcherModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxSwitcherComponent],
                            exports: [NxSwitcherComponent],
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"], _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Popover content that will be rendered lazily
             * after the popover is opened for the first time.
             */
            var NxPopoverContentDirective = /** @class */ (function () {
                /**
                 * @param {?} _template
                 */
                function NxPopoverContentDirective(_template) {
                    this._template = _template;
                }
                return NxPopoverContentDirective;
            }());
            NxPopoverContentDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: 'ng-template[nxPopoverContent]'
                        },] }
            ];
            /** @nocollapse */
            NxPopoverContentDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPopoverComponent = /** @class */ (function () {
                function NxPopoverComponent() {
                    /**
                     * Event emitted when the popover is closed.
                     */
                    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * \@docs-private
                     */
                    this.closeButtonClick = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.showCloseButton = false;
                    /**
                     * \@docs-private
                     */
                    this.arrowStyle = {};
                }
                /**
                 * @return {?}
                 */
                NxPopoverComponent.prototype.ngOnDestroy = function () {
                    this.closed.complete();
                };
                // emit to notify the popover trigger directive that the close button was clicked
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverComponent.prototype.emitButtonClick = function () {
                    this.closeButtonClick.next();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverComponent.prototype.emitClosedEvent = function () {
                    this.closed.emit();
                };
                Object.defineProperty(NxPopoverComponent.prototype, "classList", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        if (this.direction) {
                            return ["nx-popover--" + this.direction];
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxPopoverComponent;
            }());
            NxPopoverComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-popover',
                            template: "<ng-template>\n  <div [ngClass]=\"classList\" role=\"tooltip\" aria-hidden=\"false\">\n    <div class=\"nx-popover__content\">\n        <div class=\"nx-popover__arrow\" [ngStyle]=\"arrowStyle\">\n          </div>\n      <span aria-hidden=\"true\" class=\"nx-popover__close-icon\" (click)=\"emitButtonClick()\"\n            *ngIf=\"showCloseButton\">\n        <nx-icon name=\"close\"></nx-icon>\n      </span>\n      <span [id]=\"id\">\n        <ng-content></ng-content>\n        <ng-container [ngTemplateOutlet]=\"_lazyContent?._template\"></ng-container>\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            exportAs: 'nxPopover',
                            styles: [".nx-popover__content{background-color:#fff;border:1px solid #d9d9d9;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:23px;display:inline-block;font-size:16px}.nx-popover__close-icon{position:absolute;top:4px;right:4px;cursor:pointer;font-size:16px;line-height:16px}[data-whatintent=mouse] .nx-popover__content:focus{outline:0}.nx-popover__arrow{width:12px;height:12px;background-color:inherit;position:absolute;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);border-top:1px solid #d9d9d9;border-left:1px solid #d9d9d9}.nx-popover--top .nx-popover__arrow{-webkit-transform:translate(-50%,0) rotate(225deg);transform:translate(-50%,0) rotate(225deg);bottom:-5px;box-shadow:2px 2px 1px 1px #fff,-2px -2px 4px rgba(65,65,65,.5)}.nx-popover--right .nx-popover__arrow{-webkit-transform:translate(0,-50%) rotate(-45deg);transform:translate(0,-50%) rotate(-45deg);left:-5px}.nx-popover--bottom .nx-popover__arrow{-webkit-transform:translate(-50%,0) rotate(45deg);transform:translate(-50%,0) rotate(45deg);top:-5px}.nx-popover--left .nx-popover__arrow{-webkit-transform:translate(0,-50%) rotate(135deg);transform:translate(0,-50%) rotate(135deg);right:-5px}"]
                        }] }
            ];
            /** @nocollapse */
            NxPopoverComponent.ctorParameters = function () { return []; };
            NxPopoverComponent.propDecorators = {
                templateRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_31__["TemplateRef"],] }],
                _lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [NxPopoverContentDirective,] }],
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxClosed',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$8 = 0;
            /** @type {?} */
            var fallbacks = [
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top',
                    offsetX: 0,
                    offsetY: 16
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'bottom',
                    offsetX: 0,
                    offsetY: -16
                },
                {
                    originX: 'center',
                    originY: 'bottom',
                    overlayX: 'center',
                    overlayY: 'top',
                    offsetX: 0,
                    offsetY: 16
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'top',
                    offsetX: 0,
                    offsetY: 16
                },
                {
                    originX: 'end',
                    originY: 'center',
                    overlayX: 'start',
                    overlayY: 'center',
                    offsetX: 16,
                    offsetY: 0
                },
                {
                    originX: 'start',
                    originY: 'center',
                    overlayX: 'end',
                    overlayY: 'center',
                    offsetX: -16,
                    offsetY: 0
                },
                {
                    originX: 'center',
                    originY: 'top',
                    overlayX: 'center',
                    overlayY: 'bottom',
                    offsetX: 0,
                    offsetY: -16
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom',
                    offsetX: 0,
                    offsetY: -16
                }
            ];
            var NxPopoverTriggerDirective$1 = /** @class */ (function () {
                /**
                 * @param {?} overlay
                 * @param {?} elementRef
                 * @param {?} viewContainerRef
                 * @param {?} eventManager
                 */
                function NxPopoverTriggerDirective$1(overlay, elementRef, viewContainerRef, eventManager) {
                    this.overlay = overlay;
                    this.elementRef = elementRef;
                    this.viewContainerRef = viewContainerRef;
                    this.eventManager = eventManager;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    this._show = false;
                    this._closeable = null;
                    /**
                     * \@docs-private
                     */
                    this.id = 'nx-popover-' + nextId$8++;
                    /**
                     * An event is emitted if the visibility status of the popover changes.
                     */
                    this.changeShow = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Sets the desired direction to open the popover. E.g., right, left, bottom, top
                     */
                    this.direction = 'right';
                    /**
                     * Whether the popover will be opened automatically.
                     */
                    this.popoverInitialVisible = false;
                    /**
                     * An event is emitted when the visibility of the popopver changes.
                     */
                    this.visibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Whether the popover opens in modal state.
                     */
                    this.modal = false;
                    // If nxPopoverTrigger equals to 'hover' the popover opens on mouseenter and closes on mouseout.
                    // If nxPopoverTrigger equals to 'click' the popover opens on click and closes on a click of the close icon or pressing ESC key.
                    // If nxPopoverTrigger equals to 'manual' the popover opens only when programatically requested.
                    /**
                     * Sets the way to trigger the popover. Options are hover, click, manual
                     */
                    this.trigger = 'click';
                    /**
                     * Sets the scroll strategy. 'close' closes the popover on scroll while 'reposition' scrolls the popover with the origin.
                     */
                    this.scrollStrategy = 'close';
                    this._documentClickObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["fromEvent"])(document, 'click');
                }
                Object.defineProperty(NxPopoverTriggerDirective$1.prototype, "show", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._show;
                    },
                    /**
                     * Whether to show or hide the popover.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._show !== value) {
                            this._show = value;
                            if (this._show) {
                                this.openPopover();
                            }
                            else {
                                this.closePopover();
                            }
                            this.changeShow.emit(this._show);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPopoverTriggerDirective$1.prototype, "closeable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._closeable;
                    },
                    /**
                     * Whether to show a close button. By default a close icon is only shown for trigger type click.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._closeable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this.popover) {
                            this.popover.showCloseButton = this.isCloseable();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.onMouseEnter = function () {
                    if (this.trigger === 'hover') {
                        this.openPopover();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.onMouseExit = function () {
                    if (this.trigger === 'hover') {
                        this.closePopover();
                    }
                };
                /**
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.ngOnInit = function () {
                    this.popover.showCloseButton = this.isCloseable();
                };
                /**
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    this.popover.id = this.id;
                    this.eventManager.addGlobalEventListener('window', 'keyup.esc', ( /**
                     * @return {?}
                     */function () {
                        _this.closePopover();
                    }));
                    this.popover.closeButtonClick.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.closePopover();
                    }));
                    if (this.popoverInitialVisible || this._show) {
                        this.openPopover();
                    }
                };
                /**
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.ngOnDestroy = function () {
                    this.closePopover();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                Object.defineProperty(NxPopoverTriggerDirective$1.prototype, "isOpen", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.overlayRef && this.createOverlay().hasAttached();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.isCloseable = function () {
                    return (this.trigger === 'click' && this._closeable === null) || this._closeable;
                };
                /**
                 * Update the popover with the given position strategy.
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.updatePosition = function () {
                    if (this._positionStrategy) {
                        this._positionStrategy.apply();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.handleClick = function () {
                    if (this.trigger === 'click') {
                        if (this.isOpen) {
                            this.closePopover();
                        }
                        else {
                            this.openPopover();
                        }
                    }
                };
                /**
                 * Open the popover instance.
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.open = function () {
                    this.show = true;
                };
                /**
                 * Close the popover instance.
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.close = function () {
                    this.show = false;
                };
                /**
                 * Toggle the popover instance.
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.toggle = function () {
                    this.show = !this.show;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.openPopover = function () {
                    if (!this.createOverlay().hasAttached()) {
                        this._embeddedViewRef = this.createOverlay().attach(this.portal);
                        if (!this.modal && this.trigger === 'click') {
                            this.waitForClose();
                        }
                    }
                };
                // detaches the overlay
                // we are listening to the detachments observable which will then emit the nxClosed event
                // on the popover component
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.closePopover = function () {
                    if (this.overlayRef) {
                        this.overlayRef.detach();
                        this._embeddedViewRef = null;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.createOverlay = function () {
                    if (!this.overlayRef) {
                        this.portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["TemplatePortal"](this.popover.templateRef, this.viewContainerRef);
                        /** @type {?} */
                        var overlayState = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayConfig"]();
                        overlayState.positionStrategy = this.getPosition();
                        this._positionStrategy = overlayState.positionStrategy;
                        if (this.scrollStrategy === 'reposition') {
                            overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
                        }
                        else {
                            overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
                        }
                        overlayState.scrollStrategy.enable();
                        if (this.modal && this.trigger === 'click') {
                            overlayState.hasBackdrop = true;
                        }
                        this.overlayRef = this.overlay.create(overlayState);
                        this.subscribeToPositions(( /** @type {?} */(overlayState.positionStrategy)));
                        this._subscribeToDetach();
                        if (this.modal) {
                            this._subscribeToBackdropClick();
                        }
                    }
                    return this.overlayRef;
                };
                /**
                 * @private
                 * @param {?} position
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.subscribeToPositions = function (position) {
                    var _this = this;
                    position.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} change
                     * @return {?}
                     */function (/**
                     * @param {?} change
                     * @return {?}
                     */ change) {
                        /** @type {?} */
                        var pair = change.connectionPair;
                        _this.positionOverlay(pair);
                        _this.positionArrow(pair);
                        // These position changes arrive too late,
                        // We have to trigger the change detection manually
                        // as it's detached from any render hierarchy
                        // and only updated by the overlay when attached.
                        if (_this._embeddedViewRef && !_this._embeddedViewRef.destroyed) {
                            _this._embeddedViewRef.detectChanges();
                        }
                    }));
                };
                // for modal popovers close the popover on backdrop clicks
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype._subscribeToBackdropClick = function () {
                    var _this = this;
                    this.overlayRef.backdropClick().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        _this.closePopover();
                    }));
                };
                // Emit the nxClosed event on the popover component when the overlay detaches
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype._subscribeToDetach = function () {
                    var _this = this;
                    this.overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.popover.emitClosedEvent();
                    }));
                };
                // subscribe to document clicks when trigger='click' to close the popover on clicks on the background
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.waitForClose = function () {
                    var _this = this;
                    return this._documentClickObservable
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["map"])(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) { return event.target; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                     * @param {?} target
                     * @return {?}
                     */function (/**
                     * @param {?} target
                     * @return {?}
                     */ target) { return !_this.elementRef.nativeElement.contains(target); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this.popover.closed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this.closePopover();
                    }));
                };
                /**
                 * @private
                 * @param {?} pair
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.positionOverlay = function (pair) {
                    if (pair.originX === 'end' && pair.overlayX === 'start') {
                        this.popover.direction = 'right';
                    }
                    else if (pair.originY === 'bottom' && pair.overlayY === 'top') {
                        this.popover.direction = 'bottom';
                    }
                    else if (pair.originX === 'start' && pair.overlayX === 'end') {
                        this.popover.direction = 'left';
                    }
                    else if (pair.originY === 'top' && pair.overlayY === 'bottom') {
                        this.popover.direction = 'top';
                    }
                };
                /**
                 * @private
                 * @param {?} pair
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.positionArrow = function (pair) {
                    /** @type {?} */
                    var parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;
                    /** @type {?} */
                    var parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;
                    /** @type {?} */
                    var parentElementLeftOffset = this.overlayRef.overlayElement.parentElement.offsetLeft;
                    /** @type {?} */
                    var overlayElementLeftOffset = this.overlayRef.overlayElement.offsetLeft;
                    // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.
                    /** @type {?} */
                    var targetPosition = (parentElementPositionX + parentElementWidth) - (parentElementLeftOffset + overlayElementLeftOffset);
                    if (pair.originX === pair.overlayX) {
                        /** @type {?} */
                        var direction = 'left';
                        /** @type {?} */
                        var arrowStyle = {};
                        arrowStyle[direction] = targetPosition + 'px';
                        this.popover.arrowStyle = arrowStyle;
                    }
                    if ((pair.originY === 'bottom' || pair.originY === 'top') && pair.overlayX === 'center') {
                        this.popover.arrowStyle = { left: targetPosition + 'px' };
                    }
                    if ((pair.originX === 'end' || pair.originX === 'start') && pair.overlayY === 'center') {
                        this.popover.arrowStyle = { top: '50%' };
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxPopoverTriggerDirective$1.prototype.getPosition = function () {
                    /** @type {?} */
                    var positions;
                    /** @type {?} */
                    var offsetX = 0;
                    /** @type {?} */
                    var offsetY = 0;
                    if (this.direction === 'top') {
                        positions = [{
                                overlayX: 'center',
                                overlayY: 'bottom',
                                originX: 'center',
                                originY: 'top'
                            }];
                        offsetX = 0;
                        offsetY = -20;
                    }
                    else if (this.direction === 'right') {
                        positions = [{
                                overlayX: 'start',
                                overlayY: 'center',
                                originX: 'end',
                                originY: 'center'
                            }];
                        offsetX = 20;
                        offsetY = 0;
                    }
                    else if (this.direction === 'bottom') {
                        positions = [{
                                overlayX: 'center',
                                overlayY: 'top',
                                originX: 'center',
                                originY: 'bottom'
                            }];
                        offsetX = 0;
                        offsetY = 20;
                    }
                    else if (this.direction === 'left') {
                        positions = [{
                                overlayX: 'end',
                                overlayY: 'center',
                                originX: 'start',
                                originY: 'center'
                            }];
                        offsetX = -20;
                        offsetY = 0;
                    }
                    return this.overlay.position().flexibleConnectedTo(this.elementRef)
                        .withPositions(__spread(positions, fallbacks))
                        .withDefaultOffsetX(offsetX)
                        .withDefaultOffsetY(offsetY);
                };
                return NxPopoverTriggerDirective$1;
            }());
            NxPopoverTriggerDirective$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: '[nxPopoverTriggerFor]',
                            exportAs: 'nxPopoverTrigger',
                            host: {
                                '(click)': 'handleClick()',
                                'aria-haspopup': 'true',
                                '[attr.aria-expanded]': 'isOpen',
                                '[attr.aria-describedby]': 'isOpen ? id : null'
                            }
                        },] }
            ];
            /** @nocollapse */
            NxPopoverTriggerDirective$1.ctorParameters = function () { return [
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewContainerRef"] },
                { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["EventManager"] }
            ]; };
            NxPopoverTriggerDirective$1.propDecorators = {
                changeShow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxPopoverShowChange',] }],
                show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverShow',] }],
                closeable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverCloseable',] }],
                popover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverTriggerFor',] }],
                direction: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverDirection',] }],
                popoverInitialVisible: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverInitialVisible',] }],
                visibleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverVisibleChange',] }],
                modal: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverModal',] }],
                trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverTrigger',] }],
                scrollStrategy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPopoverScrollStrategy',] }],
                onMouseEnter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['mouseenter',] }],
                onMouseExit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['mouseleave',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['touchstart',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPopoverModule$1 = /** @class */ (function () {
                function NxPopoverModule$1() {
                }
                return NxPopoverModule$1;
            }());
            NxPopoverModule$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ],
                            declarations: [
                                NxPopoverTriggerDirective$1,
                                NxPopoverComponent,
                                NxPopoverContentDirective
                            ],
                            exports: [
                                NxPopoverTriggerDirective$1,
                                NxPopoverComponent,
                                NxPopoverContentDirective
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTagComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxTagComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * An event is dispatched each time when the tag is clicked.
                     */
                    this.clicked = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * An event is dispatched each time when the tag is removed.
                     */
                    this.removed = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                }
                Object.defineProperty(NxTagComponent.prototype, "removable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._removable;
                    },
                    /**
                     * Whether the tag is removeable.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._removable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTagComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._value;
                    },
                    /**
                     * Sets the value of the tag.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._value !== value) {
                            this._value = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                // Emit the removed event that the parent can remove the value
                NxTagComponent.prototype.removeClickHandler = function (event) {
                    event.stopPropagation();
                    this.removed.emit(this.value);
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxTagComponent.prototype.removeKeyHandler = function (event) {
                    if (this.removable && (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["DELETE"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["BACKSPACE"])) {
                        event.preventDefault();
                        event.stopPropagation();
                        this.removed.emit(this.value);
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxTagComponent.prototype.tagClickHandler = function () {
                    this.clicked.emit(this.value);
                };
                return NxTagComponent;
            }());
            NxTagComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-tag',
                            template: "{{ value }}\n<span role=\"link\" aria-label=\"close\" class=\"nx-tag__close\" *ngIf=\"removable\"\n    (click)=\"removeClickHandler($event)\">\n    <nx-icon class=\"nx-tag__close-icon\" name=\"close\"></nx-icon>\n</span>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '(click)': 'tagClickHandler()',
                                '(keydown)': 'removeKeyHandler($event)',
                                '[attr.tabIndex]': '0'
                            },
                            styles: [":host{height:auto;max-width:100%;font-size:14px;color:#767676;padding:6px 14px;line-height:16px;letter-spacing:1px;font-weight:600;display:flex;align-items:center;border:2px solid #d9d9d9;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:background-color .2s,box-shadow .2s;cursor:pointer}:host:hover{border-color:#c2c2c2;color:#5b5b5b;background-color:#ececec}:host:focus{outline:transparent solid 2px}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}.nx-tag__close-icon{outline:0;width:16px;height:16px;display:block;font-size:16px;line-height:14px}.nx-tag__close{margin-left:8px}:host-context(.nx-taglist--keyword){padding:14px 22px}"]
                        }] }
            ];
            /** @nocollapse */
            NxTagComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxTagComponent.propDecorators = {
                removable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                clicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                removed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTaglistComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxTaglistComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * An event is dispatched each time when the list of tags changed.
                     */
                    this.tagsChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * An event is dispatched each time when a tag is clicked.
                     */
                    this.tagClickEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._tags = [];
                    this._allowTagDeletion = true;
                    this._isKeywordList = false;
                    this._labelProperty = 'nxTaglistLabel';
                    this._valueFormatterFn = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) { return value; });
                    this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxTaglistComponent.prototype, "tags", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._tags;
                    },
                    /**
                     * Sets the list of tags.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._tags = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTaglistComponent.prototype, "allowTagDeletion", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._allowTagDeletion;
                    },
                    /**
                     * Whether the tags can be removed from the list.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._allowTagDeletion = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTaglistComponent.prototype, "isKeywordList", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._isKeywordList;
                    },
                    /**
                     * Whether the tags can be styled as keywords.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._isKeywordList = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTaglistComponent.prototype, "labelProp", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._labelProperty;
                    },
                    /**
                     * Sets the label property, in case tags represent objects.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._labelProperty !== value) {
                            this._labelProperty = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTaglistComponent.prototype, "labelledby", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._ariaLabelledBy;
                    },
                    /**
                     * Sets the label property to improve accessibility.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._ariaLabelledBy !== value) {
                            this._ariaLabelledBy = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTaglistComponent.prototype, "valueFormatter", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._valueFormatterFn;
                    },
                    /**
                     * Sets the customization function for tag value.
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        this._valueFormatterFn = fn;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
                 * @param {?} index
                 * @param {?} value
                 * @return {?}
                 */
                NxTaglistComponent.prototype.delete = function (index, value) {
                    if (this.allowTagDeletion) {
                        this.tags = __spread(this.tags.slice(0, index), this.tags.slice(index + 1));
                        this._onChange(this.tags);
                        this.tagsChange.emit(this.tags);
                    }
                };
                /**
                 * Allows to add a tag. Takes tag object as an input
                 * @param {?} tag
                 * @return {?}
                 */
                NxTaglistComponent.prototype.addTag = function (tag) {
                    var _this = this;
                    if (!tag) {
                        return;
                    }
                    // make sure tag is either string or has the configured label prop and is not yet in the list
                    if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||
                        (tag[this.labelProp] && this.tags.filter(( /**
                         * @param {?} t
                         * @return {?}
                         */function (t) { return t[_this.labelProp] === tag[_this.labelProp]; })).length < 1)) {
                        this.tags = __spread(this.tags, [tag]);
                        this._onChange(this.tags);
                        this.tagsChange.emit(this.tags);
                    }
                };
                /**
                 * Allows to clear the tag list.
                 * @return {?}
                 */
                NxTaglistComponent.prototype.clearTags = function () {
                    this.tags = [];
                    this._onChange(this.tags);
                    this.tagsChange.emit(this.tags);
                };
                /**
                 * \@docs-private
                 * @param {?} tags
                 * @return {?}
                 */
                NxTaglistComponent.prototype.writeValue = function (tags) {
                    this.tags = tags;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxTaglistComponent.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxTaglistComponent.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * \@docs-private
                 * @param {?} tag
                 * @return {?}
                 */
                NxTaglistComponent.prototype.renderTag = function (tag) {
                    /** @type {?} */
                    var tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
                    return this.valueFormatter(tagStr);
                };
                /**
                 * \@docs-private
                 * @param {?} index
                 * @param {?} value
                 * @return {?}
                 */
                NxTaglistComponent.prototype.tagClick = function (index, value) {
                    this.tagClickEvent.emit(this.tags[index]);
                };
                return NxTaglistComponent;
            }());
            NxTaglistComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-taglist',
                            template: "  <ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n      <nx-tag [value]=\"renderTag(tag)\" [removable]=\"allowTagDeletion\" (clicked)=\"tagClick(i, $event)\" (removed)=\"delete(i, $event)\"></nx-tag>\n  </li>\n  </ul>\n  <ng-content *ngIf=\"tags.length < 1\"></ng-content>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxTaglistComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                '[class.nx-taglist--keyword]': 'isKeywordList',
                                '[attr.aria-labelledby]': 'labelledby || null'
                            },
                            styles: [":host{position:relative;min-height:32px;margin-bottom:32px;display:flex;justify-content:space-between}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}@media (max-width:703px){.nx-taglist--keyword{justify-content:center}}"]
                        }] }
            ];
            /** @nocollapse */
            NxTaglistComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxTaglistComponent.propDecorators = {
                tagsChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxTagsChange',] }],
                tagClickEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxTagClick',] }],
                tags: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxTags',] }],
                allowTagDeletion: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAllowTagDeletion',] }],
                isKeywordList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxIsKeywordList',] }],
                labelProp: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxLabelProperty',] }],
                labelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['aria-labelledby',] }],
                valueFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValueFormatter',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTaglistModule = /** @class */ (function () {
                function NxTaglistModule() {
                }
                return NxTaglistModule;
            }());
            NxTaglistModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxTaglistComponent, NxTagComponent],
                            exports: [NxTaglistComponent, NxTagComponent],
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"], _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxImageDirective = /** @class */ (function () {
                function NxImageDirective() {
                    console.warn('Directive nxImg which was used together with nxFigure ' +
                        'is now deprecated and not required anymore. Please remove it from your ' +
                        'tag. Check the documentation for more details.');
                }
                return NxImageDirective;
            }());
            NxImageDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: 'img[nxImg]'
                        },] }
            ];
            /** @nocollapse */
            NxImageDirective.ctorParameters = function () { return []; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_SIZE$2 = 'auto';
            var NxFigureComponent = /** @class */ (function () {
                function NxFigureComponent() {
                }
                Object.defineProperty(NxFigureComponent.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * Sets the type of the visual appearance of the image.
                     * The default value  is 'auto'.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        this._classNames = value;
                        /** @type {?} */
                        var sizeRegex = /^(auto|1by1|1dot8by1|1dot2by1|1by1dot1|2dot6by1)$/;
                        var _b = __read(this._classNames.match(sizeRegex) || [DEFAULT_SIZE$2], 1), _c = _b[0], size = _c === void 0 ? null : _c;
                        this.size = ( /** @type {?} */(size));
                        this.rounded = !!this._classNames.match(/rounded/);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxFigureComponent;
            }());
            NxFigureComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            // tslint:disable-next-line:component-selector
                            selector: 'figure[nxFigure]',
                            template: '<ng-content></ng-content>',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.nx-image--auto]': 'size === "auto" && !rounded',
                                '[class.nx-image--1by1]': 'size === "1by1"',
                                '[class.nx-image--1dot8by1]': 'size === "1dot8by1"',
                                '[class.nx-image--1dot2by1]': 'size === "1dot2by1"',
                                '[class.nx-image--1by1dot1]': 'size === "1by1dot1"',
                                '[class.nx-image--2dot6by1]': 'size === "2dot6by1"',
                                '[class.nx-image--rounded]': 'rounded'
                            },
                            styles: [":host{display:block;position:relative;line-height:0}:host ::ng-deep img{display:block;font-family:\"object-fit: cover;\";-o-object-fit:cover;object-fit:cover;height:100%;width:100%}:host(.nx-image--auto) ::ng-deep img{height:auto}:host(:not(.nx-image--auto)) ::ng-deep img{position:absolute;top:0;left:0}:host(.nx-image--rounded){padding-top:100%}:host(.nx-image--rounded) ::ng-deep img{border-radius:50%;bottom:0;left:0;position:absolute;right:0;top:0}:host(.nx-image--1by1){padding-top:100%}:host(.nx-image--1dot8by1){padding-top:55.55556%}:host(.nx-image--1dot2by1){padding-top:83.33333%}:host(.nx-image--1by1dot1){padding-top:110%}:host(.nx-image--2dot6by1){padding-top:38.46154%}:host(.nx-image--1by1dot4){padding-top:140%}"]
                        }] }
            ];
            NxFigureComponent.propDecorators = {
                classNames: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxFigure',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxImageModule = /** @class */ (function () {
                function NxImageModule() {
                }
                return NxImageModule;
            }());
            NxImageModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxFigureComponent, NxImageDirective],
                            exports: [NxFigureComponent, NxImageDirective]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$9 = 0;
            /**
             * @abstract
             */
            var NxRadioCircleButton = /** @class */ (function () {
                /**
                 * @param {?} radioCircle
                 */
                function NxRadioCircleButton(radioCircle) {
                    this.radioCircle = radioCircle;
                    /**
                     * \@docs-private
                     */
                    this.id = ++nextId$9;
                }
                /**
                 * @return {?}
                 */
                NxRadioCircleButton.prototype.ngOnChanges = function () {
                    if (!this.label) {
                        console.warn("nx-radio-circle-icon-button/nx-radio-circle-svg-button: required field 'nxLabel' is not set");
                    }
                };
                Object.defineProperty(NxRadioCircleButton.prototype, "checked", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this.radioCircle.selectedButton === this || null;
                    },
                    /**
                     * Whether the item is preselected.
                     * @param {?} checked
                     * @return {?}
                     */
                    set: function (checked) {
                        if (checked) {
                            this.radioCircle.selectedButton = this;
                        }
                        else {
                            if (this.checked) {
                                this.radioCircle.selectedButton = null;
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioCircleButton.prototype, "circleButtonId", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.radioCircle.radioCircleId + '-' + this.id;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioCircleButton.prototype, "radioCircleId", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.radioCircle.radioCircleId;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxRadioCircleButton;
            }());
            NxRadioCircleButton.propDecorators = {
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxLabel',] }],
                hint: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxHint',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }],
                labelElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['labelElement',] }],
                checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSelected',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$a = 0;
            /**
             * @deprecated Use `nx-circle-toggle-group` instead
             * \@deletion-target 8.0.0
             */
            var NxRadioCircleComponent = /** @class */ (function () {
                /**
                 * @param {?} renderer
                 */
                function NxRadioCircleComponent(renderer) {
                    this.renderer = renderer;
                    this._id = nextId$a++;
                    this._responsive = true;
                    /**
                     * An event emitted when the selection changes.
                     */
                    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Whether the radio circle is disabled.
                     */
                    this.disabled = false;
                    this.onTouchedCallback = ( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) {
                    });
                    this.onChangeCallback = ( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) {
                    });
                    console.warn('`nx-radio-circle` is deprecated. Use `nx-circle-toggle-group` instead.');
                }
                Object.defineProperty(NxRadioCircleComponent.prototype, "responsiveToggle", {
                    /**
                     * Whether the toggle behavior is disabled.
                     *
                     * @deprecated Use `nxResponsive` instead
                     * \@deletion-target 7.0.0
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        console.warn('`nxResponsiveToggle` is deprecated. Use `nxResponsive` instead.');
                        this.responsive = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioCircleComponent.prototype, "responsive", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._responsive;
                    },
                    /**
                     * Whether the radio circle should have a responsive behavior.
                     *
                     * On false the circles will stay even on mobile viewports.
                     * Default: true.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this.responsive) {
                            this._responsive = newValue;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioCircleComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._selectedButton ? this._selectedButton.value : null;
                    },
                    /**
                     * Sets the value of the radio circle.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this.writeValue(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @deprecated Use `responsive` getter
                 * \@deletion-target 7.0.0
                 * @return {?}
                 */
                NxRadioCircleComponent.prototype.getResposiveToggle = function () {
                    console.warn('The method `getResponsiveToggle is deprecated. Use the `responsive` getter instead');
                    return this._responsive;
                };
                Object.defineProperty(NxRadioCircleComponent.prototype, "radioCircleId", {
                    /**
                     * The id of the radio circle.
                     * @return {?}
                     */
                    get: function () {
                        return "radio-circle-" + this._id;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxRadioCircleComponent.prototype.ngAfterContentInit = function () {
                    this.renderer.addClass(this._buttons.first.labelElement.nativeElement, "nx-radio-circle__label--first");
                    this.renderer.addClass(this._buttons.last.labelElement.nativeElement, "nx-radio-circle__label--last");
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxRadioCircleComponent.prototype.writeValue = function (value) {
                    if (this._buttons) {
                        this._selectedButton = this._buttons.find(( /**
                         * @param {?} button
                         * @return {?}
                         */function (button) { return button.value === value; }));
                    }
                };
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                NxRadioCircleComponent.prototype.registerOnChange = function (callback) {
                    this.onChangeCallback = callback;
                };
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                NxRadioCircleComponent.prototype.registerOnTouched = function (callback) {
                    this.onTouchedCallback = callback;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxRadioCircleComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                Object.defineProperty(NxRadioCircleComponent.prototype, "selectedButton", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._selectedButton;
                    },
                    /**
                     * @param {?} button
                     * @return {?}
                     */
                    set: function (button) {
                        if (this.disabled) {
                            return;
                        }
                        this._selectedButton = button;
                        this.onChangeCallback(this.value);
                        this.valueChange.emit(this.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRadioCircleComponent.prototype, "buttons", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._buttons;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxRadioCircleComponent;
            }());
            NxRadioCircleComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-radio-circle',
                            template: "<div [id]=\"radioCircleId\" class=\"nx-radio-circle\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n  <ng-content></ng-content>\n</div>\n",
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxRadioCircleComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                '[class.is-responsive]': 'responsive',
                                '[class.is-disabled]': 'disabled',
                                '[attr.aria-disabled]': 'disabled',
                            },
                            styles: [":host{display:block;position:relative}@media (max-width:703px){:host-context(.is-responsive) .nx-radio-circle{flex-direction:column}:host-context(.is-responsive) .nx-radio-circle__label{flex-direction:row;border:2px solid #007ab3;border-top-width:0;font-size:16px;padding:8px 40px 8px 15px}:host-context(.is-responsive) .nx-radio-circle__label--first{border-top-width:2px;border-radius:5px 5px 0 0}:host-context(.is-responsive) .nx-radio-circle__label--last{border-radius:0 0 5px 5px}:host-context(.is-responsive) .nx-radio-circle__circle{display:none}:host-context(.is-responsive) .nx-radio-circle__label-info{color:#007ab3;margin-left:10px;margin-top:0;line-height:16px;font-size:14px}:host-context(.is-responsive) .nx-radio-circle__mobile-check{display:inline-block;opacity:0;line-height:1;margin-right:10px}:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__mobile-check{opacity:1}:host-context(.is-responsive) .nx-radio-circle--checked{background-color:#007ab3;color:#fff}:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__label-info,:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__label-text{color:#fff}:host(:not(.is-responsive)) ::ng-deep nx-radio-circle-icon-button,:host(:not(.is-responsive)) ::ng-deep nx-radio-circle-svg-button{flex:1 0 auto;min-width:33.3%}}.nx-radio-circle{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap}.nx-radio-circle__input{opacity:0;position:absolute}.nx-radio-circle__label{cursor:pointer;display:flex;flex-direction:column;justify-content:center;text-align:center;align-items:center;font-size:16px;font-weight:600;padding:0;position:relative;transition:background-color .2s,border-color .2s,color .2s;vertical-align:middle}@media (min-width:704px){:host:hover .nx-radio-circle__circle{background-color:#006192;border-color:transparent;box-shadow:none;color:#fff}.nx-radio-circle__label{line-height:8rem;min-height:8rem;min-width:8rem;max-width:8rem;padding:0}}.nx-radio-circle__label-text{line-height:20px;z-index:1;color:#414141}@media (max-width:703px){.nx-radio-circle__label-text{color:#007ab3}}.nx-radio-circle__input:focus+.nx-radio-circle__label{color:#fff}.nx-radio-circle__input:focus+.nx-radio-circle__label:after{background-color:#006192;border-color:transparent}.nx-radio-circle__mobile-check{font-size:24px;display:none;z-index:1}.nx-radio-circle--checked .nx-radio-circle__circle{color:#fff;background-color:#007ab3}.nx-radio-circle--checked{color:#fff}.nx-radio-circle--checked:hover{cursor:default}@media screen and (-ms-high-contrast:active){.nx-radio-circle__label-text{color:#fff}.nx-radio-circle--checked .nx-radio-circle__circle{background-color:#ff0;border-color:#ff0}.nx-radio-circle--checked,.nx-radio-circle--checked .nx-radio-circle__label-text{color:#000}.nx-radio-circle--checked .nx-radio-circle__label-text{color:#fff}}.nx-radio-circle__circle{display:flex;justify-content:center;align-items:center;border-radius:50%;min-width:8rem;min-height:8rem;max-width:8rem;max-height:8rem;width:8rem;height:8rem;border:2px solid #007ab3;margin-bottom:1.5rem;color:#007ab3}:host.is-disabled *{color:#c2c2c2}:host.is-disabled .nx-radio-circle__circle{border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__circle{background-color:#c2c2c2;border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__label--icon{color:#fff!important}@media (max-width:703px){:host.is-disabled .nx-radio-circle__label{border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle__label-info{color:#c2c2c2}:host.is-disabled .nx-icon--check:before{color:#fff}:host.is-disabled .nx-radio-circle--checked{background-color:#c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__label-info{color:#fff}}:host.is-disabled:hover{cursor:not-allowed}:host.is-disabled:hover .nx-radio-circle__circle{background-color:transparent;cursor:not-allowed}.nx-radio-circle__label--icon{pointer-events:none;z-index:1;display:flex;text-align:center;align-items:center;justify-content:center;font-size:4rem;font-weight:400;position:relative}.nx-radio-circle__label--icon.nx-icon--auto{font-size:4rem}.nx-radio-circle__label-info{color:#fff;display:inline-block;font-weight:300;line-height:22px;font-size:18px;margin-top:4px;transition:color .2s;z-index:1}@media screen and (-ms-high-contrast:active){.nx-radio-circle__label-info{color:#fff}}.nx-radio-circle__label-info:before{content:'(';display:inline-block}@media (min-width:704px){.nx-radio-circle__label-info{color:#767676;display:block;width:16rem}.nx-radio-circle__label-info:before{content:''}}.nx-radio-circle__label-info:after{content:')';display:inline-block}@media (min-width:704px){.nx-radio-circle__label-info:after{content:''}}:host-context([data-whatinput=keyboard]) .nx-radio-circle__input:focus+.nx-radio-circle__label .nx-radio-circle__circle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxRadioCircleComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Renderer2"] }
            ]; };
            NxRadioCircleComponent.propDecorators = {
                _buttons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxRadioCircleButton,] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxValueChange',] }],
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxName',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['disabled',] }],
                responsiveToggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxResponsiveToggle',] }],
                responsive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxResponsive',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @deprecated Use `nx-circle-toggle` instead
             * \@deletion-target 8.0.0
             */
            var NxRadioCircleIconButtonComponent = /** @class */ (function (_super) {
                __extends(NxRadioCircleIconButtonComponent, _super);
                /**
                 * @param {?} radioCircle
                 */
                function NxRadioCircleIconButtonComponent(radioCircle) {
                    var _this = _super.call(this, radioCircle) || this;
                    _this.radioCircle = radioCircle;
                    console.warn('`nx-radio-circle-icon-button` is deprecated. Use `nx-circle-toggle` instead.');
                    return _this;
                }
                return NxRadioCircleIconButtonComponent;
            }(NxRadioCircleButton));
            NxRadioCircleIconButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-radio-circle-icon-button',
                            template: "<input [id]=\"circleButtonId\" class=\"nx-radio-circle__input\" name=\"circle-icon\" type=\"radio\" [checked]=\"checked\"\n       (click)=\"checked = true\">\n<label #labelElement [for]=\"circleButtonId\" class=\"nx-radio-circle__label\" [class.nx-radio-circle--checked]=\"checked\">\n  <div class=\"nx-radio-circle__circle\">\n    <nx-icon class=\"nx-radio-circle__label--icon\" [name]=\"icon\"></nx-icon>    \n  </div>\n  <nx-icon class=\"nx-radio-circle__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n  <span class=\"nx-radio-circle__label-text\">{{label}}</span>\n  <span *ngIf=\"hint\" class=\"nx-radio-circle__label-info\">{{hint}}</span>\n</label>\n",
                            providers: [
                                {
                                    provide: NxRadioCircleButton, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxRadioCircleIconButtonComponent; }))
                                }
                            ],
                            host: {
                                '[class.is-disabled]': 'radioCircle.disabled',
                                '[attr.aria-disabled]': 'radioCircle.disabled'
                            },
                            styles: [":host{display:block;position:relative}@media (max-width:703px){:host-context(.is-responsive) .nx-radio-circle{flex-direction:column}:host-context(.is-responsive) .nx-radio-circle__label{flex-direction:row;border:2px solid #007ab3;border-top-width:0;font-size:16px;padding:8px 40px 8px 15px}:host-context(.is-responsive) .nx-radio-circle__label--first{border-top-width:2px;border-radius:5px 5px 0 0}:host-context(.is-responsive) .nx-radio-circle__label--last{border-radius:0 0 5px 5px}:host-context(.is-responsive) .nx-radio-circle__circle{display:none}:host-context(.is-responsive) .nx-radio-circle__label-info{color:#007ab3;margin-left:10px;margin-top:0;line-height:16px;font-size:14px}:host-context(.is-responsive) .nx-radio-circle__mobile-check{display:inline-block;opacity:0;line-height:1;margin-right:10px}:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__mobile-check{opacity:1}:host-context(.is-responsive) .nx-radio-circle--checked{background-color:#007ab3;color:#fff}:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__label-info,:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__label-text{color:#fff}:host(:not(.is-responsive)) ::ng-deep nx-radio-circle-icon-button,:host(:not(.is-responsive)) ::ng-deep nx-radio-circle-svg-button{flex:1 0 auto;min-width:33.3%}}.nx-radio-circle{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap}.nx-radio-circle__input{opacity:0;position:absolute}.nx-radio-circle__label{cursor:pointer;display:flex;flex-direction:column;justify-content:center;text-align:center;align-items:center;font-size:16px;font-weight:600;padding:0;position:relative;transition:background-color .2s,border-color .2s,color .2s;vertical-align:middle}@media (min-width:704px){:host:hover .nx-radio-circle__circle{background-color:#006192;border-color:transparent;box-shadow:none;color:#fff}.nx-radio-circle__label{line-height:8rem;min-height:8rem;min-width:8rem;max-width:8rem;padding:0}}.nx-radio-circle__label-text{line-height:20px;z-index:1;color:#414141}@media (max-width:703px){.nx-radio-circle__label-text{color:#007ab3}}.nx-radio-circle__input:focus+.nx-radio-circle__label{color:#fff}.nx-radio-circle__input:focus+.nx-radio-circle__label:after{background-color:#006192;border-color:transparent}.nx-radio-circle__mobile-check{font-size:24px;display:none;z-index:1}.nx-radio-circle--checked .nx-radio-circle__circle{color:#fff;background-color:#007ab3}.nx-radio-circle--checked{color:#fff}.nx-radio-circle--checked:hover{cursor:default}@media screen and (-ms-high-contrast:active){.nx-radio-circle__label-text{color:#fff}.nx-radio-circle--checked .nx-radio-circle__circle{background-color:#ff0;border-color:#ff0}.nx-radio-circle--checked,.nx-radio-circle--checked .nx-radio-circle__label-text{color:#000}.nx-radio-circle--checked .nx-radio-circle__label-text{color:#fff}}.nx-radio-circle__circle{display:flex;justify-content:center;align-items:center;border-radius:50%;min-width:8rem;min-height:8rem;max-width:8rem;max-height:8rem;width:8rem;height:8rem;border:2px solid #007ab3;margin-bottom:1.5rem;color:#007ab3}:host.is-disabled *{color:#c2c2c2}:host.is-disabled .nx-radio-circle__circle{border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__circle{background-color:#c2c2c2;border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__label--icon{color:#fff!important}@media (max-width:703px){:host.is-disabled .nx-radio-circle__label{border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle__label-info{color:#c2c2c2}:host.is-disabled .nx-icon--check:before{color:#fff}:host.is-disabled .nx-radio-circle--checked{background-color:#c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__label-info{color:#fff}}:host.is-disabled:hover{cursor:not-allowed}:host.is-disabled:hover .nx-radio-circle__circle{background-color:transparent;cursor:not-allowed}.nx-radio-circle__label--icon{pointer-events:none;z-index:1;display:flex;text-align:center;align-items:center;justify-content:center;font-size:4rem;font-weight:400;position:relative}.nx-radio-circle__label--icon.nx-icon--auto{font-size:4rem}.nx-radio-circle__label-info{color:#fff;display:inline-block;font-weight:300;line-height:22px;font-size:18px;margin-top:4px;transition:color .2s;z-index:1}@media screen and (-ms-high-contrast:active){.nx-radio-circle__label-info{color:#fff}}.nx-radio-circle__label-info:before{content:'(';display:inline-block}@media (min-width:704px){.nx-radio-circle__label-info{color:#767676;display:block;width:16rem}.nx-radio-circle__label-info:before{content:''}}.nx-radio-circle__label-info:after{content:')';display:inline-block}@media (min-width:704px){.nx-radio-circle__label-info:after{content:''}}:host-context([data-whatinput=keyboard]) .nx-radio-circle__input:focus+.nx-radio-circle__label .nx-radio-circle__circle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxRadioCircleIconButtonComponent.ctorParameters = function () { return [
                { type: NxRadioCircleComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return NxRadioCircleComponent; })),] }] }
            ]; };
            NxRadioCircleIconButtonComponent.propDecorators = {
                icon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxIcon',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @deprecated Use `nx-circle-toggle` instead
             * \@deletion-target 8.0.0
             */
            var NxRadioCircleSvgButtonComponent = /** @class */ (function (_super) {
                __extends(NxRadioCircleSvgButtonComponent, _super);
                /**
                 * @param {?} radioCircle
                 */
                function NxRadioCircleSvgButtonComponent(radioCircle) {
                    var _this = _super.call(this, radioCircle) || this;
                    _this._hover = false;
                    console.warn('`nx-radio-circle-svg-button` is deprecated. Use `nx-circle-toggle` instead.');
                    return _this;
                }
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioCircleSvgButtonComponent.prototype.onMouseEnter = function () {
                    this._hover = true;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxRadioCircleSvgButtonComponent.prototype.onMouseLeave = function () {
                    this._hover = false;
                };
                /**
                 * @return {?}
                 */
                NxRadioCircleSvgButtonComponent.prototype.ngAfterViewInit = function () {
                    if (!this.svg) {
                        console.warn("nx-radio-circle-svg-button: required field 'nxSvg' is not set");
                    }
                    if (!this.svgChecked) {
                        console.warn("nx-radio-circle-svg-button: required field 'nxSvgChecked' is not set");
                    }
                };
                Object.defineProperty(NxRadioCircleSvgButtonComponent.prototype, "svgUrl", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return (this.checked || this._hover) ? this.svgChecked : this.svg;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxRadioCircleSvgButtonComponent;
            }(NxRadioCircleButton));
            NxRadioCircleSvgButtonComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-radio-circle-svg-button',
                            template: "<input [id]=\"circleButtonId\" class=\"nx-radio-circle__input\" type=\"radio\" [checked]=\"checked\"\n       (click)=\"checked = true\">\n<label #labelElement [for]=\"circleButtonId\" class=\"nx-radio-circle__label\" [class.nx-radio-circle--checked]=\"checked\">\n    <div class=\"nx-radio-circle__circle\">\n      <img [src]=\"svgUrl\" class=\"nx-radio-circle__label--icon\"/>\n    </div>\n  <nx-icon class=\"nx-radio-circle__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n  <span class=\"nx-radio-circle__label-text\">{{label}}</span>\n  <span *ngIf=\"hint\" class=\"nx-radio-circle__label-info\">{{hint}}</span>\n</label>\n",
                            providers: [
                                {
                                    provide: NxRadioCircleButton, useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxRadioCircleSvgButtonComponent; }))
                                }
                            ],
                            styles: [":host{display:block;position:relative}@media (max-width:703px){:host-context(.is-responsive) .nx-radio-circle{flex-direction:column}:host-context(.is-responsive) .nx-radio-circle__label{flex-direction:row;border:2px solid #007ab3;border-top-width:0;font-size:16px;padding:8px 40px 8px 15px}:host-context(.is-responsive) .nx-radio-circle__label--first{border-top-width:2px;border-radius:5px 5px 0 0}:host-context(.is-responsive) .nx-radio-circle__label--last{border-radius:0 0 5px 5px}:host-context(.is-responsive) .nx-radio-circle__circle{display:none}:host-context(.is-responsive) .nx-radio-circle__label-info{color:#007ab3;margin-left:10px;margin-top:0;line-height:16px;font-size:14px}:host-context(.is-responsive) .nx-radio-circle__mobile-check{display:inline-block;opacity:0;line-height:1;margin-right:10px}:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__mobile-check{opacity:1}:host-context(.is-responsive) .nx-radio-circle--checked{background-color:#007ab3;color:#fff}:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__label-info,:host-context(.is-responsive) .nx-radio-circle--checked .nx-radio-circle__label-text{color:#fff}:host(:not(.is-responsive)) ::ng-deep nx-radio-circle-icon-button,:host(:not(.is-responsive)) ::ng-deep nx-radio-circle-svg-button{flex:1 0 auto;min-width:33.3%}}.nx-radio-circle{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap}.nx-radio-circle__input{opacity:0;position:absolute}.nx-radio-circle__label{cursor:pointer;display:flex;flex-direction:column;justify-content:center;text-align:center;align-items:center;font-size:16px;font-weight:600;padding:0;position:relative;transition:background-color .2s,border-color .2s,color .2s;vertical-align:middle}@media (min-width:704px){:host:hover .nx-radio-circle__circle{background-color:#006192;border-color:transparent;box-shadow:none;color:#fff}.nx-radio-circle__label{line-height:8rem;min-height:8rem;min-width:8rem;max-width:8rem;padding:0}}.nx-radio-circle__label-text{line-height:20px;z-index:1;color:#414141}@media (max-width:703px){.nx-radio-circle__label-text{color:#007ab3}}.nx-radio-circle__input:focus+.nx-radio-circle__label{color:#fff}.nx-radio-circle__input:focus+.nx-radio-circle__label:after{background-color:#006192;border-color:transparent}.nx-radio-circle__mobile-check{font-size:24px;display:none;z-index:1}.nx-radio-circle--checked .nx-radio-circle__circle{color:#fff;background-color:#007ab3}.nx-radio-circle--checked{color:#fff}.nx-radio-circle--checked:hover{cursor:default}@media screen and (-ms-high-contrast:active){.nx-radio-circle__label-text{color:#fff}.nx-radio-circle--checked .nx-radio-circle__circle{background-color:#ff0;border-color:#ff0}.nx-radio-circle--checked,.nx-radio-circle--checked .nx-radio-circle__label-text{color:#000}.nx-radio-circle--checked .nx-radio-circle__label-text{color:#fff}}.nx-radio-circle__circle{display:flex;justify-content:center;align-items:center;border-radius:50%;min-width:8rem;min-height:8rem;max-width:8rem;max-height:8rem;width:8rem;height:8rem;border:2px solid #007ab3;margin-bottom:1.5rem;color:#007ab3}:host.is-disabled *{color:#c2c2c2}:host.is-disabled .nx-radio-circle__circle{border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__circle{background-color:#c2c2c2;border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__label--icon{color:#fff!important}@media (max-width:703px){:host.is-disabled .nx-radio-circle__label{border:2px solid #c2c2c2}:host.is-disabled .nx-radio-circle__label-info{color:#c2c2c2}:host.is-disabled .nx-icon--check:before{color:#fff}:host.is-disabled .nx-radio-circle--checked{background-color:#c2c2c2}:host.is-disabled .nx-radio-circle--checked .nx-radio-circle__label-info{color:#fff}}:host.is-disabled:hover{cursor:not-allowed}:host.is-disabled:hover .nx-radio-circle__circle{background-color:transparent;cursor:not-allowed}.nx-radio-circle__label--icon{pointer-events:none;z-index:1;display:flex;text-align:center;align-items:center;justify-content:center;font-size:4rem;font-weight:400;position:relative}.nx-radio-circle__label--icon.nx-icon--auto{font-size:4rem}.nx-radio-circle__label-info{color:#fff;display:inline-block;font-weight:300;line-height:22px;font-size:18px;margin-top:4px;transition:color .2s;z-index:1}@media screen and (-ms-high-contrast:active){.nx-radio-circle__label-info{color:#fff}}.nx-radio-circle__label-info:before{content:'(';display:inline-block}@media (min-width:704px){.nx-radio-circle__label-info{color:#767676;display:block;width:16rem}.nx-radio-circle__label-info:before{content:''}}.nx-radio-circle__label-info:after{content:')';display:inline-block}@media (min-width:704px){.nx-radio-circle__label-info:after{content:''}}:host-context([data-whatinput=keyboard]) .nx-radio-circle__input:focus+.nx-radio-circle__label .nx-radio-circle__circle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxRadioCircleSvgButtonComponent.ctorParameters = function () { return [
                { type: NxRadioCircleComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Inject"], args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                                 * @return {?}
                                                 */function () { return NxRadioCircleComponent; })),] }] }
            ]; };
            NxRadioCircleSvgButtonComponent.propDecorators = {
                svg: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSvg',] }],
                svgChecked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSvgChecked',] }],
                onMouseEnter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['mouseenter',] }],
                onMouseLeave: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['mouseleave',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxRadioCircleModule = /** @class */ (function () {
                function NxRadioCircleModule() {
                }
                return NxRadioCircleModule;
            }());
            NxRadioCircleModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxRadioCircleComponent, NxRadioCircleIconButtonComponent, NxRadioCircleSvgButtonComponent],
                            exports: [NxRadioCircleComponent, NxRadioCircleIconButtonComponent, NxRadioCircleSvgButtonComponent],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // note that this currently only supports youtube videos
            var NxVideoComponent = /** @class */ (function () {
                /**
                 * @param {?} sanitizer
                 * @param {?} _changeDetectorRef
                 */
                function NxVideoComponent(sanitizer, _changeDetectorRef) {
                    this.sanitizer = sanitizer;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._videoId = null;
                    this._altText = '';
                    this._playButtonAriaLabel = '';
                    this._previewImageSrc = null;
                    this._showPlayerControls = true;
                    this._allowFullScreen = true;
                    this._interfaceLanguage = null;
                    /**
                     * \@docs-private
                     */
                    this.showPlayer = false;
                }
                Object.defineProperty(NxVideoComponent.prototype, "videoId", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._videoId;
                    },
                    /**
                     * Sets the id of the YouTube video.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._videoId !== value) {
                            this._videoId = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "altText", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._altText;
                    },
                    /**
                     * Sets the value of the alt attribute for the preview image.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._altText !== value) {
                            this._altText = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "nxPlayButtonAriaLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._playButtonAriaLabel;
                    },
                    /**
                     * Sets the value of the aria-label attribute on the play button (Default: Play Video).
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._playButtonAriaLabel !== value) {
                            this._playButtonAriaLabel = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "previewImageSrc", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._previewImageSrc;
                    },
                    /**
                     * Sets the preview image. If this is not provided, an image from YouTube will be used as default.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._previewImageSrc !== value) {
                            this._previewImageSrc = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "showPlayerControls", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._showPlayerControls;
                    },
                    /**
                     * Sets player controls. If set to false, player controls are not available.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._showPlayerControls = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "allowFullScreen", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._allowFullScreen;
                    },
                    /**
                     * Sets fullscreen option. If set to false, fullscreen option is not available.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._allowFullScreen = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "interfaceLanguage", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._interfaceLanguage;
                    },
                    /**
                     * Sets interface language. Can be used to override the interface language determined by YouTube.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._interfaceLanguage !== value) {
                            this._interfaceLanguage = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxVideoComponent.prototype.select = function () {
                    this.showPlayer = true;
                    this._changeDetectorRef.markForCheck();
                };
                Object.defineProperty(NxVideoComponent.prototype, "videoSrc", {
                    /**
                     * Returns the safe resource URL of the YouTube video, given video id.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var url = "https://www.youtube.com/embed/" + this.videoId + "?rel=0&showinfo=0&autoplay=1";
                        if (!this.showPlayerControls) {
                            url += '&controls=0';
                        }
                        if (!this.allowFullScreen) {
                            url += '&fs=0';
                        }
                        if (this.interfaceLanguage) {
                            url += "&hl=" + this.interfaceLanguage;
                        }
                        return this.sanitizer.bypassSecurityTrustResourceUrl(url);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "imgSrc", {
                    /**
                     * Returns the preview image source URL, given video id.
                     * @return {?}
                     */
                    get: function () {
                        return this.previewImageSrc ? this.previewImageSrc : "https://img.youtube.com/vi/" + this.videoId + "/sddefault.jpg";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxVideoComponent.prototype, "playButtonAriaLabel", {
                    /**
                     * Returns the labels for the control buttons.
                     * @return {?}
                     */
                    get: function () {
                        /** @type {?} */
                        var defaultLabel = this.altText ? this.altText + " - Play Video" : 'Play Video';
                        return this.nxPlayButtonAriaLabel ? this.nxPlayButtonAriaLabel : defaultLabel;
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxVideoComponent;
            }());
            NxVideoComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-video',
                            template: "<div class=\"nx-video\">\n  <div class=\"nx-video__iframe\">\n\n    <div *ngIf=\"!showPlayer\">\n\n      <button class=\"nx-video__play-button\"\n              (click)=\"select()\"\n              [attr.aria-label]=\"playButtonAriaLabel\"\n              (keydown.enter)=\"select()\">\n      </button>\n      <img [src]=\"imgSrc\" class=\"nx-video__thumbnail\"\n           [alt]=\"altText\"\n           (click)=\"select()\"\n           (keydown.enter)=\"select()\">\n\n    </div>\n    <div *ngIf=\"videoId && showPlayer\">\n      <iframe title=\"video\" class=\"nx-video__iframe\" [attr.allowfullscreen]=\"allowFullScreen\" [src]=\"videoSrc\"></iframe>\n    </div>\n\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-video{position:relative;padding-bottom:56.25%;overflow:hidden;width:100%;height:auto}.nx-video__iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.nx-video__thumbnail{position:absolute;cursor:pointer;width:100%;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);opacity:.7}.nx-video__play-button{border:none;background:url(play-button.svg) center no-repeat;cursor:pointer;position:absolute;width:88px;height:56px;z-index:1}.nx-video__play-button::-moz-focus-inner{border:0}.nx-video__play-button,.nx-video__play-button:before{top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}"]
                        }] }
            ];
            /** @nocollapse */
            NxVideoComponent.ctorParameters = function () { return [
                { type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["DomSanitizer"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxVideoComponent.propDecorators = {
                videoId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxVideoId',] }],
                altText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAltText',] }],
                nxPlayButtonAriaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPlayButtonAriaLabel',] }],
                previewImageSrc: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPreviewImageSrc',] }],
                showPlayerControls: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxShowPlayerControls',] }],
                allowFullScreen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAllowFullScreen',] }],
                interfaceLanguage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxInterfaceLanguage',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxVideoModule = /** @class */ (function () {
                function NxVideoModule() {
                }
                return NxVideoModule;
            }());
            NxVideoModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxVideoComponent],
                            exports: [NxVideoComponent],
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an exception to be thrown when attempting to assign a non-array value to a select
             * in `multiselect` mode. Note that `undefined` and `null` are still valid values to allow for
             * resetting the value.
             * \@docs-private
             * @return {?}
             */
            function getNxDropdownNonArrayValueError() {
                return Error('Value must be an array in multiselect mode.');
            }
            /**
             * Returns an exception to be thrown when assigning a non-function value to the comparator
             * used to determine if a value corresponds to an option. Note that whether the function
             * actually takes two values and returns a boolean is not checked.
             * @return {?}
             */
            function getNxDropdownNonFunctionValueError() {
                return Error('`compareWith` must be a function.');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @abstract
             */
            var NxDropdownControl = /** @class */ (function (_super) {
                __extends(NxDropdownControl, _super);
                function NxDropdownControl() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    /**
                     * Whether the dropdown should allow multi selection and additional checkboxes are shown.
                     *
                     * Note: Please make sure the value you bind is an array. If not an error is thrown!
                     */
                    _this.isMultiSelect = false;
                    return _this;
                }
                return NxDropdownControl;
            }(_allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldControl"]));
            NxDropdownControl.propDecorators = {
                isMultiSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxIsMultiselect',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDropdownGroupComponent = /** @class */ (function () {
                function NxDropdownGroupComponent() {
                }
                return NxDropdownGroupComponent;
            }());
            NxDropdownGroupComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-dropdown-group',
                            template: "<div class=\"nx-dropdown-results__group\">\n  <div class=\"nx-dropdown-results__group-label\">{{label}}</div>\n  <ng-content></ng-content>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{display:block}:host:first-child .nx-dropdown-results__group{background-color:rgba(236,236,236,.5)}:host:first-child .nx-dropdown-results__group-label{padding-top:16px}.nx-dropdown-results__group-label{font-style:italic;padding:24px 32px 16px;font-weight:700;font-size:12px;line-height:16px}"]
                        }] }
            ];
            NxDropdownGroupComponent.propDecorators = {
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxLabel',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDropdownItemChange = /** @class */ (function () {
                /**
                 * @param {?} item
                 * @param {?=} isUserInput
                 */
                function NxDropdownItemChange(item, isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.item = item;
                    this.isUserInput = isUserInput;
                }
                return NxDropdownItemChange;
            }());
            /**
             * the unique id counter
             * @type {?}
             */
            var nextId$b = 0;
            var NxDropdownItemComponent = /** @class */ (function () {
                /**
                 * @param {?} _dropdown
                 * @param {?} group
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 */
                function NxDropdownItemComponent(_dropdown, group, _changeDetectorRef, _elementRef) {
                    var _this = this;
                    this._dropdown = _dropdown;
                    this.group = group;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    this._hidden = false;
                    this._mostRecentViewValue = '';
                    this._id = "nx-dropdown-item-" + nextId$b++;
                    this._selected = false;
                    /**
                     * Emits whenever the component is destroyed.
                     */
                    this._destroy = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * Event emitted when the option is selected or deselected.
                     */
                    // tslint:disable-next-line:no-output-on-prefix
                    this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Emits when the state of the option changes and any parents have to be notified.
                     */
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    (( /** @type {?} */(this._dropdown))).filterChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) {
                        _this._showOrHideByFilter(value);
                    }));
                    // reset the hidden state when dropdown closes that on next open the user is seeing the full list again
                    (( /** @type {?} */(this._dropdown)))._closedStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._hidden = false;
                    }));
                }
                Object.defineProperty(NxDropdownItemComponent.prototype, "id", {
                    /**
                     * The unique ID of the option.
                     * @return {?}
                     */
                    get: function () { return this._id; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "selected", {
                    /**
                     * Whether the item is selected.
                     * @return {?}
                     */
                    get: function () {
                        return this._selected;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "active", {
                    /**
                     * Whether the item is active.
                     * @return {?}
                     */
                    get: function () {
                        return this._active;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "multiselect", {
                    /**
                     * \@docs-private
                     * Whether the parent dropdown is in multiselect mode.
                     * @return {?}
                     */
                    get: function () {
                        return this._dropdown && this._dropdown.isMultiSelect;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.ngAfterViewChecked = function () {
                    // Since the parent dropdown component could be using the item's label to display the selected values
                    // and it doesn't have a way of knowing if the item's label has changed
                    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
                    // relatively cheap, however we still limit them only to selected options in order to avoid
                    // hitting the DOM too often.
                    if (this._selected) {
                        /** @type {?} */
                        var viewValue = this.viewValue;
                        if (viewValue !== this._mostRecentViewValue) {
                            this._mostRecentViewValue = viewValue;
                            this._stateChanges.next();
                        }
                    }
                };
                /**
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                    this._destroy.next();
                    this._destroy.complete();
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._onClick = function (event) {
                    /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */
                    event.preventDefault();
                    event.stopPropagation();
                    this._selectViaInteraction();
                };
                /**
                 * `Selects the option while indicating the selection came from the user. Used to
                 * determine if the select's view -> model callback should be invoked.`
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._selectViaInteraction = function () {
                    this._selected = this.multiselect ? !this._selected : true;
                    this._changeDetectorRef.markForCheck();
                    this._emitSelectionChangeEvent(true);
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.show = function () {
                    this._hidden = false;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.hide = function () {
                    this._hidden = true;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * @private
                 * @param {?} search
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._showOrHideByFilter = function (search) {
                    /** @type {?} */
                    var constraint = (( /** @type {?} */(this._dropdown))).filterFn(search, this.viewValue);
                    this._hidden = constraint ? false : true;
                    this._changeDetectorRef.markForCheck();
                };
                Object.defineProperty(NxDropdownItemComponent.prototype, "_formattedValue", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return (( /** @type {?} */(this._dropdown))).valueFormatter(this.value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownItemComponent.prototype, "viewValue", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return (this._elementRef.nativeElement.textContent || '').trim();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.select = function () {
                    if (!this._selected) {
                        this._selected = true;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.deselect = function () {
                    if (this._selected) {
                        this._selected = false;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                /**
                 * @private
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._emitSelectionChangeEvent = function (isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.setActiveStyles = function () {
                    this._active = true;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.setInactiveStyles = function () {
                    this._active = false;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype.getLabel = function () {
                    return this.value;
                };
                /**
                 * @param {?} element
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._isContentEmpty = function (element) {
                    return element.children.length === 0 && !element.textContent.trim();
                };
                /**
                 * @return {?}
                 */
                NxDropdownItemComponent.prototype._onLabelChange = function () {
                    // trigger change detection when the label content changes for the case that ng-content was empty before.
                    // this is also important when the label comes in deferred, e.g. by a delayed observable,
                    // then first the default label derived from the value is shown
                    // and after the value from the async observable is ready we need to trigger change detection that the derived label
                    // gets hidden again.
                    // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone
                    // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly
                    this._changeDetectorRef.detectChanges();
                };
                return NxDropdownItemComponent;
            }());
            NxDropdownItemComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-dropdown-item',
                            template: "<div #container class=\"nx-dropdown-results__option\"\n     [ngClass]=\"{'nx-dropdown-results__option--selected': selected}\">\n\n   <nx-checkbox *ngIf=\"multiselect\" [checked]=\"selected\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </nx-checkbox>\n\n    <span *ngIf=\"!multiselect\" class=\"nx-dropdown-results__option-checkicon\">\n       <nx-icon name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <ng-container *ngIf=\"!multiselect\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </ng-container>\n</div>\n\n<ng-template #contentTemplate>\n  <div class=\"nx-dropdown-results__option-label\" >\n    <span #content (cdkObserveContent)=\"_onLabelChange()\">\n      <ng-content></ng-content>\n    </span>\n    <ng-container *ngIf=\"_isContentEmpty(content)\">\n      {{_formattedValue}}\n    </ng-container>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[id]': 'id',
                                'role': 'option',
                                '[attr.aria-selected]': 'selected.toString()',
                                '[class.nx-hidden]': '_hidden',
                                '[class.nx-dropdown-item--active]': 'active',
                                '[class.nx-selected]': 'selected',
                                '[class.nx-multiselect]': 'multiselect',
                                '(click)': '_onClick($event)'
                            },
                            styles: [":host{display:block}:host(.nx-hidden){display:none}:host:first-child .nx-dropdown-results__option{padding-top:16px}nx-checkbox{margin-bottom:0}.nx-dropdown-results__option{font-size:20px;line-height:28px;letter-spacing:.2px;padding:0 32px 16px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}.nx-dropdown-results__option-label{overflow:hidden;text-overflow:ellipsis;padding:0 12px;margin:0 -12px}:host(.nx-multiselect) .nx-dropdown-results__option{display:block;padding-left:32px}:host(.nx-multiselect) ::ng-deep .nx-checkbox__label{height:28px;display:flex;align-items:center}:host(.nx-dropdown-item--active),:host:hover{color:#007ab3}@media screen and (-ms-high-contrast:active){:host(.nx-dropdown-item--active),:host:hover{color:highlightText}}:host(.nx-selected) .nx-dropdown-results__option-checkicon{opacity:1}.nx-dropdown-results__option-checkicon{opacity:0;width:16px;height:16px;margin-right:8px}.nx-dropdown-results__option-checkicon nx-icon{font-size:16px}:host-context([data-whatinput=keyboard]).nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host-context([data-whatinput=keyboard]).nx-multiselect.nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:none}:host-context([data-whatinput=keyboard]).nx-multiselect.nx-dropdown-item--active ::ng-deep .nx-checkbox__label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:24px;margin-left:-24px}:host ::ng-deep .nx-checkbox__label{padding:0 4px;margin:0 -4px}"]
                        }] }
            ];
            /** @nocollapse */
            NxDropdownItemComponent.ctorParameters = function () { return [
                { type: NxDropdownControl, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Inject"], args: [NxDropdownControl,] }] },
                { type: NxDropdownGroupComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] }
            ]; };
            NxDropdownItemComponent.propDecorators = {
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }],
                onSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                containerElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['container',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // This Directive solely purpose is to mark given ng-template and project it into the required destination.
            var NxDropdownClosedLabelDirective = /** @class */ (function () {
                /**
                 * @param {?} templateRef
                 */
                function NxDropdownClosedLabelDirective(templateRef) {
                    this.templateRef = templateRef;
                }
                return NxDropdownClosedLabelDirective;
            }());
            NxDropdownClosedLabelDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: '[nxClosedLabel]'
                        },] }
            ];
            /** @nocollapse */
            NxDropdownClosedLabelDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Change event object that is emitted when the select value has changed.
             * @template T
             */
            var NxDropdownSelectChange = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} value
                 */
                function NxDropdownSelectChange(source, value) {
                    this.source = source;
                    this.value = value;
                }
                return NxDropdownSelectChange;
            }());
            // used in calculation of scrolltop to correctly show some space to the top of the panel
            /** @type {?} */
            var itemPadding = 16;
            // Max-height: 6 items x 44px + 16px padding before first item
            /** @type {?} */
            var SELECT_PANEL_MAX_HEIGHT = 280;
            var NxDropdownComponent$1 = /** @class */ (function (_super) {
                __extends(NxDropdownComponent$1, _super);
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 * @param {?} tabIndex
                 * @param {?} formFieldComponent
                 * @param {?} ngControl
                 * @param {?} _parentForm
                 * @param {?} _parentFormGroup
                 */
                function NxDropdownComponent$1(_changeDetectorRef, _elementRef, _ngZone, tabIndex, formFieldComponent, ngControl, _parentForm, _parentFormGroup) {
                    var _this = _super.call(this) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._elementRef = _elementRef;
                    _this._ngZone = _ngZone;
                    _this.formFieldComponent = formFieldComponent;
                    _this.ngControl = ngControl;
                    _this._parentForm = _parentForm;
                    _this._parentFormGroup = _parentFormGroup;
                    // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here
                    _this.readonly = false;
                    _this._disabled = false;
                    _this._focused = false;
                    /**
                     * Whether or not the overlay panel is open.
                     */
                    _this._panelOpen = false;
                    /**
                     * \@docs-private
                     */
                    _this.errorState = false;
                    /**
                     * The scroltop of the panelBody.
                     */
                    _this._scrollTop = 0;
                    /**
                     * The minimal space between the viewport and the overlay
                     */
                    _this._overlayViewportMargin = 16;
                    /**
                     * \@docs-private
                     * Emits when internal state changes to inform formfield about it.
                     */
                    _this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * The IDs of child options to be passed to the aria-owns attribute.
                     */
                    _this._optionIds = '';
                    _this._tabIndex = 0;
                    /**
                     * \@docs-private
                     */
                    _this.currentFilter = '';
                    /**
                     * Label to describe the component.
                     */
                    _this._ariaLabel = '';
                    _this._style = '';
                    /**
                     * Whether the dropdown should render in its negative style or not.
                     */
                    _this._negative = false;
                    /**
                     * Whether the dropdown should be shown with an additional filter input.
                     */
                    _this.showFilter = false;
                    /**
                     * Text displayed as placeholder for the filter.
                     */
                    _this.filterPlaceholder = '';
                    /**
                     * Event emitted when the select panel has been toggled.
                     */
                    _this.openedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Event emitted when the select has been opened.
                     */
                    _this._openedStream = _this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                     * @param {?} o
                     * @return {?}
                     */function (/**
                     * @param {?} o
                     * @return {?}
                     */ o) { return o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["map"])(( /**
                     * @return {?}
                     */function () { })));
                    /**
                     * Event emitted when the select has been closed.
                     */
                    _this._closedStream = _this.openedChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                     * @param {?} o
                     * @return {?}
                     */function (/**
                     * @param {?} o
                     * @return {?}
                     */ o) { return !o; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["map"])(( /**
                     * @return {?}
                     */function () { })));
                    /**
                     * Event emitted when the user types in the filter input.
                     */
                    _this.filterChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * Event that emits whenever the raw value of the select changes. This is here primarily
                     * to facilitate the two-way binding for the `value` input.
                     * \@docs-private
                     */
                    _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Event emitted when the selected value has been changed.
                     */
                    _this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * \@docs-private
                     */
                    _this.optionSelectionChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["defer"])(( /**
                     * @return {?}
                     */function () {
                        if (_this.options) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"]).apply(void 0, __spread(_this.options.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.onSelectionChange; }))));
                        }
                        return _this._ngZone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["switchMap"])(( /**
                     * @return {?}
                     */function () { return _this.optionSelectionChanges; })));
                    }));
                    /**
                     * This position config ensures that the top "start" corner of the overlay
                     * is aligned with with the top "start" of the origin by default (overlapping
                     * the trigger completely). If the panel cannot fit below the trigger, it
                     * will fall back to a position above the trigger.
                     */
                    _this._positions = [{
                            originX: 'start',
                            originY: 'top',
                            overlayX: 'start',
                            overlayY: 'top'
                        }, {
                            originX: 'start',
                            originY: 'center',
                            overlayX: 'start',
                            overlayY: 'center'
                        }, {
                            originX: 'start',
                            originY: 'bottom',
                            overlayX: 'start',
                            overlayY: 'bottom'
                        }];
                    /**
                     * Emits whenever the component is destroyed.
                     */
                    _this._destroy = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * Function that transforms the value into a string.
                     * This function is used for displaying and filtering the content
                     * ( Default: (value) => value ? value.toString() : null; ).
                     */
                    _this.valueFormatter = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) {
                        return value == null ? '' : value.toString();
                    });
                    /**
                     * Comparison function to specify which option is displayed. Defaults to object equality.
                     */
                    _this._compareWith = ( /**
                     * @param {?} o1
                     * @param {?} o2
                     * @return {?}
                     */function (o1, o2) { return o1 === o2; });
                    _this._filterFn = ( /**
                     * @param {?} search
                     * @param {?} itemValue
                     * @return {?}
                     */function (search, itemValue) {
                        return itemValue.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) >= 0;
                    });
                    /**
                     * `View -> model callback called when value changes`
                     */
                    _this._onChange = ( /**
                     * @return {?}
                     */function () { });
                    /**
                     * `View -> model callback called when select has been touched`
                     */
                    _this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                    if (_this.ngControl) {
                        // Note: we provide the value accessor through here, instead of
                        // the `providers` to avoid running into a circular import.
                        _this.ngControl.valueAccessor = _this;
                    }
                    _this.tabIndex = parseInt(tabIndex, 10) || 0;
                    return _this;
                }
                Object.defineProperty(NxDropdownComponent$1.prototype, "tabIndex", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this.disabled ? -1 : this._tabIndex; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        // If the specified tabIndex value is null or undefined, fall back to the default value.
                        this._tabIndex = value != null ? value : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "value", {
                    /**
                     * Selected value
                     * @return {?}
                     */
                    get: function () { return this._value; },
                    /**
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (newValue !== this._value) {
                            this.writeValue(newValue);
                            this._value = newValue;
                            this._onChange(newValue);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "disabled", {
                    /**
                     * Whether the dropdown is disabled.
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "styles", {
                    /**
                     * If set to 'negative', the component is displayed with the negative set of styles.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._style === value) {
                            return;
                        }
                        this._style = value;
                        this._negative = !!this._style.match(/negative/);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "closedDropdownLabel", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._closedDropdownLabel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "selected", {
                    /**
                     * \@docs-private
                     * The currently selected option.
                     * @return {?}
                     */
                    get: function () {
                        return this.isMultiSelect ? this._selectionModel.selected : this._selectionModel.selected[0];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "panelOpen", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._panelOpen;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._panelOpen = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "label", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.formFieldComponent ? this.formFieldComponent.label : '';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "compareWith", {
                    /**
                     * Function to compare the option values with the selected values. The first argument
                     * is a value from an option. The second is a value from the selection. A boolean
                     * should be returned.
                     * @return {?}
                     */
                    get: function () { return this._compareWith; },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (typeof fn !== 'function') {
                            throw getNxDropdownNonFunctionValueError();
                        }
                        this._compareWith = fn;
                        if (this._selectionModel) {
                            // A different comparator means the selection could change.
                            this._initializeSelection();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "filterFn", {
                    /**
                     * Function to be used when the user types into the search filter. The first argument is the user input,
                     * the second argument is the dropdown item value. The dropdown items will use this function to set their
                     * visibility state.
                     * A boolean should be returned.
                     * @return {?}
                     */
                    get: function () { return this._filterFn; },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (typeof fn !== 'function') {
                            throw getNxDropdownNonFunctionValueError();
                        }
                        this._filterFn = fn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "focused", {
                    /**
                     * \@docs-private
                     * Whether the select is focused.
                     * @return {?}
                     */
                    get: function () {
                        return this._focused || this.panelOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "elementRef", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.ngDoCheck = function () {
                    if (this.ngControl) {
                        this.updateErrorState();
                    }
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.ngOnInit = function () {
                    this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__["SelectionModel"](this.isMultiSelect);
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._closedDropdownLabel =
                        this._customClosedDropdownLabel && this._customClosedDropdownLabel.templateRef || this._defaultClosedDropdownLabel;
                    this._initKeyManager();
                    this._selectionModel.onChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        event.added.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.select(); }));
                        event.removed.forEach(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.deselect(); }));
                    }));
                    this.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._resetOptions();
                        _this._initializeSelection();
                    }));
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.ngOnDestroy = function () {
                    this._destroy.next();
                    this._destroy.complete();
                };
                /**
                 * \@docs-private
                 * @param {?} control
                 * @param {?} form
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.isErrorState = function (control, form) {
                    return !!(control && control.invalid && (control.touched || (form && form.submitted)));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.updateErrorState = function () {
                    /** @type {?} */
                    var oldState = this.errorState;
                    /** @type {?} */
                    var parent = this._parentFormGroup || this._parentForm;
                    /** @type {?} */
                    var control = this.ngControl ? ( /** @type {?} */(this.ngControl.control)) : null;
                    /** @type {?} */
                    var newState = this.isErrorState(control, parent);
                    if (newState !== oldState) {
                        this.errorState = newState;
                        this.stateChanges.next();
                    }
                };
                /**
                 * Sets up a key manager to listen to keyboard events on the overlay panel.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._initKeyManager = function () {
                    var _this = this;
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_27__["ActiveDescendantKeyManager"](this.options)
                        .withTypeAhead()
                        .withWrap()
                        .withVerticalOrientation()
                        .withHorizontalOrientation('ltr')
                        .skipPredicate(( /**
                 * @param {?} item
                 * @return {?}
                 */function (/**
                 * @param {?} item
                 * @return {?}
                 */ item) { return item._hidden; }));
                    this._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        // Restore focus to the trigger before closing. Ensures that the focus
                        // position won't be lost if the user got focus into the overlay.
                        _this.closePanel();
                    }));
                    this._keyManager.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this._destroy)).subscribe(( /**
                     * @return {?}
                     */function () {
                        if (_this._panelOpen && _this.panel) {
                            // Delay the auto scrolling until all items have settled otherwise the item containers might
                            // not exist yet
                            _this._ngZone.onStable
                                .asObservable()
                                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () { return _this._scrollActiveOptionIntoView(); }));
                        }
                        else if (!_this._panelOpen && !_this.isMultiSelect && _this._keyManager.activeItem) {
                            _this._keyManager.activeItem._selectViaInteraction();
                        }
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._resetOptions = function () {
                    var _this = this;
                    /** @type {?} */
                    var changedOrDestroyed = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"])(this.options.changes, this._destroy);
                    this.optionSelectionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(changedOrDestroyed)).subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (/**
                     * @param {?} event
                     * @return {?}
                     */ event) {
                        _this._onSelect(event.item, event.isUserInput);
                        if (event.isUserInput && !_this.isMultiSelect && _this._panelOpen) {
                            _this.closePanel();
                        }
                    }));
                    // Listen to changes in the internal state of the options and react accordingly.
                    // Handles cases like the labels of the selected options changing.
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"]).apply(void 0, __spread(this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._stateChanges; })))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(changedOrDestroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        // defer it for the next cycle to not run in changed after checked errors
                        // the combination of dropdown-item notifying parent and when the parent
                        // tries to fetch the triggerValue from the child throws these errors
                        setTimeout(( /**
                         * @return {?}
                         */function () {
                            _this._changeDetectorRef.markForCheck();
                            _this.stateChanges.next();
                        }));
                    }));
                    this._setOptionIds();
                };
                /**
                 * Records option IDs to pass to the aria-owns property.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._setOptionIds = function () {
                    this._optionIds = this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option.id; })).join(' ');
                };
                /**
                 * Invoked when an option is clicked.
                 * @private
                 * @param {?} option
                 * @param {?} isUserInput
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._onSelect = function (option, isUserInput) {
                    /** @type {?} */
                    var wasSelected = this._selectionModel.isSelected(option);
                    if (option.value == null && !this.isMultiSelect) {
                        option.deselect();
                        this._selectionModel.clear();
                        this._propagateChanges(option.value);
                    }
                    else {
                        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);
                        if (isUserInput) {
                            this._keyManager.setActiveItem(option);
                        }
                        if (this.isMultiSelect) {
                            this._sortValues();
                            if (isUserInput) {
                                // In case the user selected the option with their mouse, we
                                // want to restore focus back to the trigger, in order to
                                // prevent the select keyboard controls from clashing with
                                // the ones from `mat-option`.
                                this.focus();
                            }
                        }
                    }
                    if (wasSelected !== this._selectionModel.isSelected(option)) {
                        this._propagateChanges();
                    }
                    this.stateChanges.next();
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._initializeSelection = function () {
                    var _this = this;
                    // Defer setting the value in order to avoid the "Expression
                    // has changed after it was checked" errors from Angular.
                    Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);
                    }));
                };
                /**
                 * Sets the selected option based on a value. If no option can be
                 * found with the designated value, the select trigger is cleared.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._setSelectionByValue = function (value) {
                    var _this = this;
                    if (this.isMultiSelect && value) {
                        if (!Array.isArray(value)) {
                            throw getNxDropdownNonArrayValueError();
                        }
                        this._selectionModel.clear();
                        value.forEach(( /**
                         * @param {?} currentValue
                         * @return {?}
                         */function (currentValue) { return _this._selectValue(currentValue); }));
                        this._sortValues();
                    }
                    else {
                        this._selectionModel.clear();
                        /** @type {?} */
                        var correspondingOption = this._selectValue(value);
                        // Shift focus to the active item. Note that we shouldn't do this in multiple
                        // mode, because we don't know what option the user interacted with last.
                        if (correspondingOption) {
                            this._keyManager.setActiveItem(correspondingOption);
                        }
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Finds and selects and option based on its value.
                 * @private
                 * @param {?} value
                 * @return {?} Option that has the corresponding value.
                 */
                NxDropdownComponent$1.prototype._selectValue = function (value) {
                    var _this = this;
                    /** @type {?} */
                    var correspondingOption = this.options.find(( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) {
                        try {
                            // Treat null as a special reset value.
                            return option.value != null && _this._compareWith(option.value, value);
                        }
                        catch (error) {
                            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["isDevMode"])()) {
                                // Notify developers of errors in their comparator.
                                console.warn(error);
                            }
                            return false;
                        }
                    }));
                    if (correspondingOption) {
                        this._selectionModel.select(correspondingOption);
                    }
                    return correspondingOption;
                };
                /**
                 * Emits change event to set the model value.
                 * @private
                 * @param {?=} fallbackValue
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._propagateChanges = function (fallbackValue) {
                    /** @type {?} */
                    var valueToEmit = null;
                    if (this.isMultiSelect) {
                        valueToEmit = (( /** @type {?} */(this.selected))).map(( /**
                         * @param {?} option
                         * @return {?}
                         */function (/**
                         * @param {?} option
                         * @return {?}
                         */ option) { return option.value; }));
                    }
                    else {
                        valueToEmit = this.selected ? (( /** @type {?} */(this.selected))).value : fallbackValue;
                    }
                    this._value = valueToEmit;
                    this.valueChange.emit(valueToEmit);
                    this._onChange(valueToEmit);
                    this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Sorts the selected values in the selected based on their order in the panel.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._sortValues = function () {
                    if (this.isMultiSelect) {
                        /** @type {?} */
                        var options_2 = this.options.toArray();
                        this._selectionModel.sort(( /**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */function (a, b) { return options_2.indexOf(a) - options_2.indexOf(b); }));
                        this.stateChanges.next();
                    }
                };
                /**
                 * Focuses the select element.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                /**
                 * Opens the panel of the dropdown.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.openPanel = function () {
                    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {
                        return;
                    }
                    this._panelOpen = true;
                    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();
                    this._keyManager.withHorizontalOrientation(null);
                    this._highlightCorrectOption();
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Closes the panel of the dropdown.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.closePanel = function () {
                    var _this = this;
                    if (this._panelOpen) {
                        this._panelOpen = false;
                        this._keyManager.withHorizontalOrientation('ltr');
                        this._changeDetectorRef.markForCheck();
                        this._onTouched();
                        this.openedChange.emit(false);
                        // defer the focus if the dropdown triggers actions that detach
                        // a template/view from the DOM to prevent changed after checked errors
                        setTimeout(( /**
                         * @return {?}
                         */function () { return _this.focus(); }));
                    }
                };
                // calculate inital scrollTop when the dropdown opens
                // scrolls the selected item to the middle of the panel if possible
                /**
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._calculateScrollTop = function () {
                    // reset the scrolltop to make calculation easier
                    this.panelBody.nativeElement.scrollTop = 0;
                    this._scrollTop = 0;
                    if (!this.empty) {
                        /** @type {?} */
                        var offset = this._getItemOffset(this._keyManager.activeItem);
                        /** @type {?} */
                        var panelHeight = this.panelBody.nativeElement.offsetHeight;
                        /** @type {?} */
                        var panelRect = this.panelBody.nativeElement.getBoundingClientRect();
                        /** @type {?} */
                        var middleOfPanel = panelRect.top + panelHeight / 2;
                        /** @type {?} */
                        var activeItemRect = this._keyManager.activeItem.containerElement.nativeElement.getBoundingClientRect();
                        if (offset > middleOfPanel) {
                            // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our
                            // target position for the item and subtract it from the offset (which is now always relative to the viewport)
                            // to middle out the text a bit more add half of the height
                            // (this is still a few pixels off because the container is a bit larger than the font)
                            this._scrollTop = offset - middleOfPanel + (activeItemRect.height - itemPadding) / 2;
                            this.panelBody.nativeElement.scrollTop = this._scrollTop;
                        }
                    }
                };
                /**
                 * Scrolls the active option into view.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._scrollActiveOptionIntoView = function () {
                    if (!this.panelOpen || !this._keyManager.activeItem) {
                        return;
                    }
                    /** @type {?} */
                    var activeOptionIndex = this._keyManager.activeItemIndex || 0;
                    /** @type {?} */
                    var itemRect = this._keyManager.activeItem.containerElement.nativeElement.getBoundingClientRect();
                    /** @type {?} */
                    var labelCount = this._countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.groups);
                    this.panelBody.nativeElement.scrollTop = this._getOptionScrollPosition(activeOptionIndex + labelCount, itemRect.height, this.panelBody.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);
                };
                /**
                 * @private
                 * @param {?} optionIndex
                 * @param {?} options
                 * @param {?} optionGroups
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._countGroupLabelsBeforeOption = function (optionIndex, options, optionGroups) {
                    if (optionGroups.length) {
                        /** @type {?} */
                        var optionsArray = options.toArray();
                        /** @type {?} */
                        var groups = optionGroups.toArray();
                        /** @type {?} */
                        var groupCounter = 0;
                        for (var i = 0; i < optionIndex + 1; i++) {
                            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
                                groupCounter++;
                            }
                        }
                        return groupCounter;
                    }
                    return 0;
                };
                /**
                 * @private
                 * @param {?} optionIndex
                 * @param {?} optionHeight
                 * @param {?} currentScrollPosition
                 * @param {?} panelHeight
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._getOptionScrollPosition = function (optionIndex, optionHeight, currentScrollPosition, panelHeight) {
                    /** @type {?} */
                    var optionOffset = optionIndex * optionHeight + itemPadding;
                    if (this.showFilter) {
                        /** @type {?} */
                        var filterHeight = this.panel.nativeElement.querySelector('.nx-dropdown__filter').getBoundingClientRect().height;
                        optionOffset = optionIndex * optionHeight + filterHeight;
                    }
                    if (optionOffset < currentScrollPosition) {
                        return optionOffset;
                    }
                    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
                        return Math.max(0, optionOffset - panelHeight + optionHeight);
                    }
                    return currentScrollPosition;
                };
                /**
                 * @private
                 * @param {?} item
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._getItemOffset = function (item) {
                    /** @type {?} */
                    var itemRect = item.containerElement.nativeElement.getBoundingClientRect();
                    return itemRect.top;
                };
                /**
                 * \@docs-private
                 * Formfield Implementation
                 * @param {?} ids
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.setDescribedByIds = function (ids) {
                    this.ariaDescribedby = ids.join(' ');
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.setAriaLabel = function (value) {
                    this._ariaLabel = value;
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._getAriaLabel = function () {
                    return this._ariaLabel || (this.formFieldComponent ? this.formFieldComponent.label : null);
                };
                Object.defineProperty(NxDropdownComponent$1.prototype, "empty", {
                    /**
                     * \@docs-private
                     * Whether the select has a value.
                     * @return {?}
                     */
                    get: function () {
                        return !this._selectionModel || this._selectionModel.isEmpty();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "hasValue", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._selectionModel.hasValue();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDropdownComponent$1.prototype, "shouldLabelFloat", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.focused || !this.empty;
                    },
                    enumerable: true,
                    configurable: true
                });
                /** End Formfield */
                /** ControlValueAccessor */
                /**
                 * Sets the select's value. Part of the ControlValueAccessor interface
                 * required to integrate with Angular's core forms API.
                 *
                 * @param {?} value New value to be written to the model.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.writeValue = function (value) {
                    if (this.options) {
                        this._setSelectionByValue(value);
                    }
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                /**
                 * Disables the select. Part of the ControlValueAccessor interface required
                 * to integrate with Angular's core forms API.
                 *
                 * @param {?} isDisabled Sets whether the component is disabled.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                    this._changeDetectorRef.markForCheck();
                    this.stateChanges.next();
                };
                /**
                 * End ControlValueAccessor
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._handleKeydown = function (event) {
                    this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
                };
                /**
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._handleClosedKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["UP_ARROW"] ||
                        keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["LEFT_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["RIGHT_ARROW"];
                    /** @type {?} */
                    var isOpenKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SPACE"];
                    // Open the select on ALT + arrow key to match the native <select>
                    if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {
                        event.preventDefault(); // prevents the page from scrolling down when pressing space
                        this.openPanel();
                    }
                    else if (!this.isMultiSelect && !this.disabled) {
                        this._keyManager.onKeydown(event);
                    }
                };
                /**
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._handleOpenKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    // all events other than the listed ones should be ignored or handled in _onFilter()
                    if (!([_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["DOWN_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["UP_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["HOME"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["END"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["LEFT_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["RIGHT_ARROW"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SHIFT"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SPACE"], _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["TAB"]].indexOf(keyCode) >= 0)) {
                        return;
                    }
                    /** @type {?} */
                    var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["DOWN_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["UP_ARROW"];
                    /** @type {?} */
                    var manager = this._keyManager;
                    /** @type {?} */
                    var allHidden = this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._hidden; })).every(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return Boolean(option); }));
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["HOME"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["END"]) {
                        event.preventDefault();
                        keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["HOME"] ? manager.setFirstItemActive() : manager.setLastItemActive();
                    }
                    else if (isArrowKey && event.altKey) {
                        // Close the select on ALT + arrow key to match the native <select>
                        event.preventDefault();
                        this.closePanel();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"] && manager.activeItem && !allHidden) {
                        event.preventDefault();
                        manager.activeItem._selectViaInteraction();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"] && allHidden) {
                        event.preventDefault();
                        this.closePanel();
                    }
                    else if (!this.showFilter && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SPACE"] && manager.activeItem) {
                        event.preventDefault();
                        manager.activeItem._selectViaInteraction();
                    }
                    else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["TAB"]) {
                        this.closePanel();
                    }
                    else {
                        /** @type {?} */
                        var previouslyFocusedIndex = manager.activeItemIndex;
                        manager.onKeydown(event);
                        if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem &&
                            manager.activeItemIndex !== previouslyFocusedIndex) {
                            manager.activeItem._selectViaInteraction();
                        }
                    }
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype.formatValue = function (value) {
                    return this.valueFormatter(value);
                };
                /**
                 * Called when the user types in the filter input
                 * @param {?} event
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._onFilter = function (event) {
                    event.preventDefault();
                    this.currentFilter = event.target.value;
                    this.filterChanges.next(event.target.value);
                    /** @type {?} */
                    var allHidden = this.options.map(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return option._hidden; })).every(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) { return Boolean(option); }));
                    if (allHidden) {
                        this._keyManager.setActiveItem(null);
                    }
                    else {
                        this._keyManager.setFirstItemActive();
                    }
                };
                Object.defineProperty(NxDropdownComponent$1.prototype, "triggerValue", {
                    /**
                     * \@docs-private
                     * The value displayed in the trigger.
                     * @return {?}
                     */
                    get: function () {
                        if (this.empty) {
                            return '';
                        }
                        if (this.isMultiSelect) {
                            /** @type {?} */
                            var selectedOptions = this._selectionModel.selected.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.viewValue; }));
                            return selectedOptions.join(', ');
                        }
                        return this._selectionModel.selected[0].viewValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Highlights the selected item. If no option is selected, it will highlight
                 * the first item instead.
                 * @private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._highlightCorrectOption = function () {
                    if (this._keyManager) {
                        if (this.empty) {
                            this._keyManager.setFirstItemActive();
                        }
                        else {
                            this._keyManager.setActiveItem(this._selectionModel.selected[0]);
                        }
                    }
                };
                /**
                 * Callback that is invoked when the overlay panel has been attached.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._onAttached = function () {
                    var _this = this;
                    this._changeDetectorRef.markForCheck();
                    this.overlayDir.positionChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["take"])(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.panelBody.nativeElement.focus();
                        if (_this._keyManager.activeItem) {
                            _this._calculateScrollTop();
                        }
                        _this._changeDetectorRef.markForCheck();
                        _this.openedChange.emit(true);
                        if (_this.showFilter) {
                            _this.filterInput.nativeElement.focus();
                        }
                    }));
                };
                /**
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._onFocus = function () {
                    if (!this.disabled) {
                        this._focused = true;
                        this.stateChanges.next();
                    }
                };
                /**
                 * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
                 * "blur" to the panel when it opens, causing a false positive.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._onBlur = function () {
                    this._focused = false;
                    if (this.filterInput && this.showFilter) {
                        this._clearFilter();
                    }
                    if (!this.disabled && !this.panelOpen) {
                        this._onTouched();
                        this._changeDetectorRef.markForCheck();
                        this.stateChanges.next();
                    }
                };
                Object.defineProperty(NxDropdownComponent$1.prototype, "isFilterEmpty", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this.currentFilter.length === 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._clearFilter = function () {
                    this.filterInput.nativeElement.value = '';
                    this.currentFilter = '';
                    this.filterChanges.next('');
                };
                /**
                 * \@docs-private determines the `aria-activedescendant` to be set on the host.
                 * @return {?}
                 */
                NxDropdownComponent$1.prototype._getAriaActiveDescendant = function () {
                    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {
                        return this._keyManager.activeItem.id;
                    }
                    return null;
                };
                return NxDropdownComponent$1;
            }(NxDropdownControl));
            NxDropdownComponent$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-dropdown',
                            template: "\n<!-- input and stuff-->\n<div cdkOverlayOrigin\n    #origin=\"cdkOverlayOrigin\"\n    class=\"nx-dropdown__container\"\n    #trigger>\n  <div class=\"nx-dropdown__rendered\">\n    <ng-container *ngTemplateOutlet=\"closedDropdownLabel\"></ng-container>\n  </div>\n  <div class=\"nx-dropdown__icon\">\n    <nx-icon class=\"nx-dropdown__chevron\" name=\"chevron-down\"></nx-icon>\n  </div>\n</div>\n\n<ng-template #defaultClosedDropdownLabel>\n  <div *ngIf=\"triggerValue\">{{ triggerValue }}</div>\n</ng-template>\n\n<!-- overlay -->\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayOpen]=\"panelOpen\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width\"\n  [cdkConnectedOverlayFlexibleDimensions]=\"true\"\n  [cdkConnectedOverlayViewportMargin]=\"_overlayViewportMargin\"\n  [cdkConnectedOverlayPush]=\"true\"\n  (backdropClick)=\"closePanel()\"\n  (attach)=\"_onAttached()\"\n  (detach)=\"closePanel()\">\n\n  <div class=\"nx-dropdown__panel\"\n      (keydown)=\"_handleKeydown($event)\"\n      #panel>\n    <div class=\"nx-dropdown__panel-header\" *ngIf=\"label\">\n      {{ label }}\n    </div>\n    \n    <div class=\"nx-dropdown__panel-body\" tabindex=\"-1\" #panelBody role=\"listbox\" [attr.aria-activedescendant]=\"_getAriaActiveDescendant()\" [attr.aria-multiselectable]=\"isMultiSelect\">\n        <div class=\"nx-dropdown__filter\" *ngIf=\"showFilter\">\n          <input class=\"nx-dropdown__filter-input\" [class.is-filled]=\"!isFilterEmpty\"  #filterInput type=\"text\" (input)=\"_onFilter($event)\" [placeholder]=\"filterPlaceholder\">\n          <span class=\"nx-dropdown__filter-icon\" *ngIf=\"!isFilterEmpty\" (click)=\"_clearFilter()\">\n            <nx-icon name=\"close\"></nx-icon>\n          </span>\n        </div>\n        <ng-content></ng-content>\n      </div>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                { provide: NxDropdownControl, useExisting: NxDropdownComponent$1 },
                                { provide: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldControl"], useExisting: NxDropdownComponent$1 },
                            ],
                            host: {
                                'role': 'button',
                                '[class.nx-dropdown]': 'true',
                                '[class.is-filled]': 'hasValue',
                                '[class.has-focus]': 'focused',
                                '[class.nx-dropdown--negative]': '_negative',
                                '[class.nx-dropdown--disabled]': 'disabled',
                                '[attr.aria-describedby]': 'ariaDescribedby || null',
                                '[attr.aria-required]': 'required',
                                '[attr.aria-label]': '_getAriaLabel()',
                                '[attr.aria-haspopup]': '"listbox"',
                                '[attr.aria-expanded]': 'panelOpen',
                                '[attr.disabled]': 'disabled || null',
                                '[attr.tabindex]': 'tabIndex',
                                '(keydown)': '_handleKeydown($event)',
                                '(focus)': '_onFocus()',
                                '(blur)': '_onBlur()',
                                '(click)': 'openPanel()'
                            },
                            styles: [":host{display:block}:host:focus{outline:0}:host(.nx-dropdown--negative):focus{font-weight:600}:host(.nx-dropdown--negative){color:#fff}.nx-dropdown__container{display:flex;justify-content:flex-end;cursor:pointer}:host(.nx-dropdown--disabled) .nx-dropdown__container{cursor:not-allowed}.nx-dropdown__rendered{flex:1 1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.nx-dropdown__panel{box-shadow:0 2px 4px rgba(65,65,65,.5);border-radius:4px;background-color:#fff;min-width:100%}.nx-dropdown__panel ::ng-deep .nx-checkbox__label{font-size:20px}.nx-dropdown__panel:focus{outline:0}.nx-dropdown__icon{font-size:24px;line-height:1}.nx-dropdown__panel-header{line-height:16px;font-size:12px;padding:8px 24px;background-color:#ececec;border-top-left-radius:4px;border-top-right-radius:4px;z-index:1;font-weight:600}.nx-dropdown__panel-body{max-height:280px;overflow-y:auto;outline:0}.nx-dropdown__filter{position:relative;padding:16px 32px 24px}.nx-dropdown__filter-input{font-size:20px;border:0;border-bottom:1px solid #d9d9d9;color:#414141;width:100%;outline:0;background-color:transparent;font-weight:300}.nx-dropdown__filter-icon{position:absolute;right:32px;top:16px;cursor:pointer}.nx-dropdown__filter-icon nx-icon{font-size:24px}.nx-dropdown__filter-input.is-filled:focus{color:#007ab3;font-weight:600;border-bottom:1px solid #007ab3;overflow:ellipsis}.nx-dropdown__filter-input.is-filled:focus+.nx-dropdown__filter-icon{color:#007ab3}@media screen and (-ms-high-contrast:active){.nx-dropdown__panel{box-shadow:0 0 0 1px windowText}}"]
                        }] }
            ];
            /** @nocollapse */
            NxDropdownComponent$1.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgZone"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Attribute"], args: ['tabindex',] }] },
                { type: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NgControl"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Self"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NgForm"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["FormGroupDirective"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] }
            ]; };
            NxDropdownComponent$1.propDecorators = {
                tabIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                _ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAriaLabel',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxDisabled',] }],
                required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxRequired',] }],
                styles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxStyle',] }],
                showFilter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxShowFilter',] }],
                filterPlaceholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxFilterPlaceholder',] }],
                openedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                _openedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['opened',] }],
                _closedStream: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['closed',] }],
                filterChanges: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['filterInput',] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxValueChange',] }],
                selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['panel',] }],
                panelBody: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['panelBody',] }],
                trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['trigger',] }],
                filterInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['filterInput',] }],
                overlayDir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["CdkConnectedOverlay"],] }],
                options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxDropdownItemComponent, { descendants: true },] }],
                groups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxDropdownGroupComponent,] }],
                _customClosedDropdownLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [NxDropdownClosedLabelDirective,] }],
                _defaultClosedDropdownLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['defaultClosedDropdownLabel',] }],
                valueFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValueFormatter',] }],
                compareWith: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                filterFn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDropdownModule = /** @class */ (function () {
                function NxDropdownModule() {
                }
                return NxDropdownModule;
            }());
            NxDropdownModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldModule"],
                                _allianz_ngx_ndbx_checkbox__WEBPACK_IMPORTED_MODULE_2__["NxCheckboxModule"],
                                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"],
                                _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_27__["A11yModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"],
                                _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_3__["ObserversModule"]
                            ],
                            declarations: [
                                NxDropdownComponent$1,
                                NxDropdownItemComponent,
                                NxDropdownGroupComponent,
                                NxDropdownClosedLabelDirective
                            ],
                            exports: [
                                NxDropdownComponent$1,
                                NxDropdownItemComponent,
                                NxDropdownGroupComponent,
                                NxDropdownClosedLabelDirective
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Option selected event
             */
            var NxAutocompleteOptionSelected = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?=} isUserInput
                 */
                function NxAutocompleteOptionSelected(source, isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.source = source;
                    this.isUserInput = isUserInput;
                }
                return NxAutocompleteOptionSelected;
            }());
            /**
             * Option IDs need to be unique across components, so this counter exists outside of
             * the component definition.
             * @type {?}
             */
            var _uniqueIdCounter = 0;
            var NxAutocompleteOptionComponent = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 */
                function NxAutocompleteOptionComponent(elementRef, _changeDetectorRef) {
                    this.elementRef = elementRef;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._id = "nx-autocomplete-option-" + _uniqueIdCounter++;
                    this._selected = false;
                    this._active = false;
                    this._disabled = false;
                    /**
                     * Event emitted when the option is selected or deselected.
                     */
                    this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                }
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "id", {
                    /**
                     * Id of the autocomplete option. By default it is set to an incremented value.
                     * @return {?}
                     */
                    get: function () {
                        return this._id;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "selected", {
                    /**
                     * Whether or not the option is currently selected.
                     * @return {?}
                     */
                    get: function () { return this._selected; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "active", {
                    /**
                     * Whether or not the option is currently active and ready to be selected.
                     * An active option displays styles as if it is focused, but the
                     * focus is actually retained somewhere else. This comes in handy
                     * for components like autocomplete where focus must remain on the input.
                     * @return {?}
                     */
                    get: function () {
                        return this._active;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "disabled", {
                    /**
                     * Whether the option is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._disabled !== newValue) {
                            this._disabled = newValue;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Ensures the option is selected when activated from the keyboard.
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._handleKeydown = function (event) {
                    if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SPACE"]) {
                        this._selectViaInteraction();
                        // Prevent the page from scrolling down and form submits.
                        event.preventDefault();
                    }
                };
                /**
                 * `Selects the option while indicating the selection came from the user. Used to
                 * determine if the select's view -> model callback should be invoked.`
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._selectViaInteraction = function () {
                    if (!this.disabled) {
                        this._selected = true;
                        this._changeDetectorRef.markForCheck();
                        this._emitSelectionChangeEvent(true);
                    }
                };
                /**
                 * Returns the correct tabindex for the option depending on disabled state.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._getTabIndex = function () {
                    return this.disabled ? '-1' : '0';
                };
                /**
                 * Emits the selection change event.
                 * @private
                 * @param {?=} isUserInput
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype._emitSelectionChangeEvent = function (isUserInput) {
                    if (isUserInput === void 0) { isUserInput = false; }
                    this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));
                };
                Object.defineProperty(NxAutocompleteOptionComponent.prototype, "viewValue", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return (this.elementRef.nativeElement.textContent || '').trim();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * This method sets display styles on the option to make it appear
                 * active. This is used by the ActiveDescendantKeyManager so key
                 * events will display the proper options as active on arrow key events.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.setActiveStyles = function () {
                    if (!this._active) {
                        this._active = true;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * \@docs-private
                 * This method removes display styles on the option that made it appear
                 * active. This is used by the ActiveDescendantKeyManager so key
                 * events will display the proper options as active on arrow key events.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.setInactiveStyles = function () {
                    if (this._active) {
                        this._active = false;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * \@docs-private
                 * Gets the label to be used when determining whether the option should be focused.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.getLabel = function () {
                    return this.viewValue;
                };
                /**
                 * Selects the option.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.select = function () {
                    this._selected = true;
                    this._changeDetectorRef.markForCheck();
                    this._emitSelectionChangeEvent();
                };
                /**
                 * Deselects the option.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.deselect = function () {
                    this._selected = false;
                    this._changeDetectorRef.markForCheck();
                    this._emitSelectionChangeEvent();
                };
                /**
                 * \@docs-private
                 * Sets focus onto this option.
                 * @return {?}
                 */
                NxAutocompleteOptionComponent.prototype.focus = function () {
                    /** @type {?} */
                    var element = this.elementRef.nativeElement;
                    if (typeof element.focus === 'function') {
                        element.focus();
                    }
                };
                return NxAutocompleteOptionComponent;
            }());
            NxAutocompleteOptionComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-autocomplete-option',
                            template: "<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n  <div class=\"nx-autocomplete-option__label\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                            host: {
                                'role': 'option',
                                '[attr.tabindex]': '_getTabIndex()',
                                '[id]': 'id',
                                '[attr.aria-selected]': 'selected.toString()',
                                '[attr.aria-disabled]': 'disabled.toString()',
                                '(click)': '_selectViaInteraction()',
                                '(keydown)': '_handleKeydown($event)',
                                '[class.nx-active]': 'active',
                                '[class.nx-disabled]': 'disabled',
                                '[style.display]': '\'block\'' // needed for to be able to calculate offset height
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host:focus{outline:0}.nx-autocomplete-option{font-size:20px;line-height:28px;letter-spacing:.2px;padding:0 32px 16px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}.nx-autocomplete-option.nx-active,.nx-autocomplete-option:hover{color:#007ab3}@media screen and (-ms-high-contrast:active){.nx-autocomplete-option.nx-active,.nx-autocomplete-option:hover{color:highlightText}}.nx-autocomplete-option__label{overflow:hidden;text-overflow:ellipsis;padding:0 12px;margin:0 -12px}:host-context([data-whatinput=keyboard]) .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                        }] }
            ];
            /** @nocollapse */
            NxAutocompleteOptionComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxAutocompleteOptionComponent.propDecorators = {
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                onSelectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Autocomplete IDs need to be unique across components, so this counter exists outside of
             * the component definition.
             * @type {?}
             */
            var _uniqueAutocompleteIdCounter = 0;
            /**
             * Event object that is emitted when an autocomplete option is selected.
             */
            var NxAutocompleteSelectedEvent = /** @class */ (function () {
                /**
                 * @param {?} source
                 * @param {?} option
                 */
                function NxAutocompleteSelectedEvent(source, option) {
                    this.source = source;
                    this.option = option;
                }
                return NxAutocompleteSelectedEvent;
            }());
            var NxAutocompleteComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 */
                function NxAutocompleteComponent(_changeDetectorRef, _elementRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    /**
                     * Whether the autocomplete panel should be visible, depending on option length.
                     */
                    this.showPanel = false;
                    this._isOpen = false;
                    this._items = null;
                    this._hasItems = false;
                    /**
                     * Event that is emitted whenever an option from the list is selected.
                     */
                    this.optionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Event that is emitted when the autocomplete panel is opened.
                     */
                    this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Event that is emitted when the autocomplete panel is closed.
                     */
                    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._classList = {};
                    /**
                     * Unique ID to be used by autocomplete trigger's "aria-owns" property.
                     */
                    this.id = "nx-autocomplete-" + _uniqueAutocompleteIdCounter++;
                    // As autocomplete option can hold any value, we might need a converter
                    // to get a string representation, which can be stored in input. Default value ? value.toString() : null.
                    /**
                     * Value to string converter.
                     */
                    this.valueFormatter = ( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) { return value ? value.toString() : null; });
                }
                Object.defineProperty(NxAutocompleteComponent.prototype, "isOpen", {
                    /**
                     * Whether the autocomplete panel is open.
                     * @return {?}
                     */
                    get: function () { return this._isOpen && this.showPanel; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "items", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._items;
                    },
                    /**
                     * Items observable. If given, autocomplete takes care of the options and ng-content is discarderd
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        var _this = this;
                        this._hasItems = true;
                        if (Array.isArray(val)) {
                            this._items = val;
                        }
                        else if (val instanceof rxjs__WEBPACK_IMPORTED_MODULE_25__["Observable"]) {
                            if (this._itemsSubscription) {
                                this._itemsSubscription.unsubscribe();
                            }
                            this._itemsSubscription = val.subscribe(( /**
                             * @param {?} itms
                             * @return {?}
                             */function (itms) {
                                _this._items = itms;
                                _this._changeDetectorRef.markForCheck();
                                // and check visibility in next cycle, when options are set
                                setTimeout(( /**
                                 * @return {?}
                                 */function () { return _this._setVisibility(); }));
                            }));
                        }
                        else if (val === null) {
                            this._items = val;
                        }
                        else {
                            throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "hasItems", {
                    /**
                     * \@docs-private
                     * Is items observable set
                     * @return {?}
                     */
                    get: function () {
                        return this._hasItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "options", {
                    /**
                     * Autocomplete options
                     * @return {?}
                     */
                    get: function () {
                        return this.hasItems ? this._vOptions : this._cOptions;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteComponent.prototype, "classList", {
                    /**
                     * Takes classes set on the host nx-autocomplete element and applies them to the panel
                     * inside the overlay container to allow for easy styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        if (value && value.length) {
                            value.split(' ').forEach(( /**
                             * @param {?} className
                             * @return {?}
                             */function (/**
                             * @param {?} className
                             * @return {?}
                             */ className) { return _this._classList[className.trim()] = true; }));
                            this._elementRef.nativeElement.className = '';
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype.ngAfterViewInit = function () {
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_27__["ActiveDescendantKeyManager"](this.options).withWrap();
                    this._setVisibility();
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype.ngOnDestroy = function () {
                    if (this._itemsSubscription) {
                        this._itemsSubscription.unsubscribe();
                    }
                };
                /**
                 * Sets the panel scrollTop. This allows us to manually scroll to display options
                 * above or below the fold, as they are not actually being focused when active.
                 * @param {?} scrollTop
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._setScrollTop = function (scrollTop) {
                    if (this.panel) {
                        this.panel.nativeElement.scrollTop = scrollTop;
                    }
                };
                /**
                 * Returns the panel's scrollTop.
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._getScrollTop = function () {
                    return this.panel ? this.panel.nativeElement.scrollTop : 0;
                };
                /**
                 * Panel should hide itself when the option list is empty.
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._setVisibility = function () {
                    this.showPanel = !!(this.options && this.options.length);
                    this._classList['nx-autocomplete-visible'] = this.showPanel;
                    this._classList['nx-autocomplete-hidden'] = !this.showPanel;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Emits the `select` event.
                 * @param {?} option
                 * @return {?}
                 */
                NxAutocompleteComponent.prototype._emitSelectEvent = function (option) {
                    /** @type {?} */
                    var event = new NxAutocompleteSelectedEvent(this, option);
                    this.optionSelected.emit(event);
                };
                return NxAutocompleteComponent;
            }());
            NxAutocompleteComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-autocomplete',
                            template: "<ng-template>\n  <div class=\"nx-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"_classList\" #panel>\n    <ng-container *ngIf=\"hasItems\">\n      <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n        {{item}}\n      </nx-autocomplete-option>\n    </ng-container>\n    <ng-container *ngIf=\"!hasItems\">\n      <ng-content></ng-content>\n    </ng-container>\n  </div>\n</ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            exportAs: 'nxAutocomplete',
                            host: {
                                'class': 'nx-autocomplete'
                            },
                            styles: [":host ::ng-deep .c-input::-ms-clear{width:0;height:0}.nx-autocomplete-panel{background-color:#fff;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:24px;overflow-y:auto;overflow-x:hidden;max-height:336px;width:100%;border-radius:4px}.nx-autocomplete-panel.nx-autocomplete-visible{visibility:visible}.nx-autocomplete-panel.nx-autocomplete-hidden{visibility:hidden}@media screen and (-ms-high-contrast:active){.nx-autocomplete-panel{box-shadow:0 0 0 1px windowText}}"]
                        }] }
            ];
            /** @nocollapse */
            NxAutocompleteComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] }
            ]; };
            NxAutocompleteComponent.propDecorators = {
                template: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_31__["TemplateRef"],] }],
                panel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['panel',] }],
                items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                optionSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                _vOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChildren"], args: [NxAutocompleteOptionComponent,] }],
                _cOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxAutocompleteOptionComponent, { descendants: true },] }],
                classList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['class',] }],
                valueFormatter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValueFormatter',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Provider that allows the autocomplete to register as a ControlValueAccessor.
             * \@docs-private
             * @type {?}
             */
            var NX_AUTOCOMPLETE_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NxAutocompleteTriggerDirective; })),
                multi: true
            };
            /**
             * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
             * @return {?}
             */
            function getNxAutocompleteMissingPanelError() {
                return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +
                    'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +
                    'you\'re attempting to open it after the ngAfterContentInit hook.');
            }
            var NxAutocompleteTriggerDirective = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _overlay
                 * @param {?} _viewContainerRef
                 * @param {?} _zone
                 * @param {?} _changeDetectorRef
                 * @param {?} _dir
                 * @param {?} _nxFormField
                 * @param {?} _nxWordField
                 * @param {?} _document
                 * @param {?=} _viewportRuler
                 */
                function NxAutocompleteTriggerDirective(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, _dir, _nxFormField, _nxWordField, _document, _viewportRuler) {
                    var _this = this;
                    this._element = _element;
                    this._overlay = _overlay;
                    this._viewContainerRef = _viewContainerRef;
                    this._zone = _zone;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._dir = _dir;
                    this._nxFormField = _nxFormField;
                    this._nxWordField = _nxWordField;
                    this._document = _document;
                    this._viewportRuler = _viewportRuler;
                    this._componentDestroyed = false;
                    /**
                     * Whether or not the label state is being overridden.
                     */
                    this._manuallyFloatingLabel = false;
                    /**
                     * Subscription to viewport size changes.
                     */
                    this._viewportSubscription = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                    /**
                     * Stream of keyboard events that can close the panel.
                     */
                    this._closeKeyEventStream = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * Value changes
                     */
                    this._valueChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    this._itemsCb = null;
                    this._debounce = 400;
                    this._autocompleteDisabled = false;
                    this._overlayAttached = false;
                    /**
                     * Stream of autocomplete option selections.
                     */
                    this.optionSelections = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["defer"])(( /**
                     * @return {?}
                     */function () {
                        if (_this.autocomplete && _this.autocomplete.options) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"]).apply(void 0, __spread(_this.autocomplete.options.map(( /**
                             * @param {?} option
                             * @return {?}
                             */function (/**
                             * @param {?} option
                             * @return {?}
                             */ option) { return option.onSelectionChange; }))));
                        }
                        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
                        // Return a stream that we'll replace with the real one once everything is in place.
                        return _this._zone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["switchMap"])(( /**
                     * @return {?}
                     */function () { return _this.optionSelections; })));
                    }));
                    /**
                     * `View -> model callback called when value changes`
                     */
                    this._onChange = ( /**
                     * @param {?} val
                     * @return {?}
                     */function (val) {
                        _this._valueChanges.next(val);
                    });
                    /**
                     * `View -> model callback called when autocomplete has been touched`
                     */
                    this._onTouched = ( /**
                     * @return {?}
                     */function () { });
                }
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "itemsCb", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._itemsCb;
                    },
                    /**
                     * The items callback. Called with input value, must return Observable of Array of strings
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        if (typeof val === 'function') {
                            this._itemsCb = val;
                        }
                        else {
                            throw new Error('Wrong value type for nxAutocompleteItems');
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "debounce", {
                    /**
                     * Debounce in ms before items callback is triggered. Defaults to 400
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this._debounce = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceNumberProperty"])(val);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "autocompleteDisabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._autocompleteDisabled;
                    },
                    /**
                     * Whether autocomplete functionality is disabled.
                     * @param {?} val
                     * @return {?}
                     */
                    set: function (val) {
                        this._autocompleteDisabled = val;
                        this._bindAutocompleteItems();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "panelOpen", {
                    /**
                     * Whether or not the autocomplete panel is open.
                     * @return {?}
                     */
                    get: function () {
                        return this._overlayAttached && this.autocomplete.showPanel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "activeOption", {
                    /**
                     * The currently active option, coerced to NxAutocompleteOptionComponent type.
                     * @return {?}
                     */
                    get: function () {
                        if (this.autocomplete && this.autocomplete._keyManager) {
                            return this.autocomplete._keyManager.activeItem;
                        }
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "_outsideClickStream", {
                    /**
                     * Stream of clicks outside of the autocomplete panel.
                     * @private
                     * @return {?}
                     */
                    get: function () {
                        var _this = this;
                        if (!this._document) {
                            return Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["of"])(null);
                        }
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["fromEvent"])(this._document, 'click'), Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["fromEvent"])(this._document, 'touchend'))
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                            /** @type {?} */
                            var clickTarget = ( /** @type {?} */(event.target));
                            /** @type {?} */
                            var formField = _this._formField ?
                                _this._formField.elementRef.nativeElement : null;
                            return _this._overlayAttached &&
                                clickTarget !== _this._element.nativeElement &&
                                (!formField || !formField.contains(clickTarget)) &&
                                (!!_this._overlayRef && !_this._overlayRef.overlayElement.contains(clickTarget));
                        })));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "_formField", {
                    /**
                     * @private
                     * @return {?}
                     */
                    get: function () {
                        if (this._nxFormField) {
                            return this._nxFormField;
                        }
                        else if (this._nxWordField) {
                            return this._nxWordField;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.ngOnDestroy = function () {
                    this._viewportSubscription.unsubscribe();
                    this._componentDestroyed = true;
                    this._destroyPanel();
                    this._closeKeyEventStream.complete();
                    if (this._controlValueChangesSubscription) {
                        this._controlValueChangesSubscription.unsubscribe();
                    }
                    if (this._itemsSubscription) {
                        this._itemsSubscription.unsubscribe();
                    }
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.ngOnChanges = function () {
                    this._bindAutocompleteItems();
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.ngAfterViewInit = function () {
                    this._bindAutocompleteItems();
                };
                /**
                 * Binds or rebinds the autocomplete items. Prerequisites:
                 * - items callback has to be defined
                 * - autocomplete panel has to be bound
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._bindAutocompleteItems = function () {
                    var _this = this;
                    if (this._controlValueChangesSubscription) {
                        this._controlValueChangesSubscription.unsubscribe();
                    }
                    if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {
                        /** @type {?} */
                        var itemsSubject_2 = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                        this.autocomplete.items = itemsSubject_2;
                        /** @type {?} */
                        var valueChanges = this._formField &&
                            this._formField._control &&
                            this._formField._control.ngControl &&
                            this._formField._control.ngControl.valueChanges ?
                            this._formField._control.ngControl.valueChanges : this._valueChanges;
                        this._controlValueChangesSubscription = valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["debounceTime"])(this._debounce))
                            .subscribe(( /**
                     * @param {?} input
                     * @return {?}
                     */function (input) {
                            if (_this._itemsSubscription) {
                                _this._itemsSubscription.unsubscribe();
                            }
                            _this._itemsSubscription = _this._itemsCb(input).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["first"])()).subscribe(( /**
                             * @param {?} result
                             * @return {?}
                             */function (result) {
                                itemsSubject_2.next(result);
                            }), ( /**
                             * @param {?} err
                             * @return {?}
                             */function (err) {
                                // On error reset
                                // TODO: Log error?
                                itemsSubject_2.next([]);
                            }));
                        }));
                    }
                };
                /**
                 * Opens the autocomplete suggestion panel.
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.openPanel = function () {
                    if (!this.autocompleteDisabled) {
                        this._attachOverlay();
                        this._floatLabel();
                    }
                };
                /**
                 * Closes the autocomplete suggestion panel.
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.closePanel = function () {
                    this._resetLabel();
                    if (!this._overlayAttached) {
                        return;
                    }
                    if (this.panelOpen) {
                        // Only emit if the panel was visible.
                        this.autocomplete.closed.emit();
                    }
                    this.autocomplete._isOpen = this._overlayAttached = false;
                    if (this._overlayRef && this._overlayRef.hasAttached()) {
                        this._overlayRef.detach();
                        this._closingActionsSubscription.unsubscribe();
                    }
                    // Note that in some cases this can end up being called after the component is destroyed.
                    // Add a check to ensure that we don't try to run change detection on a destroyed view.
                    if (!this._componentDestroyed) {
                        // We need to trigger change detection manually, because
                        // `fromEvent` doesn't seem to do it at the proper time.
                        // This ensures that the label is reset when the
                        // user clicks outside.
                        this._changeDetectorRef.detectChanges();
                    }
                };
                Object.defineProperty(NxAutocompleteTriggerDirective.prototype, "panelClosingActions", {
                    /**
                     * A stream of actions that should close the autocomplete panel, including
                     * when an option is selected, on blur, and when TAB is pressed.
                     * @return {?}
                     */
                    get: function () {
                        var _this = this;
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"])(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                         * @return {?}
                         */function () { return _this._overlayAttached; }))), this._closeKeyEventStream, this._outsideClickStream, this._overlayRef ?
                            this._overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                             * @return {?}
                             */function () { return _this._overlayAttached; }))) :
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["of"])());
                    },
                    enumerable: true,
                    configurable: true
                });
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.writeValue = function (value) {
                    var _this = this;
                    Promise.resolve(null).then(( /**
                     * @return {?}
                     */function () { return _this._setTriggerValue(value); }));
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.registerOnChange = function (fn) {
                    this._onChange = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.registerOnTouched = function (fn) {
                    this._onTouched = fn;
                };
                // Implemented as part of ControlValueAccessor.
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype.setDisabledState = function (isDisabled) {
                    this._element.nativeElement.disabled = isDisabled;
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._handleKeydown = function (event) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    // Prevent the default action on all escape key presses. This is here primarily to bring IE
                    // in line with other browsers. By default, pressing escape on IE will cause it to revert
                    // the input value to the one that it had on focus, however it won't dispatch any events
                    // which means that the model value will be out of sync with the view.
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ESCAPE"]) {
                        event.preventDefault();
                    }
                    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
                    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
                    if (this.panelOpen && (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ESCAPE"] || (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["UP_ARROW"] && event.altKey))) {
                        this._resetActiveItem();
                        this._closeKeyEventStream.next();
                        event.stopPropagation();
                    }
                    else if (this.activeOption && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"] && this.panelOpen) {
                        this.activeOption._selectViaInteraction();
                        this._resetActiveItem();
                        event.preventDefault();
                    }
                    else {
                        /** @type {?} */
                        var prevActiveItem = this.autocomplete._keyManager.activeItem;
                        /** @type {?} */
                        var isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["DOWN_ARROW"];
                        if (this.panelOpen || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["TAB"]) {
                            this.autocomplete._keyManager.onKeydown(event);
                        }
                        else if (isArrowKey && this._isFieldEnabled()) {
                            this.openPanel();
                        }
                        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                            this._scrollToOption();
                        }
                    }
                };
                /**
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._handleInput = function (event) {
                    /** @type {?} */
                    var target = ( /** @type {?} */(event.target));
                    /** @type {?} */
                    var value = target.value;
                    // Based on `NumberValueAccessor` from forms.
                    if (target.type === 'number') {
                        value = value === '' ? null : parseFloat(value);
                    }
                    // If the input has a placeholder, IE will fire the `input` event on page load,
                    // focus and blur, in addition to when the user actually changed the value. To
                    // filter out all of the extra events, we save the value on focus and between
                    // `input` events, and we check whether it changed.
                    // See: https://connect.microsoft.com/IE/feedback/details/885747/
                    if (this._isFieldEnabled() && this._previousValue !== value &&
                        document.activeElement === event.target) {
                        this._previousValue = value;
                        this._onChange(value);
                        this.openPanel();
                    }
                };
                /**
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._handleFocus = function () {
                    if (this._isFieldEnabled()) {
                        this._previousValue = this._element.nativeElement.value;
                        this.openPanel();
                    }
                };
                /**
                 * In "auto" mode, the label will animate down as soon as focus is lost.
                 * This causes the value to jump when selecting an option with the mouse.
                 * This method manually floats the label until the panel can be closed.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._floatLabel = function () {
                    if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {
                        this._nxFormField.floatLabel = 'always';
                        this._manuallyFloatingLabel = true;
                    }
                };
                /**
                 * If the label has been manually elevated, return it to its normal state.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._resetLabel = function () {
                    if (this._manuallyFloatingLabel) {
                        this._nxFormField.floatLabel = 'auto';
                        this._manuallyFloatingLabel = false;
                    }
                };
                /**
                 * Given that we are not actually focusing active options, we must manually adjust scroll
                 * to reveal options below the fold. First, we find the offset of the option from the top
                 * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
                 * the panel height + the option height, so the active option will be just visible at the
                 * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
                 * will become the offset. If that offset is visible within the panel already, the scrollTop is
                 * not adjusted.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._scrollToOption = function () {
                    if (this.autocomplete.options.length === 0) {
                        return;
                    }
                    /** @type {?} */
                    var optionOffset = 0;
                    /** @type {?} */
                    var optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;
                    if (this.autocomplete._keyManager.activeItem) {
                        optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;
                    }
                    /** @type {?} */
                    var newScrollPosition = _getOptionScrollPosition(optionOffset, optionHeight, this.autocomplete._getScrollTop(), this.autocomplete.panel.nativeElement.offsetHeight);
                    this.autocomplete._setScrollTop(newScrollPosition);
                };
                /**
                 * This method listens to a stream of panel closing actions and resets the
                 * stream every time the option list changes.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._subscribeToClosingActions = function () {
                    var _this = this;
                    /** @type {?} */
                    var firstStable = this._zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["take"])(1));
                    /** @type {?} */
                    var optionChanges = this.autocomplete.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["tap"])(( /**
                     * @return {?}
                     */function () { return _this._positionStrategy.reapplyLastPosition(); })), 
                    // Defer emitting to the stream until the next tick, because changing
                    // bindings in here will cause "changed after checked" errors.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["delay"])(0));
                    // When the zone is stable initially, and when the option list changes...
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"])(firstStable, optionChanges)
                        .pipe(
                    // create a new stream of panelClosingActions, replacing any previous streams
                    // that were created, and flatten it so our stream only emits closing events...
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["switchMap"])(( /**
                     * @return {?}
                     */function () {
                        _this._resetActiveItem();
                        _this.autocomplete._setVisibility();
                        return _this.panelClosingActions;
                    })), 
                    // when the first closing event occurs...
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["take"])(1))
                        // set the value, close the panel, and complete.
                        .subscribe(( /**
                 * @param {?} event
                 * @return {?}
                 */function (/**
                 * @param {?} event
                 * @return {?}
                 */ event) { return _this._setValueAndClose(event); }));
                };
                /**
                 * Destroys the autocomplete suggestion panel.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._destroyPanel = function () {
                    if (this._overlayRef) {
                        this.closePanel();
                        this._overlayRef.dispose();
                        this._overlayRef = null;
                    }
                };
                /**
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._setTriggerValue = function (value) {
                    /** @type {?} */
                    var toDisplay = this.autocomplete && this.autocomplete.valueFormatter ?
                        this.autocomplete.valueFormatter(value) :
                        value;
                    // Simply falling back to an empty string if the display value is falsy does not work properly.
                    // The display value can also be the number zero and shouldn't fall back to an empty string.
                    /** @type {?} */
                    var inputValue = toDisplay != null ? toDisplay : '';
                    // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go
                    // through change detection.
                    if (this._formField) {
                        this._formField._control.value = inputValue;
                    }
                    else {
                        this._element.nativeElement.value = inputValue;
                    }
                };
                /**
                 * This method closes the panel, and if a value is specified, also sets the associated
                 * control to that value. It will also mark the control as dirty if this interaction
                 * stemmed from the user.
                 * @private
                 * @param {?} event
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._setValueAndClose = function (event) {
                    if (event && event.source) {
                        this._clearPreviousSelectedOption(event.source);
                        this._setTriggerValue(event.source.value);
                        this._onChange(event.source.value);
                        this._element.nativeElement.focus();
                        this.autocomplete._emitSelectEvent(event.source);
                    }
                    this.closePanel();
                };
                /**
                 * Clear any previous selected option and emit a selection change event for this option
                 * @private
                 * @param {?} skip
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._clearPreviousSelectedOption = function (skip) {
                    this.autocomplete.options.forEach(( /**
                     * @param {?} option
                     * @return {?}
                     */function (/**
                     * @param {?} option
                     * @return {?}
                     */ option) {
                        if (option !== skip && option.selected) {
                            option.deselect();
                        }
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._attachOverlay = function () {
                    var _this = this;
                    if (!this.autocomplete) {
                        throw getNxAutocompleteMissingPanelError();
                    }
                    if (!this._overlayRef) {
                        this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["TemplatePortal"](this.autocomplete.template, this._viewContainerRef);
                        this._overlayRef = this._overlay.create(this._getOverlayConfig());
                        if (this._viewportRuler) {
                            this._viewportSubscription = this._viewportRuler.change().subscribe(( /**
                             * @return {?}
                             */function () {
                                if (_this.panelOpen && _this._overlayRef) {
                                    _this._overlayRef.updateSize({ minWidth: _this._getHostWidth() });
                                }
                            }));
                        }
                    }
                    else {
                        /** Update the panel width, in case the host width has changed */
                        this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
                    }
                    if (this._overlayRef && !this._overlayRef.hasAttached()) {
                        this._overlayRef.attach(this._portal);
                        this._closingActionsSubscription = this._subscribeToClosingActions();
                    }
                    /** @type {?} */
                    var wasOpen = this.panelOpen;
                    this.autocomplete._setVisibility();
                    this.autocomplete._isOpen = this._overlayAttached = true;
                    // We need to do an extra `panelOpen` check in here, because the
                    // autocomplete won't be shown if there are no options.
                    if (this.panelOpen && wasOpen !== this.panelOpen) {
                        this.autocomplete.opened.emit();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getOverlayConfig = function () {
                    return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayConfig"]({
                        positionStrategy: this._getOverlayPosition(),
                        scrollStrategy: this._scrollStrategy(),
                        minWidth: this._getHostWidth(),
                        direction: this._dir ? this._dir.value : 'ltr'
                    });
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getOverlayPosition = function () {
                    this._positionStrategy = this._overlay.position()
                        .flexibleConnectedTo(this._getConnectedElement())
                        .withViewportMargin(16)
                        .withPush(false)
                        .withPositions([
                        {
                            originX: 'start',
                            originY: 'bottom',
                            overlayX: 'start',
                            overlayY: 'top'
                        },
                        {
                            originX: 'start',
                            originY: 'top',
                            overlayX: 'start',
                            overlayY: 'bottom',
                        }
                    ]);
                    return this._positionStrategy;
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._scrollStrategy = function () {
                    return this._overlay.scrollStrategies.reposition();
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getConnectedElement = function () {
                    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;
                };
                /**
                 * Returns the width of the input element, so the panel min-width can match it.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._getHostWidth = function () {
                    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
                };
                /**
                 * Resets the active item to -1 so arrow events will activate the
                 * correct options, or to 0 if the consumer opted into it.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._resetActiveItem = function () {
                    this.autocomplete._keyManager.setActiveItem(-1);
                };
                /**
                 * Determines whether the panel can be opened.
                 * @private
                 * @return {?}
                 */
                NxAutocompleteTriggerDirective.prototype._isFieldEnabled = function () {
                    /** @type {?} */
                    var element = this._element.nativeElement;
                    return !element.readOnly && !element.disabled;
                };
                return NxAutocompleteTriggerDirective;
            }());
            NxAutocompleteTriggerDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: "input[nxAutocomplete], textarea[nxAutocomplete]",
                            host: {
                                'role': 'combobox',
                                'autocomplete': 'off',
                                'aria-autocomplete': 'list',
                                '[attr.aria-activedescendant]': 'activeOption?.id',
                                '[attr.aria-expanded]': 'panelOpen.toString()',
                                '[attr.aria-owns]': 'autocomplete?.id',
                                // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                                // a little earlier. This avoids issues where IE delays the focusing of the input.
                                '(focusin)': '_handleFocus()',
                                '(blur)': '_onTouched()',
                                '(input)': '_handleInput($event)',
                                '(keydown)': '_handleKeydown($event)',
                            },
                            exportAs: 'nxAutocompleteTrigger',
                            providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR]
                        },] }
            ];
            /** @nocollapse */
            NxAutocompleteTriggerDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgZone"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }] },
                { type: _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Host"] }] },
                { type: _allianz_ngx_ndbx_natural_language_form__WEBPACK_IMPORTED_MODULE_5__["NxWordComponent"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Host"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["DOCUMENT"],] }] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["ViewportRuler"] }
            ]; };
            NxAutocompleteTriggerDirective.propDecorators = {
                autocomplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAutocomplete',] }],
                itemsCb: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAutocompleteItems',] }],
                debounce: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAutocompleteDebounce',] }],
                autocompleteDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAutocompleteDisabled',] }]
            };
            /**
             * Determines the position to which to scroll a panel in order for an option to be into view.
             * \@docs-private
             * @param {?} optionOffset Option offset
             * @param {?} optionHeight Height of the options.
             * @param {?} currentScrollPosition Current scroll position of the panel.
             * @param {?} panelHeight Height of the panel.
             * @return {?}
             */
            function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
                if (optionOffset < currentScrollPosition) {
                    return optionOffset;
                }
                if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
                    return Math.max(0, optionOffset - panelHeight + optionHeight);
                }
                return currentScrollPosition;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxAutocompleteModule$1 = /** @class */ (function () {
                function NxAutocompleteModule$1() {
                }
                return NxAutocompleteModule$1;
            }());
            NxAutocompleteModule$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],
                            exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_27__["A11yModule"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxWordComponent$1 = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} _renderer
                 * @param {?} _overlay
                 */
                function NxWordComponent$1(elementRef, _changeDetectorRef, _renderer, _overlay) {
                    this.elementRef = elementRef;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._renderer = _renderer;
                    this._overlay = _overlay;
                    this.subscription = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                    this.subscriptionValues = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                    /**
                     * \@docs-private
                     */
                    this.hasErrors = false;
                    /**
                     * \@docs-private
                     */
                    this.inputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.currentTextWidth = 0;
                    // this will apply different min-widths to our component through our styles
                    /**
                     * Provide a hint for a minimal width. The actual size will be determined for inputs for each change.
                     */
                    this.size = 'regular';
                }
                /**
                 * @return {?}
                 */
                NxWordComponent$1.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._validateControlChild();
                    this.subscription = this._control.stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["startWith"])(null)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.hasErrors = _this._control.errorState;
                        _this._changeDetectorRef.markForCheck();
                    }));
                    // if we have a ngcontrol available stick to its valueChanges subject
                    if (this._control.ngControl) {
                        this.subscriptionValues = this._control.ngControl.valueChanges.subscribe(( /**
                         * @param {?} value
                         * @return {?}
                         */function (/**
                         * @param {?} value
                         * @return {?}
                         */ value) {
                            _this.updateCurrentTextWidth();
                            _this.inputChanges.next();
                        }));
                        // in any other case it is a bre input and input changes are signaled through simple state changes
                    }
                    else {
                        this.subscriptionValues = this._control.stateChanges.subscribe(( /**
                         * @param {?} value
                         * @return {?}
                         */function (/**
                         * @param {?} value
                         * @return {?}
                         */ value) {
                            _this.updateCurrentTextWidth();
                            _this.inputChanges.next();
                        }));
                    }
                    this._control.setAriaLabel(this.label);
                };
                /**
                 * @return {?}
                 */
                NxWordComponent$1.prototype.ngOnDestroy = function () {
                    this.subscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * Calculate the width of the full text given by the input,
                 * that value is bound to this component so it can grow.
                 * The involved input is known to have a width of 100% an will fit the additional space given
                 * which completes the auto growing behavior.
                 * @return {?}
                 */
                NxWordComponent$1.prototype.updateCurrentTextWidth = function () {
                    // provide the canvas only lazy
                    if (!this.measureCanvas) {
                        this.measureCanvas = this._renderer.createElement('canvas');
                    }
                    /** @type {?} */
                    var ctx = this.measureCanvas.getContext('2d');
                    /** @type {?} */
                    var inputRef = this._control.elementRef;
                    /** @type {?} */
                    var styles = window.getComputedStyle(inputRef.nativeElement);
                    ctx.font = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["getFontShorthand"])(styles);
                    /** @type {?} */
                    var metrics = ctx.measureText(this._control.value);
                    // add 1px (cursor width) to prevent jumping of the text on blur.
                    /** @type {?} */
                    var newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;
                    // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent
                    // Works as promised as long as there is not other tag around the word. Not expected but possible.
                    /** @type {?} */
                    var parent = this.elementRef.nativeElement.parentElement;
                    /** @type {?} */
                    var parentMeasurement = parent.getBoundingClientRect();
                    // Limit to own given minimal width
                    this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);
                    // Limit to container width
                    this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);
                    this._popover.updatePosition();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxWordComponent$1.prototype.repositionError = function () {
                    if (this._popover) {
                        this._popover.updatePosition();
                    }
                };
                // Fail if the required control is missing.
                /**
                 * @protected
                 * @return {?}
                 */
                NxWordComponent$1.prototype._validateControlChild = function () {
                    if (!this._control) {
                        throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxWordComponent$1.prototype.getConnectedOverlayOrigin = function () {
                    return this.elementRef;
                };
                Object.defineProperty(NxWordComponent$1.prototype, "isFocused", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._control.focused;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxWordComponent$1.prototype, "isFilled", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return !this._control.empty;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxWordComponent$1.prototype, "hasDropdown", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return Boolean(this._dropdown);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxWordComponent$1;
            }());
            NxWordComponent$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-word',
                            template: "<div\n  class=\"nx-word__input-wrapper\"\n  [nxPopoverTriggerFor]=\"popoverHover\"\n  nxPopoverTrigger='manual'\n  nxPopoverCloseable=\"false\"\n  nxPopoverDirection=\"top\"\n  [nxPopoverShow]=\"hasErrors && _errorChildren.length > 0\">\n\n  <!-- We only allow formfield controls here -->\n  <div *ngIf=\"!hasDropdown\" class=\"nx-word__inner-wrapper\">\n    <ng-content select=\"[nxInput]\"></ng-content>\n  </div>\n  <ng-content select=\"nx-dropdown\"></ng-content>\n</div>\n\n<nx-popover #popoverHover>\n  <ng-content select=\"[nxError]\"></ng-content>\n</nx-popover>\n",
                            host: {
                                '[class.size-short]': 'size == "short"',
                                '[class.size-regular]': 'size == "regular"',
                                '[class.size-long]': 'size == "long"',
                                '[class.has-error]': 'hasErrors',
                                '[class.is-focused]': 'isFocused',
                                '[class.is-filled]': 'isFilled',
                                '[class.has-dropdown]': 'hasDropdown',
                            },
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{display:inline-block;position:relative;font-weight:400;text-align:center;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;width:100%}:host .nx-word__inner-wrapper{border-bottom:2px solid #d9d9d9}:host.size-short{min-width:80px}:host.size-regular{min-width:152px}:host.size-long{min-width:360px}@media (max-width:991px){:host.size-long{min-width:280px}}@media (max-width:703px){:host.size-long{min-width:248px}}:host ::ng-deep .c-input{display:inline-block;text-align:inherit;font-size:inherit;line-height:inherit;background:0 0;color:inherit;border:none;outline:0;margin:0;width:100%;max-width:100%;height:auto;box-shadow:none;padding:0 8px}:host ::ng-deep .c-input.is-focused{outline:0;box-shadow:none;border-bottom-width:2px}:host ::ng-deep .c-input.is-filled,:host ::ng-deep .c-input.is-focused{color:#006192;font-weight:400}:host ::ng-deep .c-input.is-disabled{cursor:not-allowed}:host ::ng-deep .c-input::-ms-clear{display:none}:host ::ng-deep nx-dropdown{position:relative;border-bottom:2px solid #d9d9d9}:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:inherit;margin-bottom:-2px}:host ::ng-deep nx-dropdown.is-filled{border-color:#007ab3;color:#006192}:host ::ng-deep nx-dropdown .nx-dropdown__icon{line-height:inherit}:host ::ng-deep .nx-word__input-wrapper{width:100%}:host(.is-filled) .nx-word__inner-wrapper,:host(.is-focused) .nx-word__inner-wrapper{border-color:#007ab3}:host(.has-error) .nx-word__inner-wrapper{border-color:#dc3149}:host.has-error ::ng-deep nx-dropdown{color:#dc3149;border-color:#dc3149}:host.has-error ::ng-deep .c-input.has-error{color:#dc3149}:host-context(.is-negative) ::ng-deep .nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown.is-filled{border-color:#fff;color:#fff}:host-context(.is-negative) ::ng-deep .c-input{color:#fff}:host-context(.is-negative) .nx-word__inner-wrapper{border-color:#fff}.nx-word__inner-wrapper{height:52px}@media (max-width:991px){:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:26px}.nx-word__inner-wrapper{height:36px}}:host-context(.nx-natural-language-form--small) .nx-word__inner-wrapper{height:36px}:host-context(.nx-natural-language-form--small) ::ng-deep nx-dropdown .nx-dropdown__container{margin-bottom:2px}"]
                        }] }
            ];
            /** @nocollapse */
            NxWordComponent$1.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Renderer2"] },
                { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"] }
            ]; };
            NxWordComponent$1.propDecorators = {
                _control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [_allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldControl"],] }],
                _errorChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [_allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldErrorDirective"],] }],
                _popover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [_allianz_ngx_ndbx_popover__WEBPACK_IMPORTED_MODULE_7__["NxPopoverTriggerDirective"],] }],
                _dropdown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [_allianz_ngx_ndbx_dropdown__WEBPACK_IMPORTED_MODULE_8__["NxDropdownComponent"],] }],
                currentTextWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostBinding"], args: ['style.width.px',] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxSize',] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxLabel',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_SIZE$3 = 'large';
            var NxNaturalLanguageFormComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxNaturalLanguageFormComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._negative = false;
                    /**
                     * \@docs-private
                     */
                    this.resizeEvent$ = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * \@docs-private
                     */
                    this.updatePopoversSubscription = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                    /**
                     * \@docs-private
                     */
                    this._size = DEFAULT_SIZE$3;
                }
                Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative set of stylings should be used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "size", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._size;
                    },
                    /**
                     * Sets the size of the NLF. Default value: large
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._size = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.onResize = function (event) {
                    this.resizeEvent$.next();
                };
                /**
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    // Collect all words and listen for changes so we can update any open error popover
                    // which would otherwise get wrongly positioned.
                    /** @type {?} */
                    var subjects = this._words.map(( /**
                     * @param {?} word
                     * @return {?}
                     */function (word) { return word.inputChanges; }));
                    /** @type {?} */
                    var source = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"]).apply(void 0, __spread(subjects));
                    this.updatePopoversSubscription = source.subscribe(( /**
                     * @return {?}
                     */function () {
                        _this.updatePositionPopovers();
                    }));
                    this.resizeObservable = this.resizeEvent$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["throttleTime"])(500), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["delay"])(100));
                    this.resizeObservable.subscribe(( /**
                     * @return {?}
                     */function () { return _this.resizeWords(); }));
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.resizeWords = function () {
                    this._words.forEach(( /**
                     * @param {?} word
                     * @return {?}
                     */function (word) {
                        word.updateCurrentTextWidth();
                    }));
                };
                /**
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.ngOnDestroy = function () {
                    this.updatePopoversSubscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNaturalLanguageFormComponent.prototype.updatePositionPopovers = function () {
                    if (this._words) {
                        this._words.forEach(( /**
                         * @param {?} word
                         * @return {?}
                         */function (word) {
                            word.repositionError();
                        }));
                    }
                };
                return NxNaturalLanguageFormComponent;
            }());
            NxNaturalLanguageFormComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-natural-language-form',
                            template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.is-negative]': 'negative',
                                '[class.nx-natural-language-form--small]': 'size === "small"',
                                '[class.nx-natural-language-form--large]': 'size === "large"',
                            },
                            styles: [":host{display:block;padding-top:72px;padding-bottom:80px;color:#414141;font-weight:300;font-size:40px;line-height:52px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}:host.is-negative{color:#fff}@media (max-width:991px){:host{font-size:26px;line-height:36px}}@media (max-width:703px){:host{font-size:26px}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:26px;line-height:32px;letter-spacing:.3px}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}"]
                        }] }
            ];
            /** @nocollapse */
            NxNaturalLanguageFormComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxNaturalLanguageFormComponent.propDecorators = {
                _words: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxWordComponent$1,] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxNegative',] }],
                size: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                onResize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['window:orientationchange', ['$event'],] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['window:resize', ['$event'],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxNaturalLanguageFormModule = /** @class */ (function () {
                function NxNaturalLanguageFormModule() {
                }
                return NxNaturalLanguageFormModule;
            }());
            NxNaturalLanguageFormModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_input__WEBPACK_IMPORTED_MODULE_13__["NxInputModule"],
                                _allianz_ngx_ndbx_popover__WEBPACK_IMPORTED_MODULE_7__["NxPopoverModule"]
                            ],
                            declarations: [
                                NxNaturalLanguageFormComponent,
                                NxWordComponent$1
                            ],
                            exports: [
                                NxNaturalLanguageFormComponent,
                                NxWordComponent$1
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ICONS = {
                info: 'info-circle',
                error: 'exclamation-circle',
                success: 'check-circle',
                warning: 'exclamation-triangle'
            };
            var NxMessageComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxMessageComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._context = 'regular';
                    this._showIcon = false;
                    this._closable = false;
                    this._closeButtonLabel = 'Close dialog';
                    /**
                     * Event emitted when the close icon of the message has been clicked.
                     */
                    this.closeEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                }
                Object.defineProperty(NxMessageComponent.prototype, "context", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._context;
                    },
                    /**
                     * Sets the context of the message.
                     * The message box will color accordingly. Default: 'regular'
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._context) {
                            this._context = value;
                            this._icon = this.getIconName();
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "showIcon", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._showIcon;
                    },
                    /**
                     * Whether an icon that belongs to the context of the message should be displayed.
                     * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.
                     * \@deletion-target 9.0.0
                     *
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._showIcon = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "closable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._closable;
                    },
                    /**
                     * Whether a message should have a close icon in order to be dismissed.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this._closable) {
                            this._closable = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "icon", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._icon;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxMessageComponent.prototype, "closeButtonLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._closeButtonLabel;
                    },
                    /**
                     * Sets the label of the close button of the message.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._closeButtonLabel) {
                            this._closeButtonLabel = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxMessageComponent.prototype._emitCloseEvent = function () {
                    this.closeEvent.emit();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxMessageComponent.prototype.getIconName = function () {
                    if (this._context === 'info') {
                        return ICONS.info;
                    }
                    else if (this._context === 'error') {
                        return ICONS.error;
                    }
                    else if (this._context === 'success') {
                        return ICONS.success;
                    }
                    else if (this._context === 'warning') {
                        return ICONS.warning;
                    }
                    return '';
                };
                return NxMessageComponent;
            }());
            NxMessageComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-message',
                            template: "<nx-icon *ngIf=\"showIcon && context !== 'regular'\"\n         class=\"nx-message__icon\"\n         [name]=\"icon\"\n         size=\"s\">\n</nx-icon>\n<button\n  *ngIf=\"closable\"\n  (click)=\"_emitCloseEvent()\"\n  [attr.aria-label]=\"closeButtonLabel\"\n  tabindex=\"0\"\n  class=\"nx-message__close-icon\">\n    <nx-icon\n      name=\"close\"\n      size=\"s\"\n      aria-hidden=\"true\">\n    </nx-icon>\n</button>\n\n\n<div class=\"nx-message__content-wrapper\">\n  <div class=\"nx-message__content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            exportAs: 'nxMessage',
                            host: {
                                '[class.context-info]': 'context === "info"',
                                '[class.context-error]': 'context === "error"',
                                '[class.context-success]': 'context === "success"',
                                '[class.context-warning]': 'context === "warning"',
                                '[class.nx-message--closable]': 'closable'
                            },
                            styles: [":host{width:100%;color:#414141;display:flex;align-items:flex-start;position:relative;background-color:#fff;border:1px solid;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:23px;margin:12px 0;font-size:16px;line-height:24px}.nx-message__content-wrapper{max-width:100%}:host,:host(.context-regular){border-color:#414141}:host(.context-info){border-color:#496ebd}:host(.context-info) .nx-message__icon{color:#496ebd}:host(.context-error){border-color:#dc3149}:host(.context-error) .nx-message__icon{color:#dc3149}:host(.context-success){border-color:#1e8927}:host(.context-success) .nx-message__icon{color:#1e8927}:host(.context-warning){border-color:#efbe25}:host(.context-warning) .nx-message__icon{color:#efbe25}.nx-message__icon{margin-right:16px}@media (max-width:703px){:host{padding:31px;display:block}:host(.context-error) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-info) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-success) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-warning) .nx-message__icon~.nx-message__content-wrapper .nx-message__content{display:inline;margin-left:31px}.nx-message__icon{position:absolute}}:host(.nx-message--closable){padding-right:39px}@media (max-width:703px){:host(.nx-message--closable){padding-right:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:0;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{font-size:16px;color:nx-colors(grey-tones,grey-tone-1)}:host-context([data-whatinput=keyboard]) .nx-message__close-icon:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
                        }] }
            ];
            /** @nocollapse */
            NxMessageComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxMessageComponent.propDecorators = {
                context: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxContext',] }],
                showIcon: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                closable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                closeButtonLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                closeEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['close',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxMessageModule = /** @class */ (function () {
                function NxMessageModule() {
                }
                return NxMessageModule;
            }());
            NxMessageModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ],
                            declarations: [
                                NxMessageComponent
                            ],
                            exports: [
                                NxMessageComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPageSearchComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxPageSearchComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * An event emitted when the user clicks the search button.
                     */
                    this.buttonClick = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._buttonLabel = null;
                    this._hideSearchButton = false;
                    this._buttonLayout = '12,12,12,2';
                    this._contentLayout = null;
                }
                Object.defineProperty(NxPageSearchComponent.prototype, "buttonLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._buttonLabel;
                    },
                    /**
                     * Sets the text label of the button.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._buttonLabel !== value) {
                            this._buttonLabel = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPageSearchComponent.prototype, "hideSearchButton", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._hideSearchButton;
                    },
                    /**
                     * Whether the search button should be hidden.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._hideSearchButton = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPageSearchComponent.prototype, "buttonLayout", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._buttonLayout;
                    },
                    /**
                     * Layout of the search button inside of a NxGrid. Default: 12,12,12,2.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._buttonLayout !== value) {
                            this._buttonLayout = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPageSearchComponent.prototype, "contentLayout", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        if (this._contentLayout) {
                            return this._contentLayout;
                        }
                        return !this.hideSearchButton ? '12,12,12,10' : '12';
                    },
                    /**
                     * Layout of the content area inside of a NxGrid. Default: 12,12,12,10 | 12 (if search button is hidden).
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._contentLayout !== value) {
                            this._contentLayout = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPageSearchComponent.prototype.onButtonClick = function () {
                    this.buttonClick.emit();
                };
                return NxPageSearchComponent;
            }());
            NxPageSearchComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-page-search',
                            template: "<div class=\"nx-pagesearch\">\n  <div nxLayout=\"grid\">\n    <div nxRow>\n      <div [nxCol]=\"contentLayout\" class=\"nx-pagesearch--content\">\n        <ng-content></ng-content>\n      </div>\n      <div [nxCol]=\"buttonLayout\" *ngIf=\"!hideSearchButton\" class=\"nx-pagesearch__actions\">\n        <button nxButton=\"primary medium\" (click)=\"onButtonClick()\">{{buttonLabel}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-pagesearch{padding:32px 0;background-color:#fff;box-shadow:0 2px 4px rgba(65,65,65,.5)}.nx-pagesearch ::ng-deep .nx-formfield__wrapper{padding-bottom:0}.nx-pagesearch ::ng-deep .c-input{font-size:30px;font-weight:300;line-height:32px;height:auto}.nx-pagesearch ::ng-deep .nx-formfield__prefix{color:#007ab3}.nx-pagesearch ::ng-deep button{margin:0}.nx-pagesearch ::ng-deep .nx-icon--auto{font-size:24px}.nx-pagesearch .nx-pagesearch__actions{display:flex;align-items:center}"]
                        }] }
            ];
            /** @nocollapse */
            NxPageSearchComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxPageSearchComponent.propDecorators = {
                buttonClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxButtonClick',] }],
                buttonLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxButtonLabel',] }],
                hideSearchButton: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxHideSearchButton',] }],
                buttonLayout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxButtonLayout',] }],
                contentLayout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxContentLayout',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPageSearchModule = /** @class */ (function () {
                function NxPageSearchModule() {
                }
                return NxPageSearchModule;
            }());
            NxPageSearchModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_autocomplete__WEBPACK_IMPORTED_MODULE_10__["NxAutocompleteModule"],
                                _allianz_ngx_ndbx_formfield__WEBPACK_IMPORTED_MODULE_11__["NxFormfieldModule"],
                                _allianz_ngx_ndbx_button__WEBPACK_IMPORTED_MODULE_12__["NxButtonModule"],
                                _allianz_ngx_ndbx_grid__WEBPACK_IMPORTED_MODULE_9__["NxGridModule"]
                            ],
                            declarations: [
                                NxPageSearchComponent
                            ],
                            exports: [
                                NxPageSearchComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxRatingComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxRatingComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._value = 0;
                    this._disabled = false;
                    this._negative = false;
                    this._startLabel = null;
                    this._endLabel = null;
                    this._ariaLabel = ['1/5', '2/5', '3/5', '4/5', '5/5'];
                    /**
                     * An event is dispatched each time when the rating changes.
                     */
                    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                    this.onChangeCallback = ( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) { });
                }
                Object.defineProperty(NxRatingComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._value;
                    },
                    /**
                     * Sets the selected rating 1 - 5.
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        this._value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceNumberProperty"])(newValue);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRatingComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Whether the rating component should be disabled.
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (this._disabled === newValue) {
                            return;
                        }
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(newValue);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRatingComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative colors be used.
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        if (this._negative === newValue) {
                            return;
                        }
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(newValue);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRatingComponent.prototype, "startLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._startLabel;
                    },
                    /**
                     * Sets the label painted at the start of the rating component.
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        this._startLabel = newValue;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRatingComponent.prototype, "endLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._endLabel;
                    },
                    /**
                     * Sets the label painted at the end of the rating component.
                     * @param {?} newValue
                     * @return {?}
                     */
                    set: function (newValue) {
                        this._endLabel = newValue;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxRatingComponent.prototype, "ariaLabel", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._ariaLabel;
                    },
                    /**
                     * @param {?} newAriaLabels
                     * @return {?}
                     */
                    set: function (newAriaLabels) {
                        this._ariaLabel = newAriaLabels;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Whether the given rating is selected.
                 * @param {?} index
                 * @return {?}
                 */
                NxRatingComponent.prototype.isSelected = function (index) {
                    return index <= this.value;
                };
                /**
                 * Allows to set the rating.
                 * @param {?} value
                 * @return {?}
                 */
                NxRatingComponent.prototype.setSelection = function (value) {
                    if (!this.disabled) {
                        this.value = value;
                        this.valueChange.emit(value);
                        this.onTouchedCallback();
                        this.onChangeCallback(this.value);
                    }
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @param {?} rating
                 * @return {?}
                 */
                NxRatingComponent.prototype.handleKeyUp = function (event, rating) {
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    event.preventDefault();
                    event.stopPropagation();
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"]) {
                        this.setSelection(rating);
                    }
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["RIGHT_ARROW"]) {
                        this.value = Math.min(this.value + 1, 5);
                        /** @type {?} */
                        var elementRef = this.icons.toArray()[this.value - 1];
                        elementRef.nativeElement.focus();
                    }
                    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["LEFT_ARROW"]) {
                        this.value = Math.max(this.value - 1, 1);
                        /** @type {?} */
                        var elementRef = this.icons.toArray()[this.value - 1];
                        elementRef.nativeElement.focus();
                    }
                };
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxRatingComponent.prototype.writeValue = function (value) {
                    this.value = value;
                };
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                NxRatingComponent.prototype.registerOnChange = function (callback) {
                    this.onChangeCallback = callback;
                };
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                NxRatingComponent.prototype.registerOnTouched = function (callback) {
                    this.onTouchedCallback = callback;
                };
                /**
                 * @param {?} isDisabled
                 * @return {?}
                 */
                NxRatingComponent.prototype.setDisabledState = function (isDisabled) {
                    this.disabled = isDisabled;
                };
                /**
                 * \@docs-private
                 * @param {?} rating
                 * @return {?}
                 */
                NxRatingComponent.prototype.getAriaLabel = function (rating) {
                    return this.ariaLabel[rating - 1];
                };
                /**
                 * \@docs-private
                 * @param {?} rating
                 * @return {?}
                 */
                NxRatingComponent.prototype.getIconName = function (rating) {
                    return 'star' + ((!this.isSelected(rating)) ? '-o' : '');
                };
                return NxRatingComponent;
            }());
            NxRatingComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-rating',
                            template: "  <div class=\"nx-rating__container\" role=\"radiogroup\">\n    <nx-icon *ngFor=\"let rating of [1,2,3,4,5]\"\n      (click)=\"setSelection(rating)\"\n      (keyup)=\"handleKeyUp($event, rating)\"\n      role=\"radio\"\n      [attr.aria-label]=\"getAriaLabel(rating)\"\n      [attr.aria-checked]=\"isSelected(rating)\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      class=\"nx-rating__icon\"\n      [name]=\"getIconName(rating)\"\n      size=\"m\">\n    </nx-icon>\n  </div>\n  <div class=\"nx-rating__label\" *ngIf=\"startLabel || endLabel\">\n    <span class=\"nx-rating__label--start\">{{startLabel}}</span>\n    <span class=\"nx-rating__label--end\">{{endLabel}}</span>\n  </div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            providers: [
                                {
                                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                                    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                                     * @return {?}
                                     */function () { return NxRatingComponent; })),
                                    multi: true
                                }
                            ],
                            host: {
                                '[class.nx-rating--negative]': 'negative',
                                '[class.nx-rating--disabled]': 'disabled',
                            },
                            styles: [":host{display:inline-block}:host(.nx-rating--negative){color:#fff}:host(.nx-rating--disabled){cursor:not-allowed;color:#c2c2c2;outline:0}:host(.nx-rating--disabled) .nx-rating__label{color:#c2c2c2}:host(.nx-rating--disabled) .nx-rating__icon{cursor:not-allowed}.nx-rating__container{display:flex}.nx-rating__label{display:flex;font-size:16px}.nx-rating__label--end{margin-left:auto}.nx-rating__icon{font-size:40px;width:auto;height:40px;background:0 0;border:none;margin-right:16px;cursor:pointer;outline:0}.nx-rating__icon:last-child{margin-right:0}:host-context([data-whatinput=keyboard]) .nx-rating__icon:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
                        }] }
            ];
            /** @nocollapse */
            NxRatingComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxRatingComponent.propDecorators = {
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxDisabled',] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxNegative',] }],
                startLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxStartLabel',] }],
                endLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxEndLabel',] }],
                ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAriaLabel',] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxValueChange',] }],
                icons: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChildren"], args: [_allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconComponent"], { read: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxRatingModule = /** @class */ (function () {
                function NxRatingModule() {
                }
                return NxRatingModule;
            }());
            NxRatingModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ],
                            declarations: [
                                NxRatingComponent
                            ],
                            exports: [
                                NxRatingComponent
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxNumberStepperIntl = /** @class */ (function () {
                function NxNumberStepperIntl() {
                    /**
                     * Stream that emits whenever the labels here are changed. Use this to notify
                     * components if the labels have changed after initialization.
                     */
                    this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * The aria label for the decrement '-' button
                     */
                    this.decrementAriaLabel = 'Decrement';
                    /**
                     * The aria label for the increment '+' button
                     */
                    this.incrementAriaLabel = 'Increment';
                }
                return NxNumberStepperIntl;
            }());
            NxNumberStepperIntl.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Injectable"] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxAutoResizeDirective = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _renderer
                 * @param {?} _cdr
                 */
                function NxAutoResizeDirective(_element, _renderer, _cdr) {
                    this._element = _element;
                    this._renderer = _renderer;
                    this._cdr = _cdr;
                    this._resize = true;
                    this.updateInputWidth = this.updateInputWidth.bind(this);
                }
                Object.defineProperty(NxAutoResizeDirective.prototype, "resize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._resize;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._resize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._resize) {
                            this._addEventListener();
                            this.updateInputWidth();
                        }
                        else {
                            this._removeEventListener();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxAutoResizeDirective.prototype.ngAfterViewInit = function () {
                    if (this.resize) {
                        this._addEventListener();
                    }
                };
                /**
                 * @return {?}
                 */
                NxAutoResizeDirective.prototype.ngOnDestroy = function () {
                    this._removeEventListener();
                };
                /**
                 * @return {?}
                 */
                NxAutoResizeDirective.prototype.updateInputWidth = function () {
                    /** @type {?} */
                    var measureCanvas = this._renderer.createElement('canvas');
                    /** @type {?} */
                    var ctx = measureCanvas.getContext('2d');
                    /** @type {?} */
                    var styles = window.getComputedStyle(this._element.nativeElement);
                    ctx.font = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["getFontShorthand"])(styles);
                    /** @type {?} */
                    var metrics = ctx.measureText(this._element.nativeElement.value);
                    /** @type {?} */
                    var padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);
                    /** @type {?} */
                    var border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);
                    // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut
                    /** @type {?} */
                    var newWidth = metrics.width + padding + border + 16;
                    // Limit to own given minimal width
                    /** @type {?} */
                    var parsed = parseFloat(styles.minWidth);
                    this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);
                    // needed when the outer component is onPush
                    this._cdr.markForCheck();
                };
                /**
                 * @return {?}
                 */
                NxAutoResizeDirective.prototype._addEventListener = function () {
                    this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);
                    this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);
                };
                /**
                 * @return {?}
                 */
                NxAutoResizeDirective.prototype._removeEventListener = function () {
                    this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);
                    this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);
                };
                /**
                 * @param {?} left
                 * @param {?} right
                 * @return {?}
                 */
                NxAutoResizeDirective.prototype.sumStyles = function (left, right) {
                    left = parseInt(left, 10);
                    right = parseInt(right, 10);
                    left = Number.isNaN(left) ? 0 : left;
                    right = Number.isNaN(right) ? 0 : right;
                    return left + right;
                };
                return NxAutoResizeDirective;
            }());
            NxAutoResizeDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: 'input[nxAutoResize]'
                        },] }
            ];
            /** @nocollapse */
            NxAutoResizeDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxAutoResizeDirective.propDecorators = {
                width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostBinding"], args: ['style.width.px',] }],
                resize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxAutoResize',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var SIZE_MAPPING = {
                big: 'nx-stepper--big',
                normal: ''
            };
            /** @type {?} */
            var STYLE_MAPPING = {
                regular: '',
                bold: 'nx-stepper__input--bold',
                light: 'nx-stepper__input--light'
            };
            /** @type {?} */
            var DEFAULT_CLASSES$1 = ['nx-stepper'];
            /** @type {?} */
            var INPUT_CLASSES = ['nx-stepper__input'];
            /** @type {?} */
            var ALLOWED_CHARACTERS = new RegExp(/^-?[0-9]\d*(\.\d+)?$/g);
            /** @type {?} */
            var CUSTOM_VALUE_ACCESSOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALUE_ACCESSOR"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NxNumberStepperComponent; })),
                multi: true
            };
            /** @type {?} */
            var CUSTOM_VALIDATOR = {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_16__["NG_VALIDATORS"],
                useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_31__["forwardRef"])(( /**
                 * @return {?}
                 */function () { return NxNumberStepperComponent; })),
                multi: true
            };
            /** @type {?} */
            var nextUniqueId = 0;
            var NxNumberStepperComponent = /** @class */ (function (_super) {
                __extends(NxNumberStepperComponent, _super);
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} _renderer
                 * @param {?} _elementRef
                 * @param {?} _intl
                 */
                function NxNumberStepperComponent(_changeDetectorRef, _renderer, _elementRef, _intl) {
                    var _this = _super.call(this, SIZE_MAPPING, DEFAULT_CLASSES$1, _elementRef, _renderer) || this;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._intl = _intl;
                    _this._step = 1;
                    _this._min = 0;
                    _this._max = 100;
                    _this._value = 0;
                    _this._label = null;
                    _this._resize = false;
                    _this._negative = false;
                    _this._leadingZero = true;
                    /**
                     * \@docs-private
                     */
                    _this.inputClassNames = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["mapClassNames"])('regular', INPUT_CLASSES, STYLE_MAPPING);
                    /**
                     * \@docs-private
                     */
                    _this.inputId = "nx-number-stepper-" + nextUniqueId++;
                    /**
                     * \@docs-private
                     */
                    _this.ariaDescribedBy = null;
                    /**
                     * An event emitted on value change.
                     */
                    _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    _this.onChangeCallback = ( /**
                     * @param {?} _
                     * @return {?}
                     */function (_) { });
                    _this.onTouchedCallback = ( /**
                     * @return {?}
                     */function () { });
                    _this._intlSubscription = _this._intl.changes.subscribe(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                    return _this;
                }
                Object.defineProperty(NxNumberStepperComponent.prototype, "resize", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._resize;
                    },
                    /**
                     * Whether the input should be resized. Default: false
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._resize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "label", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._label;
                    },
                    /**
                     * Defines the the label shown above the stepper input.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._label !== value) {
                            this._label = value;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "style", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._style;
                    },
                    /**
                     * Defines the font weight of the input.
                     *
                     * Possible values: regular, bold, light. Default value: regular
                     *
                     * @deprecated The style input is not available anymore, only default font-weight should be used.
                     * \@deletion-target 8.0.0
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._style === value) {
                            return;
                        }
                        this._style = value;
                        this.inputClassNames = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["mapClassNames"])(value, INPUT_CLASSES, STYLE_MAPPING);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "step", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._step;
                    },
                    /**
                     * Sets the step size. Default: 1
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        // only internal changes no need to call markForCheck
                        this._step = Number(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "min", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._min;
                    },
                    /**
                     * Sets the minimum accepted number. Default: 0
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._min = Number(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "max", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._max;
                    },
                    /**
                     * Sets the maximum accepted number. Default: 100
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._max = Number(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "value", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._value;
                    },
                    /**
                     * Sets the value of the number-stepper.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._value = value;
                        if (this._value !== null) {
                            this.setInputValue(this._value);
                        }
                        else {
                            this.setInputValue(0);
                        }
                        this.triggerResize();
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative set of styling should be used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._negative !== value) {
                            this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxNumberStepperComponent.prototype, "leadingZero", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._leadingZero;
                    },
                    /**
                     * Whether the number stepper value should have a leading zero.
                     *
                     * Default value is true.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._leadingZero !== value) {
                            this._leadingZero = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                            this.setInputValue(this.value);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.ngOnInit = function () {
                    this.setInputValue(this._value);
                };
                /**
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.ngAfterViewInit = function () {
                    var _this = this;
                    // defer to prevent checked after change errors
                    if (this.resize) {
                        setTimeout(( /**
                         * @return {?}
                         */function () { return _this.triggerResize(); }));
                    }
                    if (this.ngContentWrapper) {
                        this.ariaDescribedBy = this.ngContentWrapper.nativeElement.children.length > 0 ? "label-for-" + this.inputId : null;
                    }
                };
                /**
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.ngOnDestroy = function () {
                    this._intlSubscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.setInputValue = function (value) {
                    if (this.leadingZero) {
                        this.numberInput.nativeElement.value = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["pad"])(value.toString(), 2);
                    }
                    else {
                        this.numberInput.nativeElement.value = value.toString();
                    }
                };
                /* ControlValueAccessor Implementations */
                /**
                 * @param {?} value
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.writeValue = function (value) {
                    this.value = value;
                };
                /**
                 * @param {?} onChange
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.registerOnChange = function (onChange) {
                    this.onChangeCallback = onChange;
                };
                /**
                 * @param {?} onTouched
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.registerOnTouched = function (onTouched) {
                    this.onTouchedCallback = onTouched;
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.onInputChange = function (event) {
                    if (!this.validateUserInput(event.target.value)) {
                        this._value = null;
                    }
                    else {
                        this._value = Number(event.target.value);
                    }
                    this.valueChange.emit(this._value);
                    this.onChangeCallback(this._value);
                };
                /**
                 * \@docs-private
                 * @param {?} input
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.validateUserInput = function (input) {
                    return !!input.match(ALLOWED_CHARACTERS);
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.increment = function () {
                    /** @type {?} */
                    var newValue;
                    if (this.isBetweenLimits(this._value)) {
                        newValue = this.getNextGreaterValue(this._value);
                    }
                    else {
                        newValue = this.enforceLimits(this._value);
                    }
                    this.value = newValue;
                    this.valueChange.emit(this._value);
                    this.onChangeCallback(this._value);
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.triggerResize = function () {
                    if (this.resize) {
                        this.autoResize.updateInputWidth();
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.decrement = function () {
                    /** @type {?} */
                    var newValue;
                    if (this.isBetweenLimits(this._value)) {
                        newValue = this.getNextLowerValue(this._value);
                    }
                    else {
                        newValue = this.enforceLimits(this._value);
                    }
                    this.value = newValue;
                    this.valueChange.emit(this._value);
                    this.onChangeCallback(this._value);
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.enforceLimits = function (value) {
                    if (value > this._max) {
                        return this._max;
                    }
                    else if (value < this._min) {
                        return this._min;
                    }
                    return value;
                };
                /**
                 * \@docs-private
                 * @param {?} start
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.getNextLowerValue = function (start) {
                    // if there is an invalid input start is null
                    if (!start) {
                        start = 0;
                    }
                    /** @type {?} */
                    var next;
                    if (this.isValidStep(start)) {
                        next = (new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](start).minus(new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](this._step))).toNumber();
                    }
                    else {
                        next = new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](start).toNearest(this._step, decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"].ROUND_DOWN).toNumber();
                    }
                    return this.enforceLimits(next);
                };
                /**
                 * \@docs-private
                 * @param {?} start
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.getNextGreaterValue = function (start) {
                    /** @type {?} */
                    var next;
                    if (!start) {
                        start = 0;
                    }
                    if (this.isValidStep(start)) {
                        next = (new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](start).plus(new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](this._step))).toNumber();
                    }
                    else {
                        next = new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](start).toNearest(this._step, decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"].ROUND_UP).toNumber();
                    }
                    return this.enforceLimits(next);
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.isBetweenLimits = function (value) {
                    return value <= this._max && value >= this._min;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.isMinimum = function () {
                    return this._value === this._min;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.isMaximum = function () {
                    return this._value === this._max;
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.isValidStep = function (value) {
                    if (value === null) {
                        value = new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](0);
                    }
                    /** @type {?} */
                    var min = new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](this._min);
                    /** @type {?} */
                    var valueDec = new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](value);
                    /** @type {?} */
                    var checkValue = (min.minus(valueDec)).mod(new decimal_js__WEBPACK_IMPORTED_MODULE_15__["Decimal"](this._step)).toNumber();
                    if (this.isBetweenLimits(value) && ((this.isMinimum() || this.isMaximum()) ||
                        checkValue === 0)) {
                        return true;
                    }
                    return false;
                };
                /**
                 * \@docs-private
                 * @param {?} value
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.userInputToNumber = function (value) {
                    /** @type {?} */
                    var current = value === '' ? 0 : value;
                    return parseInt(current, 10);
                };
                /**
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype._validateFn = function () {
                    // the manual user input must match min + n * step, e.g. minimum 1 step 2: 1, 3, 5, 7 etc.
                    if (!this.isValidStep(this._value)) {
                        return { nxNumberStepperStepError: 'Value is not a valid step' };
                    }
                    else if (this._value === null) {
                        return { nxNumberStepperFormatError: 'Not a valid number' };
                    }
                    return null;
                };
                /**
                 * \@docs-private
                 * @param {?} c
                 * @return {?}
                 */
                NxNumberStepperComponent.prototype.validate = function (c) {
                    return this._validateFn();
                };
                Object.defineProperty(NxNumberStepperComponent.prototype, "_buttonType", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return 'secondary' + (this.negative ? ' negative' : '');
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxNumberStepperComponent;
            }(_allianz_ngx_ndbx_core__WEBPACK_IMPORTED_MODULE_14__["MappedStyles"]));
            NxNumberStepperComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-number-stepper',
                            template: "<div *ngIf=\"label\" class=\"nx-stepper__label\">\n  <label [for]=\"inputId\">\n    {{label}}\n  </label>\n</div>\n<div #customLabel *ngIf=\"!label\" [id]=\"ariaDescribedBy\">\n  <ng-content></ng-content>\n</div>\n<div class=\"nx-stepper__input-container\">\n  <button\n    [attr.aria-label]=\"_intl.decrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__down nx-stepper__control\"\n    (click)=\"decrement()\"\n    [disabled]=\"value <= min\">\n    <nx-icon name=\"minus\" size=\"s\"></nx-icon>\n  </button>\n  <div class=\"nx-stepper__input-wrapper\">\n    <div class=\"nx-stepper__inner-wrapper\">\n        <ng-content select=\"nx-number-stepper-prefix\"></ng-content>\n\n        <input #numberInput [nxAutoResize]=\"resize\"\n        [attr.aria-describedby]=\"ariaDescribedBy\"\n        [id]=\"inputId\" [ngClass]=\"inputClassNames\"\n        (input)=\"onInputChange($event)\"\n        (keydown.arrowup)=\"increment()\"\n        (keydown.arrowdown)=\"decrement()\"/>\n\n        <ng-content select=\"nx-number-stepper-suffix\"></ng-content>\n    </div>\n    <div class=\"nx-stepper__input-underline\"></div>\n  </div>\n\n  <button\n    [attr.aria-label]=\"_intl.incrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__up nx-stepper__control\"\n    (click)=\"increment()\"\n    [disabled]=\"value >= max\">\n    <nx-icon name=\"plus\" size=\"s\"></nx-icon>\n  </button>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            inputs: ['classNames: nxSize'],
                            host: {
                                '[class.is-negative]': 'negative'
                            },
                            providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR],
                            styles: [":host{display:block}:host input{padding:0}.nx-stepper__input-container{align-items:flex-end;display:flex;margin-top:12px}.nx-stepper__label{display:flex;font-size:20px;line-height:28px}.nx-stepper__control{width:32px;height:32px;min-height:32px;font-size:24px;margin:0;padding:0}.nx-stepper__control:disabled{background-color:rgba(255,255,255,.4);border-color:#006192;color:#006192;opacity:.4}.nx-stepper__input{width:56px;min-width:56px}.nx-stepper__input,::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix{background:0 0;outline:0;border:0;text-align:center;color:#414141;font-size:20px;line-height:28px;height:28px}::ng-deep .nx-stepper__suffix{margin-left:4px}::ng-deep .nx-stepper__prefix{margin-right:4px}.nx-stepper__input-wrapper{display:flex;align-items:center;flex-direction:column;margin:0 16px}.nx-stepper__inner-wrapper{height:28px;display:flex;align-items:baseline}.nx-stepper__input-underline{width:100%;margin-top:2px;height:2px;background:#414141}:host.nx-stepper--big .nx-stepper__control{width:72px;min-height:48px;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input{width:72px;min-width:72px}:host.nx-stepper--big .nx-stepper__input,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{color:#414141;font-size:40px;line-height:48px;height:48px;letter-spacing:.3px;padding:0;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input-wrapper{margin:0 24px}:host.nx-stepper--big .nx-stepper__input-underline{margin-top:-2px}:host.nx-stepper--big .nx-stepper__inner-wrapper{height:48px}:host.is-negative .nx-stepper__label{color:#fff}:host.is-negative .nx-stepper__input{color:#fff}:host.is-negative .nx-stepper__input-underline{background:#fff}"]
                        }] }
            ];
            /** @nocollapse */
            NxNumberStepperComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: NxNumberStepperIntl }
            ]; };
            NxNumberStepperComponent.propDecorators = {
                numberInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['numberInput',] }],
                ngContentWrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['customLabel',] }],
                autoResize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [NxAutoResizeDirective,] }],
                valueChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"], args: ['nxValueChange',] }],
                resize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxResize',] }],
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxLabel',] }],
                style: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxStyle',] }],
                step: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxStep',] }],
                min: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxMin',] }],
                max: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxMax',] }],
                value: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxValue',] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                leadingZero: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive used to pass a suffix to the number stepper.
             */
            var NxNumberStepperPrefixDirective = /** @class */ (function () {
                function NxNumberStepperPrefixDirective() {
                }
                return NxNumberStepperPrefixDirective;
            }());
            NxNumberStepperPrefixDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-number-stepper-prefix',
                            host: {
                                'class': 'nx-stepper__prefix'
                            }
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive used to pass a suffix to the number stepper.
             */
            var NxNumberStepperSuffixDirective = /** @class */ (function () {
                function NxNumberStepperSuffixDirective() {
                }
                return NxNumberStepperSuffixDirective;
            }());
            NxNumberStepperSuffixDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-number-stepper-suffix',
                            host: {
                                'class': 'nx-stepper__suffix'
                            }
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxNumberStepperModule = /** @class */ (function () {
                function NxNumberStepperModule() {
                }
                return NxNumberStepperModule;
            }());
            NxNumberStepperModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _allianz_ngx_ndbx_input__WEBPACK_IMPORTED_MODULE_13__["NxInputModule"],
                                _angular_forms__WEBPACK_IMPORTED_MODULE_16__["FormsModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"],
                                _allianz_ngx_ndbx_button__WEBPACK_IMPORTED_MODULE_12__["NxButtonModule"],
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"]
                            ],
                            exports: [
                                NxNumberStepperComponent,
                                NxAutoResizeDirective,
                                NxNumberStepperPrefixDirective,
                                NxNumberStepperSuffixDirective
                            ],
                            declarations: [
                                NxNumberStepperComponent,
                                NxAutoResizeDirective,
                                NxNumberStepperPrefixDirective,
                                NxNumberStepperSuffixDirective
                            ],
                            providers: [NxNumberStepperIntl],
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DefaultPaginationTexts = {
                previous: 'Previous',
                next: 'Next',
                first: 'First',
                last: 'Last',
                ofLabel: 'of',
                ariaLabel: 'Please select your page'
            };
            /**
             * InjectionToken for pagination that can be used to override default locale code.
             * @type {?}
             */
            var NX_PAGINATION_TEXTS = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["InjectionToken"]('nx-pagination-texts');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxPaginationUtils = /** @class */ (function () {
                function NxPaginationUtils() {
                    this._pagesToShow = 3;
                    this._elipsisText = '...';
                    this._classExpanded = 'expanded-view';
                }
                /**
                 * @param {?} currentPage
                 * @param {?} totalPages
                 * @return {?}
                 */
                NxPaginationUtils.prototype.getPages = function (currentPage, totalPages) {
                    /** @type {?} */
                    var pages = [];
                    /** @type {?} */
                    var start = [];
                    /** @type {?} */
                    var middle = [];
                    /** @type {?} */
                    var end = [];
                    // First array -> start
                    start = this.getStartArray(currentPage, totalPages);
                    // Second array -> middle
                    middle = this.getMiddleArray(currentPage, totalPages);
                    // Third array -> end
                    end = this.getEndArray(currentPage, totalPages);
                    pages = __spread(start, middle, end);
                    return pages;
                };
                /**
                 * @param {?} currentPage
                 * @param {?} totalPages
                 * @return {?}
                 */
                NxPaginationUtils.prototype.getMiddleArray = function (currentPage, totalPages) {
                    /** @type {?} */
                    var pageNumber = currentPage < 6 ? 4 : currentPage - 1;
                    /** @type {?} */
                    var middle = [];
                    while (middle.length < 3 &&
                        pageNumber >= 2 &&
                        pageNumber <= totalPages - 3 &&
                        (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)) {
                        middle.push(this.createPaginationItem(pageNumber, pageNumber));
                        pageNumber++;
                    }
                    return middle;
                };
                /**
                 * @param {?} currentPage
                 * @param {?} totalPages
                 * @return {?}
                 */
                NxPaginationUtils.prototype.getEndArray = function (currentPage, totalPages) {
                    /** @type {?} */
                    var end = [];
                    /** @type {?} */
                    var currentItemToShow = totalPages <= 3 ? totalPages + 1 :
                        totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2;
                    /** @type {?} */
                    var showEllipsis = currentPage < totalPages - 4;
                    while (currentItemToShow <= totalPages) {
                        /** @type {?} */
                        var endItem = end.length === 0 && showEllipsis ?
                            this.createPaginationItem(this._elipsisText, currentItemToShow, true) :
                            this.createPaginationItem(currentItemToShow, currentItemToShow, true);
                        end.push(endItem);
                        currentItemToShow++;
                    }
                    return end;
                };
                /**
                 * @param {?} currentPage
                 * @param {?} totalPages
                 * @return {?}
                 */
                NxPaginationUtils.prototype.getStartArray = function (currentPage, totalPages) {
                    /** @type {?} */
                    var counterPages = 0;
                    /** @type {?} */
                    var start = [];
                    /** @type {?} */
                    var maxSizeArray = 3;
                    while (counterPages < maxSizeArray && counterPages < totalPages) {
                        /** @type {?} */
                        var startItem = counterPages === 2 && currentPage > 5 ?
                            this.createPaginationItem(this._elipsisText, counterPages, true) :
                            this.createPaginationItem(counterPages + 1, counterPages + 1, true);
                        start.push(startItem);
                        counterPages++;
                    }
                    return start;
                };
                /**
                 * @private
                 * @param {?} label
                 * @param {?} value
                 * @param {?=} classExpanded
                 * @return {?}
                 */
                NxPaginationUtils.prototype.createPaginationItem = function (label, value, classExpanded) {
                    return { label: label, value: value, class: classExpanded ? this._classExpanded : '' };
                };
                return NxPaginationUtils;
            }());
            NxPaginationUtils.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Injectable"] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPaginationComponent = /** @class */ (function () {
                /**
                 * @param {?} paginationTexts
                 * @param {?} paginationUtilsService
                 * @param {?} _changeDetectorRef
                 */
                function NxPaginationComponent(paginationTexts, paginationUtilsService, _changeDetectorRef) {
                    this.paginationUtilsService = paginationUtilsService;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._type = 'simple';
                    /**
                     * \@docs-private
                     */
                    this.totalNumberPages = 0;
                    /**
                     * An event emitted when the previous page button is clicked.
                     */
                    this.nxGoPrev = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * An event emitted when the next page button is clicked
                     */
                    this.nxGoNext = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * An event emitted when a page number is clicked.
                     * Provides the number of the page as parameter.
                     */
                    this.nxGoPage = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this.paginationTexts = paginationTexts || DefaultPaginationTexts;
                }
                Object.defineProperty(NxPaginationComponent.prototype, "page", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._page; },
                    /**
                     * Sets the current page.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._page = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPaginationComponent.prototype, "count", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._count; },
                    /**
                     * Number of total items over all pages.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._count = value;
                        this.totalNumberPages = this.calculateTotalPages();
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPaginationComponent.prototype, "perPage", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._perPage; },
                    /**
                     * Sets the number of items you want to show per page.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._perPage = value;
                        this.totalNumberPages = this.calculateTotalPages();
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxPaginationComponent.prototype, "type", {
                    /**
                     * @return {?}
                     */
                    get: function () { return this._type; },
                    /**
                     * Determines the type of pagination.
                     *
                     * Values: simple | advanced, default: simple.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._type = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxPaginationComponent.prototype.ngOnInit = function () {
                    this.totalNumberPages = this.calculateTotalPages();
                };
                /**
                 * @return {?}
                 */
                NxPaginationComponent.prototype.ngAfterContentInit = function () {
                    if (this.type === 'advanced' && (!this.paginationTexts.last || !this.paginationTexts.first)) {
                        console.warn('Please define aria labels for the last and first arrows.');
                    }
                };
                /**
                 * Returns the number of the first page.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.getMin = function () {
                    return ((this._perPage * this._page) - this._perPage) + 1;
                };
                /**
                 * Returns the number of the last page.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.getMax = function () {
                    /** @type {?} */
                    var max = this._perPage * this._page;
                    if (max > this._count) {
                        max = this._count;
                    }
                    return max;
                };
                /**
                 * Returns the total number of pages
                 * @return {?}
                 */
                NxPaginationComponent.prototype.calculateTotalPages = function () {
                    return Math.ceil(this._count / this._perPage) || 0;
                };
                /**
                 * Directs to the page with number n.
                 * @param {?} n
                 * @return {?}
                 */
                NxPaginationComponent.prototype.onPage = function (n) {
                    this.nxGoPage.emit(n);
                };
                /**
                 * Directs to the previous page.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.onPrev = function () {
                    if (!this._isPaginationPreviousDisabled()) {
                        this.nxGoPrev.emit();
                    }
                };
                /**
                 * Directs to the next page.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.onNext = function () {
                    if (!this._isPaginationNextDisabled()) {
                        this.nxGoNext.emit();
                    }
                };
                /**
                 * Directs to the first page.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.onFirst = function () {
                    if (!this._isPaginationPreviousDisabled()) {
                        this.onPage(1);
                    }
                };
                /**
                 * Directs to the last page.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.onLast = function () {
                    if (!this._isPaginationNextDisabled()) {
                        this.onPage(this.totalNumberPages);
                    }
                };
                /**
                 * Returns if the current page is the last page.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.lastPage = function () {
                    return this._perPage * this._page >= this._count;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPaginationComponent.prototype.getPages = function () {
                    return this.paginationUtilsService.getPages(this._page, this.totalNumberPages);
                };
                /**
                 * \@docs-private
                 * @param {?} page
                 * @return {?}
                 */
                NxPaginationComponent.prototype.getPaginationItemClasses = function (page) {
                    /** @type {?} */
                    var classes = {
                        'is-ellipsis': page.label === '...',
                        'nx-pagination__item--expanded-view': page.class === 'expanded-view'
                    };
                    return classes;
                };
                /**
                 * \@docs-private
                 * @param {?} page
                 * @return {?}
                 */
                NxPaginationComponent.prototype.getPaginationNumberClasses = function (page) {
                    /** @type {?} */
                    var classes = {
                        'is-active': page.value === this.page,
                        'nx-pagination__ellipsis': page.label === '...',
                        'nx-pagination__link': page.label !== '...'
                    };
                    return classes;
                };
                /**
                 * Returns true, if `nxCount` is greater than 0, else false.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.isPaginationVisible = function () {
                    return this.count > 0;
                };
                /**
                 * Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false.
                 * @return {?}
                 */
                NxPaginationComponent.prototype.isPaginationCompactVisible = function () {
                    return this.type.includes('simple') && this.count > 0;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxPaginationComponent.prototype.isPaginationContainerVisible = function () {
                    return this.type.includes('advanced');
                };
                /**
                 * @return {?}
                 */
                NxPaginationComponent.prototype._isPaginationPreviousDisabled = function () {
                    return this.page === this.getMin();
                };
                /**
                 * @return {?}
                 */
                NxPaginationComponent.prototype._isPaginationNextDisabled = function () {
                    return this.page === this.totalNumberPages;
                };
                return NxPaginationComponent;
            }());
            NxPaginationComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-pagination',
                            template: "<nav *ngIf=\"isPaginationVisible()\"  aria-label=\"Page navigation\" class=\"nx-pagination\" >\n  <ul *ngIf=\"isPaginationContainerVisible()\"  [attr.aria-label]=\"paginationTexts.ariaLabel\" class=\"nx-pagination__container\">\n    <li class=\"nx-pagination__item\">\n      <button\n        [attr.aria-label]=\"paginationTexts.first\"\n        [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n        [tabindex]=\"_isPaginationPreviousDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--first\"\n        (click)=\"onFirst()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-first\"></nx-icon>\n      </button>\n    </li>\n    <li class=\"nx-pagination__item nx-pagination__item-previous\">\n      <button\n        [attr.aria-label]=\"paginationTexts.previous\"\n        [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n        [tabindex]=\"_isPaginationPreviousDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--previous\"\n        (click)=\"onPrev()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-left\"></nx-icon>\n      </button>\n    </li>\n    <li *ngFor=\"let pageNum of getPages()\" class=\"nx-pagination__item\" [ngClass]=\"getPaginationItemClasses(pageNum)\">\n      <button class=\"nx-pagination--number\"\n        *ngIf=\"pageNum.label !== '...'\"\n        (click)=\"onPage(pageNum.value)\"\n        [attr.aria-curent]=\"pageNum.value === page\"\n        [ngClass]=\"getPaginationNumberClasses(pageNum)\">\n        {{ pageNum.label }}\n      </button>\n      <span *ngIf=\"pageNum.label === '...'\">\n        {{ pageNum.label }}\n      </span>\n    </li>\n    <li class=\"nx-pagination__item nx-pagination__item-next\">\n      <button\n        [attr.aria-label]=\"paginationTexts.next\"\n        [class.is-disabled]=\"_isPaginationNextDisabled()\"\n        [tabindex]=\"_isPaginationNextDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--next\"\n        (click)=\"onNext()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-right\"></nx-icon>\n      </button>\n    </li>\n    <li class=\"nx-pagination__item\">\n      <button\n        [attr.aria-label]=\"paginationTexts.last\"\n        [class.is-disabled]=\"_isPaginationNextDisabled()\"\n        [tabindex]=\"_isPaginationNextDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--last\"\n        (click)=\"onLast()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-last\"></nx-icon>\n      </button>\n    </li>\n  </ul>\n</nav>\n<nav *ngIf=\"isPaginationCompactVisible()\" [attr.aria-label]=\"paginationTexts.ariaLabel\" class=\"nx-pagination-compact\" >\n  <button [attr.aria-label]=\"paginationTexts.previous\"\n    class=\"nx-pagination-compact__previous\"\n    [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n    [tabindex]=\"_isPaginationPreviousDisabled() ? -1 : 0\"\n\n    (click)=\"onPrev()\">\n    <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-left\"></nx-icon>\n    <span class=\"nx-pagination-compact__direction-label\">\n      {{ paginationTexts.previous }}\n    </span>\n  </button>\n  <div class=\"nx-pagination-compact__display\">\n      <span class=\"nx-pagination-compact__current-page\">{{ page }}</span>\n      <span class=\"nx-pagination-compact__page-separator\"> {{ paginationTexts.ofLabel }} </span>\n      <span class=\"nx-pagination-compact__total-pages\">{{ totalNumberPages }}</span>\n  </div>\n  <button\n    class=\"nx-pagination-compact__next\"\n    [class.is-disabled]=\"_isPaginationNextDisabled()\"\n    [tabindex]=\"_isPaginationNextDisabled() ? -1 : 0\"\n    [attr.aria-label]=\"paginationTexts.next\"\n    (click)=\"onNext()\">\n    <span class=\"nx-pagination-compact__direction-label\"> {{ paginationTexts.next }} </span>\n    <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-right\"></nx-icon>\n  </button>\n</nav>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host button:focus{outline:0}:host button::-moz-focus-inner{border:0}.nx-pagination__container{display:flex;font-size:16px;margin:8px 0;padding:0}@media (min-width:704px){.nx-pagination__container{margin:8px 0 40px}}.nx-pagination__item{margin:0 16px;list-style:none}.nx-pagination__item:first-child,.nx-pagination__item:last-child{margin:0}.nx-pagination__item.is-ellipsis{font-weight:700}.nx-pagination__item--expanded-view{display:block}.nx-pagination__link{color:#006192;font-weight:600;padding:0;text-decoration:none;background-color:#fff;border:0;cursor:pointer}.nx-pagination__link.is-active{color:#414141;font-weight:700;cursor:default}nx-icon.nx-pagination__arrow{font-size:24px}.nx-pagination-compact{display:flex;font-size:16px;margin:16px 0;padding:0}@media (min-width:704px){.nx-pagination-compact{margin:40px 0}}.nx-pagination-compact__display{color:#414141;display:flex;line-height:24px}.nx-pagination-compact__current-page{font-weight:700;margin-right:8px}.nx-pagination-compact__total-pages{margin-left:8px}.nx-pagination-compact__next,.nx-pagination-compact__previous,.nx-pagination__arrow-first,.nx-pagination__arrow-last{color:#006192;font-weight:600;text-decoration:none;text-transform:uppercase;display:flex;align-items:center;padding:0;background-color:#fff;cursor:pointer;border:0}.nx-pagination-compact__previous{margin-right:32px}.nx-pagination-compact__next{margin-left:32px}.nx-pagination-compact__direction-label{display:block;letter-spacing:1px}.nx-pagination-compact__direction-label:first-child{margin-right:8px}.nx-pagination-compact__direction-label:last-child{margin-left:8px}.nx-pagination-compact__next.is-disabled,.nx-pagination-compact__previous.is-disabled,.nx-pagination__link.is-disabled{color:rgba(0,97,146,.4);cursor:not-allowed}:host-context([data-whatinput=keyboard]) .nx-pagination--number:focus,:host-context([data-whatinput=keyboard]) .nx-pagination-compact__next:focus,:host-context([data-whatinput=keyboard]) .nx-pagination-compact__previous:focus,:host-context([data-whatinput=keyboard]) .nx-pagination__link:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}.nx-pagination__link--first,.nx-pagination__link--last,.nx-pagination__link--next,.nx-pagination__link--previous{display:flex;align-items:center}.nx-pagination__item-next{margin-right:8px}.nx-pagination__item-previous{margin-left:8px}"]
                        }] }
            ];
            /** @nocollapse */
            NxPaginationComponent.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Inject"], args: [NX_PAGINATION_TEXTS,] }] },
                { type: NxPaginationUtils },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxPaginationComponent.propDecorators = {
                page: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPage',] }],
                count: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxCount',] }],
                perPage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxPerPage',] }],
                type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxType',] }],
                nxGoPrev: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                nxGoNext: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                nxGoPage: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxPaginationModule = /** @class */ (function () {
                function NxPaginationModule() {
                }
                return NxPaginationModule;
            }());
            NxPaginationModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"], _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ],
                            declarations: [
                                NxPaginationComponent
                            ],
                            exports: [
                                NxPaginationComponent
                            ],
                            providers: [
                                NxPaginationUtils
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var TableDataSource = /** @class */ (function (_super) {
                __extends(TableDataSource, _super);
                /**
                 * @param {?} _datachange
                 */
                function TableDataSource(_datachange) {
                    var _this = _super.call(this) || this;
                    _this._datachange = _datachange;
                    return _this;
                }
                /**
                 * \@docs-private Connect function called by the table to retrieve one stream containing the data to render.
                 * @return {?}
                 */
                TableDataSource.prototype.connect = function () {
                    return this._datachange;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                TableDataSource.prototype.disconnect = function () { };
                return TableDataSource;
            }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__["DataSource"]));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAPPING$2 = {
                light: 'nx-table--light',
                border: 'nx-table--light nx-table--with-border'
            };
            /** @type {?} */
            var DEFAULT_CLASSES$2 = ['nx-table '];
            var NxDynamicTableComponent = /** @class */ (function () {
                /**
                 * @param {?} el
                 * @param {?} _changeDetectorRef
                 */
                function NxDynamicTableComponent(el, _changeDetectorRef) {
                    this.el = el;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._tableStyles = '';
                    this._dataChange = new rxjs__WEBPACK_IMPORTED_MODULE_25__["BehaviorSubject"]([]);
                    this._classNames = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["mapClassNames"])('', DEFAULT_CLASSES$2, MAPPING$2);
                    /**
                     * An event is dispatched when a row is clicked.
                     */
                    this.nxRowClick = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                }
                Object.defineProperty(NxDynamicTableComponent.prototype, "data", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._data;
                    },
                    /**
                     * Sets the data that it will show in the table.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._data = value
                            .filter(( /**
                     * @param {?} element
                     * @return {?}
                     */function (/**
                     * @param {?} element
                     * @return {?}
                     */ element) { return element; }));
                        // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data
                        if (!this._displayedColumns) {
                            /** @type {?} */
                            var keys_2 = [];
                            /** @type {?} */
                            var cArray_1 = [];
                            // For catch keys of data Objects and assing title, key and type string by default to displayedColumns
                            this._data
                                .forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (/**
                         * @param {?} element
                         * @return {?}
                         */ element) {
                                for (var key in element) {
                                    if (keys_2.indexOf(key) === -1) {
                                        keys_2.push(key);
                                        cArray_1.push({ title: key, key: key, type: 'string' });
                                    }
                                }
                            }));
                            this._columnKeys = keys_2;
                            this._displayedColumns = cArray_1;
                            // need to call markForCheck as the setter changes displayedColumns here
                            // sidenote: isn't needed for the data itself as it gets passed to the cdk-table
                            // by the datasource observable
                            this._changeDetectorRef.markForCheck();
                        }
                        this._dataChange.next(this._data);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDynamicTableComponent.prototype, "displayedColumns", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._displayedColumns;
                    },
                    /**
                     * Sets the name order and type of columns.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._displayedColumns = value;
                        this._columnKeys = value.map(( /**
                         * @param {?} column
                         * @return {?}
                         */function (/**
                         * @param {?} column
                         * @return {?}
                         */ column) { return column.key; }));
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDynamicTableComponent.prototype, "styles", {
                    /**
                     * @deprecated The default and light header styling will be removed.
                     * \@deletion-target 8.0.0
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._tableStyles === value) {
                            return;
                        }
                        this._classNames = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["mapClassNames"])(value, DEFAULT_CLASSES$2, MAPPING$2);
                        this._tableStyles = value;
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDynamicTableComponent.prototype, "dataSource", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._dataSource;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDynamicTableComponent.prototype, "classNames", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxDynamicTableComponent.prototype, "columnKeys", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._columnKeys;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxDynamicTableComponent.prototype.ngOnInit = function () {
                    if (!this._data) {
                        this._data = [];
                        this._dataChange.next(this._data);
                    }
                    this._dataSource = new TableDataSource(this._dataChange);
                };
                /**
                 * \@docs-private
                 * @param {?} row
                 * @return {?}
                 */
                NxDynamicTableComponent.prototype.handleRowClick = function (row) {
                    this.nxRowClick.emit(row);
                };
                /**
                 * \@docs-private
                 * @param {?} element
                 * @return {?}
                 */
                NxDynamicTableComponent.prototype.isNumeric = function (element) {
                    if (element.type === 'numeric') {
                        return true;
                    }
                    return false;
                };
                return NxDynamicTableComponent;
            }());
            NxDynamicTableComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-dynamic-table',
                            template: "<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n  <div class=\"nx-table__scroll\">\n    <cdk-table [dataSource]=\"dataSource\" [ngClass]=\"classNames\">\n      <!-- Column Definition -->\n      <ng-container *ngFor=\"let element of displayedColumns\" cdkColumnDef=\"{{element.key}}\">\n        <cdk-header-cell *cdkHeaderCellDef class=\"nx-table__header-cell\"\n                         [ngClass]=\"{'nx-table__header-cell--number': isNumeric(element) }\">\n          <div class=\"nx-table__header-title--block\">\n            <span class=\"nx-table__header-title\"> {{element.title}}</span>\n          </div>\n        </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\" class=\"nx-table__cell\"\n                  [ngClass]=\"{'nx-table__cell--number': isNumeric(element) }\" [innerHTML]=\"row[element.key]\"></cdk-cell>\n      </ng-container>\n\n      <!-- Header and Row Declarations -->\n      <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n      <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\"\n               (dblclick)=\"handleRowClick(row)\"></cdk-row>\n\n    </cdk-table>\n  </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n  <ng-content></ng-content>\n</div>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [".nx-table{border-top:2px solid #d9d9d9;border-bottom:2px solid #414141;font-size:16px;text-align:left;width:100%;line-height:24px;color:#414141;display:table}.nx-table--light.nx-table{border-top:1px solid #d9d9d9}.nx-table__container{margin:32px 0}.nx-table__scroll{max-width:100%;overflow:hidden;overflow-x:auto}.nx-table__header-cell{background-color:#d9d9d9;border:1px solid #fff;border-right:none;color:#414141;padding:21px 16px 23px;position:relative;font-size:16px;line-height:24px;font-weight:700}.nx-table__header-row .nx-table__header-cell:last-child{border-right:1px solid #fff}.nx-table__header-row{background-color:#d9d9d9;border-spacing:1px none}.nx-table--light .nx-table__header-row{background-color:#fff;border-bottom:2px solid #414141;border-top:1px solid #d9d9d9}.nx-table__header-cell--number{display:flex;position:relative}.nx-table__header-cell--number .nx-table__header-title--block{justify-content:flex-end}.nx-table__cell{padding:24px 16px;vertical-align:top}.nx-table__cell--number,.nx-table__header-cell--number{text-align:right}.nx-table__row{background-color:#fff}.nx-table__header-row,.nx-table__row{display:table-row;vertical-align:inherit;border-color:inherit}.nx-table__row:nth-child(2n+1){background-color:#ececec}.nx-table--light.nx-table--with-border .nx-table__row{background-color:#fff}.nx-table--light .nx-table__header-cell{background-color:#fff;border:none;border-bottom:2px solid #414141;padding-top:23px;padding-bottom:22px}.nx-table--light.nx-table--with-border .nx-table__cell{padding-bottom:23px;border-bottom:1px solid #d9d9d9}.nx-table__row:last-child .nx-table__cell{padding-bottom:22px;border-bottom:none}.nx-table__cell,.nx-table__header-cell{display:table-cell;vertical-align:inherit}"]
                        }] }
            ];
            /** @nocollapse */
            NxDynamicTableComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxDynamicTableComponent.propDecorators = {
                data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxData',] }],
                displayedColumns: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxDisplayedColumns',] }],
                styles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxType',] }],
                nxRowClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxDynamicTableModule = /** @class */ (function () {
                function NxDynamicTableModule() {
                }
                return NxDynamicTableModule;
            }());
            NxDynamicTableModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxDynamicTableComponent],
                            exports: [NxDynamicTableComponent],
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_17__["CdkTableModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_18__["ScrollDispatchModule"]]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var DEFAULT_TYPE$4 = 'regular';
            var NxAccordionDirective$1 = /** @class */ (function (_super) {
                __extends(NxAccordionDirective$1, _super);
                function NxAccordionDirective$1() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this._style = 'regular';
                    _this._negative = null;
                    return _this;
                }
                Object.defineProperty(NxAccordionDirective$1.prototype, "style", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._style;
                    },
                    /**
                     * Value for the styling that should be chosen.
                     * Default value: 'regular'
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = value ? value : DEFAULT_TYPE$4;
                        var _b = __read(value.match(/regular|light/) || [DEFAULT_TYPE$4], 1), newValue = _b[0];
                        this._style = ( /** @type {?} */(newValue));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxAccordionDirective$1.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative set of styles should be used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxAccordionDirective$1;
            }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_20__["CdkAccordion"]));
            NxAccordionDirective$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-accordion',
                            host: {
                                '[class.nx-accordion]': 'true',
                                'role': 'presentation'
                            }
                        },] }
            ];
            NxAccordionDirective$1.propDecorators = {
                style: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxStyle',] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nxAccordionAnimations = {
                bodyExpansion: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["trigger"])('bodyExpansion', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["state"])('closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ height: '0px', visibility: 'hidden' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["state"])('open', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ height: '*', visibility: 'visible' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])('open <=> closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])('.5s cubic-bezier(0.86, 0, 0.07, 1)'))
                ]),
                indicatorRotate: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["trigger"])('indicatorRotate', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["state"])('closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ transform: 'rotate(0deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["state"])('open', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ transform: 'rotate(180deg)' })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])('open <=> closed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])('.3s ease')),
                ])
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxExpansionPanelBodyDirective = /** @class */ (function () {
                /**
                 * @param {?} _template
                 */
                function NxExpansionPanelBodyDirective(_template) {
                    this._template = _template;
                }
                return NxExpansionPanelBodyDirective;
            }());
            NxExpansionPanelBodyDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{ selector: '[nxExpansionPanelBody]' },] }
            ];
            /** @nocollapse */
            NxExpansionPanelBodyDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var nextId$c = 0;
            /** @type {?} */
            var DEFAULT_TYPE$5 = 'regular';
            var ɵ0 = undefined;
            var NxExpansionPanelComponent$1 = /** @class */ (function (_super) {
                __extends(NxExpansionPanelComponent$1, _super);
                /**
                 * @param {?} accordion
                 * @param {?} _changeDetectorRef
                 * @param {?} _expansionDispatcher
                 * @param {?} _viewContainerRef
                 */
                function NxExpansionPanelComponent$1(accordion, _changeDetectorRef, _expansionDispatcher, _viewContainerRef) {
                    var _this = _super.call(this, accordion, _changeDetectorRef, _expansionDispatcher) || this;
                    _this._viewContainerRef = _viewContainerRef;
                    _this._negative = null;
                    _this._accordionStyle = DEFAULT_TYPE$5;
                    _this._style = null;
                    _this._headerId = "nx-expansion-panel-header-" + nextId$c++;
                    /**
                     * Stream that emits for changes in `\@Input` properties.
                     */
                    _this._inputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    _this.accordion = accordion;
                    return _this;
                }
                Object.defineProperty(NxExpansionPanelComponent$1.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the negative set of styles should be used.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxExpansionPanelComponent$1.prototype, "style", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._style;
                    },
                    /**
                     * Value for the styling that should be chosen.
                     * Default value: 'regular'.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        value = value ? value : DEFAULT_TYPE$5;
                        var _b = __read(value.match(/regular|light/) || [DEFAULT_TYPE$5], 1), newValue = _b[0];
                        this._style = ( /** @type {?} */(newValue));
                        this._accordionStyle = ( /** @type {?} */(newValue));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxExpansionPanelComponent$1.prototype, "portal", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._portal;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxExpansionPanelComponent$1.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    if (this.lazyContent) {
                        // Render the content as soon as the panel becomes open.
                        this.opened.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["startWith"])(null), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                         * @return {?}
                         */function () { return _this.expanded && !_this._portal; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["take"])(1)).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["TemplatePortal"](_this.lazyContent._template, _this._viewContainerRef);
                        }));
                    }
                    // Inherit appearance given by the accordion (if any).
                    if (Boolean(this.accordion)) {
                        if (this.style === null && this.accordion.style !== null) {
                            this.style = this.accordion.style;
                        }
                        if (this.negative === null && this.accordion.negative !== null) {
                            this.negative = this.accordion.negative;
                        }
                    }
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                NxExpansionPanelComponent$1.prototype.ngOnChanges = function (changes) {
                    this._inputChanges.next(changes);
                };
                /**
                 * @return {?}
                 */
                NxExpansionPanelComponent$1.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    this._inputChanges.complete();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxExpansionPanelComponent$1.prototype.getOpenState = function () {
                    return this.expanded ? 'open' : 'closed';
                };
                return NxExpansionPanelComponent$1;
            }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_20__["CdkAccordionItem"]));
            NxExpansionPanelComponent$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-expansion-panel',
                            exportAs: 'NxExpansionPanelComponent',
                            template: "<ng-content select=\"nx-expansion-panel-header\"></ng-content>\n\n<div class=\"nx-expansion-panel__content\" role=\"region\" [@bodyExpansion]=\"getOpenState()\"\n  [attr.aria-labelledby]=\"_headerId\" [id]=\"id\">\n  <div class=\"nx-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            animations: [nxAccordionAnimations.bodyExpansion],
                            host: {
                                '[class.nx-expanded]': 'expanded',
                                '[class.nx-expansion-panel--light]': '_accordionStyle === "light"',
                                '[class.nx-expansion-panel--regular]': '_accordionStyle === "regular"',
                                '[class.nx-expansion-panel--negative]': 'negative'
                            },
                            providers: [
                                // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering
                                // to the same accordion.
                                { provide: NxAccordionDirective$1, useValue: ɵ0 },
                            ],
                            styles: [":host{display:block}:host(.nx-expansion-panel--negative) ::ng-deep div.nx-expansion-panel__body *{color:#fff}.nx-expansion-panel__content{overflow:hidden;display:block}.nx-expansion-panel__body{font-size:16px;line-height:24px;padding:24px 88px 32px 32px}@media (max-width:703px){.nx-expansion-panel__body{padding:24px 16px 32px}:host:last-child ::ng-deep .nx-expansion-panel__header-content,:host:only-child ::ng-deep .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-content{border-top:1px solid #d9d9d9;border-bottom:none}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__body{padding-top:0}:host(.nx-expansion-panel--light):first-child ::ng-deep .nx-expansion-panel__header-content{border-top:none}"]
                        }] }
            ];
            /** @nocollapse */
            NxExpansionPanelComponent$1.ctorParameters = function () { return [
                { type: NxAccordionDirective$1, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["SkipSelf"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_19__["UniqueSelectionDispatcher"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewContainerRef"] }
            ]; };
            NxExpansionPanelComponent$1.propDecorators = {
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                style: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"], args: ['nxStyle',] }],
                lazyContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChild"], args: [NxExpansionPanelBodyDirective,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxExpansionPanelHeaderComponent = /** @class */ (function () {
                /**
                 * @param {?} panel
                 * @param {?} _changeDetectorRef
                 */
                function NxExpansionPanelHeaderComponent(panel, _changeDetectorRef) {
                    var _this = this;
                    this.panel = panel;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._parentChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                    this._parentChangeSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"])(panel.opened, panel.closed, panel._inputChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["filter"])(( /**
                     * @param {?} changes
                     * @return {?}
                     */function (/**
                     * @param {?} changes
                     * @return {?}
                     */ changes) { return !!(changes.hideToggle || changes.disabled); }))))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this._changeDetectorRef.markForCheck(); }));
                }
                /**
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.ngOnDestroy = function () {
                    this._parentChangeSubscription.unsubscribe();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.isExpanded = function () {
                    return this.panel.expanded;
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.getOpenState = function () {
                    return this.panel.getOpenState();
                };
                /**
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype._getPanelId = function () {
                    return this.panel.id;
                };
                /**
                 * Toggle the expansion panel.
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.toggle = function () {
                    this.panel.toggle();
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxExpansionPanelHeaderComponent.prototype.keydown = function (event) {
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SPACE"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"]:
                            event.preventDefault();
                            this.toggle();
                            break;
                        default:
                            return;
                    }
                };
                return NxExpansionPanelHeaderComponent;
            }());
            NxExpansionPanelHeaderComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-expansion-panel-header',
                            template: "<div class=\"nx-expansion-panel__header-content\">\n  <ng-content select=\"nx-expansion-panel-title\"></ng-content>\n  <ng-content select=\"nx-expansion-panel-description\"></ng-content>\n  <nx-icon\n    [@indicatorRotate]=\"getOpenState()\"\n    class=\"nx-expansion-panel__chevron\"\n    name=\"chevron-down\">\n  </nx-icon>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            animations: [nxAccordionAnimations.indicatorRotate],
                            host: {
                                '[class.nx-expanded]': 'isExpanded()',
                                'class': 'nx-expansion-panel__header',
                                'role': 'button',
                                '[attr.id]': 'panel._headerId',
                                '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                                '[attr.aria-controls]': '_getPanelId()',
                                '[attr.aria-expanded]': 'isExpanded()',
                                '[attr.aria-disabled]': 'panel.disabled',
                                '(keydown)': 'keydown($event)',
                                '(click)': 'toggle()'
                            },
                            styles: [":host:focus{outline:0}.nx-expansion-panel__header-content{width:100%;cursor:pointer;align-items:center;color:#414141;display:flex;justify-content:space-between;position:relative;padding:24px 32px;margin-top:16px;background:#f5f5f5;outline:0;border:none}::ng-deep .nx-expansion-panel__header-title{font-size:26px;font-weight:300;line-height:32px;letter-spacing:.3px;text-align:left;margin-right:32px}:host-context(.nx-expansion-panel--negative) .nx-expansion-panel__header-content{background-color:#fff}.nx-expansion-panel__chevron{color:#006192;pointer-events:none;font-size:24px}:host-context(.nx-expansion-panel--light) .nx-expansion-panel__header-content{margin-top:0;background:0 0}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{color:#006192;letter-spacing:.2px;font-weight:400;font-size:20px;line-height:28px}@media (max-width:703px){.nx-expansion-panel__header-content{padding:16px;margin-top:0;border-top:1px solid #d9d9d9}::ng-deep .nx-expansion-panel__header-title{font-size:20px;line-height:28px;margin-right:16px;font-weight:400}:host(.nx-expanded) .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{line-height:24px;font-size:16px}:host-context(.nx-expansion-panel--light.nx-expanded) .nx-expansion-panel__header-content{border-bottom:none}}:host[aria-disabled=true] .nx-expansion-panel__header-content{cursor:not-allowed}:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__chevron,:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__header-title{color:#c2c2c2}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content{border-color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-title{color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__chevron{color:#fff}:host-context([data-whatinput=keyboard]):focus .nx-expansion-panel__header-content{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-top-color:transparent;z-index:1}"]
                        }] }
            ];
            /** @nocollapse */
            NxExpansionPanelHeaderComponent.ctorParameters = function () { return [
                { type: NxExpansionPanelComponent$1, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Host"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            /**
             * This directive is to be used inside of the NxExpansionPanelHeader component.
             */
            var NxExpansionPanelDescriptionDirective = /** @class */ (function () {
                function NxExpansionPanelDescriptionDirective() {
                }
                return NxExpansionPanelDescriptionDirective;
            }());
            NxExpansionPanelDescriptionDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-expansion-panel-description',
                            host: {
                                class: 'nx-expansion-panel__header-description'
                            }
                        },] }
            ];
            /**
             * This directive is to be used inside of the NxExpansionPanelHeader component.
             */
            var NxExpansionPanelTitleDirective = /** @class */ (function () {
                function NxExpansionPanelTitleDirective() {
                }
                return NxExpansionPanelTitleDirective;
            }());
            NxExpansionPanelTitleDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            // tslint:disable-next-line:directive-selector
                            selector: 'nx-expansion-panel-title',
                            host: {
                                class: 'nx-expansion-panel__header-title'
                            }
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxAccordionModule$1 = /** @class */ (function () {
                function NxAccordionModule$1() {
                }
                return NxAccordionModule$1;
            }());
            NxAccordionModule$1.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["PortalModule"],
                                _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_22__["NxIconModule"]
                            ],
                            exports: [
                                NxAccordionDirective$1,
                                NxExpansionPanelComponent$1,
                                NxExpansionPanelHeaderComponent,
                                NxExpansionPanelDescriptionDirective,
                                NxExpansionPanelTitleDirective,
                                NxExpansionPanelBodyDirective
                            ],
                            declarations: [
                                NxAccordionDirective$1,
                                NxExpansionPanelComponent$1,
                                NxExpansionPanelHeaderComponent,
                                NxExpansionPanelDescriptionDirective,
                                NxExpansionPanelTitleDirective,
                                NxExpansionPanelBodyDirective
                            ],
                            providers: [],
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             * @abstract
             */
            var NxTabGroupBase = /** @class */ (function () {
                function NxTabGroupBase() {
                }
                return NxTabGroupBase;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTabComponent = /** @class */ (function () {
                /**
                 * @param {?} _viewContainerRef
                 * @param {?} _tabGroup
                 */
                function NxTabComponent(_viewContainerRef, _tabGroup) {
                    this._viewContainerRef = _viewContainerRef;
                    this._tabGroup = _tabGroup;
                    /**
                     * The portal that will be the hosted content of the tab
                     */
                    this._contentPortal = null;
                    /**
                     * Emits whenever the internal state of the tab changes.
                     */
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__["Subject"]();
                    /**
                     * Whether the tab is currently active.
                     */
                    this.isActive = false;
                    if (!this._tabGroup) {
                        throw Error("The nx-tab element has to be wrapped in a nx-tab-group to work.\n      Please provide a nx-tab-group element and place your tabs inside it.");
                    }
                }
                Object.defineProperty(NxTabComponent.prototype, "label", {
                    /**
                     * Sets the label of the tab shown in the tablist.
                     * @return {?}
                     */
                    get: function () {
                        return this._label;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._label !== value) {
                            this._label = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTabComponent.prototype, "content", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () {
                        return this._contentPortal;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                NxTabComponent.prototype.ngOnChanges = function (changes) {
                    if (changes.hasOwnProperty('label')) {
                        this._stateChanges.next();
                    }
                };
                /**
                 * @return {?}
                 */
                NxTabComponent.prototype.ngOnInit = function () {
                    this._contentPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["TemplatePortal"](this._implicitContent, this._viewContainerRef);
                };
                /**
                 * @return {?}
                 */
                NxTabComponent.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                return NxTabComponent;
            }());
            NxTabComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-tab',
                            exportAs: 'nxTab',
                            template: "<ng-template><ng-content></ng-content></ng-template>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush
                        }] }
            ];
            /** @nocollapse */
            NxTabComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewContainerRef"] },
                { type: NxTabGroupBase, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Inject"], args: [NxTabGroupBase,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Host"] }] }
            ]; };
            NxTabComponent.propDecorators = {
                label: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                _implicitContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_31__["TemplateRef"],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxTabBodyComponent = /** @class */ (function () {
                function NxTabBodyComponent() {
                    this._active = false;
                }
                Object.defineProperty(NxTabBodyComponent.prototype, "active", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._active;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._active = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (this._active) {
                            this.attach();
                        }
                        else {
                            this.detach();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxTabBodyComponent.prototype.attach = function () {
                    if (!this.portalOutlet.hasAttached()) {
                        this.portalOutlet.attach(this.content);
                    }
                };
                /**
                 * @return {?}
                 */
                NxTabBodyComponent.prototype.detach = function () {
                    if (this.portalOutlet.hasAttached()) {
                        this.portalOutlet.detach();
                    }
                };
                return NxTabBodyComponent;
            }());
            NxTabBodyComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-tab-body',
                            template: "<ng-template cdkPortalOutlet></ng-template>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{display:block}"]
                        }] }
            ];
            NxTabBodyComponent.propDecorators = {
                content: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                portalOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["CdkPortalOutlet"],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxTabLabelDirective = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 */
                function NxTabLabelDirective(elementRef) {
                    this.elementRef = elementRef;
                }
                /**
                 * @return {?}
                 */
                NxTabLabelDirective.prototype.focus = function () {
                    this.elementRef.nativeElement.focus();
                };
                return NxTabLabelDirective;
            }());
            NxTabLabelDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{ selector: '[nxTabLabel]' },] }
            ];
            /** @nocollapse */
            NxTabLabelDirective.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * \@docs-private
             */
            var NxTabHeaderComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxTabHeaderComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._selectedIndex = 0;
                    this._autoselect = true;
                    this.selectFocusedIndex = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this.indexFocused = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                }
                Object.defineProperty(NxTabHeaderComponent.prototype, "selectedIndex", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._selectedIndex;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selectedIndex = value;
                        if (this._keyManager) {
                            this._keyManager.updateActiveItemIndex(value);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTabHeaderComponent.prototype, "focusIndex", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._keyManager ? this._keyManager.activeItemIndex : 0;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {
                            return;
                        }
                        this._keyManager.setActiveItem(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTabHeaderComponent.prototype, "autoselect", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._autoselect;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._autoselect = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxTabHeaderComponent.prototype.ngOnInit = function () { };
                /**
                 * @return {?}
                 */
                NxTabHeaderComponent.prototype.ngAfterContentInit = function () {
                    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_27__["FocusKeyManager"](this.labels).withHorizontalOrientation('ltr').withWrap();
                    this._keyManager.updateActiveItemIndex(0);
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * @private
                 * @param {?} idx
                 * @return {?}
                 */
                NxTabHeaderComponent.prototype._isValidIndex = function (idx) {
                    if (!this.labels) {
                        return true;
                    }
                    return !!this.labels.toArray()[idx];
                };
                /**
                 * Handles keyboard inputs on the labels
                 * If autoselect is enabled the tab gets changed immediately
                 * If autoselect is disabled only the focus changes but the user still has to select the item
                 * by himself
                 * @param {?} event
                 * @return {?}
                 */
                NxTabHeaderComponent.prototype.handleKeydown = function (event) {
                    switch (event.keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["HOME"]:
                            this._keyManager.setFirstItemActive();
                            event.preventDefault();
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["END"]:
                            this._keyManager.setLastItemActive();
                            event.preventDefault();
                            break;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"]:
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SPACE"]:
                            this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);
                            event.preventDefault();
                            break;
                        default:
                            this._keyManager.onKeydown(event);
                    }
                    if (this.autoselect) {
                        this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);
                    }
                    else if (event.keyCode !== _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["ENTER"] && event.keyCode !== _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_28__["SPACE"]) {
                        this.indexFocused.emit(this._keyManager.activeItemIndex);
                    }
                };
                return NxTabHeaderComponent;
            }());
            NxTabHeaderComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-tab-header',
                            template: "<div class=\"nx-tab-header\" (keydown)=\"handleKeydown($event)\" role=\"tablist\">\n  <ng-content></ng-content>\n</div>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            styles: [":host{display:block}.nx-tab-header{display:flex;align-items:flex-end;justify-content:center;padding:60px 0}"]
                        }] }
            ];
            /** @nocollapse */
            NxTabHeaderComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxTabHeaderComponent.propDecorators = {
                selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                autoselect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                selectFocusedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                indexFocused: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                labels: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxTabLabelDirective,] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTabChangeEvent = /** @class */ (function () {
                function NxTabChangeEvent() {
                }
                return NxTabChangeEvent;
            }());
            /** @type {?} */
            var nextId$d = 0;
            /** @type {?} */
            var MOBILE_BREAKPOINT = 480;
            var NxTabGroupComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxTabGroupComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._selectedIndex = null;
                    this._negative = false;
                    this._indexToSelect = 0;
                    this._autoselect = true;
                    this._mobileAccordion = true;
                    this._showAccordion = false;
                    /**
                     * An event emitted when the selected tab has changed.
                     */
                    this.selectedIndexChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * An event emitted when the selected tab has changed.
                     */
                    this.selectedTabChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * An event emitted when focus has changed within a tab group.
                     *
                     * **Note:** is not supported in mobile view.
                     */
                    this.focusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    /**
                     * Subscription to tabs being added/removed.
                     */
                    this._tabsSubscription = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                    /**
                     * Subscription to changes in the tab labels.
                     */
                    this._tabLabelSubscription = rxjs__WEBPACK_IMPORTED_MODULE_25__["Subscription"].EMPTY;
                    this._groupId = nextId$d++;
                }
                Object.defineProperty(NxTabGroupComponent.prototype, "selectedIndex", {
                    /**
                     * Sets the selected tab.
                     * @return {?}
                     */
                    get: function () {
                        return this._selectedIndex;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._indexToSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceNumberProperty"])(value, null);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTabGroupComponent.prototype, "negative", {
                    /**
                     * Whether the negative set of styling should be used.
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._negative) {
                            this._negative = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTabGroupComponent.prototype, "autoselect", {
                    /**
                     * Whether the tab should be immediately selected on focus.
                     * @return {?}
                     */
                    get: function () {
                        return this._autoselect;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._autoselect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxTabGroupComponent.prototype, "mobileAccordion", {
                    /**
                     * Whether the tabs should to accordion on mobile viewports.
                     * @return {?}
                     */
                    get: function () {
                        return this._mobileAccordion;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._mobileAccordion = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.ngOnInit = function () {
                    this._switchAppearance(window.innerWidth);
                };
                /**
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._subscribeToTabLabels();
                    // Subscribe to changes in the amount of tabs, in order to be
                    // able to re-render the content as new tabs are added or removed.
                    this._tabsSubscription = this.tabs.changes.subscribe(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var indexToSelect = _this._clampTabIndex(_this._indexToSelect);
                        // Maintain the previously-selected tab if a new tab is added or removed and there is no
                        // explicit change that selects a different tab.
                        if (indexToSelect === _this._selectedIndex) {
                            /** @type {?} */
                            var tabs = _this.tabs.toArray();
                            for (var i = 0; i < tabs.length; i++) {
                                if (tabs[i].isActive) {
                                    // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed
                                    // event, otherwise the consumer may end up in an infinite loop in some edge cases like
                                    // adding a tab within the `selectedIndexChange` event.
                                    _this._indexToSelect = _this._selectedIndex = i;
                                    break;
                                }
                            }
                        }
                        _this._changeDetectorRef.markForCheck();
                    }));
                };
                /**
                 * After the content is checked, this component knows what tabs have been defined
                 * and what the selected index should be.
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.ngAfterContentChecked = function () {
                    var _this = this;
                    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
                    // the amount of tabs changes before the actual change detection runs.
                    /** @type {?} */
                    var indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);
                    // If there is a change in selected index, emit a change event. Should not trigger if
                    // the selected index has not yet been initialized.
                    if (this._selectedIndex !== indexToSelect) {
                        /** @type {?} */
                        var isFirstRun_1 = this._selectedIndex == null;
                        if (!isFirstRun_1) {
                            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));
                        }
                        // Changing these values after change detection has run
                        // since the checked content may contain references to them.
                        Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this.tabs.forEach(( /**
                             * @param {?} tab
                             * @param {?} index
                             * @return {?}
                             */function (tab, index) { return tab.isActive = index === indexToSelect; }));
                            if (!isFirstRun_1) {
                                _this.selectedIndexChange.emit(indexToSelect);
                            }
                        }));
                    }
                    if (this._selectedIndex !== indexToSelect) {
                        this._selectedIndex = indexToSelect;
                        this._changeDetectorRef.markForCheck();
                    }
                };
                /**
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.ngOnDestroy = function () {
                    this._tabsSubscription.unsubscribe();
                    this._tabLabelSubscription.unsubscribe();
                };
                /**
                 * Subscribes to changes in the tab labels. This is needed, because the \@Input for the label is
                 * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the
                 * binding to be updated, we need to subscribe to changes in it and trigger change detection
                 * manually.
                 * @private
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._subscribeToTabLabels = function () {
                    var _this = this;
                    if (this._tabLabelSubscription) {
                        this._tabLabelSubscription.unsubscribe();
                    }
                    this._tabLabelSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_25__["merge"]).apply(void 0, __spread(this.tabs.map(( /**
                     * @param {?} tab
                     * @return {?}
                     */function (/**
                     * @param {?} tab
                     * @return {?}
                     */ tab) { return tab._stateChanges; })))).subscribe(( /**
                 * @return {?}
                 */function () { return _this._changeDetectorRef.markForCheck(); }));
                };
                /**
                 * Clamps the given index to the bounds of 0 and the tabs length.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._clampTabIndex = function (index) {
                    // Note the `|| 0`, which ensures that values like NaN can't get through
                    // and which would otherwise throw the component into an infinite loop
                    // (since Math.max(NaN, 0) === NaN).
                    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));
                };
                /**
                 * \@docs-private
                 * @param {?} index
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.focusChanged = function (index) {
                    this.focusChange.emit(this._createChangeEvent(index));
                };
                /**
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._createChangeEvent = function (index) {
                    /** @type {?} */
                    var event = new NxTabChangeEvent;
                    event.index = index;
                    if (this.tabs && this.tabs.length) {
                        event.tab = this.tabs.toArray()[index];
                    }
                    return event;
                };
                /**
                 * \@docs-private
                 * @param {?} index
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.handleClick = function (index) {
                    this.selectedIndex = this.tabHeader.focusIndex = index;
                };
                /**
                 * \@docs-private
                 * Returns the tabindex for a tab label
                 * @param {?} tab
                 * @param {?} idx
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.getTabIndex = function (tab, idx) {
                    return this.selectedIndex === idx ? 0 : -1;
                };
                /**
                 * Returns a unique id for each tab label element
                 * @param {?} i
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._getTabLabelId = function (i) {
                    return "nx-tab-label-" + this._groupId + "-" + i;
                };
                /**
                 * Returns a unique id for each tab content element
                 * @param {?} i
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._getTabContentId = function (i) {
                    return "nx-tab-content-" + this._groupId + "-" + i;
                };
                /**
                 * \@docs-private
                 * @param {?} event
                 * @return {?}
                 */
                NxTabGroupComponent.prototype.onResize = function (event) {
                    this._switchAppearance(event.target.innerWidth);
                };
                /**
                 * @private
                 * @param {?} viewPortWidth
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._switchAppearance = function (viewPortWidth) {
                    if (!this._mobileAccordion) {
                        return;
                    }
                    if (viewPortWidth <= MOBILE_BREAKPOINT && !this._showAccordion) {
                        this._showMobileVersion();
                    }
                    else if (viewPortWidth > MOBILE_BREAKPOINT && this._showAccordion) {
                        this._showDesktopVersion();
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._showMobileVersion = function () {
                    this._showAccordion = true;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * @private
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._showDesktopVersion = function () {
                    this._showAccordion = false;
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Emulate the tab change event when an accordion panel is opened in
                 * mobile viewports.
                 * @param {?} index
                 * @return {?}
                 */
                NxTabGroupComponent.prototype._panelOpened = function (index) {
                    this.selectedIndex = index;
                };
                return NxTabGroupComponent;
            }());
            NxTabGroupComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-tab-group',
                            template: "\n  <nx-tab-header *ngIf=\"!_showAccordion\"\n      #tabHeader\n      [selectedIndex]=\"selectedIndex\"\n      (selectFocusedIndex)=\"selectedIndex = $event\"\n      (indexFocused)=\"focusChanged($event)\"\n      [autoselect]=\"autoselect\">\n    <button\n      type=\"button\"\n      nxTabLabel\n      *ngFor=\"let tab of tabs; let i = index\"\n      role=\"tab\"\n      (click)=\"handleClick(i)\"\n      class=\"nx-tab-header__item\"\n      [id]=\"_getTabLabelId(i)\"\n      [attr.aria-controls]=\"_getTabContentId(i)\"\n      [attr.aria-selected]=\"selectedIndex == i\"\n      [attr.tabindex]=\"getTabIndex(tab, i)\"\n      [class.nx-tab-header__item--active]=\"selectedIndex == i\">\n      {{tab.label}}\n    </button>\n  </nx-tab-header>\n\n  <div class=\"nx-tab-body__container\">\n    <nx-tab-body\n      *ngFor=\"let tab of tabs; let i = index\"\n      [id]=\"_getTabContentId(i)\"\n      role=\"tabpanel\"\n      [attr.tabindex]=\"(!_showAccordion && selectedIndex == i) ? 0 : -1\"\n      class=\"nx-tab__body\"\n      [attr.aria-labelledby]=\"_getTabContentId(i)\"\n      [class.nx-tab__body--active]=\"selectedIndex == i\"\n      [content]=\"tab.content\"\n      [active]=\"!_showAccordion && selectedIndex == i\"\n    ></nx-tab-body>\n  </div>\n\n  <nx-accordion *ngIf=\"_showAccordion\" [negative]=\"negative\">\n    <nx-expansion-panel *ngFor=\"let tab of tabs; let i = index\" [expanded]=\"selectedIndex === i\" (opened)=\"_panelOpened(i)\">\n      <nx-expansion-panel-header>\n        <nx-expansion-panel-title>{{tab.label}}</nx-expansion-panel-title>\n      </nx-expansion-panel-header>\n      <ng-template [cdkPortalOutlet]=\"tab.content\"></ng-template>\n    </nx-expansion-panel>\n  </nx-accordion>\n",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.is-negative]': 'negative'
                            },
                            providers: [{ provide: NxTabGroupBase, useExisting: NxTabGroupComponent }],
                            styles: [":host{display:block}.nx-tab-header__item{text-decoration:none;border:none;background:0 0;color:#006192;border-bottom:2px solid #007ab3;padding:0 16px 6px;font-weight:400;font-size:18px;line-height:24px;outline:0}.nx-tab-header__item::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .nx-tab-header__item:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}.nx-tab-header__item--active{border-width:4px;font-weight:700;transition:font-weight .3s;padding-bottom:4px}:host(.is-negative){color:#fff}:host(.is-negative) .nx-tab-header__item{color:#fff;border-bottom-color:#fff}"]
                        }] }
            ];
            /** @nocollapse */
            NxTabGroupComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxTabGroupComponent.propDecorators = {
                tabs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ContentChildren"], args: [NxTabComponent,] }],
                tabBodyChildren: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChildren"], args: [NxTabBodyComponent,] }],
                tabHeader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: ['tabHeader',] }],
                panels: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChildren"], args: [_allianz_ngx_ndbx_accordion__WEBPACK_IMPORTED_MODULE_26__["NxExpansionPanelComponent"],] }],
                accordion: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ViewChild"], args: [_allianz_ngx_ndbx_accordion__WEBPACK_IMPORTED_MODULE_26__["NxAccordionDirective"],] }],
                selectedIndex: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                autoselect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                mobileAccordion: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                selectedIndexChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                selectedTabChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                focusChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }],
                onResize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["HostListener"], args: ['window:resize', ['$event'],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTabNavBarComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 */
                function NxTabNavBarComponent(_changeDetectorRef) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._negative = false;
                }
                Object.defineProperty(NxTabNavBarComponent.prototype, "negative", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._negative;
                    },
                    /**
                     * Whether the tab nav bar has negative styling.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this.negative) {
                            this._negative = newValue;
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxTabNavBarComponent;
            }());
            NxTabNavBarComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            selector: 'nx-tab-nav-bar',
                            template: "<ng-content></ng-content>",
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                '[class.is-negative]': 'negative',
                                'role': 'navigation',
                            },
                            styles: [":host{display:flex;align-items:flex-end;justify-content:center}:host ::ng-deep a.nx-tab-link{text-decoration:none;border:none;background:0 0;color:#006192;border-bottom:2px solid #007ab3;padding:0 16px 6px;font-weight:400;font-size:18px;line-height:24px}:host ::ng-deep a.nx-tab-link.is-active{border-width:4px;font-weight:700;transition:font-weight .3s;padding-bottom:4px}:host(.is-negative){color:#fff}:host(.is-negative) ::ng-deep a.nx-tab-link{color:#fff;border-bottom-color:#fff}:host-context([data-whatinput=keyboard]) nx-tab-link:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
                        }] }
            ];
            /** @nocollapse */
            NxTabNavBarComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] }
            ]; };
            NxTabNavBarComponent.propDecorators = {
                negative: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            var NxTabLinkDirective = /** @class */ (function () {
                /**
                 * @param {?} _tabNavBar
                 */
                function NxTabLinkDirective(_tabNavBar) {
                    this._tabNavBar = _tabNavBar;
                    this._active = false;
                    if (!this._tabNavBar) {
                        throw Error("The nx-tab-link element has to be wrapped in a nx-tab-nav-bar to work.");
                    }
                }
                Object.defineProperty(NxTabLinkDirective.prototype, "active", {
                    /**
                     * Whether the tab link is active and has the active styling.
                     * @return {?}
                     */
                    get: function () {
                        return this._active;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        if (newValue !== this._active) {
                            this._active = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return NxTabLinkDirective;
            }());
            NxTabLinkDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Directive"], args: [{
                            selector: '[nxTabLink]',
                            host: {
                                '[class.nx-tab-link]': 'true',
                                '[class.is-active]': 'active',
                                '[attr.aria-current]': 'active',
                            }
                        },] }
            ];
            /** @nocollapse */
            NxTabLinkDirective.ctorParameters = function () { return [
                { type: NxTabNavBarComponent, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["SkipSelf"] }] }
            ]; };
            NxTabLinkDirective.propDecorators = {
                active: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxTabsModule = /** @class */ (function () {
                function NxTabsModule() {
                }
                return NxTabsModule;
            }());
            NxTabsModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"],
                                _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["PortalModule"],
                                _allianz_ngx_ndbx_accordion__WEBPACK_IMPORTED_MODULE_26__["NxAccordionModule"]
                            ],
                            exports: [
                                NxTabComponent,
                                NxTabGroupComponent,
                                NxTabLabelDirective,
                                NxTabHeaderComponent,
                                NxTabBodyComponent,
                                NxTabNavBarComponent,
                                NxTabLinkDirective
                            ],
                            declarations: [
                                NxTabComponent,
                                NxTabGroupComponent,
                                NxTabLabelDirective,
                                NxTabHeaderComponent,
                                NxTabBodyComponent,
                                NxTabNavBarComponent,
                                NxTabLinkDirective
                            ],
                            providers: [],
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var BREAKPOINT_MOBILE = '(max-width: 703px)';
            /** @type {?} */
            var BREAKPOINT_TABLET = '(min-width: 704px) and (max-width: 992px)';
            /** @type {?} */
            var BREAKPOINT_DESKTOP = '(min-width: 993px)';
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MappedStyles$1 = /** @class */ (function () {
                /**
                 * @param {?} mapping
                 * @param {?=} baseClasses
                 * @param {?=} _elementRef
                 * @param {?=} _renderer
                 */
                function MappedStyles$1(mapping, baseClasses, _elementRef, _renderer) {
                    if (baseClasses === void 0) { baseClasses = []; }
                    this.mapping = mapping;
                    this.baseClasses = baseClasses;
                    this._elementRef = _elementRef;
                    this._renderer = _renderer;
                    this.classNames = '';
                }
                Object.defineProperty(MappedStyles$1.prototype, "classNames", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._classNames;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (this._classNames === value) {
                            return;
                        }
                        Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["removeClasses"])(this._renderer, this._elementRef, this._classNamesSanitized);
                        this._classNamesSanitized = Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["mapClassNames"])(value, this.baseClasses, this.mapping);
                        this._classNames = value;
                        Object(_allianz_ngx_ndbx_utils__WEBPACK_IMPORTED_MODULE_29__["appendClasses"])(this._renderer, this._elementRef, this._classNamesSanitized);
                    },
                    enumerable: true,
                    configurable: true
                });
                return MappedStyles$1;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxCardComponent = /** @class */ (function () {
                /**
                 * @param {?} _changeDetectorRef
                 * @param {?} tabindex
                 */
                function NxCardComponent(_changeDetectorRef, tabindex) {
                    this._changeDetectorRef = _changeDetectorRef;
                    this._disabled = false;
                    /**
                     * Event emitted when the selected value has changed.
                     */
                    this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_31__["EventEmitter"]();
                    this._tabindex = tabindex;
                }
                Object.defineProperty(NxCardComponent.prototype, "selectable", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._selectable;
                    },
                    /**
                     * Whether this card is selectable or not.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selectable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCardComponent.prototype, "selected", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._selected;
                    },
                    /**
                     * Whether this card is selected or not.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._selected = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NxCardComponent.prototype, "disabled", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._disabled;
                    },
                    /**
                     * Whether the card is disabled.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_30__["coerceBooleanProperty"])(value);
                        this._changeDetectorRef.markForCheck();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                NxCardComponent.prototype._toggleSelected = function () {
                    if (this.selectable && !this.disabled) {
                        this.selected = !this.selected;
                        this.selectedChange.emit(this.selected);
                    }
                };
                /**
                 * @return {?}
                 */
                NxCardComponent.prototype._getTabindex = function () {
                    if (this.disabled) {
                        return '-1';
                    }
                    if (this.selectable) {
                        return this._tabindex || '0';
                    }
                    return this._tabindex || '';
                };
                return NxCardComponent;
            }());
            NxCardComponent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Component"], args: [{
                            template: '<ng-content></ng-content>',
                            selector: 'nx-card',
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectionStrategy"].OnPush,
                            host: {
                                'class': 'nx-card',
                                '[class.is-selectable]': 'selectable',
                                '[class.is-selected]': 'selected',
                                '[class.is-disabled]': 'disabled',
                                '[attr.aria-disabled]': 'disabled',
                                '(click)': '_toggleSelected()',
                                '(keydown.enter)': '_toggleSelected()',
                                '[attr.tabindex]': '_getTabindex()'
                            },
                            styles: [":host{background:#fff;border:1px solid #d9d9d9;border-radius:4px;box-shadow:none;display:inline-block;margin-bottom:24px;padding:24px;transition:background-color .2s,box-shadow .2s}:host.is-selectable{cursor:pointer}:host.is-selectable:hover{background-color:#f5f5f5}:host.is-selectable:focus,:host.is-selectable:hover{outline:0}:host.is-selected{box-shadow:0 8px 24px rgba(65,65,65,.35);background-color:#f5f5f5}:host.is-disabled{cursor:not-allowed;opacity:.4}:host.is-disabled:hover{background-color:#fff}:host.is-disabled:focus{outline:0}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}@media screen and (-ms-high-contrast:active){:host.is-selectable:focus,:host.is-selectable:hover{border-color:highlight}:host.is-selected{box-shadow:0 0 0 2px windowText}:host.is-selected:focus,:host.is-selected:hover{box-shadow:0 0 0 2px highlight}}"]
                        }] }
            ];
            /** @nocollapse */
            NxCardComponent.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["ChangeDetectorRef"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Attribute"], args: ['tabindex',] }] }
            ]; };
            NxCardComponent.propDecorators = {
                selectable: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                selected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Input"] }],
                selectedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["Output"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var NxCardModule = /** @class */ (function () {
                function NxCardModule() {
                }
                return NxCardModule;
            }());
            NxCardModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_31__["NgModule"], args: [{
                            declarations: [NxCardComponent],
                            exports: [NxCardComponent],
                            imports: [
                                _angular_common__WEBPACK_IMPORTED_MODULE_32__["CommonModule"]
                            ]
                        },] }
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=allianz-ngx-ndbx.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/animations/fesm2015/animations.js": 
        /*!*****************************************************************!*\
          !*** ./node_modules/@angular/animations/fesm2015/animations.js ***!
          \*****************************************************************/
        /*! exports provided: AnimationBuilder, AnimationFactory, AUTO_STYLE, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, NoopAnimationPlayer, ɵAnimationGroupPlayer, ɵPRE_STYLE */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationBuilder", function () { return AnimationBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationFactory", function () { return AnimationFactory; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTO_STYLE", function () { return AUTO_STYLE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function () { return animate; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animateChild", function () { return animateChild; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animation", function () { return animation; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function () { return group; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function () { return keyframes; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "query", function () { return query; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stagger", function () { return stagger; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "state", function () { return state; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "style", function () { return style; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function () { return transition; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function () { return trigger; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useAnimation", function () { return useAnimation; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopAnimationPlayer", function () { return NoopAnimationPlayer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationGroupPlayer", function () { return AnimationGroupPlayer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPRE_STYLE", function () { return ɵPRE_STYLE; });
            /**
             * @license Angular v8.2.14
             * (c) 2010-2019 Google LLC. https://angular.io/
             * License: MIT
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * An injectable service that produces an animation sequence programmatically within an
             * Angular component or directive.
             * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
             *
             * \@usageNotes
             *
             * To use this service, add it to your component or directive as a dependency.
             * The service is instantiated along with your component.
             *
             * Apps do not typically need to create their own animation players, but if you
             * do need to, follow these steps:
             *
             * 1. Use the `build()` method to create a programmatic animation using the
             * `animate()` function. The method returns an `AnimationFactory` instance.
             *
             * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
             *
             * 3. Use the player object to control the animation programmatically.
             *
             * For example:
             *
             * ```ts
             * // import the service from BrowserAnimationsModule
             * import {AnimationBuilder} from '\@angular/animations';
             * // require the service as a dependency
             * class MyCmp {
             *   constructor(private _builder: AnimationBuilder) {}
             *
             *   makeAnimation(element: any) {
             *     // first define a reusable animation
             *     const myAnimation = this._builder.build([
             *       style({ width: 0 }),
             *       animate(1000, style({ width: '100px' }))
             *     ]);
             *
             *     // use the returned factory object to create a player
             *     const player = myAnimation.create(element);
             *
             *     player.play();
             *   }
             * }
             * ```
             *
             * \@publicApi
             * @abstract
             */
            var AnimationBuilder = /** @class */ (function () {
                function AnimationBuilder() {
                }
                return AnimationBuilder;
            }());
            if (false) { }
            /**
             * A factory object returned from the `AnimationBuilder`.`build()` method.
             *
             * \@publicApi
             * @abstract
             */
            var AnimationFactory = /** @class */ (function () {
                function AnimationFactory() {
                }
                return AnimationFactory;
            }());
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google Inc. All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * Represents a set of CSS styles for use in an animation style.
             * @record
             */
            function ɵStyleData() { }
            /** @enum {number} */
            var AnimationMetadataType = {
                /**
                 * Associates a named animation state with a set of CSS styles.
                 * See `state()`
                 */
                State: 0,
                /**
                 * Data for a transition from one animation state to another.
                 * See `transition()`
                 */
                Transition: 1,
                /**
                 * Contains a set of animation steps.
                 * See `sequence()`
                 */
                Sequence: 2,
                /**
                 * Contains a set of animation steps.
                 * See `{@link animations/group group()}`
                 */
                Group: 3,
                /**
                 * Contains an animation step.
                 * See `animate()`
                 */
                Animate: 4,
                /**
                 * Contains a set of animation steps.
                 * See `keyframes()`
                 */
                Keyframes: 5,
                /**
                 * Contains a set of CSS property-value pairs into a named style.
                 * See `style()`
                 */
                Style: 6,
                /**
                 * Associates an animation with an entry trigger that can be attached to an element.
                 * See `trigger()`
                 */
                Trigger: 7,
                /**
                 * Contains a re-usable animation.
                 * See `animation()`
                 */
                Reference: 8,
                /**
                 * Contains data to use in executing child animations returned by a query.
                 * See `animateChild()`
                 */
                AnimateChild: 9,
                /**
                 * Contains animation parameters for a re-usable animation.
                 * See `useAnimation()`
                 */
                AnimateRef: 10,
                /**
                 * Contains child-animation query data.
                 * See `query()`
                 */
                Query: 11,
                /**
                 * Contains data for staggering an animation sequence.
                 * See `stagger()`
                 */
                Stagger: 12,
            };
            /**
             * Specifies automatic styling.
             *
             * \@publicApi
             * @type {?}
             */
            var AUTO_STYLE = '*';
            /**
             * Base for animation data structures.
             *
             * \@publicApi
             * @record
             */
            function AnimationMetadata() { }
            if (false) { }
            /**
             * Contains an animation trigger. Instantiated and returned by the
             * `trigger()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationTriggerMetadata() { }
            if (false) { }
            /**
             * Encapsulates an animation state by associating a state name with a set of CSS styles.
             * Instantiated and returned by the `state()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationStateMetadata() { }
            if (false) { }
            /**
             * Encapsulates an animation transition. Instantiated and returned by the
             * `transition()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationTransitionMetadata() { }
            if (false) { }
            /**
             * Encapsulates a reusable animation, which is a collection of individual animation steps.
             * Instantiated and returned by the `animation()` function, and
             * passed to the `useAnimation()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationReferenceMetadata() { }
            if (false) { }
            /**
             * Encapsulates an animation query. Instantiated and returned by
             * the `query()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationQueryMetadata() { }
            if (false) { }
            /**
             * Encapsulates a keyframes sequence. Instantiated and returned by
             * the `keyframes()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationKeyframesSequenceMetadata() { }
            if (false) { }
            /**
             * Encapsulates an animation style. Instantiated and returned by
             * the `style()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationStyleMetadata() { }
            if (false) { }
            /**
             * Encapsulates an animation step. Instantiated and returned by
             * the `animate()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationAnimateMetadata() { }
            if (false) { }
            /**
             * Encapsulates a child animation, that can be run explicitly when the parent is run.
             * Instantiated and returned by the `animateChild` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationAnimateChildMetadata() { }
            if (false) { }
            /**
             * Encapsulates a reusable animation.
             * Instantiated and returned by the `useAnimation()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationAnimateRefMetadata() { }
            if (false) { }
            /**
             * Encapsulates an animation sequence.
             * Instantiated and returned by the `sequence()` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationSequenceMetadata() { }
            if (false) { }
            /**
             * Encapsulates an animation group.
             * Instantiated and returned by the `{\@link animations/group group()}` function.
             *
             * \@publicApi
             * @record
             */
            function AnimationGroupMetadata() { }
            if (false) { }
            /**
             * Encapsulates parameters for staggering the start times of a set of animation steps.
             * Instantiated and returned by the `stagger()` function.
             *
             * \@publicApi
             *
             * @record
             */
            function AnimationStaggerMetadata() { }
            if (false) { }
            /**
             * Creates a named animation trigger, containing a  list of `state()`
             * and `transition()` entries to be evaluated when the expression
             * bound to the trigger changes.
             *
             * \@usageNotes
             * Define an animation trigger in the `animations` section of `\@Component` metadata.
             * In the template, reference the trigger by name and bind it to a trigger expression that
             * evaluates to a defined animation state, using the following format:
             *
             * `[\@triggerName]="expression"`
             *
             * Animation trigger bindings convert all values to strings, and then match the
             * previous and current values against any linked transitions.
             * Booleans can be specified as `1` or `true` and `0` or `false`.
             *
             * ### Usage Example
             *
             * The following example creates an animation trigger reference based on the provided
             * name value.
             * The provided animation value is expected to be an array consisting of state and
             * transition declarations.
             *
             * ```typescript
             * \@Component({
             *   selector: "my-component",
             *   templateUrl: "my-component-tpl.html",
             *   animations: [
             *     trigger("myAnimationTrigger", [
             *       state(...),
             *       state(...),
             *       transition(...),
             *       transition(...)
             *     ])
             *   ]
             * })
             * class MyComponent {
             *   myStatusExp = "something";
             * }
             * ```
             *
             * The template associated with this component makes use of the defined trigger
             * by binding to an element within its template code.
             *
             * ```html
             * <!-- somewhere inside of my-component-tpl.html -->
             * <div [\@myAnimationTrigger]="myStatusExp">...</div>
             * ```
             *
             * ### Using an inline function
             * The `transition` animation method also supports reading an inline function which can decide
             * if its associated animation should be run.
             *
             * ```typescript
             * // this method is run each time the `myAnimationTrigger` trigger value changes.
             * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
             * string]: any}): boolean {
             *   // notice that `element` and `params` are also available here
             *   return toState == 'yes-please-animate';
             * }
             *  /
             *   selector: 'my-component',
             *   templateUrl: 'my-component-tpl.html',
             *   animations: [
             *     trigger('myAnimationTrigger', [
             *       transition(myInlineMatcherFn, [
             *         // the animation sequence code
             *       ]),
             *     ])
             *   ]
             * })
             * class MyComponent {
             *   myStatusExp = "yes-please-animate";
             * }
             * ```
             *
             * ### Disabling Animations
             * When true, the special animation control binding `\@.disabled` binding prevents
             * all animations from rendering.
             * Place the  `\@.disabled` binding on an element to disable
             * animations on the element itself, as well as any inner animation triggers
             * within the element.
             *
             * The following example shows how to use this feature:
             *
             * ```typescript /
             *   selector: 'my-component',
             *   template: `
             *     <div [\@.disabled]="isDisabled">
             *       <div [\@childAnimation]="exp"></div>
             *     </div>
             *   `,
             *   animations: [
             *     trigger("childAnimation", [
             *       // ...
             *     ])
             *   ]
             * })
             * class MyComponent {
             *   isDisabled = true;
             *   exp = '...';
             * }
             * ```
             *
             * When `\@.disabled` is true, it prevents the `\@childAnimation` trigger from animating,
             * along with any inner animations.
             *
             * ### Disable animations application-wide
             * When an area of the template is set to have animations disabled,
             * **all** inner components have their animations disabled as well.
             * This means that you can disable all animations for an app
             * by placing a host binding set on `\@.disabled` on the topmost Angular component.
             *
             * ```typescript
             * import {Component, HostBinding} from '\@angular/core';
             *  /
             *   selector: 'app-component',
             *   templateUrl: 'app.component.html',
             * })
             * class AppComponent {
             * \@HostBinding('@.disabled')
             *   public animationsDisabled = true;
             * }
             * ```
             *
             * ### Overriding disablement of inner animations
             * Despite inner animations being disabled, a parent animation can `query()`
             * for inner elements located in disabled areas of the template and still animate
             * them if needed. This is also the case for when a sub animation is
             * queried by a parent and then later animated using `animateChild()`.
             *
             * ### Detecting when an animation is disabled
             * If a region of the DOM (or the entire application) has its animations disabled, the animation
             * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
             * an instance of an `AnimationEvent`. If animations are disabled,
             * the `.disabled` flag on the event is true.
             *
             * \@publicApi
             * @param {?} name An identifying string.
             * @param {?} definitions  An animation definition object, containing an array of `state()`
             * and `transition()` declarations.
             *
             * @return {?} An object that encapsulates the trigger data.
             *
             */
            function trigger(name, definitions) {
                return { type: 7 /* Trigger */, name: name, definitions: definitions, options: {} };
            }
            /**
             * Defines an animation step that combines styling information with timing information.
             *
             * \@usageNotes
             * Call within an animation `sequence()`, `{\@link animations/group group()}`, or
             * `transition()` call to specify an animation step
             * that applies given style data to the parent animation for a given amount of time.
             *
             * ### Syntax Examples
             * **Timing examples**
             *
             * The following examples show various `timings` specifications.
             * - `animate(500)` : Duration is 500 milliseconds.
             * - `animate("1s")` : Duration is 1000 milliseconds.
             * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
             * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
             * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
             * milliseconds, easing according to a bezier curve.
             *
             * **Style examples**
             *
             * The following example calls `style()` to set a single CSS style.
             * ```typescript
             * animate(500, style({ background: "red" }))
             * ```
             * The following example calls `keyframes()` to set a CSS style
             * to different values for successive keyframes.
             * ```typescript
             * animate(500, keyframes(
             *  [
             *   style({ background: "blue" })),
             *   style({ background: "red" }))
             *  ])
             * ```
             *
             * \@publicApi
             * @param {?} timings Sets `AnimateTimings` for the parent animation.
             * A string in the format "duration [delay] [easing]".
             *  - Duration and delay are expressed as a number and optional time unit,
             * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
             * The default unit is milliseconds.
             *  - The easing value controls how the animation accelerates and decelerates
             * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
             * `ease-in-out`, or a `cubic-bezier()` function call.
             * If not supplied, no easing is applied.
             *
             * For example, the string "1s 100ms ease-out" specifies a duration of
             * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
             * which decelerates near the end of the duration.
             * @param {?=} styles Sets AnimationStyles for the parent animation.
             * A function call to either `style()` or `keyframes()`
             * that returns a collection of CSS style entries to be applied to the parent animation.
             * When null, uses the styles from the destination state.
             * This is useful when describing an animation step that will complete an animation;
             * see "Animating to the final state" in `transitions()`.
             * @return {?} An object that encapsulates the animation step.
             *
             */
            function animate(timings, styles) {
                if (styles === void 0) { styles = null; }
                return { type: 4 /* Animate */, styles: styles, timings: timings };
            }
            /**
             * \@description Defines a list of animation steps to be run in parallel.
             *
             * \@usageNotes
             * Grouped animations are useful when a series of styles must be
             * animated at different starting times and closed off at different ending times.
             *
             * When called within a `sequence()` or a
             * `transition()` call, does not continue to the next
             * instruction until all of the inner animation steps have completed.
             *
             * \@publicApi
             * @param {?} steps An array of animation step objects.
             * - When steps are defined by `style()` or `animate()`
             * function calls, each call within the group is executed instantly.
             * - To specify offset styles to be applied at a later time, define steps with
             * `keyframes()`, or use `animate()` calls with a delay value.
             * For example:
             *
             * ```typescript
             * group([
             *   animate("1s", style({ background: "black" })),
             *   animate("2s", style({ color: "white" }))
             * ])
             * ```
             *
             * @param {?=} options An options object containing a delay and
             * developer-defined parameters that provide styling defaults and
             * can be overridden on invocation.
             *
             * @return {?} An object that encapsulates the group data.
             *
             */
            function group(steps, options) {
                if (options === void 0) { options = null; }
                return { type: 3 /* Group */, steps: steps, options: options };
            }
            /**
             * Defines a list of animation steps to be run sequentially, one by one.
             *
             * \@usageNotes
             * When you pass an array of steps to a
             * `transition()` call, the steps run sequentially by default.
             * Compare this to the `{\@link animations/group group()}` call, which runs animation steps in parallel.
             *
             * When a sequence is used within a `{\@link animations/group group()}` or a `transition()` call,
             * execution continues to the next instruction only after each of the inner animation
             * steps have completed.
             *
             * \@publicApi
             *
             * @param {?} steps An array of animation step objects.
             * - Steps defined by `style()` calls apply the styling data immediately.
             * - Steps defined by `animate()` calls apply the styling data over time
             *   as specified by the timing data.
             *
             * ```typescript
             * sequence([
             *   style({ opacity: 0 }),
             *   animate("1s", style({ opacity: 1 }))
             * ])
             * ```
             *
             * @param {?=} options An options object containing a delay and
             * developer-defined parameters that provide styling defaults and
             * can be overridden on invocation.
             *
             * @return {?} An object that encapsulates the sequence data.
             *
             */
            function sequence(steps, options) {
                if (options === void 0) { options = null; }
                return { type: 2 /* Sequence */, steps: steps, options: options };
            }
            /**
             * Declares a key/value object containing CSS properties/styles that
             * can then be used for an animation `state`, within an animation `sequence`,
             * or as styling data for calls to `animate()` and `keyframes()`.
             *
             * \@usageNotes
             * The following examples create animation styles that collect a set of
             * CSS property values:
             *
             * ```typescript
             * // string values for CSS properties
             * style({ background: "red", color: "blue" })
             *
             * // numerical pixel values
             * style({ width: 100, height: 0 })
             * ```
             *
             * The following example uses auto-styling to allow a component to animate from
             * a height of 0 up to the height of the parent element:
             *
             * ```
             * style({ height: 0 }),
             * animate("1s", style({ height: "*" }))
             * ```
             *
             * \@publicApi
             *
             * @param {?} tokens A set of CSS styles or HTML styles associated with an animation state.
             * The value can be any of the following:
             * - A key-value style pair associating a CSS property with a value.
             * - An array of key-value style pairs.
             * - An asterisk (*), to use auto-styling, where styles are derived from the element
             * being animated and applied to the animation when it starts.
             *
             * Auto-styling can be used to define a state that depends on layout or other
             * environmental factors.
             *
             * @return {?} An object that encapsulates the style data.
             *
             */
            function style(tokens) {
                return { type: 6 /* Style */, styles: tokens, offset: null };
            }
            /**
             * Declares an animation state within a trigger attached to an element.
             *
             * \@usageNotes
             * Use the `trigger()` function to register states to an animation trigger.
             * Use the `transition()` function to animate between states.
             * When a state is active within a component, its associated styles persist on the element,
             * even when the animation ends.
             *
             * \@publicApi
             *
             * @param {?} name One or more names for the defined state in a comma-separated string.
             * The following reserved state names can be supplied to define a style for specific use
             * cases:
             *
             * - `void` You can associate styles with this name to be used when
             * the element is detached from the application. For example, when an `ngIf` evaluates
             * to false, the state of the associated element is void.
             *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
             * to be used as the fallback when the state that is being animated is not declared
             * within the trigger.
             *
             * @param {?} styles A set of CSS styles associated with this state, created using the
             * `style()` function.
             * This set of styles persists on the element once the state has been reached.
             * @param {?=} options Parameters that can be passed to the state when it is invoked.
             * 0 or more key-value pairs.
             * @return {?} An object that encapsulates the new state data.
             *
             */
            function state(name, styles, options) {
                return { type: 0 /* State */, name: name, styles: styles, options: options };
            }
            /**
             * Defines a set of animation styles, associating each style with an optional `offset` value.
             *
             * \@usageNotes
             * Use with the `animate()` call. Instead of applying animations
             * from the current state
             * to the destination state, keyframes describe how each style entry is applied and at what point
             * within the animation arc.
             * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).
             *
             * ### Usage
             *
             * In the following example, the offset values describe
             * when each `backgroundColor` value is applied. The color is red at the start, and changes to
             * blue when 20% of the total time has elapsed.
             *
             * ```typescript
             * // the provided offset values
             * animate("5s", keyframes([
             *   style({ backgroundColor: "red", offset: 0 }),
             *   style({ backgroundColor: "blue", offset: 0.2 }),
             *   style({ backgroundColor: "orange", offset: 0.3 }),
             *   style({ backgroundColor: "black", offset: 1 })
             * ]))
             * ```
             *
             * If there are no `offset` values specified in the style entries, the offsets
             * are calculated automatically.
             *
             * ```typescript
             * animate("5s", keyframes([
             *   style({ backgroundColor: "red" }) // offset = 0
             *   style({ backgroundColor: "blue" }) // offset = 0.33
             *   style({ backgroundColor: "orange" }) // offset = 0.66
             *   style({ backgroundColor: "black" }) // offset = 1
             * ]))
             * ```
             * \@publicApi
             * @param {?} steps A set of animation styles with optional offset data.
             * The optional `offset` value for a style specifies a percentage of the total animation
             * time at which that style is applied.
             * @return {?} An object that encapsulates the keyframes data.
             *
             */
            function keyframes(steps) {
                return { type: 5 /* Keyframes */, steps: steps };
            }
            /**
             * Declares an animation transition as a sequence of animation steps to run when a given
             * condition is satisfied. The condition is a Boolean expression or function that compares
             * the previous and current animation states, and returns true if this transition should occur.
             * When the state criteria of a defined transition are met, the associated animation is
             * triggered.
             *
             * \@usageNotes
             * The template associated with a component binds an animation trigger to an element.
             *
             * ```HTML
             * <!-- somewhere inside of my-component-tpl.html -->
             * <div [\@myAnimationTrigger]="myStatusExp">...</div>
             * ```
             *
             * All transitions are defined within an animation trigger,
             * along with named states that the transitions change to and from.
             *
             * ```typescript
             * trigger("myAnimationTrigger", [
             *  // define states
             *  state("on", style({ background: "green" })),
             *  state("off", style({ background: "grey" })),
             *  ...]
             * ```
             *
             * Note that when you call the `sequence()` function within a `{\@link animations/group group()}`
             * or a `transition()` call, execution does not continue to the next instruction
             * until each of the inner animation steps have completed.
             *
             * ### Syntax examples
             *
             * The following examples define transitions between the two defined states (and default states),
             * using various options:
             *
             * ```typescript
             * // Transition occurs when the state value
             * // bound to "myAnimationTrigger" changes from "on" to "off"
             * transition("on => off", animate(500))
             * // Run the same animation for both directions
             * transition("on <=> off", animate(500))
             * // Define multiple state-change pairs separated by commas
             * transition("on => off, off => void", animate(500))
             * ```
             *
             * ### Special values for state-change expressions
             *
             * - Catch-all state change for when an element is inserted into the page and the
             * destination state is unknown:
             *
             * ```typescript
             * transition("void => *", [
             *  style({ opacity: 0 }),
             *  animate(500)
             *  ])
             * ```
             *
             * - Capture a state change between any states:
             *
             *  `transition("* => *", animate("1s 0s"))`
             *
             * - Entry and exit transitions:
             *
             * ```typescript
             * transition(":enter", [
             *   style({ opacity: 0 }),
             *   animate(500, style({ opacity: 1 }))
             *   ]),
             * transition(":leave", [
             *   animate(500, style({ opacity: 0 }))
             *   ])
             * ```
             *
             * - Use `:increment` and `:decrement` to initiate transitions:
             *
             * ```typescript
             * transition(":increment", group([
             *  query(':enter', [
             *     style({ left: '100%' }),
             *     animate('0.5s ease-out', style('*'))
             *   ]),
             *  query(':leave', [
             *     animate('0.5s ease-out', style({ left: '-100%' }))
             *  ])
             * ]))
             *
             * transition(":decrement", group([
             *  query(':enter', [
             *     style({ left: '100%' }),
             *     animate('0.5s ease-out', style('*'))
             *   ]),
             *  query(':leave', [
             *     animate('0.5s ease-out', style({ left: '-100%' }))
             *  ])
             * ]))
             * ```
             *
             * ### State-change functions
             *
             * Here is an example of a `fromState` specified as a state-change function that invokes an
             * animation when true:
             *
             * ```typescript
             * transition((fromState, toState) =>
             *  {
             *   return fromState == "off" && toState == "on";
             *  },
             *  animate("1s 0s"))
             * ```
             *
             * ### Animating to the final state
             *
             * If the final step in a transition is a call to `animate()` that uses a timing value
             * with no style data, that step is automatically considered the final animation arc,
             * for the element to reach the final state. Angular automatically adds or removes
             * CSS styles to ensure that the element is in the correct final state.
             *
             * The following example defines a transition that starts by hiding the element,
             * then makes sure that it animates properly to whatever state is currently active for trigger:
             *
             * ```typescript
             * transition("void => *", [
             *   style({ opacity: 0 }),
             *   animate(500)
             *  ])
             * ```
             * ### Boolean value matching
             * If a trigger binding value is a Boolean, it can be matched using a transition expression
             * that compares true and false or 1 and 0. For example:
             *
             * ```
             * // in the template
             * <div [\@openClose]="open ? true : false">...</div>
             * // in the component metadata
             * trigger('openClose', [
             *   state('true', style({ height: '*' })),
             *   state('false', style({ height: '0px' })),
             *   transition('false <=> true', animate(500))
             * ])
             * ```
             *
             * \@publicApi
             *
             * @param {?} stateChangeExpr A Boolean expression or function that compares the previous and current
             * animation states, and returns true if this transition should occur. Note that  "true" and "false"
             * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the
             * animation trigger element.
             * The animation steps run when the expression evaluates to true.
             *
             * - A state-change string takes the form "state1 => state2", where each side is a defined animation
             * state, or an asterix (*) to refer to a dynamic start or end state.
             *   - The expression string can contain multiple comma-separated statements;
             * for example "state1 => state2, state3 => state4".
             *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,
             * equivalent to  "void => *"  and "* => void".
             *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has
             * increased or decreased in value.
             * - A function is executed each time a state change occurs in the animation trigger element.
             * The animation steps run when the function returns true.
             *
             * @param {?} steps One or more animation objects, as returned by the `animate()` or
             * `sequence()` function, that form a transformation from one state to another.
             * A sequence is used by default when you pass an array.
             * @param {?=} options An options object that can contain a delay value for the start of the animation,
             * and additional developer-defined parameters. Provided values for additional parameters are used
             * as defaults, and override values can be passed to the caller on invocation.
             * @return {?} An object that encapsulates the transition data.
             *
             */
            function transition(stateChangeExpr, steps, options) {
                if (options === void 0) { options = null; }
                return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options: options };
            }
            /**
             * Produces a reusable animation that can be invoked in another animation or sequence,
             * by calling the `useAnimation()` function.
             *
             * \@usageNotes
             * The following example defines a reusable animation, providing some default parameter
             * values.
             *
             * ```typescript
             * var fadeAnimation = animation([
             *   style({ opacity: '{{ start }}' }),
             *   animate('{{ time }}',
             *   style({ opacity: '{{ end }}'}))
             *   ],
             *   { params: { time: '1000ms', start: 0, end: 1 }});
             * ```
             *
             * The following invokes the defined animation with a call to `useAnimation()`,
             * passing in override parameter values.
             *
             * ```js
             * useAnimation(fadeAnimation, {
             *   params: {
             *     time: '2s',
             *     start: 1,
             *     end: 0
             *   }
             * })
             * ```
             *
             * If any of the passed-in parameter values are missing from this call,
             * the default values are used. If one or more parameter values are missing before a step is
             * animated, `useAnimation()` throws an error.
             *
             * \@publicApi
             * @param {?} steps One or more animation objects, as returned by the `animate()`
             * or `sequence()` function, that form a transformation from one state to another.
             * A sequence is used by default when you pass an array.
             * @param {?=} options An options object that can contain a delay value for the start of the
             * animation, and additional developer-defined parameters.
             * Provided values for additional parameters are used as defaults,
             * and override values can be passed to the caller on invocation.
             * @return {?} An object that encapsulates the animation data.
             *
             */
            function animation(steps, options) {
                if (options === void 0) { options = null; }
                return { type: 8 /* Reference */, animation: steps, options: options };
            }
            /**
             * Executes a queried inner animation element within an animation sequence.
             *
             * \@usageNotes
             * Each time an animation is triggered in Angular, the parent animation
             * has priority and any child animations are blocked. In order
             * for a child animation to run, the parent animation must query each of the elements
             * containing child animations, and run them using this function.
             *
             * Note that this feature is designed to be used with `query()` and it will only work
             * with animations that are assigned using the Angular animation library. CSS keyframes
             * and transitions are not handled by this API.
             *
             * \@publicApi
             * @param {?=} options An options object that can contain a delay value for the start of the
             * animation, and additional override values for developer-defined parameters.
             * @return {?} An object that encapsulates the child animation data.
             *
             */
            function animateChild(options) {
                if (options === void 0) { options = null; }
                return { type: 9 /* AnimateChild */, options: options };
            }
            /**
             * Starts a reusable animation that is created using the `animation()` function.
             *
             * \@publicApi
             * @param {?} animation The reusable animation to start.
             * @param {?=} options An options object that can contain a delay value for the start of
             * the animation, and additional override values for developer-defined parameters.
             * @return {?} An object that contains the animation parameters.
             *
             */
            function useAnimation(animation, options) {
                if (options === void 0) { options = null; }
                return { type: 10 /* AnimateRef */, animation: animation, options: options };
            }
            /**
             * Finds one or more inner elements within the current element that is
             * being animated within a sequence. Use with `animate()`.
             *
             * \@usageNotes
             * Tokens can be merged into a combined query selector string. For example:
             *
             * ```typescript
             *  query(':self, .record:enter, .record:leave, \@subTrigger', [...])
             * ```
             *
             * The `query()` function collects multiple elements and works internally by using
             * `element.querySelectorAll`. Use the `limit` field of an options object to limit
             * the total number of items to be collected. For example:
             *
             * ```js
             * query('div', [
             *   animate(...),
             *   animate(...)
             * ], { limit: 1 })
             * ```
             *
             * By default, throws an error when zero items are found. Set the
             * `optional` flag to ignore this error. For example:
             *
             * ```js
             * query('.some-element-that-may-not-be-there', [
             *   animate(...),
             *   animate(...)
             * ], { optional: true })
             * ```
             *
             * ### Usage Example
             *
             * The following example queries for inner elements and animates them
             * individually using `animate()`.
             *
             * ```typescript
             * \@Component({
             *   selector: 'inner',
             *   template: `
             *     <div [\@queryAnimation]="exp">
             *       <h1>Title</h1>
             *       <div class="content">
             *         Blah blah blah
             *       </div>
             *     </div>
             *   `,
             *   animations: [
             *    trigger('queryAnimation', [
             *      transition('* => goAnimate', [
             *        // hide the inner elements
             *        query('h1', style({ opacity: 0 })),
             *        query('.content', style({ opacity: 0 })),
             *
             *        // animate the inner elements in, one by one
             *        query('h1', animate(1000, style({ opacity: 1 }))),
             *        query('.content', animate(1000, style({ opacity: 1 }))),
             *      ])
             *    ])
             *  ]
             * })
             * class Cmp {
             *   exp = '';
             *
             *   goAnimate() {
             *     this.exp = 'goAnimate';
             *   }
             * }
             * ```
             *
             * \@publicApi
             * @param {?} selector The element to query, or a set of elements that contain Angular-specific
             * characteristics, specified with one or more of the following tokens.
             *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements.
             *  - `query(":animating")` : Query all currently animating elements.
             *  - `query("\@triggerName")` : Query elements that contain an animation trigger.
             *  - `query("\@*")` : Query all elements that contain an animation triggers.
             *  - `query(":self")` : Include the current element into the animation sequence.
             *
             * @param {?} animation One or more animation steps to apply to the queried element or elements.
             * An array is treated as an animation sequence.
             * @param {?=} options An options object. Use the 'limit' field to limit the total number of
             * items to collect.
             * @return {?} An object that encapsulates the query data.
             *
             */
            function query(selector, animation, options) {
                if (options === void 0) { options = null; }
                return { type: 11 /* Query */, selector: selector, animation: animation, options: options };
            }
            /**
             * Use within an animation `query()` call to issue a timing gap after
             * each queried item is animated.
             *
             * \@usageNotes
             * In the following example, a container element wraps a list of items stamped out
             * by an `ngFor`. The container element contains an animation trigger that will later be set
             * to query for each of the inner items.
             *
             * Each time items are added, the opacity fade-in animation runs,
             * and each removed item is faded out.
             * When either of these animations occur, the stagger effect is
             * applied after each item's animation is started.
             *
             * ```html
             * <!-- list.component.html -->
             * <button (click)="toggle()">Show / Hide Items</button>
             * <hr />
             * <div [\@listAnimation]="items.length">
             *   <div *ngFor="let item of items">
             *     {{ item }}
             *   </div>
             * </div>
             * ```
             *
             * Here is the component code:
             *
             * ```typescript
             * import {trigger, transition, style, animate, query, stagger} from '\@angular/animations';
             * \@Component({
             *   templateUrl: 'list.component.html',
             *   animations: [
             *     trigger('listAnimation', [
             *     ...
             *     ])
             *   ]
             * })
             * class ListComponent {
             *   items = [];
             *
             *   showItems() {
             *     this.items = [0,1,2,3,4];
             *   }
             *
             *   hideItems() {
             *     this.items = [];
             *   }
             *
             *   toggle() {
             *     this.items.length ? this.hideItems() : this.showItems();
             *    }
             *  }
             * ```
             *
             * Here is the animation trigger code:
             *
             * ```typescript
             * trigger('listAnimation', [
             *   transition('* => *', [ // each time the binding value changes
             *     query(':leave', [
             *       stagger(100, [
             *         animate('0.5s', style({ opacity: 0 }))
             *       ])
             *     ]),
             *     query(':enter', [
             *       style({ opacity: 0 }),
             *       stagger(100, [
             *         animate('0.5s', style({ opacity: 1 }))
             *       ])
             *     ])
             *   ])
             * ])
             * ```
             *
             * \@publicApi
             * @param {?} timings A delay value.
             * @param {?} animation One ore more animation steps.
             * @return {?} An object that encapsulates the stagger data.
             *
             */
            function stagger(timings, animation) {
                return { type: 12 /* Stagger */, timings: timings, animation: animation };
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @license
             * Copyright Google Inc. All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             * @param {?} cb
             * @return {?}
             */
            function scheduleMicroTask(cb) {
                Promise.resolve(null).then(cb);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Provides programmatic control of a reusable animation sequence,
             * built using the `build()` method of `AnimationBuilder`. The `build()` method
             * returns a factory, whose `create()` method instantiates and initializes this interface.
             *
             * @see `AnimationBuilder`
             * @see `AnimationFactory`
             * @see `animate()`
             *
             * \@publicApi
             * @record
             */
            function AnimationPlayer() { }
            if (false) { }
            /**
             * An empty programmatic controller for reusable animations.
             * Used internally when animations are disabled, to avoid
             * checking for the null case when an animation player is expected.
             *
             * @see `animate()`
             * @see `AnimationPlayer`
             * @see `GroupPlayer`
             *
             * \@publicApi
             */
            var NoopAnimationPlayer = /** @class */ (function () {
                /**
                 * @param {?=} duration
                 * @param {?=} delay
                 */
                function NoopAnimationPlayer(duration, delay) {
                    if (duration === void 0) { duration = 0; }
                    if (delay === void 0) { delay = 0; }
                    this._onDoneFns = [];
                    this._onStartFns = [];
                    this._onDestroyFns = [];
                    this._started = false;
                    this._destroyed = false;
                    this._finished = false;
                    this.parentPlayer = null;
                    this.totalTime = duration + delay;
                }
                /**
                 * @private
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype._onFinish = function () {
                    if (!this._finished) {
                        this._finished = true;
                        this._onDoneFns.forEach(( /**
                         * @param {?} fn
                         * @return {?}
                         */function (/**
                         * @param {?} fn
                         * @return {?}
                         */ fn) { return fn(); }));
                        this._onDoneFns = [];
                    }
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.hasStarted = function () { return this._started; };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.init = function () { };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.play = function () {
                    if (!this.hasStarted()) {
                        this._onStart();
                        this.triggerMicrotask();
                    }
                    this._started = true;
                };
                /**
                 * \@internal
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.triggerMicrotask = function () {
                    var _this = this;
                    scheduleMicroTask(( /**
                     * @return {?}
                     */function () { return _this._onFinish(); }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype._onStart = function () {
                    this._onStartFns.forEach(( /**
                     * @param {?} fn
                     * @return {?}
                     */function (/**
                     * @param {?} fn
                     * @return {?}
                     */ fn) { return fn(); }));
                    this._onStartFns = [];
                };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.pause = function () { };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.restart = function () { };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.finish = function () { this._onFinish(); };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.destroy = function () {
                    if (!this._destroyed) {
                        this._destroyed = true;
                        if (!this.hasStarted()) {
                            this._onStart();
                        }
                        this.finish();
                        this._onDestroyFns.forEach(( /**
                         * @param {?} fn
                         * @return {?}
                         */function (/**
                         * @param {?} fn
                         * @return {?}
                         */ fn) { return fn(); }));
                        this._onDestroyFns = [];
                    }
                };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.reset = function () { };
                /**
                 * @param {?} position
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.setPosition = function (position) { };
                /**
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.getPosition = function () { return 0; };
                /**
                 * \@internal
                 * @param {?} phaseName
                 * @return {?}
                 */
                NoopAnimationPlayer.prototype.triggerCallback = function (phaseName) {
                    /** @type {?} */
                    var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
                    methods.forEach(( /**
                     * @param {?} fn
                     * @return {?}
                     */function (/**
                     * @param {?} fn
                     * @return {?}
                     */ fn) { return fn(); }));
                    methods.length = 0;
                };
                return NoopAnimationPlayer;
            }());
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A programmatic controller for a group of reusable animations.
             * Used internally to control animations.
             *
             * @see `AnimationPlayer`
             * @see `{\@link animations/group group()}`
             *
             */
            var AnimationGroupPlayer = /** @class */ (function () {
                /**
                 * @param {?} _players
                 */
                function AnimationGroupPlayer(_players) {
                    var _this = this;
                    this._onDoneFns = [];
                    this._onStartFns = [];
                    this._finished = false;
                    this._started = false;
                    this._destroyed = false;
                    this._onDestroyFns = [];
                    this.parentPlayer = null;
                    this.totalTime = 0;
                    this.players = _players;
                    /** @type {?} */
                    var doneCount = 0;
                    /** @type {?} */
                    var destroyCount = 0;
                    /** @type {?} */
                    var startCount = 0;
                    /** @type {?} */
                    var total = this.players.length;
                    if (total == 0) {
                        scheduleMicroTask(( /**
                         * @return {?}
                         */function () { return _this._onFinish(); }));
                    }
                    else {
                        this.players.forEach(( /**
                         * @param {?} player
                         * @return {?}
                         */function (/**
                         * @param {?} player
                         * @return {?}
                         */ player) {
                            player.onDone(( /**
                             * @return {?}
                             */function () {
                                if (++doneCount == total) {
                                    _this._onFinish();
                                }
                            }));
                            player.onDestroy(( /**
                             * @return {?}
                             */function () {
                                if (++destroyCount == total) {
                                    _this._onDestroy();
                                }
                            }));
                            player.onStart(( /**
                             * @return {?}
                             */function () {
                                if (++startCount == total) {
                                    _this._onStart();
                                }
                            }));
                        }));
                    }
                    this.totalTime = this.players.reduce(( /**
                     * @param {?} time
                     * @param {?} player
                     * @return {?}
                     */function (time, player) { return Math.max(time, player.totalTime); }), 0);
                }
                /**
                 * @private
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype._onFinish = function () {
                    if (!this._finished) {
                        this._finished = true;
                        this._onDoneFns.forEach(( /**
                         * @param {?} fn
                         * @return {?}
                         */function (/**
                         * @param {?} fn
                         * @return {?}
                         */ fn) { return fn(); }));
                        this._onDoneFns = [];
                    }
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.init = function () {
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) { return player.init(); }));
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
                /**
                 * @private
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype._onStart = function () {
                    if (!this.hasStarted()) {
                        this._started = true;
                        this._onStartFns.forEach(( /**
                         * @param {?} fn
                         * @return {?}
                         */function (/**
                         * @param {?} fn
                         * @return {?}
                         */ fn) { return fn(); }));
                        this._onStartFns = [];
                    }
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.play = function () {
                    if (!this.parentPlayer) {
                        this.init();
                    }
                    this._onStart();
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) { return player.play(); }));
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.pause = function () {
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) { return player.pause(); }));
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.restart = function () {
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) { return player.restart(); }));
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.finish = function () {
                    this._onFinish();
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) { return player.finish(); }));
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.destroy = function () { this._onDestroy(); };
                /**
                 * @private
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype._onDestroy = function () {
                    if (!this._destroyed) {
                        this._destroyed = true;
                        this._onFinish();
                        this.players.forEach(( /**
                         * @param {?} player
                         * @return {?}
                         */function (/**
                         * @param {?} player
                         * @return {?}
                         */ player) { return player.destroy(); }));
                        this._onDestroyFns.forEach(( /**
                         * @param {?} fn
                         * @return {?}
                         */function (/**
                         * @param {?} fn
                         * @return {?}
                         */ fn) { return fn(); }));
                        this._onDestroyFns = [];
                    }
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.reset = function () {
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) { return player.reset(); }));
                    this._destroyed = false;
                    this._finished = false;
                    this._started = false;
                };
                /**
                 * @param {?} p
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.setPosition = function (p) {
                    /** @type {?} */
                    var timeAtPosition = p * this.totalTime;
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) {
                        /** @type {?} */
                        var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
                        player.setPosition(position);
                    }));
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.getPosition = function () {
                    /** @type {?} */
                    var min = 0;
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) {
                        /** @type {?} */
                        var p = player.getPosition();
                        min = Math.min(p, min);
                    }));
                    return min;
                };
                /**
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.beforeDestroy = function () {
                    this.players.forEach(( /**
                     * @param {?} player
                     * @return {?}
                     */function (/**
                     * @param {?} player
                     * @return {?}
                     */ player) {
                        if (player.beforeDestroy) {
                            player.beforeDestroy();
                        }
                    }));
                };
                /**
                 * \@internal
                 * @param {?} phaseName
                 * @return {?}
                 */
                AnimationGroupPlayer.prototype.triggerCallback = function (phaseName) {
                    /** @type {?} */
                    var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
                    methods.forEach(( /**
                     * @param {?} fn
                     * @return {?}
                     */function (/**
                     * @param {?} fn
                     * @return {?}
                     */ fn) { return fn(); }));
                    methods.length = 0;
                };
                return AnimationGroupPlayer;
            }());
            if (false) { }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var ɵPRE_STYLE = '!';
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Generated bundle index. Do not edit.
             */
            //# sourceMappingURL=animations.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/a11y.js": 
        /*!***************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/a11y.js ***!
          \***************************************************/
        /*! exports provided: ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_DEFAULT_OPTIONS, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARIA_DESCRIBER_PROVIDER_FACTORY", function () { return ARIA_DESCRIBER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MESSAGES_CONTAINER_ID", function () { return MESSAGES_CONTAINER_ID; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_ID_PREFIX", function () { return CDK_DESCRIBEDBY_ID_PREFIX; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_HOST_ATTRIBUTE", function () { return CDK_DESCRIBEDBY_HOST_ATTRIBUTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AriaDescriber", function () { return AriaDescriber; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARIA_DESCRIBER_PROVIDER", function () { return ARIA_DESCRIBER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActiveDescendantKeyManager", function () { return ActiveDescendantKeyManager; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusKeyManager", function () { return FocusKeyManager; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListKeyManager", function () { return ListKeyManager; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusTrap", function () { return FocusTrap; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusTrapFactory", function () { return FocusTrapFactory; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTrapFocus", function () { return CdkTrapFocus; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InteractivityChecker", function () { return InteractivityChecker; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_PROVIDER_FACTORY", function () { return LIVE_ANNOUNCER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiveAnnouncer", function () { return LiveAnnouncer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAriaLive", function () { return CdkAriaLive; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_PROVIDER", function () { return LIVE_ANNOUNCER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY", function () { return LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN", function () { return LIVE_ANNOUNCER_ELEMENT_TOKEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_DEFAULT_OPTIONS", function () { return LIVE_ANNOUNCER_DEFAULT_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_MONITOR_PROVIDER_FACTORY", function () { return FOCUS_MONITOR_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOUCH_BUFFER_MS", function () { return TOUCH_BUFFER_MS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusMonitor", function () { return FocusMonitor; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkMonitorFocus", function () { return CdkMonitorFocus; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_MONITOR_PROVIDER", function () { return FOCUS_MONITOR_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFakeMousedownFromScreenReader", function () { return isFakeMousedownFromScreenReader; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A11yModule", function () { return A11yModule; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * IDs are deliminated by an empty space, as per the spec.
             * @type {?}
             */
            var ID_DELIMINATOR = ' ';
            /**
             * Adds the given ID to the specified ARIA attribute on an element.
             * Used for attributes such as aria-labelledby, aria-owns, etc.
             * @param {?} el
             * @param {?} attr
             * @param {?} id
             * @return {?}
             */
            function addAriaReferencedId(el, attr, id) {
                /** @type {?} */
                var ids = getAriaReferenceIds(el, attr);
                if (ids.some(( /**
                 * @param {?} existingId
                 * @return {?}
                 */function (/**
                 * @param {?} existingId
                 * @return {?}
                 */ existingId) { return existingId.trim() == id.trim(); }))) {
                    return;
                }
                ids.push(id.trim());
                el.setAttribute(attr, ids.join(ID_DELIMINATOR));
            }
            /**
             * Removes the given ID from the specified ARIA attribute on an element.
             * Used for attributes such as aria-labelledby, aria-owns, etc.
             * @param {?} el
             * @param {?} attr
             * @param {?} id
             * @return {?}
             */
            function removeAriaReferencedId(el, attr, id) {
                /** @type {?} */
                var ids = getAriaReferenceIds(el, attr);
                /** @type {?} */
                var filteredIds = ids.filter(( /**
                 * @param {?} val
                 * @return {?}
                 */function (/**
                 * @param {?} val
                 * @return {?}
                 */ val) { return val != id.trim(); }));
                if (filteredIds.length) {
                    el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));
                }
                else {
                    el.removeAttribute(attr);
                }
            }
            /**
             * Gets the list of IDs referenced by the given ARIA attribute on an element.
             * Used for attributes such as aria-labelledby, aria-owns, etc.
             * @param {?} el
             * @param {?} attr
             * @return {?}
             */
            function getAriaReferenceIds(el, attr) {
                // Get string array of all individual ids (whitespace deliminated) in the attribute value
                return (el.getAttribute(attr) || '').match(/\S+/g) || [];
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * ID used for the body container where all messages are appended.
             * @type {?}
             */
            var MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
            /**
             * ID prefix used for each created message element.
             * @type {?}
             */
            var CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
            /**
             * Attribute given to each host element that is described by a message element.
             * @type {?}
             */
            var CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
            /**
             * Global incremental identifier for each registered message element.
             * @type {?}
             */
            var nextId = 0;
            /**
             * Global map of all registered message elements that have been placed into the document.
             * @type {?}
             */
            var messageRegistry = new Map();
            /**
             * Container for all registered messages.
             * @type {?}
             */
            var messagesContainer = null;
            /**
             * Utility that creates visually hidden elements with a message content. Useful for elements that
             * want to use aria-describedby to further describe themselves without adding additional visual
             * content.
             */
            var AriaDescriber = /** @class */ (function () {
                /**
                 * @param {?} _document
                 */
                function AriaDescriber(_document) {
                    this._document = _document;
                }
                /**
                 * Adds to the host element an aria-describedby reference to a hidden element that contains
                 * the message. If the same message has already been registered, then it will reuse the created
                 * message element.
                 * @param {?} hostElement
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype.describe = function (hostElement, message) {
                    if (!this._canBeDescribed(hostElement, message)) {
                        return;
                    }
                    if (typeof message !== 'string') {
                        // We need to ensure that the element has an ID.
                        this._setMessageId(message);
                        messageRegistry.set(message, { messageElement: message, referenceCount: 0 });
                    }
                    else if (!messageRegistry.has(message)) {
                        this._createMessageElement(message);
                    }
                    if (!this._isElementDescribedByMessage(hostElement, message)) {
                        this._addMessageReference(hostElement, message);
                    }
                };
                /**
                 * Removes the host element's aria-describedby reference to the message element.
                 * @param {?} hostElement
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype.removeDescription = function (hostElement, message) {
                    if (!this._isElementNode(hostElement)) {
                        return;
                    }
                    if (this._isElementDescribedByMessage(hostElement, message)) {
                        this._removeMessageReference(hostElement, message);
                    }
                    // If the message is a string, it means that it's one that we created for the
                    // consumer so we can remove it safely, otherwise we should leave it in place.
                    if (typeof message === 'string') {
                        /** @type {?} */
                        var registeredMessage = messageRegistry.get(message);
                        if (registeredMessage && registeredMessage.referenceCount === 0) {
                            this._deleteMessageElement(message);
                        }
                    }
                    if (messagesContainer && messagesContainer.childNodes.length === 0) {
                        this._deleteMessagesContainer();
                    }
                };
                /**
                 * Unregisters all created message elements and removes the message container.
                 * @return {?}
                 */
                AriaDescriber.prototype.ngOnDestroy = function () {
                    /** @type {?} */
                    var describedElements = this._document.querySelectorAll("[" + CDK_DESCRIBEDBY_HOST_ATTRIBUTE + "]");
                    for (var i = 0; i < describedElements.length; i++) {
                        this._removeCdkDescribedByReferenceIds(describedElements[i]);
                        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
                    }
                    if (messagesContainer) {
                        this._deleteMessagesContainer();
                    }
                    messageRegistry.clear();
                };
                /**
                 * Creates a new element in the visually hidden message container element with the message
                 * as its content and adds it to the message registry.
                 * @private
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._createMessageElement = function (message) {
                    /** @type {?} */
                    var messageElement = this._document.createElement('div');
                    this._setMessageId(messageElement);
                    messageElement.textContent = message;
                    this._createMessagesContainer();
                    ( /** @type {?} */(messagesContainer)).appendChild(messageElement);
                    messageRegistry.set(message, { messageElement: messageElement, referenceCount: 0 });
                };
                /**
                 * Assigns a unique ID to an element, if it doesn't have one already.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                AriaDescriber.prototype._setMessageId = function (element) {
                    if (!element.id) {
                        element.id = CDK_DESCRIBEDBY_ID_PREFIX + "-" + nextId++;
                    }
                };
                /**
                 * Deletes the message element from the global messages container.
                 * @private
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._deleteMessageElement = function (message) {
                    /** @type {?} */
                    var registeredMessage = messageRegistry.get(message);
                    /** @type {?} */
                    var messageElement = registeredMessage && registeredMessage.messageElement;
                    if (messagesContainer && messageElement) {
                        messagesContainer.removeChild(messageElement);
                    }
                    messageRegistry.delete(message);
                };
                /**
                 * Creates the global container for all aria-describedby messages.
                 * @private
                 * @return {?}
                 */
                AriaDescriber.prototype._createMessagesContainer = function () {
                    if (!messagesContainer) {
                        /** @type {?} */
                        var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);
                        // When going from the server to the client, we may end up in a situation where there's
                        // already a container on the page, but we don't have a reference to it. Clear the
                        // old container so we don't get duplicates. Doing this, instead of emptying the previous
                        // container, should be slightly faster.
                        if (preExistingContainer) {
                            ( /** @type {?} */(preExistingContainer.parentNode)).removeChild(preExistingContainer);
                        }
                        messagesContainer = this._document.createElement('div');
                        messagesContainer.id = MESSAGES_CONTAINER_ID;
                        messagesContainer.setAttribute('aria-hidden', 'true');
                        messagesContainer.style.display = 'none';
                        this._document.body.appendChild(messagesContainer);
                    }
                };
                /**
                 * Deletes the global messages container.
                 * @private
                 * @return {?}
                 */
                AriaDescriber.prototype._deleteMessagesContainer = function () {
                    if (messagesContainer && messagesContainer.parentNode) {
                        messagesContainer.parentNode.removeChild(messagesContainer);
                        messagesContainer = null;
                    }
                };
                /**
                 * Removes all cdk-describedby messages that are hosted through the element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                AriaDescriber.prototype._removeCdkDescribedByReferenceIds = function (element) {
                    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX
                    /** @type {?} */
                    var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')
                        .filter(( /**
                 * @param {?} id
                 * @return {?}
                 */function (/**
                 * @param {?} id
                 * @return {?}
                 */ id) { return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0; }));
                    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
                };
                /**
                 * Adds a message reference to the element using aria-describedby and increments the registered
                 * message's reference count.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._addMessageReference = function (element, message) {
                    /** @type {?} */
                    var registeredMessage = ( /** @type {?} */(messageRegistry.get(message)));
                    // Add the aria-describedby reference and set the
                    // describedby_host attribute to mark the element.
                    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
                    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');
                    registeredMessage.referenceCount++;
                };
                /**
                 * Removes a message reference from the element using aria-describedby
                 * and decrements the registered message's reference count.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._removeMessageReference = function (element, message) {
                    /** @type {?} */
                    var registeredMessage = ( /** @type {?} */(messageRegistry.get(message)));
                    registeredMessage.referenceCount--;
                    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
                    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
                };
                /**
                 * Returns true if the element has been described by the provided message ID.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._isElementDescribedByMessage = function (element, message) {
                    /** @type {?} */
                    var referenceIds = getAriaReferenceIds(element, 'aria-describedby');
                    /** @type {?} */
                    var registeredMessage = messageRegistry.get(message);
                    /** @type {?} */
                    var messageId = registeredMessage && registeredMessage.messageElement.id;
                    return !!messageId && referenceIds.indexOf(messageId) != -1;
                };
                /**
                 * Determines whether a message can be described on a particular element.
                 * @private
                 * @param {?} element
                 * @param {?} message
                 * @return {?}
                 */
                AriaDescriber.prototype._canBeDescribed = function (element, message) {
                    if (!this._isElementNode(element)) {
                        return false;
                    }
                    if (message && typeof message === 'object') {
                        // We'd have to make some assumptions about the description element's text, if the consumer
                        // passed in an element. Assume that if an element is passed in, the consumer has verified
                        // that it can be used as a description.
                        return true;
                    }
                    /** @type {?} */
                    var trimmedMessage = message == null ? '' : ("" + message).trim();
                    /** @type {?} */
                    var ariaLabel = element.getAttribute('aria-label');
                    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
                    // element, because screen readers will end up reading out the same text twice in a row.
                    return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;
                };
                /**
                 * Checks whether a node is an Element node.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                AriaDescriber.prototype._isElementNode = function (element) {
                    return element.nodeType === this._document.ELEMENT_NODE;
                };
                return AriaDescriber;
            }());
            AriaDescriber.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            AriaDescriber.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ AriaDescriber.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function AriaDescriber_Factory() { return new AriaDescriber(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); }, token: AriaDescriber, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentDispatcher
             * @param {?} _document
             * @return {?}
             */
            function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {
                return parentDispatcher || new AriaDescriber(_document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var ARIA_DESCRIBER_PROVIDER = {
                // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.
                provide: AriaDescriber,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), AriaDescriber],
                    ( /** @type {?} */(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]))
                ],
                useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * This class manages keyboard events for selectable lists. If you pass it a query list
             * of items, it will set the active item correctly when arrow events occur.
             * @template T
             */
            var ListKeyManager = /** @class */ (function () {
                /**
                 * @param {?} _items
                 */
                function ListKeyManager(_items) {
                    var _this = this;
                    this._items = _items;
                    this._activeItemIndex = -1;
                    this._activeItem = null;
                    this._wrap = false;
                    this._letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this._typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    this._vertical = true;
                    this._allowedModifierKeys = [];
                    /**
                     * Predicate function that can be used to check whether an item should be skipped
                     * by the key manager. By default, disabled items are skipped.
                     */
                    this._skipPredicateFn = ( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item.disabled; });
                    // Buffer for the letters that the user has pressed when the typeahead option is turned on.
                    this._pressedLetters = [];
                    /**
                     * Stream that emits any time the TAB key is pressed, so components can react
                     * when focus is shifted off of the list.
                     */
                    this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Stream that emits whenever the active item of the list manager changes.
                     */
                    this.change = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    // We allow for the items to be an array because, in some cases, the consumer may
                    // not have access to a QueryList of the items they want to manage (e.g. when the
                    // items aren't being collected via `ViewChildren` or `ContentChildren`).
                    if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]) {
                        _items.changes.subscribe(( /**
                         * @param {?} newItems
                         * @return {?}
                         */function (newItems) {
                            if (_this._activeItem) {
                                /** @type {?} */
                                var itemArray = newItems.toArray();
                                /** @type {?} */
                                var newIndex = itemArray.indexOf(_this._activeItem);
                                if (newIndex > -1 && newIndex !== _this._activeItemIndex) {
                                    _this._activeItemIndex = newIndex;
                                }
                            }
                        }));
                    }
                }
                /**
                 * Sets the predicate function that determines which items should be skipped by the
                 * list key manager.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} predicate Function that determines whether the given item should be skipped.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.skipPredicate = function (predicate) {
                    ( /** @type {?} */(this))._skipPredicateFn = predicate;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures wrapping mode, which determines whether the active item will wrap to
                 * the other end of list when there are no more items in the given direction.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} shouldWrap Whether the list should wrap when reaching the end.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withWrap = function (shouldWrap) {
                    if (shouldWrap === void 0) { shouldWrap = true; }
                    ( /** @type {?} */(this))._wrap = shouldWrap;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures whether the key manager should be able to move the selection vertically.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} enabled Whether vertical selection should be enabled.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withVerticalOrientation = function (enabled) {
                    if (enabled === void 0) { enabled = true; }
                    ( /** @type {?} */(this))._vertical = enabled;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures the key manager to move the selection horizontally.
                 * Passing in `null` will disable horizontal movement.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} direction Direction in which the selection can be moved.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withHorizontalOrientation = function (direction) {
                    ( /** @type {?} */(this))._horizontal = direction;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Modifier keys which are allowed to be held down and whose default actions will be prevented
                 * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} keys
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withAllowedModifierKeys = function (keys) {
                    ( /** @type {?} */(this))._allowedModifierKeys = keys;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Turns on typeahead mode which allows users to set the active item by typing.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.
                 * @return {THIS}
                 */
                ListKeyManager.prototype.withTypeAhead = function (debounceInterval) {
                    var _this = this;
                    if (debounceInterval === void 0) { debounceInterval = 200; }
                    if (( /** @type {?} */(this))._items.length && ( /** @type {?} */(this))._items.some(( /**
                     * @param {?} item
                     * @return {?}
                     */function (/**
                     * @param {?} item
                     * @return {?}
                     */ item) { return typeof item.getLabel !== 'function'; }))) {
                        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
                    }
                    ( /** @type {?} */(this))._typeaheadSubscription.unsubscribe();
                    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
                    // and convert those letters back into a string. Afterwards find the first item that starts
                    // with that string and select it.
                    ( /** @type {?} */(this))._typeaheadSubscription = ( /** @type {?} */(this))._letterKeyStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["tap"])(( /**
                     * @param {?} keyCode
                     * @return {?}
                     */function (/**
                     * @param {?} keyCode
                     * @return {?}
                     */ keyCode) { return ( /** @type {?} */(_this))._pressedLetters.push(keyCode); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["debounceTime"])(debounceInterval), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["filter"])(( /**
                     * @return {?}
                     */function () { return ( /** @type {?} */(_this))._pressedLetters.length > 0; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(( /**
                     * @return {?}
                     */function () { return ( /** @type {?} */(_this))._pressedLetters.join(''); }))).subscribe(( /**
                     * @param {?} inputString
                     * @return {?}
                     */function (/**
                     * @param {?} inputString
                     * @return {?}
                     */ inputString) {
                        /** @type {?} */
                        var items = ( /** @type {?} */(_this))._getItemsArray();
                        // Start at 1 because we want to start searching at the item immediately
                        // following the current active item.
                        for (var i = 1; i < items.length + 1; i++) {
                            /** @type {?} */
                            var index = (( /** @type {?} */(_this))._activeItemIndex + i) % items.length;
                            /** @type {?} */
                            var item = items[index];
                            if (!( /** @type {?} */(_this))._skipPredicateFn(item) &&
                                ( /** @type {?} */(item.getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {
                                ( /** @type {?} */(_this)).setActiveItem(index);
                                break;
                            }
                        }
                        ( /** @type {?} */(_this))._pressedLetters = [];
                    }));
                    return ( /** @type {?} */(this));
                };
                /**
                 * @param {?} item
                 * @return {?}
                 */
                ListKeyManager.prototype.setActiveItem = function (item) {
                    /** @type {?} */
                    var previousIndex = this._activeItemIndex;
                    this.updateActiveItem(item);
                    if (this._activeItemIndex !== previousIndex) {
                        this.change.next(this._activeItemIndex);
                    }
                };
                /**
                 * Sets the active item depending on the key event passed in.
                 * @param {?} event Keyboard event to be used for determining which element should be active.
                 * @return {?}
                 */
                ListKeyManager.prototype.onKeydown = function (event) {
                    var _this = this;
                    /** @type {?} */
                    var keyCode = event.keyCode;
                    /** @type {?} */
                    var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
                    /** @type {?} */
                    var isModifierAllowed = modifiers.every(( /**
                     * @param {?} modifier
                     * @return {?}
                     */function (/**
                     * @param {?} modifier
                     * @return {?}
                     */ modifier) {
                        return !event[modifier] || _this._allowedModifierKeys.indexOf(modifier) > -1;
                    }));
                    switch (keyCode) {
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["TAB"]:
                            this.tabOut.next();
                            return;
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                            if (this._vertical && isModifierAllowed) {
                                this.setNextItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                            if (this._vertical && isModifierAllowed) {
                                this.setPreviousItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                            if (this._horizontal && isModifierAllowed) {
                                this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                            if (this._horizontal && isModifierAllowed) {
                                this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
                                break;
                            }
                            else {
                                return;
                            }
                        default:
                            if (isModifierAllowed || Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["hasModifierKey"])(event, 'shiftKey')) {
                                // Attempt to use the `event.key` which also maps it to the user's keyboard language,
                                // otherwise fall back to resolving alphanumeric characters via the keyCode.
                                if (event.key && event.key.length === 1) {
                                    this._letterKeyStream.next(event.key.toLocaleUpperCase());
                                }
                                else if ((keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["A"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["Z"]) || (keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ZERO"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["NINE"])) {
                                    this._letterKeyStream.next(String.fromCharCode(keyCode));
                                }
                            }
                            // Note that we return here, in order to avoid preventing
                            // the default action of non-navigational keys.
                            return;
                    }
                    this._pressedLetters = [];
                    event.preventDefault();
                };
                Object.defineProperty(ListKeyManager.prototype, "activeItemIndex", {
                    /**
                     * Index of the currently active item.
                     * @return {?}
                     */
                    get: function () {
                        return this._activeItemIndex;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ListKeyManager.prototype, "activeItem", {
                    /**
                     * The active item.
                     * @return {?}
                     */
                    get: function () {
                        return this._activeItem;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the active item to the first enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setFirstItemActive = function () {
                    this._setActiveItemByIndex(0, 1);
                };
                /**
                 * Sets the active item to the last enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setLastItemActive = function () {
                    this._setActiveItemByIndex(this._items.length - 1, -1);
                };
                /**
                 * Sets the active item to the next enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setNextItemActive = function () {
                    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
                };
                /**
                 * Sets the active item to a previous enabled item in the list.
                 * @return {?}
                 */
                ListKeyManager.prototype.setPreviousItemActive = function () {
                    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()
                        : this._setActiveItemByDelta(-1);
                };
                /**
                 * @param {?} item
                 * @return {?}
                 */
                ListKeyManager.prototype.updateActiveItem = function (item) {
                    /** @type {?} */
                    var itemArray = this._getItemsArray();
                    /** @type {?} */
                    var index = typeof item === 'number' ? item : itemArray.indexOf(item);
                    /** @type {?} */
                    var activeItem = itemArray[index];
                    // Explicitly check for `null` and `undefined` because other falsy values are valid.
                    this._activeItem = activeItem == null ? null : activeItem;
                    this._activeItemIndex = index;
                };
                /**
                 * Allows setting of the activeItemIndex without any other effects.
                 * @deprecated Use `updateActiveItem` instead.
                 * \@breaking-change 8.0.0
                 * @param {?} index The new activeItemIndex.
                 * @return {?}
                 */
                ListKeyManager.prototype.updateActiveItemIndex = function (index) {
                    this.updateActiveItem(index);
                };
                /**
                 * This method sets the active item, given a list of items and the delta between the
                 * currently active item and the new active item. It will calculate differently
                 * depending on whether wrap mode is turned on.
                 * @private
                 * @param {?} delta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveItemByDelta = function (delta) {
                    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
                };
                /**
                 * Sets the active item properly given "wrap" mode. In other words, it will continue to move
                 * down the list until it finds an item that is not disabled, and it will wrap if it
                 * encounters either end of the list.
                 * @private
                 * @param {?} delta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveInWrapMode = function (delta) {
                    /** @type {?} */
                    var items = this._getItemsArray();
                    for (var i = 1; i <= items.length; i++) {
                        /** @type {?} */
                        var index = (this._activeItemIndex + (delta * i) + items.length) % items.length;
                        /** @type {?} */
                        var item = items[index];
                        if (!this._skipPredicateFn(item)) {
                            this.setActiveItem(index);
                            return;
                        }
                    }
                };
                /**
                 * Sets the active item properly given the default mode. In other words, it will
                 * continue to move down the list until it finds an item that is not disabled. If
                 * it encounters either end of the list, it will stop and not wrap.
                 * @private
                 * @param {?} delta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveInDefaultMode = function (delta) {
                    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
                };
                /**
                 * Sets the active item to the first enabled item starting at the index specified. If the
                 * item is disabled, it will move in the fallbackDelta direction until it either
                 * finds an enabled item or encounters the end of the list.
                 * @private
                 * @param {?} index
                 * @param {?} fallbackDelta
                 * @return {?}
                 */
                ListKeyManager.prototype._setActiveItemByIndex = function (index, fallbackDelta) {
                    /** @type {?} */
                    var items = this._getItemsArray();
                    if (!items[index]) {
                        return;
                    }
                    while (this._skipPredicateFn(items[index])) {
                        index += fallbackDelta;
                        if (!items[index]) {
                            return;
                        }
                    }
                    this.setActiveItem(index);
                };
                /**
                 * Returns the items as an array.
                 * @private
                 * @return {?}
                 */
                ListKeyManager.prototype._getItemsArray = function () {
                    return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"] ? this._items.toArray() : this._items;
                };
                return ListKeyManager;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @template T
             */
            var ActiveDescendantKeyManager = /** @class */ (function (_super) {
                __extends(ActiveDescendantKeyManager, _super);
                function ActiveDescendantKeyManager() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @param {?} index
                 * @return {?}
                 */
                ActiveDescendantKeyManager.prototype.setActiveItem = function (index) {
                    if (this.activeItem) {
                        this.activeItem.setInactiveStyles();
                    }
                    _super.prototype.setActiveItem.call(this, index);
                    if (this.activeItem) {
                        this.activeItem.setActiveStyles();
                    }
                };
                return ActiveDescendantKeyManager;
            }(ListKeyManager));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @template T
             */
            var FocusKeyManager = /** @class */ (function (_super) {
                __extends(FocusKeyManager, _super);
                function FocusKeyManager() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this._origin = 'program';
                    return _this;
                }
                /**
                 * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} origin Focus origin to be used when focusing items.
                 * @return {THIS}
                 */
                FocusKeyManager.prototype.setFocusOrigin = function (origin) {
                    ( /** @type {?} */(this))._origin = origin;
                    return ( /** @type {?} */(this));
                };
                /**
                 * @param {?} item
                 * @return {?}
                 */
                FocusKeyManager.prototype.setActiveItem = function (item) {
                    _super.prototype.setActiveItem.call(this, item);
                    if (this.activeItem) {
                        this.activeItem.focus(this._origin);
                    }
                };
                return FocusKeyManager;
            }(ListKeyManager));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // The InteractivityChecker leans heavily on the ally.js accessibility utilities.
            // Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
            // supported.
            /**
             * Utility for checking the interactivity of an element, such as whether is is focusable or
             * tabbable.
             */
            var InteractivityChecker = /** @class */ (function () {
                /**
                 * @param {?} _platform
                 */
                function InteractivityChecker(_platform) {
                    this._platform = _platform;
                }
                /**
                 * Gets whether an element is disabled.
                 *
                 * @param {?} element Element to be checked.
                 * @return {?} Whether the element is disabled.
                 */
                InteractivityChecker.prototype.isDisabled = function (element) {
                    // This does not capture some cases, such as a non-form control with a disabled attribute or
                    // a form control inside of a disabled form, but should capture the most common cases.
                    return element.hasAttribute('disabled');
                };
                /**
                 * Gets whether an element is visible for the purposes of interactivity.
                 *
                 * This will capture states like `display: none` and `visibility: hidden`, but not things like
                 * being clipped by an `overflow: hidden` parent or being outside the viewport.
                 *
                 * @param {?} element
                 * @return {?} Whether the element is visible.
                 */
                InteractivityChecker.prototype.isVisible = function (element) {
                    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
                };
                /**
                 * Gets whether an element can be reached via Tab key.
                 * Assumes that the element has already been checked with isFocusable.
                 *
                 * @param {?} element Element to be checked.
                 * @return {?} Whether the element is tabbable.
                 */
                InteractivityChecker.prototype.isTabbable = function (element) {
                    // Nothing is tabbable on the server 😎
                    if (!this._platform.isBrowser) {
                        return false;
                    }
                    /** @type {?} */
                    var frameElement = getFrameElement(getWindow(element));
                    if (frameElement) {
                        /** @type {?} */
                        var frameType = frameElement && frameElement.nodeName.toLowerCase();
                        // Frame elements inherit their tabindex onto all child elements.
                        if (getTabIndexValue(frameElement) === -1) {
                            return false;
                        }
                        // Webkit and Blink consider anything inside of an <object> element as non-tabbable.
                        if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {
                            return false;
                        }
                        // Webkit and Blink disable tabbing to an element inside of an invisible frame.
                        if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {
                            return false;
                        }
                    }
                    /** @type {?} */
                    var nodeName = element.nodeName.toLowerCase();
                    /** @type {?} */
                    var tabIndexValue = getTabIndexValue(element);
                    if (element.hasAttribute('contenteditable')) {
                        return tabIndexValue !== -1;
                    }
                    if (nodeName === 'iframe') {
                        // The frames may be tabbable depending on content, but it's not possibly to reliably
                        // investigate the content of the frames.
                        return false;
                    }
                    if (nodeName === 'audio') {
                        if (!element.hasAttribute('controls')) {
                            // By default an <audio> element without the controls enabled is not tabbable.
                            return false;
                        }
                        else if (this._platform.BLINK) {
                            // In Blink <audio controls> elements are always tabbable.
                            return true;
                        }
                    }
                    if (nodeName === 'video') {
                        if (!element.hasAttribute('controls') && this._platform.TRIDENT) {
                            // In Trident a <video> element without the controls enabled is not tabbable.
                            return false;
                        }
                        else if (this._platform.BLINK || this._platform.FIREFOX) {
                            // In Chrome and Firefox <video controls> elements are always tabbable.
                            return true;
                        }
                    }
                    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {
                        // In all Blink and WebKit based browsers <object> elements are never tabbable.
                        return false;
                    }
                    // In iOS the browser only considers some specific elements as tabbable.
                    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
                        return false;
                    }
                    return element.tabIndex >= 0;
                };
                /**
                 * Gets whether an element can be focused by the user.
                 *
                 * @param {?} element Element to be checked.
                 * @return {?} Whether the element is focusable.
                 */
                InteractivityChecker.prototype.isFocusable = function (element) {
                    // Perform checks in order of left to most expensive.
                    // Again, naive approach that does not capture many edge cases and browser quirks.
                    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
                };
                return InteractivityChecker;
            }());
            InteractivityChecker.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            InteractivityChecker.ctorParameters = function () { return [
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"] }
            ]; };
            /** @nocollapse */ InteractivityChecker.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"])); }, token: InteractivityChecker, providedIn: "root" });
            /**
             * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
             * the frameElement property is being accessed from a different host address, this property
             * should be accessed carefully.
             * @param {?} window
             * @return {?}
             */
            function getFrameElement(window) {
                try {
                    return ( /** @type {?} */(window.frameElement));
                }
                catch (_a) {
                    return null;
                }
            }
            /**
             * Checks whether the specified element has any geometry / rectangles.
             * @param {?} element
             * @return {?}
             */
            function hasGeometry(element) {
                // Use logic from jQuery to check for an invisible element.
                // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
                return !!(element.offsetWidth || element.offsetHeight ||
                    (typeof element.getClientRects === 'function' && element.getClientRects().length));
            }
            /**
             * Gets whether an element's
             * @param {?} element
             * @return {?}
             */
            function isNativeFormElement(element) {
                /** @type {?} */
                var nodeName = element.nodeName.toLowerCase();
                return nodeName === 'input' ||
                    nodeName === 'select' ||
                    nodeName === 'button' ||
                    nodeName === 'textarea';
            }
            /**
             * Gets whether an element is an `<input type="hidden">`.
             * @param {?} element
             * @return {?}
             */
            function isHiddenInput(element) {
                return isInputElement(element) && element.type == 'hidden';
            }
            /**
             * Gets whether an element is an anchor that has an href attribute.
             * @param {?} element
             * @return {?}
             */
            function isAnchorWithHref(element) {
                return isAnchorElement(element) && element.hasAttribute('href');
            }
            /**
             * Gets whether an element is an input element.
             * @param {?} element
             * @return {?}
             */
            function isInputElement(element) {
                return element.nodeName.toLowerCase() == 'input';
            }
            /**
             * Gets whether an element is an anchor element.
             * @param {?} element
             * @return {?}
             */
            function isAnchorElement(element) {
                return element.nodeName.toLowerCase() == 'a';
            }
            /**
             * Gets whether an element has a valid tabindex.
             * @param {?} element
             * @return {?}
             */
            function hasValidTabIndex(element) {
                if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
                    return false;
                }
                /** @type {?} */
                var tabIndex = element.getAttribute('tabindex');
                // IE11 parses tabindex="" as the value "-32768"
                if (tabIndex == '-32768') {
                    return false;
                }
                return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
            }
            /**
             * Returns the parsed tabindex from the element attributes instead of returning the
             * evaluated tabindex from the browsers defaults.
             * @param {?} element
             * @return {?}
             */
            function getTabIndexValue(element) {
                if (!hasValidTabIndex(element)) {
                    return null;
                }
                // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
                /** @type {?} */
                var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
                return isNaN(tabIndex) ? -1 : tabIndex;
            }
            /**
             * Checks whether the specified element is potentially tabbable on iOS
             * @param {?} element
             * @return {?}
             */
            function isPotentiallyTabbableIOS(element) {
                /** @type {?} */
                var nodeName = element.nodeName.toLowerCase();
                /** @type {?} */
                var inputType = nodeName === 'input' && (( /** @type {?} */(element))).type;
                return inputType === 'text'
                    || inputType === 'password'
                    || nodeName === 'select'
                    || nodeName === 'textarea';
            }
            /**
             * Gets whether an element is potentially focusable without taking current visible/disabled state
             * into account.
             * @param {?} element
             * @return {?}
             */
            function isPotentiallyFocusable(element) {
                // Inputs are potentially focusable *unless* they're type="hidden".
                if (isHiddenInput(element)) {
                    return false;
                }
                return isNativeFormElement(element) ||
                    isAnchorWithHref(element) ||
                    element.hasAttribute('contenteditable') ||
                    hasValidTabIndex(element);
            }
            /**
             * Gets the parent window of a DOM node with regards of being inside of an iframe.
             * @param {?} node
             * @return {?}
             */
            function getWindow(node) {
                // ownerDocument is null if `node` itself *is* a document.
                return node.ownerDocument && node.ownerDocument.defaultView || window;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class that allows for trapping focus within a DOM element.
             *
             * This class currently uses a relatively simple approach to focus trapping.
             * It assumes that the tab order is the same as DOM order, which is not necessarily true.
             * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.
             */
            var FocusTrap = /** @class */ (function () {
                /**
                 * @param {?} _element
                 * @param {?} _checker
                 * @param {?} _ngZone
                 * @param {?} _document
                 * @param {?=} deferAnchors
                 */
                function FocusTrap(_element, _checker, _ngZone, _document, deferAnchors) {
                    var _this = this;
                    if (deferAnchors === void 0) { deferAnchors = false; }
                    this._element = _element;
                    this._checker = _checker;
                    this._ngZone = _ngZone;
                    this._document = _document;
                    this._hasAttached = false;
                    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.
                    this.startAnchorListener = ( /**
                     * @return {?}
                     */function () { return _this.focusLastTabbableElement(); });
                    this.endAnchorListener = ( /**
                     * @return {?}
                     */function () { return _this.focusFirstTabbableElement(); });
                    this._enabled = true;
                    if (!deferAnchors) {
                        this.attachAnchors();
                    }
                }
                Object.defineProperty(FocusTrap.prototype, "enabled", {
                    /**
                     * Whether the focus trap is active.
                     * @return {?}
                     */
                    get: function () { return this._enabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._enabled = value;
                        if (this._startAnchor && this._endAnchor) {
                            this._toggleAnchorTabIndex(value, this._startAnchor);
                            this._toggleAnchorTabIndex(value, this._endAnchor);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Destroys the focus trap by cleaning up the anchors.
                 * @return {?}
                 */
                FocusTrap.prototype.destroy = function () {
                    /** @type {?} */
                    var startAnchor = this._startAnchor;
                    /** @type {?} */
                    var endAnchor = this._endAnchor;
                    if (startAnchor) {
                        startAnchor.removeEventListener('focus', this.startAnchorListener);
                        if (startAnchor.parentNode) {
                            startAnchor.parentNode.removeChild(startAnchor);
                        }
                    }
                    if (endAnchor) {
                        endAnchor.removeEventListener('focus', this.endAnchorListener);
                        if (endAnchor.parentNode) {
                            endAnchor.parentNode.removeChild(endAnchor);
                        }
                    }
                    this._startAnchor = this._endAnchor = null;
                };
                /**
                 * Inserts the anchors into the DOM. This is usually done automatically
                 * in the constructor, but can be deferred for cases like directives with `*ngIf`.
                 * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case
                 * if the target element isn't currently in the DOM.
                 */
                FocusTrap.prototype.attachAnchors = function () {
                    var _this = this;
                    // If we're not on the browser, there can be no focus to trap.
                    if (this._hasAttached) {
                        return true;
                    }
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        if (!_this._startAnchor) {
                            _this._startAnchor = _this._createAnchor();
                            ( /** @type {?} */(_this._startAnchor)).addEventListener('focus', _this.startAnchorListener);
                        }
                        if (!_this._endAnchor) {
                            _this._endAnchor = _this._createAnchor();
                            ( /** @type {?} */(_this._endAnchor)).addEventListener('focus', _this.endAnchorListener);
                        }
                    }));
                    if (this._element.parentNode) {
                        this._element.parentNode.insertBefore(( /** @type {?} */(this._startAnchor)), this._element);
                        this._element.parentNode.insertBefore(( /** @type {?} */(this._endAnchor)), this._element.nextSibling);
                        this._hasAttached = true;
                    }
                    return this._hasAttached;
                };
                /**
                 * Waits for the zone to stabilize, then either focuses the first element that the
                 * user specified, or the first tabbable element.
                 * @return {?} Returns a promise that resolves with a boolean, depending
                 * on whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusInitialElementWhenReady = function () {
                    var _this = this;
                    return new Promise(( /**
                     * @param {?} resolve
                     * @return {?}
                     */function (/**
                     * @param {?} resolve
                     * @return {?}
                     */ resolve) {
                        _this._executeOnStable(( /**
                         * @return {?}
                         */function () { return resolve(_this.focusInitialElement()); }));
                    }));
                };
                /**
                 * Waits for the zone to stabilize, then focuses
                 * the first tabbable element within the focus trap region.
                 * @return {?} Returns a promise that resolves with a boolean, depending
                 * on whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusFirstTabbableElementWhenReady = function () {
                    var _this = this;
                    return new Promise(( /**
                     * @param {?} resolve
                     * @return {?}
                     */function (/**
                     * @param {?} resolve
                     * @return {?}
                     */ resolve) {
                        _this._executeOnStable(( /**
                         * @return {?}
                         */function () { return resolve(_this.focusFirstTabbableElement()); }));
                    }));
                };
                /**
                 * Waits for the zone to stabilize, then focuses
                 * the last tabbable element within the focus trap region.
                 * @return {?} Returns a promise that resolves with a boolean, depending
                 * on whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusLastTabbableElementWhenReady = function () {
                    var _this = this;
                    return new Promise(( /**
                     * @param {?} resolve
                     * @return {?}
                     */function (/**
                     * @param {?} resolve
                     * @return {?}
                     */ resolve) {
                        _this._executeOnStable(( /**
                         * @return {?}
                         */function () { return resolve(_this.focusLastTabbableElement()); }));
                    }));
                };
                /**
                 * Get the specified boundary element of the trapped region.
                 * @private
                 * @param {?} bound The boundary to get (start or end of trapped region).
                 * @return {?} The boundary element.
                 */
                FocusTrap.prototype._getRegionBoundary = function (bound) {
                    // Contains the deprecated version of selector, for temporary backwards comparability.
                    /** @type {?} */
                    var markers = ( /** @type {?} */(this._element.querySelectorAll("[cdk-focus-region-" + bound + "], " +
                        ("[cdkFocusRegion" + bound + "], ") +
                        ("[cdk-focus-" + bound + "]"))));
                    for (var i = 0; i < markers.length; i++) {
                        // @breaking-change 8.0.0
                        if (markers[i].hasAttribute("cdk-focus-" + bound)) {
                            console.warn("Found use of deprecated attribute 'cdk-focus-" + bound + "', " +
                                ("use 'cdkFocusRegion" + bound + "' instead. The deprecated ") +
                                "attribute will be removed in 8.0.0.", markers[i]);
                        }
                        else if (markers[i].hasAttribute("cdk-focus-region-" + bound)) {
                            console.warn("Found use of deprecated attribute 'cdk-focus-region-" + bound + "', " +
                                ("use 'cdkFocusRegion" + bound + "' instead. The deprecated attribute ") +
                                "will be removed in 8.0.0.", markers[i]);
                        }
                    }
                    if (bound == 'start') {
                        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
                    }
                    return markers.length ?
                        markers[markers.length - 1] : this._getLastTabbableElement(this._element);
                };
                /**
                 * Focuses the element that should be focused when the focus trap is initialized.
                 * @return {?} Whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusInitialElement = function () {
                    // Contains the deprecated version of selector, for temporary backwards comparability.
                    /** @type {?} */
                    var redirectToElement = ( /** @type {?} */(this._element.querySelector("[cdk-focus-initial], " +
                        "[cdkFocusInitial]")));
                    if (redirectToElement) {
                        // @breaking-change 8.0.0
                        if (redirectToElement.hasAttribute("cdk-focus-initial")) {
                            console.warn("Found use of deprecated attribute 'cdk-focus-initial', " +
                                "use 'cdkFocusInitial' instead. The deprecated attribute " +
                                "will be removed in 8.0.0", redirectToElement);
                        }
                        // Warn the consumer if the element they've pointed to
                        // isn't focusable, when not in production mode.
                        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && !this._checker.isFocusable(redirectToElement)) {
                            console.warn("Element matching '[cdkFocusInitial]' is not focusable.", redirectToElement);
                        }
                        redirectToElement.focus();
                        return true;
                    }
                    return this.focusFirstTabbableElement();
                };
                /**
                 * Focuses the first tabbable element within the focus trap region.
                 * @return {?} Whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusFirstTabbableElement = function () {
                    /** @type {?} */
                    var redirectToElement = this._getRegionBoundary('start');
                    if (redirectToElement) {
                        redirectToElement.focus();
                    }
                    return !!redirectToElement;
                };
                /**
                 * Focuses the last tabbable element within the focus trap region.
                 * @return {?} Whether focus was moved successfuly.
                 */
                FocusTrap.prototype.focusLastTabbableElement = function () {
                    /** @type {?} */
                    var redirectToElement = this._getRegionBoundary('end');
                    if (redirectToElement) {
                        redirectToElement.focus();
                    }
                    return !!redirectToElement;
                };
                /**
                 * Checks whether the focus trap has successfuly been attached.
                 * @return {?}
                 */
                FocusTrap.prototype.hasAttached = function () {
                    return this._hasAttached;
                };
                /**
                 * Get the first tabbable element from a DOM subtree (inclusive).
                 * @private
                 * @param {?} root
                 * @return {?}
                 */
                FocusTrap.prototype._getFirstTabbableElement = function (root) {
                    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
                        return root;
                    }
                    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall
                    // back to `childNodes` which includes text nodes, comments etc.
                    /** @type {?} */
                    var children = root.children || root.childNodes;
                    for (var i = 0; i < children.length; i++) {
                        /** @type {?} */
                        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?
                            this._getFirstTabbableElement(( /** @type {?} */(children[i]))) :
                            null;
                        if (tabbableChild) {
                            return tabbableChild;
                        }
                    }
                    return null;
                };
                /**
                 * Get the last tabbable element from a DOM subtree (inclusive).
                 * @private
                 * @param {?} root
                 * @return {?}
                 */
                FocusTrap.prototype._getLastTabbableElement = function (root) {
                    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
                        return root;
                    }
                    // Iterate in reverse DOM order.
                    /** @type {?} */
                    var children = root.children || root.childNodes;
                    for (var i = children.length - 1; i >= 0; i--) {
                        /** @type {?} */
                        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?
                            this._getLastTabbableElement(( /** @type {?} */(children[i]))) :
                            null;
                        if (tabbableChild) {
                            return tabbableChild;
                        }
                    }
                    return null;
                };
                /**
                 * Creates an anchor element.
                 * @private
                 * @return {?}
                 */
                FocusTrap.prototype._createAnchor = function () {
                    /** @type {?} */
                    var anchor = this._document.createElement('div');
                    this._toggleAnchorTabIndex(this._enabled, anchor);
                    anchor.classList.add('cdk-visually-hidden');
                    anchor.classList.add('cdk-focus-trap-anchor');
                    anchor.setAttribute('aria-hidden', 'true');
                    return anchor;
                };
                /**
                 * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
                 * @private
                 * @param {?} isEnabled Whether the focus trap is enabled.
                 * @param {?} anchor Anchor on which to toggle the tabindex.
                 * @return {?}
                 */
                FocusTrap.prototype._toggleAnchorTabIndex = function (isEnabled, anchor) {
                    // Remove the tabindex completely, rather than setting it to -1, because if the
                    // element has a tabindex, the user might still hit it when navigating with the arrow keys.
                    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
                };
                /**
                 * Executes a function when the zone is stable.
                 * @private
                 * @param {?} fn
                 * @return {?}
                 */
                FocusTrap.prototype._executeOnStable = function (fn) {
                    if (this._ngZone.isStable) {
                        fn();
                    }
                    else {
                        this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1)).subscribe(fn);
                    }
                };
                return FocusTrap;
            }());
            /**
             * Factory that allows easy instantiation of focus traps.
             */
            var FocusTrapFactory = /** @class */ (function () {
                /**
                 * @param {?} _checker
                 * @param {?} _ngZone
                 * @param {?} _document
                 */
                function FocusTrapFactory(_checker, _ngZone, _document) {
                    this._checker = _checker;
                    this._ngZone = _ngZone;
                    this._document = _document;
                }
                /**
                 * Creates a focus-trapped region around the given element.
                 * @param {?} element The element around which focus will be trapped.
                 * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done
                 *     manually by the user.
                 * @return {?} The created focus trap instance.
                 */
                FocusTrapFactory.prototype.create = function (element, deferCaptureElements) {
                    if (deferCaptureElements === void 0) { deferCaptureElements = false; }
                    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
                };
                return FocusTrapFactory;
            }());
            FocusTrapFactory.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            FocusTrapFactory.ctorParameters = function () { return [
                { type: InteractivityChecker },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ FocusTrapFactory.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(InteractivityChecker), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); }, token: FocusTrapFactory, providedIn: "root" });
            /**
             * Directive for trapping focus within a region.
             */
            var CdkTrapFocus = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _focusTrapFactory
                 * @param {?} _document
                 */
                function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {
                    this._elementRef = _elementRef;
                    this._focusTrapFactory = _focusTrapFactory;
                    /**
                     * Previously focused element to restore focus to upon destroy when using autoCapture.
                     */
                    this._previouslyFocusedElement = null;
                    this._document = _document;
                    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
                }
                Object.defineProperty(CdkTrapFocus.prototype, "enabled", {
                    /**
                     * Whether the focus trap is active.
                     * @return {?}
                     */
                    get: function () { return this.focusTrap.enabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this.focusTrap.enabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTrapFocus.prototype, "autoCapture", {
                    /**
                     * Whether the directive should automatially move focus into the trapped region upon
                     * initialization and return focus to the previous activeElement upon destruction.
                     * @return {?}
                     */
                    get: function () { return this._autoCapture; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._autoCapture = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTrapFocus.prototype.ngOnDestroy = function () {
                    this.focusTrap.destroy();
                    // If we stored a previously focused element when using autoCapture, return focus to that
                    // element now that the trapped region is being destroyed.
                    if (this._previouslyFocusedElement) {
                        this._previouslyFocusedElement.focus();
                        this._previouslyFocusedElement = null;
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTrapFocus.prototype.ngAfterContentInit = function () {
                    this.focusTrap.attachAnchors();
                    if (this.autoCapture) {
                        this._previouslyFocusedElement = ( /** @type {?} */(this._document.activeElement));
                        this.focusTrap.focusInitialElementWhenReady();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTrapFocus.prototype.ngDoCheck = function () {
                    if (!this.focusTrap.hasAttached()) {
                        this.focusTrap.attachAnchors();
                    }
                };
                return CdkTrapFocus;
            }());
            CdkTrapFocus.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkTrapFocus]',
                            exportAs: 'cdkTrapFocus',
                        },] },
            ];
            /** @nocollapse */
            CdkTrapFocus.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: FocusTrapFactory },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
            ]; };
            CdkTrapFocus.propDecorators = {
                enabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkTrapFocus',] }],
                autoCapture: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkTrapFocusAutoCapture',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('liveAnnouncerElement', {
                providedIn: 'root',
                factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
                return null;
            }
            /**
             * Injection token that can be used to configure the default options for the LiveAnnouncer.
             * @type {?}
             */
            var LIVE_ANNOUNCER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('LIVE_ANNOUNCER_DEFAULT_OPTIONS');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LiveAnnouncer = /** @class */ (function () {
                /**
                 * @param {?} elementToken
                 * @param {?} _ngZone
                 * @param {?} _document
                 * @param {?=} _defaultOptions
                 */
                function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {
                    this._ngZone = _ngZone;
                    this._defaultOptions = _defaultOptions;
                    // We inject the live element and document as `any` because the constructor signature cannot
                    // reference browser globals (HTMLElement, Document) on non-browser environments, since having
                    // a class decorator causes TypeScript to preserve the constructor signature types.
                    this._document = _document;
                    this._liveElement = elementToken || this._createLiveElement();
                }
                /**
                 * @param {?} message
                 * @param {...?} args
                 * @return {?}
                 */
                LiveAnnouncer.prototype.announce = function (message) {
                    var _b;
                    var _this = this;
                    var args = [];
                    for (var _c = 1; _c < arguments.length; _c++) {
                        args[_c - 1] = arguments[_c];
                    }
                    /** @type {?} */
                    var defaultOptions = this._defaultOptions;
                    /** @type {?} */
                    var politeness;
                    /** @type {?} */
                    var duration;
                    if (args.length === 1 && typeof args[0] === 'number') {
                        duration = args[0];
                    }
                    else {
                        _b = __read(args, 2), politeness = _b[0], duration = _b[1];
                    }
                    this.clear();
                    clearTimeout(this._previousTimeout);
                    if (!politeness) {
                        politeness =
                            (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';
                    }
                    if (duration == null && defaultOptions) {
                        duration = defaultOptions.duration;
                    }
                    // TODO: ensure changing the politeness works on all environments we support.
                    this._liveElement.setAttribute('aria-live', politeness);
                    // This 100ms timeout is necessary for some browser + screen-reader combinations:
                    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
                    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
                    //   second time without clearing and then using a non-zero delay.
                    // (using JAWS 17 at time of this writing).
                    return this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        return new Promise(( /**
                         * @param {?} resolve
                         * @return {?}
                         */function (/**
                         * @param {?} resolve
                         * @return {?}
                         */ resolve) {
                            clearTimeout(_this._previousTimeout);
                            _this._previousTimeout = setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this._liveElement.textContent = message;
                                resolve();
                                if (typeof duration === 'number') {
                                    _this._previousTimeout = setTimeout(( /**
                                     * @return {?}
                                     */function () { return _this.clear(); }), duration);
                                }
                            }), 100);
                        }));
                    }));
                };
                /**
                 * Clears the current text from the announcer element. Can be used to prevent
                 * screen readers from reading the text out again while the user is going
                 * through the page landmarks.
                 * @return {?}
                 */
                LiveAnnouncer.prototype.clear = function () {
                    if (this._liveElement) {
                        this._liveElement.textContent = '';
                    }
                };
                /**
                 * @return {?}
                 */
                LiveAnnouncer.prototype.ngOnDestroy = function () {
                    clearTimeout(this._previousTimeout);
                    if (this._liveElement && this._liveElement.parentNode) {
                        this._liveElement.parentNode.removeChild(this._liveElement);
                        this._liveElement = ( /** @type {?} */(null));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                LiveAnnouncer.prototype._createLiveElement = function () {
                    /** @type {?} */
                    var elementClass = 'cdk-live-announcer-element';
                    /** @type {?} */
                    var previousElements = this._document.getElementsByClassName(elementClass);
                    /** @type {?} */
                    var liveEl = this._document.createElement('div');
                    // Remove any old containers. This can happen when coming in from a server-side-rendered page.
                    for (var i = 0; i < previousElements.length; i++) {
                        ( /** @type {?} */(previousElements[i].parentNode)).removeChild(previousElements[i]);
                    }
                    liveEl.classList.add(elementClass);
                    liveEl.classList.add('cdk-visually-hidden');
                    liveEl.setAttribute('aria-atomic', 'true');
                    liveEl.setAttribute('aria-live', 'polite');
                    this._document.body.appendChild(liveEl);
                    return liveEl;
                };
                return LiveAnnouncer;
            }());
            LiveAnnouncer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            LiveAnnouncer.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }
            ]; };
            /** @nocollapse */ LiveAnnouncer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: "root" });
            /**
             * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
             * with a wider range of browsers and screen readers.
             */
            var CdkAriaLive = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _liveAnnouncer
                 * @param {?} _contentObserver
                 * @param {?} _ngZone
                 */
                function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
                    this._elementRef = _elementRef;
                    this._liveAnnouncer = _liveAnnouncer;
                    this._contentObserver = _contentObserver;
                    this._ngZone = _ngZone;
                    this._politeness = 'off';
                }
                Object.defineProperty(CdkAriaLive.prototype, "politeness", {
                    /**
                     * The aria-live politeness level to use when announcing messages.
                     * @return {?}
                     */
                    get: function () { return this._politeness; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        var _this = this;
                        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';
                        if (this._politeness === 'off') {
                            if (this._subscription) {
                                this._subscription.unsubscribe();
                                this._subscription = null;
                            }
                        }
                        else if (!this._subscription) {
                            this._subscription = this._ngZone.runOutsideAngular(( /**
                             * @return {?}
                             */function () {
                                return _this._contentObserver
                                    .observe(_this._elementRef)
                                    .subscribe(( /**
                             * @return {?}
                             */function () {
                                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.
                                    /** @type {?} */
                                    var elementText = _this._elementRef.nativeElement.textContent;
                                    // The `MutationObserver` fires also for attribute
                                    // changes which we don't want to announce.
                                    if (elementText !== _this._previousAnnouncedText) {
                                        _this._liveAnnouncer.announce(elementText, _this._politeness);
                                        _this._previousAnnouncedText = elementText;
                                    }
                                }));
                            }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkAriaLive.prototype.ngOnDestroy = function () {
                    if (this._subscription) {
                        this._subscription.unsubscribe();
                    }
                };
                return CdkAriaLive;
            }());
            CdkAriaLive.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkAriaLive]',
                            exportAs: 'cdkAriaLive',
                        },] },
            ];
            /** @nocollapse */
            CdkAriaLive.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: LiveAnnouncer },
                { type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ContentObserver"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
            ]; };
            CdkAriaLive.propDecorators = {
                politeness: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkAriaLive',] }]
            };
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentAnnouncer
             * @param {?} liveElement
             * @param {?} _document
             * @param {?} ngZone
             * @return {?}
             */
            function LIVE_ANNOUNCER_PROVIDER_FACTORY(parentAnnouncer, liveElement, _document, ngZone) {
                return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var LIVE_ANNOUNCER_PROVIDER = {
                // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.
                provide: LiveAnnouncer,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), LiveAnnouncer],
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"](LIVE_ANNOUNCER_ELEMENT_TOKEN)],
                    _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],
                ],
                useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
            // that a value of around 650ms seems appropriate.
            /** @type {?} */
            var TOUCH_BUFFER_MS = 650;
            /**
             * Event listener options that enable capturing and also
             * mark the listener as passive if the browser supports it.
             * @type {?}
             */
            var captureEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["normalizePassiveListenerOptions"])({
                passive: true,
                capture: true
            });
            /**
             * Monitors mouse and keyboard events to determine the cause of focus events.
             */
            var FocusMonitor = /** @class */ (function () {
                /**
                 * @param {?} _ngZone
                 * @param {?} _platform
                 */
                function FocusMonitor(_ngZone, _platform) {
                    var _this = this;
                    this._ngZone = _ngZone;
                    this._platform = _platform;
                    /**
                     * The focus origin that the next focus event is a result of.
                     */
                    this._origin = null;
                    /**
                     * Whether the window has just been focused.
                     */
                    this._windowFocused = false;
                    /**
                     * Map of elements being monitored to their info.
                     */
                    this._elementInfo = new Map();
                    /**
                     * The number of elements currently being monitored.
                     */
                    this._monitoredElementCount = 0;
                    /**
                     * Event listener for `keydown` events on the document.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._documentKeydownListener = ( /**
                     * @return {?}
                     */function () {
                        // On keydown record the origin and clear any touch event that may be in progress.
                        _this._lastTouchTarget = null;
                        _this._setOriginForCurrentEventQueue('keyboard');
                    });
                    /**
                     * Event listener for `mousedown` events on the document.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._documentMousedownListener = ( /**
                     * @return {?}
                     */function () {
                        // On mousedown record the origin only if there is not touch
                        // target, since a mousedown can happen as a result of a touch event.
                        if (!_this._lastTouchTarget) {
                            _this._setOriginForCurrentEventQueue('mouse');
                        }
                    });
                    /**
                     * Event listener for `touchstart` events on the document.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._documentTouchstartListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        // When the touchstart event fires the focus event is not yet in the event queue. This means
                        // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to
                        // see if a focus happens.
                        if (_this._touchTimeoutId != null) {
                            clearTimeout(_this._touchTimeoutId);
                        }
                        // Since this listener is bound on the `document` level, any events coming from the shadow DOM
                        // will have their `target` set to the shadow root. If available, use `composedPath` to
                        // figure out the event target.
                        _this._lastTouchTarget = event.composedPath ? event.composedPath()[0] : event.target;
                        _this._touchTimeoutId = setTimeout(( /**
                         * @return {?}
                         */function () { return _this._lastTouchTarget = null; }), TOUCH_BUFFER_MS);
                    });
                    /**
                     * Event listener for `focus` events on the window.
                     * Needs to be an arrow function in order to preserve the context when it gets bound.
                     */
                    this._windowFocusListener = ( /**
                     * @return {?}
                     */function () {
                        // Make a note of when the window regains focus, so we can
                        // restore the origin info for the focused element.
                        _this._windowFocused = true;
                        _this._windowFocusTimeoutId = setTimeout(( /**
                         * @return {?}
                         */function () { return _this._windowFocused = false; }));
                    });
                }
                /**
                 * @param {?} element
                 * @param {?=} checkChildren
                 * @return {?}
                 */
                FocusMonitor.prototype.monitor = function (element, checkChildren) {
                    var _this = this;
                    if (checkChildren === void 0) { checkChildren = false; }
                    // Do nothing if we're not on the browser platform.
                    if (!this._platform.isBrowser) {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null);
                    }
                    /** @type {?} */
                    var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);
                    // Check if we're already monitoring this element.
                    if (this._elementInfo.has(nativeElement)) {
                        /** @type {?} */
                        var cachedInfo = this._elementInfo.get(nativeElement);
                        ( /** @type {?} */(cachedInfo)).checkChildren = checkChildren;
                        return ( /** @type {?} */(cachedInfo)).subject.asObservable();
                    }
                    // Create monitored element info.
                    /** @type {?} */
                    var info = {
                        unlisten: ( /**
                         * @return {?}
                         */function () { }),
                        checkChildren: checkChildren,
                        subject: new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]()
                    };
                    this._elementInfo.set(nativeElement, info);
                    this._incrementMonitoredElementCount();
                    // Start listening. We need to listen in capture phase since focus events don't bubble.
                    /** @type {?} */
                    var focusListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) { return _this._onFocus(event, nativeElement); });
                    /** @type {?} */
                    var blurListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) { return _this._onBlur(event, nativeElement); });
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        nativeElement.addEventListener('focus', focusListener, true);
                        nativeElement.addEventListener('blur', blurListener, true);
                    }));
                    // Create an unlisten function for later.
                    info.unlisten = ( /**
                     * @return {?}
                     */function () {
                        nativeElement.removeEventListener('focus', focusListener, true);
                        nativeElement.removeEventListener('blur', blurListener, true);
                    });
                    return info.subject.asObservable();
                };
                /**
                 * @param {?} element
                 * @return {?}
                 */
                FocusMonitor.prototype.stopMonitoring = function (element) {
                    /** @type {?} */
                    var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(nativeElement);
                    if (elementInfo) {
                        elementInfo.unlisten();
                        elementInfo.subject.complete();
                        this._setClasses(nativeElement);
                        this._elementInfo.delete(nativeElement);
                        this._decrementMonitoredElementCount();
                    }
                };
                /**
                 * @param {?} element
                 * @param {?} origin
                 * @param {?=} options
                 * @return {?}
                 */
                FocusMonitor.prototype.focusVia = function (element, origin, options) {
                    /** @type {?} */
                    var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);
                    this._setOriginForCurrentEventQueue(origin);
                    // `focus` isn't available on the server
                    if (typeof nativeElement.focus === 'function') {
                        // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.
                        (( /** @type {?} */(nativeElement))).focus(options);
                    }
                };
                /**
                 * @return {?}
                 */
                FocusMonitor.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._elementInfo.forEach(( /**
                     * @param {?} _info
                     * @param {?} element
                     * @return {?}
                     */function (_info, element) { return _this.stopMonitoring(element); }));
                };
                /**
                 * @private
                 * @param {?} element
                 * @param {?} className
                 * @param {?} shouldSet
                 * @return {?}
                 */
                FocusMonitor.prototype._toggleClass = function (element, className, shouldSet) {
                    if (shouldSet) {
                        element.classList.add(className);
                    }
                    else {
                        element.classList.remove(className);
                    }
                };
                /**
                 * Sets the focus classes on the element based on the given focus origin.
                 * @private
                 * @param {?} element The element to update the classes on.
                 * @param {?=} origin The focus origin.
                 * @return {?}
                 */
                FocusMonitor.prototype._setClasses = function (element, origin) {
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(element);
                    if (elementInfo) {
                        this._toggleClass(element, 'cdk-focused', !!origin);
                        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');
                        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');
                        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');
                        this._toggleClass(element, 'cdk-program-focused', origin === 'program');
                    }
                };
                /**
                 * Sets the origin and schedules an async function to clear it at the end of the event queue.
                 * @private
                 * @param {?} origin The origin to set.
                 * @return {?}
                 */
                FocusMonitor.prototype._setOriginForCurrentEventQueue = function (origin) {
                    var _this = this;
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._origin = origin;
                        // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*
                        // tick after the interaction event fired. To ensure the focus origin is always correct,
                        // the focus origin will be determined at the beginning of the next tick.
                        _this._originTimeoutId = setTimeout(( /**
                         * @return {?}
                         */function () { return _this._origin = null; }), 1);
                    }));
                };
                /**
                 * Checks whether the given focus event was caused by a touchstart event.
                 * @private
                 * @param {?} event The focus event to check.
                 * @return {?} Whether the event was caused by a touch.
                 */
                FocusMonitor.prototype._wasCausedByTouch = function (event) {
                    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.
                    // Consider the following dom structure:
                    //
                    // <div #parent tabindex="0" cdkFocusClasses>
                    //   <div #child (click)="#parent.focus()"></div>
                    // </div>
                    //
                    // If the user touches the #child element and the #parent is programmatically focused as a
                    // result, this code will still consider it to have been caused by the touch event and will
                    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a
                    // relatively small edge-case that can be worked around by using
                    // focusVia(parentEl, 'program') to focus the parent element.
                    //
                    // If we decide that we absolutely must handle this case correctly, we can do so by listening
                    // for the first focus event after the touchstart, and then the first blur event after that
                    // focus event. When that blur event fires we know that whatever follows is not a result of the
                    // touchstart.
                    /** @type {?} */
                    var focusTarget = event.target;
                    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&
                        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));
                };
                /**
                 * Handles focus events on a registered element.
                 * @private
                 * @param {?} event The focus event.
                 * @param {?} element The monitored element.
                 * @return {?}
                 */
                FocusMonitor.prototype._onFocus = function (event, element) {
                    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
                    // focus event affecting the monitored element. If we want to use the origin of the first event
                    // instead we should check for the cdk-focused class here and return if the element already has
                    // it. (This only matters for elements that have includesChildren = true).
                    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
                    // focus event affecting the monitored element. If we want to use the origin of the first event
                    // instead we should check for the cdk-focused class here and return if the element already has
                    // it. (This only matters for elements that have includesChildren = true).
                    // If we are not counting child-element-focus as focused, make sure that the event target is the
                    // monitored element itself.
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(element);
                    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {
                        return;
                    }
                    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:
                    // 1) The window has just regained focus, in which case we want to restore the focused state of
                    //    the element from before the window blurred.
                    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.
                    // 3) The element was programmatically focused, in which case we should mark the origin as
                    //    'program'.
                    /** @type {?} */
                    var origin = this._origin;
                    if (!origin) {
                        if (this._windowFocused && this._lastFocusOrigin) {
                            origin = this._lastFocusOrigin;
                        }
                        else if (this._wasCausedByTouch(event)) {
                            origin = 'touch';
                        }
                        else {
                            origin = 'program';
                        }
                    }
                    this._setClasses(element, origin);
                    this._emitOrigin(elementInfo.subject, origin);
                    this._lastFocusOrigin = origin;
                };
                /**
                 * Handles blur events on a registered element.
                 * @param {?} event The blur event.
                 * @param {?} element The monitored element.
                 * @return {?}
                 */
                FocusMonitor.prototype._onBlur = function (event, element) {
                    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
                    // order to focus another child of the monitored element.
                    /** @type {?} */
                    var elementInfo = this._elementInfo.get(element);
                    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&
                        element.contains(event.relatedTarget))) {
                        return;
                    }
                    this._setClasses(element);
                    this._emitOrigin(elementInfo.subject, null);
                };
                /**
                 * @private
                 * @param {?} subject
                 * @param {?} origin
                 * @return {?}
                 */
                FocusMonitor.prototype._emitOrigin = function (subject, origin) {
                    this._ngZone.run(( /**
                     * @return {?}
                     */function () { return subject.next(origin); }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                FocusMonitor.prototype._incrementMonitoredElementCount = function () {
                    var _this = this;
                    // Register global listeners when first element is monitored.
                    if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {
                        // Note: we listen to events in the capture phase so we
                        // can detect them even if the user stops propagation.
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            document.addEventListener('keydown', _this._documentKeydownListener, captureEventListenerOptions);
                            document.addEventListener('mousedown', _this._documentMousedownListener, captureEventListenerOptions);
                            document.addEventListener('touchstart', _this._documentTouchstartListener, captureEventListenerOptions);
                            window.addEventListener('focus', _this._windowFocusListener);
                        }));
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                FocusMonitor.prototype._decrementMonitoredElementCount = function () {
                    // Unregister global listeners when last element is unmonitored.
                    if (!--this._monitoredElementCount) {
                        document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);
                        document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);
                        document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);
                        window.removeEventListener('focus', this._windowFocusListener);
                        // Clear timeouts for all potentially pending timeouts to prevent the leaks.
                        clearTimeout(this._windowFocusTimeoutId);
                        clearTimeout(this._touchTimeoutId);
                        clearTimeout(this._originTimeoutId);
                    }
                };
                return FocusMonitor;
            }());
            FocusMonitor.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            FocusMonitor.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"] }
            ]; };
            /** @nocollapse */ FocusMonitor.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function FocusMonitor_Factory() { return new FocusMonitor(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"])); }, token: FocusMonitor, providedIn: "root" });
            /**
             * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
             * programmatically) and adds corresponding classes to the element.
             *
             * There are two variants of this directive:
             * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
             *    focused.
             * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
             */
            var CdkMonitorFocus = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _focusMonitor
                 */
                function CdkMonitorFocus(_elementRef, _focusMonitor) {
                    var _this = this;
                    this._elementRef = _elementRef;
                    this._focusMonitor = _focusMonitor;
                    this.cdkFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))
                        .subscribe(( /**
                 * @param {?} origin
                 * @return {?}
                 */function (/**
                 * @param {?} origin
                 * @return {?}
                 */ origin) { return _this.cdkFocusChange.emit(origin); }));
                }
                /**
                 * @return {?}
                 */
                CdkMonitorFocus.prototype.ngOnDestroy = function () {
                    this._focusMonitor.stopMonitoring(this._elementRef);
                    this._monitorSubscription.unsubscribe();
                };
                return CdkMonitorFocus;
            }());
            CdkMonitorFocus.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',
                        },] },
            ];
            /** @nocollapse */
            CdkMonitorFocus.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: FocusMonitor }
            ]; };
            CdkMonitorFocus.propDecorators = {
                cdkFocusChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
            };
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentDispatcher
             * @param {?} ngZone
             * @param {?} platform
             * @return {?}
             */
            function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
                return parentDispatcher || new FocusMonitor(ngZone, platform);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var FOCUS_MONITOR_PROVIDER = {
                // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.
                provide: FocusMonitor,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), FocusMonitor], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"]],
                useFactory: FOCUS_MONITOR_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Screenreaders will often fire fake mousedown events when a focusable element
             * is activated using the keyboard. We can typically distinguish between these faked
             * mousedown events and real mousedown events using the "buttons" property. While
             * real mousedowns will indicate the mouse button that was pressed (e.g. "1" for
             * the left mouse button), faked mousedowns will usually set the property value to 0.
             * @param {?} event
             * @return {?}
             */
            function isFakeMousedownFromScreenReader(event) {
                return event.buttons === 0;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var A11yModule = /** @class */ (function () {
                function A11yModule() {
                }
                return A11yModule;
            }());
            A11yModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["PlatformModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]],
                            declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
                            exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=a11y.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/accordion.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/accordion.js ***!
          \********************************************************/
        /*! exports provided: CdkAccordionItem, CdkAccordion, CdkAccordionModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAccordionItem", function () { return CdkAccordionItem; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAccordion", function () { return CdkAccordion; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkAccordionModule", function () { return CdkAccordionModule; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate unique ID for each accordion.
             * @type {?}
             */
            var nextId = 0;
            /**
             * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.
             */
            var CdkAccordion = /** @class */ (function () {
                function CdkAccordion() {
                    /**
                     * Emits when the state of the accordion changes
                     */
                    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Stream that emits true/false when openAll/closeAll is triggered.
                     */
                    this._openCloseAllActions = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * A readonly id value to use for unique selection coordination.
                     */
                    this.id = "cdk-accordion-" + nextId++;
                    this._multi = false;
                }
                Object.defineProperty(CdkAccordion.prototype, "multi", {
                    /**
                     * Whether the accordion should allow multiple expanded accordion items simultaneously.
                     * @return {?}
                     */
                    get: function () { return this._multi; },
                    /**
                     * @param {?} multi
                     * @return {?}
                     */
                    set: function (multi) { this._multi = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(multi); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Opens all enabled accordion items in an accordion where multi is enabled.
                 * @return {?}
                 */
                CdkAccordion.prototype.openAll = function () {
                    this._openCloseAll(true);
                };
                /**
                 * Closes all enabled accordion items in an accordion where multi is enabled.
                 * @return {?}
                 */
                CdkAccordion.prototype.closeAll = function () {
                    this._openCloseAll(false);
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkAccordion.prototype.ngOnChanges = function (changes) {
                    this._stateChanges.next(changes);
                };
                /**
                 * @return {?}
                 */
                CdkAccordion.prototype.ngOnDestroy = function () {
                    this._stateChanges.complete();
                };
                /**
                 * @private
                 * @param {?} expanded
                 * @return {?}
                 */
                CdkAccordion.prototype._openCloseAll = function (expanded) {
                    if (this.multi) {
                        this._openCloseAllActions.next(expanded);
                    }
                };
                return CdkAccordion;
            }());
            CdkAccordion.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-accordion, [cdkAccordion]',
                            exportAs: 'cdkAccordion',
                        },] },
            ];
            CdkAccordion.propDecorators = {
                multi: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Used to generate unique ID for each accordion item.
             * @type {?}
             */
            var nextId$1 = 0;
            var ɵ0 = undefined;
            /**
             * An basic directive expected to be extended and decorated as a component.  Sets up all
             * events and attributes needed to be managed by a CdkAccordion parent.
             */
            var CdkAccordionItem = /** @class */ (function () {
                /**
                 * @param {?} accordion
                 * @param {?} _changeDetectorRef
                 * @param {?} _expansionDispatcher
                 */
                function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {
                    var _this = this;
                    this.accordion = accordion;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._expansionDispatcher = _expansionDispatcher;
                    /**
                     * Subscription to openAll/closeAll events.
                     */
                    this._openCloseAllSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                    /**
                     * Event emitted every time the AccordionItem is closed.
                     */
                    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * Event emitted every time the AccordionItem is opened.
                     */
                    this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * Event emitted when the AccordionItem is destroyed.
                     */
                    this.destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * Emits whenever the expanded state of the accordion changes.
                     * Primarily used to facilitate two-way binding.
                     * \@docs-private
                     */
                    this.expandedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    /**
                     * The unique AccordionItem id.
                     */
                    this.id = "cdk-accordion-child-" + nextId$1++;
                    this._expanded = false;
                    this._disabled = false;
                    /**
                     * Unregister function for _expansionDispatcher.
                     */
                    this._removeUniqueSelectionListener = ( /**
                     * @return {?}
                     */function () { });
                    this._removeUniqueSelectionListener =
                        _expansionDispatcher.listen(( /**
                         * @param {?} id
                         * @param {?} accordionId
                         * @return {?}
                         */function (id, accordionId) {
                            if (_this.accordion && !_this.accordion.multi &&
                                _this.accordion.id === accordionId && _this.id !== id) {
                                _this.expanded = false;
                            }
                        }));
                    // When an accordion item is hosted in an accordion, subscribe to open/close events.
                    if (this.accordion) {
                        this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();
                    }
                }
                Object.defineProperty(CdkAccordionItem.prototype, "expanded", {
                    /**
                     * Whether the AccordionItem is expanded.
                     * @return {?}
                     */
                    get: function () { return this._expanded; },
                    /**
                     * @param {?} expanded
                     * @return {?}
                     */
                    set: function (expanded) {
                        expanded = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(expanded);
                        // Only emit events and update the internal value if the value changes.
                        if (this._expanded !== expanded) {
                            this._expanded = expanded;
                            this.expandedChange.emit(expanded);
                            if (expanded) {
                                this.opened.emit();
                                /**
                                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,
                                 * the name value is the id of the accordion.
                                 * @type {?}
                                 */
                                var accordionId = this.accordion ? this.accordion.id : this.id;
                                this._expansionDispatcher.notify(this.id, accordionId);
                            }
                            else {
                                this.closed.emit();
                            }
                            // Ensures that the animation will run when the value is set outside of an `@Input`.
                            // This includes cases like the open, close and toggle methods.
                            this._changeDetectorRef.markForCheck();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkAccordionItem.prototype, "disabled", {
                    /**
                     * Whether the AccordionItem is disabled.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} disabled
                     * @return {?}
                     */
                    set: function (disabled) { this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(disabled); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Emits an event for the accordion item being destroyed.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.ngOnDestroy = function () {
                    this.opened.complete();
                    this.closed.complete();
                    this.destroyed.emit();
                    this.destroyed.complete();
                    this._removeUniqueSelectionListener();
                    this._openCloseAllSubscription.unsubscribe();
                };
                /**
                 * Toggles the expanded state of the accordion item.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.toggle = function () {
                    if (!this.disabled) {
                        this.expanded = !this.expanded;
                    }
                };
                /**
                 * Sets the expanded state of the accordion item to false.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.close = function () {
                    if (!this.disabled) {
                        this.expanded = false;
                    }
                };
                /**
                 * Sets the expanded state of the accordion item to true.
                 * @return {?}
                 */
                CdkAccordionItem.prototype.open = function () {
                    if (!this.disabled) {
                        this.expanded = true;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = function () {
                    var _this = this;
                    return this.accordion._openCloseAllActions.subscribe(( /**
                     * @param {?} expanded
                     * @return {?}
                     */function (/**
                     * @param {?} expanded
                     * @return {?}
                     */ expanded) {
                        // Only change expanded state if item is enabled
                        if (!_this.disabled) {
                            _this.expanded = expanded;
                        }
                    }));
                };
                return CdkAccordionItem;
            }());
            CdkAccordionItem.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-accordion-item, [cdkAccordionItem]',
                            exportAs: 'cdkAccordionItem',
                            providers: [
                                // Provide CdkAccordion as undefined to prevent nested accordion items from registering
                                // to the same accordion.
                                { provide: CdkAccordion, useValue: ɵ0 },
                            ],
                        },] },
            ];
            /** @nocollapse */
            CdkAccordionItem.ctorParameters = function () { return [
                { type: CdkAccordion, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
                { type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["UniqueSelectionDispatcher"] }
            ]; };
            CdkAccordionItem.propDecorators = {
                closed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                opened: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                destroyed: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                expandedChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
                expanded: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CdkAccordionModule = /** @class */ (function () {
                function CdkAccordionModule() {
                }
                return CdkAccordionModule;
            }());
            CdkAccordionModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            exports: [CdkAccordion, CdkAccordionItem],
                            declarations: [CdkAccordion, CdkAccordionItem],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=accordion.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/bidi.js": 
        /*!***************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/bidi.js ***!
          \***************************************************/
        /*! exports provided: Directionality, DIR_DOCUMENT, Dir, BidiModule, ɵa */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directionality", function () { return Directionality; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIR_DOCUMENT", function () { return DIR_DOCUMENT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dir", function () { return Dir; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BidiModule", function () { return BidiModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return DIR_DOCUMENT_FACTORY; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token used to inject the document into Directionality.
             * This is used so that the value can be faked in tests.
             *
             * We can't use the real document in tests because changing the real `dir` causes geometry-based
             * tests in Safari to fail.
             *
             * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
             * themselves use things like `querySelector` in test code.
             *
             * This token is defined in a separate file from Directionality as a workaround for
             * https://github.com/angular/angular/issues/22559
             *
             * \@docs-private
             * @type {?}
             */
            var DIR_DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('cdk-dir-doc', {
                providedIn: 'root',
                factory: DIR_DOCUMENT_FACTORY,
            });
            /**
             * \@docs-private
             * @return {?}
             */
            function DIR_DOCUMENT_FACTORY() {
                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]);
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The directionality (LTR / RTL) context for the application (or a subtree of it).
             * Exposes the current direction and a stream of direction changes.
             */
            var Directionality = /** @class */ (function () {
                /**
                 * @param {?=} _document
                 */
                function Directionality(_document) {
                    /**
                     * The current 'ltr' or 'rtl' value.
                     */
                    this.value = 'ltr';
                    /**
                     * Stream that emits whenever the 'ltr' / 'rtl' state changes.
                     */
                    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    if (_document) {
                        // TODO: handle 'auto' value -
                        // We still need to account for dir="auto".
                        // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
                        // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now
                        /** @type {?} */
                        var bodyDir = _document.body ? _document.body.dir : null;
                        /** @type {?} */
                        var htmlDir = _document.documentElement ? _document.documentElement.dir : null;
                        /** @type {?} */
                        var value = bodyDir || htmlDir;
                        this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';
                    }
                }
                /**
                 * @return {?}
                 */
                Directionality.prototype.ngOnDestroy = function () {
                    this.change.complete();
                };
                return Directionality;
            }());
            Directionality.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            Directionality.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [DIR_DOCUMENT,] }] }
            ]; };
            /** @nocollapse */ Directionality.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function Directionality_Factory() { return new Directionality(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive to listen for changes of direction of part of the DOM.
             *
             * Provides itself as Directionality such that descendant directives only need to ever inject
             * Directionality to get the closest direction.
             */
            var Dir = /** @class */ (function () {
                function Dir() {
                    /**
                     * Normalized direction that accounts for invalid/unsupported values.
                     */
                    this._dir = 'ltr';
                    /**
                     * Whether the `value` has been set to its initial value.
                     */
                    this._isInitialized = false;
                    /**
                     * Event emitted when the direction changes.
                     */
                    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                }
                Object.defineProperty(Dir.prototype, "dir", {
                    /**
                     * \@docs-private
                     * @return {?}
                     */
                    get: function () { return this._dir; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        /** @type {?} */
                        var old = this._dir;
                        /** @type {?} */
                        var normalizedValue = value ? value.toLowerCase() : value;
                        this._rawDir = value;
                        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';
                        if (old !== this._dir && this._isInitialized) {
                            this.change.emit(this._dir);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Dir.prototype, "value", {
                    /**
                     * Current layout direction of the element.
                     * @return {?}
                     */
                    get: function () { return this.dir; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Initialize once default value has been set.
                 * @return {?}
                 */
                Dir.prototype.ngAfterContentInit = function () {
                    this._isInitialized = true;
                };
                /**
                 * @return {?}
                 */
                Dir.prototype.ngOnDestroy = function () {
                    this.change.complete();
                };
                return Dir;
            }());
            Dir.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[dir]',
                            providers: [{ provide: Directionality, useExisting: Dir }],
                            host: { '[attr.dir]': '_rawDir' },
                            exportAs: 'dir',
                        },] },
            ];
            Dir.propDecorators = {
                change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['dirChange',] }],
                dir: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var BidiModule = /** @class */ (function () {
                function BidiModule() {
                }
                return BidiModule;
            }());
            BidiModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            exports: [Dir],
                            declarations: [Dir],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=bidi.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/coercion.js": 
        /*!*******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/coercion.js ***!
          \*******************************************************/
        /*! exports provided: coerceBooleanProperty, coerceNumberProperty, _isNumberValue, coerceArray, coerceCssPixelValue, coerceElement */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceBooleanProperty", function () { return coerceBooleanProperty; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceNumberProperty", function () { return coerceNumberProperty; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isNumberValue", function () { return _isNumberValue; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceArray", function () { return coerceArray; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceCssPixelValue", function () { return coerceCssPixelValue; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceElement", function () { return coerceElement; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Coerces a data-bound value (typically a string) to a boolean.
             * @param {?} value
             * @return {?}
             */
            function coerceBooleanProperty(value) {
                return value != null && "" + value !== 'false';
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @param {?} value
             * @param {?=} fallbackValue
             * @return {?}
             */
            function coerceNumberProperty(value, fallbackValue) {
                if (fallbackValue === void 0) { fallbackValue = 0; }
                return _isNumberValue(value) ? Number(value) : fallbackValue;
            }
            /**
             * Whether the provided value is considered a number.
             * \@docs-private
             * @param {?} value
             * @return {?}
             */
            function _isNumberValue(value) {
                // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
                // and other non-number values as NaN, where Number just uses 0) but it considers the string
                // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
                return !isNaN(parseFloat(( /** @type {?} */(value)))) && !isNaN(Number(value));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Wraps the provided value in an array, unless the provided value is an array.
             * @template T
             * @param {?} value
             * @return {?}
             */
            function coerceArray(value) {
                return Array.isArray(value) ? value : [value];
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Coerces a value to a CSS pixel value.
             * @param {?} value
             * @return {?}
             */
            function coerceCssPixelValue(value) {
                if (value == null) {
                    return '';
                }
                return typeof value === 'string' ? value : value + "px";
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Coerces an ElementRef or an Element into an element.
             * Useful for APIs that can accept either a ref or the native element itself.
             * @template T
             * @param {?} elementOrRef
             * @return {?}
             */
            function coerceElement(elementOrRef) {
                return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] ? elementOrRef.nativeElement : elementOrRef;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=coercion.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/collections.js": 
        /*!**********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/collections.js ***!
          \**********************************************************/
        /*! exports provided: UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniqueSelectionDispatcher", function () { return UniqueSelectionDispatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayDataSource", function () { return ArrayDataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDataSource", function () { return isDataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataSource", function () { return DataSource; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMultipleValuesInSingleSelectionError", function () { return getMultipleValuesInSingleSelectionError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectionModel", function () { return SelectionModel; });
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @abstract
             * @template T
             */
            var DataSource = /** @class */ (function () {
                function DataSource() {
                }
                return DataSource;
            }());
            /**
             * Checks whether an object is a data source.
             * @param {?} value
             * @return {?}
             */
            function isDataSource(value) {
                // Check if the value is a DataSource by observing if it has a connect function. Cannot
                // be checked as an `instanceof DataSource` since people could create their own sources
                // that match the interface, but don't extend DataSource.
                return value && typeof value.connect === 'function';
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * DataSource wrapper for a native array.
             * @template T
             */
            var ArrayDataSource = /** @class */ (function (_super) {
                __extends(ArrayDataSource, _super);
                /**
                 * @param {?} _data
                 */
                function ArrayDataSource(_data) {
                    var _this = _super.call(this) || this;
                    _this._data = _data;
                    return _this;
                }
                /**
                 * @return {?}
                 */
                ArrayDataSource.prototype.connect = function () {
                    return this._data instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"] ? this._data : Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["of"])(this._data);
                };
                /**
                 * @return {?}
                 */
                ArrayDataSource.prototype.disconnect = function () { };
                return ArrayDataSource;
            }(DataSource));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class to be used to power selecting one or more options from a list.
             * @template T
             */
            var SelectionModel = /** @class */ (function () {
                /**
                 * @param {?=} _multiple
                 * @param {?=} initiallySelectedValues
                 * @param {?=} _emitChanges
                 */
                function SelectionModel(_multiple, initiallySelectedValues, _emitChanges) {
                    var _this = this;
                    if (_multiple === void 0) { _multiple = false; }
                    if (_emitChanges === void 0) { _emitChanges = true; }
                    this._multiple = _multiple;
                    this._emitChanges = _emitChanges;
                    /**
                     * Currently-selected values.
                     */
                    this._selection = new Set();
                    /**
                     * Keeps track of the deselected options that haven't been emitted by the change event.
                     */
                    this._deselectedToEmit = [];
                    /**
                     * Keeps track of the selected options that haven't been emitted by the change event.
                     */
                    this._selectedToEmit = [];
                    /**
                     * Event emitted when the value has changed.
                     */
                    this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                    /**
                     * Event emitted when the value has changed.
                     * @deprecated Use `changed` instead.
                     * \@breaking-change 8.0.0 To be changed to `changed`
                     */
                    this.onChange = this.changed;
                    if (initiallySelectedValues && initiallySelectedValues.length) {
                        if (_multiple) {
                            initiallySelectedValues.forEach(( /**
                             * @param {?} value
                             * @return {?}
                             */function (/**
                             * @param {?} value
                             * @return {?}
                             */ value) { return _this._markSelected(value); }));
                        }
                        else {
                            this._markSelected(initiallySelectedValues[0]);
                        }
                        // Clear the array in order to avoid firing the change event for preselected values.
                        this._selectedToEmit.length = 0;
                    }
                }
                Object.defineProperty(SelectionModel.prototype, "selected", {
                    /**
                     * Selected values.
                     * @return {?}
                     */
                    get: function () {
                        if (!this._selected) {
                            this._selected = Array.from(this._selection.values());
                        }
                        return this._selected;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Selects a value or an array of values.
                 * @param {...?} values
                 * @return {?}
                 */
                SelectionModel.prototype.select = function () {
                    var _this = this;
                    var values = [];
                    for (var _b = 0; _b < arguments.length; _b++) {
                        values[_b] = arguments[_b];
                    }
                    this._verifyValueAssignment(values);
                    values.forEach(( /**
                     * @param {?} value
                     * @return {?}
                     */function (/**
                     * @param {?} value
                     * @return {?}
                     */ value) { return _this._markSelected(value); }));
                    this._emitChangeEvent();
                };
                /**
                 * Deselects a value or an array of values.
                 * @param {...?} values
                 * @return {?}
                 */
                SelectionModel.prototype.deselect = function () {
                    var _this = this;
                    var values = [];
                    for (var _b = 0; _b < arguments.length; _b++) {
                        values[_b] = arguments[_b];
                    }
                    this._verifyValueAssignment(values);
                    values.forEach(( /**
                     * @param {?} value
                     * @return {?}
                     */function (/**
                     * @param {?} value
                     * @return {?}
                     */ value) { return _this._unmarkSelected(value); }));
                    this._emitChangeEvent();
                };
                /**
                 * Toggles a value between selected and deselected.
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype.toggle = function (value) {
                    this.isSelected(value) ? this.deselect(value) : this.select(value);
                };
                /**
                 * Clears all of the selected values.
                 * @return {?}
                 */
                SelectionModel.prototype.clear = function () {
                    this._unmarkAll();
                    this._emitChangeEvent();
                };
                /**
                 * Determines whether a value is selected.
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype.isSelected = function (value) {
                    return this._selection.has(value);
                };
                /**
                 * Determines whether the model does not have a value.
                 * @return {?}
                 */
                SelectionModel.prototype.isEmpty = function () {
                    return this._selection.size === 0;
                };
                /**
                 * Determines whether the model has a value.
                 * @return {?}
                 */
                SelectionModel.prototype.hasValue = function () {
                    return !this.isEmpty();
                };
                /**
                 * Sorts the selected values based on a predicate function.
                 * @param {?=} predicate
                 * @return {?}
                 */
                SelectionModel.prototype.sort = function (predicate) {
                    if (this._multiple && this.selected) {
                        ( /** @type {?} */(this._selected)).sort(predicate);
                    }
                };
                /**
                 * Gets whether multiple values can be selected.
                 * @return {?}
                 */
                SelectionModel.prototype.isMultipleSelection = function () {
                    return this._multiple;
                };
                /**
                 * Emits a change event and clears the records of selected and deselected values.
                 * @private
                 * @return {?}
                 */
                SelectionModel.prototype._emitChangeEvent = function () {
                    // Clear the selected values so they can be re-cached.
                    this._selected = null;
                    if (this._selectedToEmit.length || this._deselectedToEmit.length) {
                        this.changed.next({
                            source: this,
                            added: this._selectedToEmit,
                            removed: this._deselectedToEmit
                        });
                        this._deselectedToEmit = [];
                        this._selectedToEmit = [];
                    }
                };
                /**
                 * Selects a value.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype._markSelected = function (value) {
                    if (!this.isSelected(value)) {
                        if (!this._multiple) {
                            this._unmarkAll();
                        }
                        this._selection.add(value);
                        if (this._emitChanges) {
                            this._selectedToEmit.push(value);
                        }
                    }
                };
                /**
                 * Deselects a value.
                 * @private
                 * @param {?} value
                 * @return {?}
                 */
                SelectionModel.prototype._unmarkSelected = function (value) {
                    if (this.isSelected(value)) {
                        this._selection.delete(value);
                        if (this._emitChanges) {
                            this._deselectedToEmit.push(value);
                        }
                    }
                };
                /**
                 * Clears out the selected values.
                 * @private
                 * @return {?}
                 */
                SelectionModel.prototype._unmarkAll = function () {
                    var _this = this;
                    if (!this.isEmpty()) {
                        this._selection.forEach(( /**
                         * @param {?} value
                         * @return {?}
                         */function (/**
                         * @param {?} value
                         * @return {?}
                         */ value) { return _this._unmarkSelected(value); }));
                    }
                };
                /**
                 * Verifies the value assignment and throws an error if the specified value array is
                 * including multiple values while the selection model is not supporting multiple values.
                 * @private
                 * @param {?} values
                 * @return {?}
                 */
                SelectionModel.prototype._verifyValueAssignment = function (values) {
                    if (values.length > 1 && !this._multiple) {
                        throw getMultipleValuesInSingleSelectionError();
                    }
                };
                return SelectionModel;
            }());
            /**
             * Returns an error that reports that multiple values are passed into a selection model
             * with a single value.
             * \@docs-private
             * @return {?}
             */
            function getMultipleValuesInSingleSelectionError() {
                return Error('Cannot pass multiple values into SelectionModel with single-value mode.');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class to coordinate unique selection based on name.
             * Intended to be consumed as an Angular service.
             * This service is needed because native radio change events are only fired on the item currently
             * being selected, and we still need to uncheck the previous selection.
             *
             * This service does not *store* any IDs and names because they may change at any time, so it is
             * less error-prone if they are simply passed through when the events occur.
             */
            var UniqueSelectionDispatcher = /** @class */ (function () {
                function UniqueSelectionDispatcher() {
                    this._listeners = [];
                }
                /**
                 * Notify other items that selection for the given name has been set.
                 * @param {?} id ID of the item.
                 * @param {?} name Name of the item.
                 * @return {?}
                 */
                UniqueSelectionDispatcher.prototype.notify = function (id, name) {
                    var e_1, _b;
                    try {
                        for (var _c = __values(this._listeners), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var listener = _d.value;
                            listener(id, name);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                };
                /**
                 * Listen for future changes to item selection.
                 * @param {?} listener
                 * @return {?} Function used to deregister listener
                 */
                UniqueSelectionDispatcher.prototype.listen = function (listener) {
                    var _this = this;
                    this._listeners.push(listener);
                    return ( /**
                     * @return {?}
                     */function () {
                        _this._listeners = _this._listeners.filter(( /**
                         * @param {?} registered
                         * @return {?}
                         */function (registered) {
                            return listener !== registered;
                        }));
                    });
                };
                /**
                 * @return {?}
                 */
                UniqueSelectionDispatcher.prototype.ngOnDestroy = function () {
                    this._listeners = [];
                };
                return UniqueSelectionDispatcher;
            }());
            UniqueSelectionDispatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=collections.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/keycodes.js": 
        /*!*******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/keycodes.js ***!
          \*******************************************************/
        /*! exports provided: MAC_ENTER, BACKSPACE, TAB, NUM_CENTER, ENTER, SHIFT, CONTROL, ALT, PAUSE, CAPS_LOCK, ESCAPE, SPACE, PAGE_UP, PAGE_DOWN, END, HOME, LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW, PLUS_SIGN, PRINT_SCREEN, INSERT, DELETE, ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, FF_SEMICOLON, FF_EQUALS, QUESTION_MARK, AT_SIGN, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, CONTEXT_MENU, NUMPAD_ZERO, NUMPAD_ONE, NUMPAD_TWO, NUMPAD_THREE, NUMPAD_FOUR, NUMPAD_FIVE, NUMPAD_SIX, NUMPAD_SEVEN, NUMPAD_EIGHT, NUMPAD_NINE, NUMPAD_MULTIPLY, NUMPAD_PLUS, NUMPAD_MINUS, NUMPAD_PERIOD, NUMPAD_DIVIDE, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, NUM_LOCK, SCROLL_LOCK, FIRST_MEDIA, FF_MINUS, MUTE, VOLUME_DOWN, VOLUME_UP, FF_MUTE, FF_VOLUME_DOWN, LAST_MEDIA, FF_VOLUME_UP, SEMICOLON, EQUALS, COMMA, DASH, SLASH, APOSTROPHE, TILDE, OPEN_SQUARE_BRACKET, BACKSLASH, CLOSE_SQUARE_BRACKET, SINGLE_QUOTE, MAC_META, hasModifierKey */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_ENTER", function () { return MAC_ENTER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKSPACE", function () { return BACKSPACE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAB", function () { return TAB; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_CENTER", function () { return NUM_CENTER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENTER", function () { return ENTER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SHIFT", function () { return SHIFT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTROL", function () { return CONTROL; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALT", function () { return ALT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAUSE", function () { return PAUSE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CAPS_LOCK", function () { return CAPS_LOCK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ESCAPE", function () { return ESCAPE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPACE", function () { return SPACE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_UP", function () { return PAGE_UP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_DOWN", function () { return PAGE_DOWN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END", function () { return END; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOME", function () { return HOME; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_ARROW", function () { return LEFT_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UP_ARROW", function () { return UP_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIGHT_ARROW", function () { return RIGHT_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWN_ARROW", function () { return DOWN_ARROW; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLUS_SIGN", function () { return PLUS_SIGN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRINT_SCREEN", function () { return PRINT_SCREEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INSERT", function () { return INSERT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DELETE", function () { return DELETE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function () { return ZERO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ONE", function () { return ONE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TWO", function () { return TWO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "THREE", function () { return THREE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOUR", function () { return FOUR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIVE", function () { return FIVE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIX", function () { return SIX; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEVEN", function () { return SEVEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EIGHT", function () { return EIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NINE", function () { return NINE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_SEMICOLON", function () { return FF_SEMICOLON; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_EQUALS", function () { return FF_EQUALS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QUESTION_MARK", function () { return QUESTION_MARK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AT_SIGN", function () { return AT_SIGN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function () { return A; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function () { return B; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function () { return C; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function () { return D; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function () { return E; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function () { return F; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function () { return G; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function () { return H; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function () { return I; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function () { return J; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function () { return K; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function () { return L; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M", function () { return M; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "N", function () { return N; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "O", function () { return O; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "P", function () { return P; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Q", function () { return Q; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "R", function () { return R; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "S", function () { return S; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "T", function () { return T; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "U", function () { return U; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "V", function () { return V; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "W", function () { return W; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X", function () { return X; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y", function () { return Y; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z", function () { return Z; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "META", function () { return META; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_LEFT", function () { return MAC_WK_CMD_LEFT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_RIGHT", function () { return MAC_WK_CMD_RIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXT_MENU", function () { return CONTEXT_MENU; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_ZERO", function () { return NUMPAD_ZERO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_ONE", function () { return NUMPAD_ONE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_TWO", function () { return NUMPAD_TWO; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_THREE", function () { return NUMPAD_THREE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_FOUR", function () { return NUMPAD_FOUR; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_FIVE", function () { return NUMPAD_FIVE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_SIX", function () { return NUMPAD_SIX; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_SEVEN", function () { return NUMPAD_SEVEN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_EIGHT", function () { return NUMPAD_EIGHT; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_NINE", function () { return NUMPAD_NINE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_MULTIPLY", function () { return NUMPAD_MULTIPLY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_PLUS", function () { return NUMPAD_PLUS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_MINUS", function () { return NUMPAD_MINUS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_PERIOD", function () { return NUMPAD_PERIOD; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMPAD_DIVIDE", function () { return NUMPAD_DIVIDE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F1", function () { return F1; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F2", function () { return F2; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F3", function () { return F3; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F4", function () { return F4; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F5", function () { return F5; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F6", function () { return F6; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F7", function () { return F7; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F8", function () { return F8; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F9", function () { return F9; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F10", function () { return F10; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F11", function () { return F11; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F12", function () { return F12; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUM_LOCK", function () { return NUM_LOCK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_LOCK", function () { return SCROLL_LOCK; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIRST_MEDIA", function () { return FIRST_MEDIA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_MINUS", function () { return FF_MINUS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MUTE", function () { return MUTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLUME_DOWN", function () { return VOLUME_DOWN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLUME_UP", function () { return VOLUME_UP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_MUTE", function () { return FF_MUTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_VOLUME_DOWN", function () { return FF_VOLUME_DOWN; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LAST_MEDIA", function () { return LAST_MEDIA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FF_VOLUME_UP", function () { return FF_VOLUME_UP; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEMICOLON", function () { return SEMICOLON; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EQUALS", function () { return EQUALS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMA", function () { return COMMA; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DASH", function () { return DASH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SLASH", function () { return SLASH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APOSTROPHE", function () { return APOSTROPHE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TILDE", function () { return TILDE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OPEN_SQUARE_BRACKET", function () { return OPEN_SQUARE_BRACKET; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKSLASH", function () { return BACKSLASH; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLOSE_SQUARE_BRACKET", function () { return CLOSE_SQUARE_BRACKET; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTE", function () { return SINGLE_QUOTE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAC_META", function () { return MAC_META; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasModifierKey", function () { return hasModifierKey; });
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var MAC_ENTER = 3;
            /** @type {?} */
            var BACKSPACE = 8;
            /** @type {?} */
            var TAB = 9;
            /** @type {?} */
            var NUM_CENTER = 12;
            /** @type {?} */
            var ENTER = 13;
            /** @type {?} */
            var SHIFT = 16;
            /** @type {?} */
            var CONTROL = 17;
            /** @type {?} */
            var ALT = 18;
            /** @type {?} */
            var PAUSE = 19;
            /** @type {?} */
            var CAPS_LOCK = 20;
            /** @type {?} */
            var ESCAPE = 27;
            /** @type {?} */
            var SPACE = 32;
            /** @type {?} */
            var PAGE_UP = 33;
            /** @type {?} */
            var PAGE_DOWN = 34;
            /** @type {?} */
            var END = 35;
            /** @type {?} */
            var HOME = 36;
            /** @type {?} */
            var LEFT_ARROW = 37;
            /** @type {?} */
            var UP_ARROW = 38;
            /** @type {?} */
            var RIGHT_ARROW = 39;
            /** @type {?} */
            var DOWN_ARROW = 40;
            /** @type {?} */
            var PLUS_SIGN = 43;
            /** @type {?} */
            var PRINT_SCREEN = 44;
            /** @type {?} */
            var INSERT = 45;
            /** @type {?} */
            var DELETE = 46;
            /** @type {?} */
            var ZERO = 48;
            /** @type {?} */
            var ONE = 49;
            /** @type {?} */
            var TWO = 50;
            /** @type {?} */
            var THREE = 51;
            /** @type {?} */
            var FOUR = 52;
            /** @type {?} */
            var FIVE = 53;
            /** @type {?} */
            var SIX = 54;
            /** @type {?} */
            var SEVEN = 55;
            /** @type {?} */
            var EIGHT = 56;
            /** @type {?} */
            var NINE = 57;
            /** @type {?} */
            var FF_SEMICOLON = 59;
            // Firefox (Gecko) fires this for semicolon instead of 186
            /** @type {?} */
            var FF_EQUALS = 61;
            // Firefox (Gecko) fires this for equals instead of 187
            /** @type {?} */
            var QUESTION_MARK = 63;
            /** @type {?} */
            var AT_SIGN = 64;
            /** @type {?} */
            var A = 65;
            /** @type {?} */
            var B = 66;
            /** @type {?} */
            var C = 67;
            /** @type {?} */
            var D = 68;
            /** @type {?} */
            var E = 69;
            /** @type {?} */
            var F = 70;
            /** @type {?} */
            var G = 71;
            /** @type {?} */
            var H = 72;
            /** @type {?} */
            var I = 73;
            /** @type {?} */
            var J = 74;
            /** @type {?} */
            var K = 75;
            /** @type {?} */
            var L = 76;
            /** @type {?} */
            var M = 77;
            /** @type {?} */
            var N = 78;
            /** @type {?} */
            var O = 79;
            /** @type {?} */
            var P = 80;
            /** @type {?} */
            var Q = 81;
            /** @type {?} */
            var R = 82;
            /** @type {?} */
            var S = 83;
            /** @type {?} */
            var T = 84;
            /** @type {?} */
            var U = 85;
            /** @type {?} */
            var V = 86;
            /** @type {?} */
            var W = 87;
            /** @type {?} */
            var X = 88;
            /** @type {?} */
            var Y = 89;
            /** @type {?} */
            var Z = 90;
            /** @type {?} */
            var META = 91;
            // WIN_KEY_LEFT
            /** @type {?} */
            var MAC_WK_CMD_LEFT = 91;
            /** @type {?} */
            var MAC_WK_CMD_RIGHT = 93;
            /** @type {?} */
            var CONTEXT_MENU = 93;
            /** @type {?} */
            var NUMPAD_ZERO = 96;
            /** @type {?} */
            var NUMPAD_ONE = 97;
            /** @type {?} */
            var NUMPAD_TWO = 98;
            /** @type {?} */
            var NUMPAD_THREE = 99;
            /** @type {?} */
            var NUMPAD_FOUR = 100;
            /** @type {?} */
            var NUMPAD_FIVE = 101;
            /** @type {?} */
            var NUMPAD_SIX = 102;
            /** @type {?} */
            var NUMPAD_SEVEN = 103;
            /** @type {?} */
            var NUMPAD_EIGHT = 104;
            /** @type {?} */
            var NUMPAD_NINE = 105;
            /** @type {?} */
            var NUMPAD_MULTIPLY = 106;
            /** @type {?} */
            var NUMPAD_PLUS = 107;
            /** @type {?} */
            var NUMPAD_MINUS = 109;
            /** @type {?} */
            var NUMPAD_PERIOD = 110;
            /** @type {?} */
            var NUMPAD_DIVIDE = 111;
            /** @type {?} */
            var F1 = 112;
            /** @type {?} */
            var F2 = 113;
            /** @type {?} */
            var F3 = 114;
            /** @type {?} */
            var F4 = 115;
            /** @type {?} */
            var F5 = 116;
            /** @type {?} */
            var F6 = 117;
            /** @type {?} */
            var F7 = 118;
            /** @type {?} */
            var F8 = 119;
            /** @type {?} */
            var F9 = 120;
            /** @type {?} */
            var F10 = 121;
            /** @type {?} */
            var F11 = 122;
            /** @type {?} */
            var F12 = 123;
            /** @type {?} */
            var NUM_LOCK = 144;
            /** @type {?} */
            var SCROLL_LOCK = 145;
            /** @type {?} */
            var FIRST_MEDIA = 166;
            /** @type {?} */
            var FF_MINUS = 173;
            /** @type {?} */
            var MUTE = 173;
            // Firefox (Gecko) fires 181 for MUTE
            /** @type {?} */
            var VOLUME_DOWN = 174;
            // Firefox (Gecko) fires 182 for VOLUME_DOWN
            /** @type {?} */
            var VOLUME_UP = 175;
            // Firefox (Gecko) fires 183 for VOLUME_UP
            /** @type {?} */
            var FF_MUTE = 181;
            /** @type {?} */
            var FF_VOLUME_DOWN = 182;
            /** @type {?} */
            var LAST_MEDIA = 183;
            /** @type {?} */
            var FF_VOLUME_UP = 183;
            /** @type {?} */
            var SEMICOLON = 186;
            // Firefox (Gecko) fires 59 for SEMICOLON
            /** @type {?} */
            var EQUALS = 187;
            // Firefox (Gecko) fires 61 for EQUALS
            /** @type {?} */
            var COMMA = 188;
            /** @type {?} */
            var DASH = 189;
            // Firefox (Gecko) fires 173 for DASH/MINUS
            /** @type {?} */
            var SLASH = 191;
            /** @type {?} */
            var APOSTROPHE = 192;
            /** @type {?} */
            var TILDE = 192;
            /** @type {?} */
            var OPEN_SQUARE_BRACKET = 219;
            /** @type {?} */
            var BACKSLASH = 220;
            /** @type {?} */
            var CLOSE_SQUARE_BRACKET = 221;
            /** @type {?} */
            var SINGLE_QUOTE = 222;
            /** @type {?} */
            var MAC_META = 224;
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Checks whether a modifier key is pressed.
             * @param {?} event Event to be checked.
             * @param {...?} modifiers
             * @return {?}
             */
            function hasModifierKey(event) {
                var modifiers = [];
                for (var _b = 1; _b < arguments.length; _b++) {
                    modifiers[_b - 1] = arguments[_b];
                }
                if (modifiers.length) {
                    return modifiers.some(( /**
                     * @param {?} modifier
                     * @return {?}
                     */function (/**
                     * @param {?} modifier
                     * @return {?}
                     */ modifier) { return event[modifier]; }));
                }
                return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=keycodes.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/observers.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/observers.js ***!
          \********************************************************/
        /*! exports provided: MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MutationObserverFactory", function () { return MutationObserverFactory; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentObserver", function () { return ContentObserver; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkObserveContent", function () { return CdkObserveContent; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserversModule", function () { return ObserversModule; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
             * \@docs-private
             */
            var MutationObserverFactory = /** @class */ (function () {
                function MutationObserverFactory() {
                }
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                MutationObserverFactory.prototype.create = function (callback) {
                    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
                };
                return MutationObserverFactory;
            }());
            MutationObserverFactory.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */ MutationObserverFactory.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: "root" });
            /**
             * An injectable service that allows watching elements for changes to their content.
             */
            var ContentObserver = /** @class */ (function () {
                /**
                 * @param {?} _mutationObserverFactory
                 */
                function ContentObserver(_mutationObserverFactory) {
                    this._mutationObserverFactory = _mutationObserverFactory;
                    /**
                     * Keeps track of the existing MutationObservers so they can be reused.
                     */
                    this._observedElements = new Map();
                }
                /**
                 * @return {?}
                 */
                ContentObserver.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._observedElements.forEach(( /**
                     * @param {?} _
                     * @param {?} element
                     * @return {?}
                     */function (_, element) { return _this._cleanupObserver(element); }));
                };
                /**
                 * @param {?} elementOrRef
                 * @return {?}
                 */
                ContentObserver.prototype.observe = function (elementOrRef) {
                    var _this = this;
                    /** @type {?} */
                    var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceElement"])(elementOrRef);
                    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        /** @type {?} */
                        var stream = _this._observeElement(element);
                        /** @type {?} */
                        var subscription = stream.subscribe(observer);
                        return ( /**
                         * @return {?}
                         */function () {
                            subscription.unsubscribe();
                            _this._unobserveElement(element);
                        });
                    }));
                };
                /**
                 * Observes the given element by using the existing MutationObserver if available, or creating a
                 * new one if not.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                ContentObserver.prototype._observeElement = function (element) {
                    if (!this._observedElements.has(element)) {
                        /** @type {?} */
                        var stream_1 = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                        /** @type {?} */
                        var observer = this._mutationObserverFactory.create(( /**
                         * @param {?} mutations
                         * @return {?}
                         */function (/**
                         * @param {?} mutations
                         * @return {?}
                         */ mutations) { return stream_1.next(mutations); }));
                        if (observer) {
                            observer.observe(element, {
                                characterData: true,
                                childList: true,
                                subtree: true
                            });
                        }
                        this._observedElements.set(element, { observer: observer, stream: stream_1, count: 1 });
                    }
                    else {
                        ( /** @type {?} */(this._observedElements.get(element))).count++;
                    }
                    return ( /** @type {?} */(this._observedElements.get(element))).stream;
                };
                /**
                 * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
                 * observing this element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                ContentObserver.prototype._unobserveElement = function (element) {
                    if (this._observedElements.has(element)) {
                        ( /** @type {?} */(this._observedElements.get(element))).count--;
                        if (!( /** @type {?} */(this._observedElements.get(element))).count) {
                            this._cleanupObserver(element);
                        }
                    }
                };
                /**
                 * Clean up the underlying MutationObserver for the specified element.
                 * @private
                 * @param {?} element
                 * @return {?}
                 */
                ContentObserver.prototype._cleanupObserver = function (element) {
                    if (this._observedElements.has(element)) {
                        var _b = ( /** @type {?} */(this._observedElements.get(element))), observer = _b.observer, stream = _b.stream;
                        if (observer) {
                            observer.disconnect();
                        }
                        stream.complete();
                        this._observedElements.delete(element);
                    }
                };
                return ContentObserver;
            }());
            ContentObserver.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ContentObserver.ctorParameters = function () { return [
                { type: MutationObserverFactory }
            ]; };
            /** @nocollapse */ ContentObserver.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function ContentObserver_Factory() { return new ContentObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MutationObserverFactory)); }, token: ContentObserver, providedIn: "root" });
            /**
             * Directive that triggers a callback whenever the content of
             * its associated element has changed.
             */
            var CdkObserveContent = /** @class */ (function () {
                /**
                 * @param {?} _contentObserver
                 * @param {?} _elementRef
                 * @param {?} _ngZone
                 */
                function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {
                    this._contentObserver = _contentObserver;
                    this._elementRef = _elementRef;
                    this._ngZone = _ngZone;
                    /**
                     * Event emitted for each change in the element's content.
                     */
                    this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this._disabled = false;
                    this._currentSubscription = null;
                }
                Object.defineProperty(CdkObserveContent.prototype, "disabled", {
                    /**
                     * Whether observing content is disabled. This option can be used
                     * to disconnect the underlying MutationObserver until it is needed.
                     * @return {?}
                     */
                    get: function () { return this._disabled; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                        this._disabled ? this._unsubscribe() : this._subscribe();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkObserveContent.prototype, "debounce", {
                    /**
                     * Debounce interval for emitting the changes.
                     * @return {?}
                     */
                    get: function () { return this._debounce; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._debounce = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(value);
                        this._subscribe();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkObserveContent.prototype.ngAfterContentInit = function () {
                    if (!this._currentSubscription && !this.disabled) {
                        this._subscribe();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkObserveContent.prototype.ngOnDestroy = function () {
                    this._unsubscribe();
                };
                /**
                 * @private
                 * @return {?}
                 */
                CdkObserveContent.prototype._subscribe = function () {
                    var _this = this;
                    this._unsubscribe();
                    /** @type {?} */
                    var stream = this._contentObserver.observe(this._elementRef);
                    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
                    // Consider brining it back inside the zone next time we're making breaking changes.
                    // Bringing it back inside can cause things like infinite change detection loops and changed
                    // after checked errors if people's code isn't handling it properly.
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._currentSubscription =
                            (_this.debounce ? stream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(_this.debounce)) : stream).subscribe(_this.event);
                    }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                CdkObserveContent.prototype._unsubscribe = function () {
                    if (this._currentSubscription) {
                        this._currentSubscription.unsubscribe();
                    }
                };
                return CdkObserveContent;
            }());
            CdkObserveContent.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkObserveContent]',
                            exportAs: 'cdkObserveContent',
                        },] },
            ];
            /** @nocollapse */
            CdkObserveContent.ctorParameters = function () { return [
                { type: ContentObserver },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
            ]; };
            CdkObserveContent.propDecorators = {
                event: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['cdkObserveContent',] }],
                disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkObserveContentDisabled',] }],
                debounce: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
            };
            var ObserversModule = /** @class */ (function () {
                function ObserversModule() {
                }
                return ObserversModule;
            }());
            ObserversModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            exports: [CdkObserveContent],
                            declarations: [CdkObserveContent],
                            providers: [MutationObserverFactory]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=observers.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/overlay.js": 
        /*!******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/overlay.js ***!
          \******************************************************/
        /*! exports provided: ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher, Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, ɵg, ɵf, ɵb, ɵa, ɵc, ɵe, ɵd */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Overlay", function () { return Overlay; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayContainer", function () { return OverlayContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkOverlayOrigin", function () { return CdkOverlayOrigin; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkConnectedOverlay", function () { return CdkConnectedOverlay; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FullscreenOverlayContainer", function () { return FullscreenOverlayContainer; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayRef", function () { return OverlayRef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayKeyboardDispatcher", function () { return OverlayKeyboardDispatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayPositionBuilder", function () { return OverlayPositionBuilder; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalPositionStrategy", function () { return GlobalPositionStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectedPositionStrategy", function () { return ConnectedPositionStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlexibleConnectedPositionStrategy", function () { return FlexibleConnectedPositionStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayConfig", function () { return OverlayConfig; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateVerticalPosition", function () { return validateVerticalPosition; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateHorizontalPosition", function () { return validateHorizontalPosition; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionPositionPair", function () { return ConnectionPositionPair; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollingVisibility", function () { return ScrollingVisibility; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectedOverlayPositionChange", function () { return ConnectedOverlayPositionChange; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollStrategyOptions", function () { return ScrollStrategyOptions; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepositionScrollStrategy", function () { return RepositionScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseScrollStrategy", function () { return CloseScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopScrollStrategy", function () { return NoopScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockScrollStrategy", function () { return BlockScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayModule", function () { return OverlayModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OVERLAY_PROVIDERS", function () { return OVERLAY_PROVIDERS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function () { return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function () { return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function () { return OVERLAY_CONTAINER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function () { return OVERLAY_CONTAINER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function () { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function () { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function () { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm2015/scrolling.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewportRuler", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["VIEWPORT_RULER_PROVIDER"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CdkScrollable", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["CdkScrollable"]; });
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function () { return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"]; });
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
            /* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Strategy that will prevent the user from scrolling while the overlay is visible.
             */
            var BlockScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} _viewportRuler
                 * @param {?} document
                 */
                function BlockScrollStrategy(_viewportRuler, document) {
                    this._viewportRuler = _viewportRuler;
                    this._previousHTMLStyles = { top: '', left: '' };
                    this._isEnabled = false;
                    this._document = document;
                }
                /**
                 * Attaches this scroll strategy to an overlay.
                 * @return {?}
                 */
                BlockScrollStrategy.prototype.attach = function () { };
                /**
                 * Blocks page-level scroll while the attached overlay is open.
                 * @return {?}
                 */
                BlockScrollStrategy.prototype.enable = function () {
                    if (this._canBeEnabled()) {
                        /** @type {?} */
                        var root = ( /** @type {?} */(this._document.documentElement));
                        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();
                        // Cache the previous inline styles in case the user had set them.
                        this._previousHTMLStyles.left = root.style.left || '';
                        this._previousHTMLStyles.top = root.style.top || '';
                        // Note: we're using the `html` node, instead of the `body`, because the `body` may
                        // have the user agent margin, whereas the `html` is guaranteed not to have one.
                        root.style.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(-this._previousScrollPosition.left);
                        root.style.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(-this._previousScrollPosition.top);
                        root.classList.add('cdk-global-scrollblock');
                        this._isEnabled = true;
                    }
                };
                /**
                 * Unblocks page-level scroll while the attached overlay is open.
                 * @return {?}
                 */
                BlockScrollStrategy.prototype.disable = function () {
                    if (this._isEnabled) {
                        /** @type {?} */
                        var html = ( /** @type {?} */(this._document.documentElement));
                        /** @type {?} */
                        var body = ( /** @type {?} */(this._document.body));
                        /** @type {?} */
                        var htmlStyle = ( /** @type {?} */(html.style));
                        /** @type {?} */
                        var bodyStyle = ( /** @type {?} */(body.style));
                        /** @type {?} */
                        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';
                        /** @type {?} */
                        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';
                        this._isEnabled = false;
                        htmlStyle.left = this._previousHTMLStyles.left;
                        htmlStyle.top = this._previousHTMLStyles.top;
                        html.classList.remove('cdk-global-scrollblock');
                        // Disable user-defined smooth scrolling temporarily while we restore the scroll position.
                        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
                        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';
                        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
                        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;
                        bodyStyle.scrollBehavior = previousBodyScrollBehavior;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                BlockScrollStrategy.prototype._canBeEnabled = function () {
                    // Since the scroll strategies can't be singletons, we have to use a global CSS class
                    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
                    // scrolling multiple times.
                    /** @type {?} */
                    var html = ( /** @type {?} */(this._document.documentElement));
                    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
                        return false;
                    }
                    /** @type {?} */
                    var body = this._document.body;
                    /** @type {?} */
                    var viewport = this._viewportRuler.getViewportSize();
                    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
                };
                return BlockScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
             * @return {?}
             */
            function getMatScrollStrategyAlreadyAttachedError() {
                return Error("Scroll strategy has already been attached.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Strategy that will close the overlay as soon as the user starts scrolling.
             */
            var CloseScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} _scrollDispatcher
                 * @param {?} _ngZone
                 * @param {?} _viewportRuler
                 * @param {?=} _config
                 */
                function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
                    var _this = this;
                    this._scrollDispatcher = _scrollDispatcher;
                    this._ngZone = _ngZone;
                    this._viewportRuler = _viewportRuler;
                    this._config = _config;
                    this._scrollSubscription = null;
                    /**
                     * Detaches the overlay ref and disables the scroll strategy.
                     */
                    this._detach = ( /**
                     * @return {?}
                     */function () {
                        _this.disable();
                        if (_this._overlayRef.hasAttached()) {
                            _this._ngZone.run(( /**
                             * @return {?}
                             */function () { return _this._overlayRef.detach(); }));
                        }
                    });
                }
                /**
                 * Attaches this scroll strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.attach = function (overlayRef) {
                    if (this._overlayRef) {
                        throw getMatScrollStrategyAlreadyAttachedError();
                    }
                    this._overlayRef = overlayRef;
                };
                /**
                 * Enables the closing of the attached overlay on scroll.
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.enable = function () {
                    var _this = this;
                    if (this._scrollSubscription) {
                        return;
                    }
                    /** @type {?} */
                    var stream = this._scrollDispatcher.scrolled(0);
                    if (this._config && this._config.threshold && this._config.threshold > 1) {
                        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
                        this._scrollSubscription = stream.subscribe(( /**
                         * @return {?}
                         */function () {
                            /** @type {?} */
                            var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;
                            if (Math.abs(scrollPosition - _this._initialScrollPosition) > ( /** @type {?} */(( /** @type {?} */(_this._config)).threshold))) {
                                _this._detach();
                            }
                            else {
                                _this._overlayRef.updatePosition();
                            }
                        }));
                    }
                    else {
                        this._scrollSubscription = stream.subscribe(this._detach);
                    }
                };
                /**
                 * Disables the closing the attached overlay on scroll.
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.disable = function () {
                    if (this._scrollSubscription) {
                        this._scrollSubscription.unsubscribe();
                        this._scrollSubscription = null;
                    }
                };
                /**
                 * @return {?}
                 */
                CloseScrollStrategy.prototype.detach = function () {
                    this.disable();
                    this._overlayRef = ( /** @type {?} */(null));
                };
                return CloseScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Scroll strategy that doesn't do anything.
             */
            var NoopScrollStrategy = /** @class */ (function () {
                function NoopScrollStrategy() {
                }
                /**
                 * Does nothing, as this scroll strategy is a no-op.
                 * @return {?}
                 */
                NoopScrollStrategy.prototype.enable = function () { };
                /**
                 * Does nothing, as this scroll strategy is a no-op.
                 * @return {?}
                 */
                NoopScrollStrategy.prototype.disable = function () { };
                /**
                 * Does nothing, as this scroll strategy is a no-op.
                 * @return {?}
                 */
                NoopScrollStrategy.prototype.attach = function () { };
                return NoopScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO(jelbourn): move this to live with the rest of the scrolling code
            // TODO(jelbourn): someday replace this with IntersectionObservers
            /**
             * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.
             * \@docs-private
             * @param {?} element Dimensions of the element (from getBoundingClientRect)
             * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
             * @return {?} Whether the element is scrolled out of view
             */
            function isElementScrolledOutsideView(element, scrollContainers) {
                return scrollContainers.some(( /**
                 * @param {?} containerBounds
                 * @return {?}
                 */function (/**
                 * @param {?} containerBounds
                 * @return {?}
                 */ containerBounds) {
                    /** @type {?} */
                    var outsideAbove = element.bottom < containerBounds.top;
                    /** @type {?} */
                    var outsideBelow = element.top > containerBounds.bottom;
                    /** @type {?} */
                    var outsideLeft = element.right < containerBounds.left;
                    /** @type {?} */
                    var outsideRight = element.left > containerBounds.right;
                    return outsideAbove || outsideBelow || outsideLeft || outsideRight;
                }));
            }
            /**
             * Gets whether an element is clipped by any of its scrolling containers.
             * \@docs-private
             * @param {?} element Dimensions of the element (from getBoundingClientRect)
             * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
             * @return {?} Whether the element is clipped
             */
            function isElementClippedByScrolling(element, scrollContainers) {
                return scrollContainers.some(( /**
                 * @param {?} scrollContainerRect
                 * @return {?}
                 */function (/**
                 * @param {?} scrollContainerRect
                 * @return {?}
                 */ scrollContainerRect) {
                    /** @type {?} */
                    var clippedAbove = element.top < scrollContainerRect.top;
                    /** @type {?} */
                    var clippedBelow = element.bottom > scrollContainerRect.bottom;
                    /** @type {?} */
                    var clippedLeft = element.left < scrollContainerRect.left;
                    /** @type {?} */
                    var clippedRight = element.right > scrollContainerRect.right;
                    return clippedAbove || clippedBelow || clippedLeft || clippedRight;
                }));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Strategy that will update the element position as the user is scrolling.
             */
            var RepositionScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} _scrollDispatcher
                 * @param {?} _viewportRuler
                 * @param {?} _ngZone
                 * @param {?=} _config
                 */
                function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
                    this._scrollDispatcher = _scrollDispatcher;
                    this._viewportRuler = _viewportRuler;
                    this._ngZone = _ngZone;
                    this._config = _config;
                    this._scrollSubscription = null;
                }
                /**
                 * Attaches this scroll strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.attach = function (overlayRef) {
                    if (this._overlayRef) {
                        throw getMatScrollStrategyAlreadyAttachedError();
                    }
                    this._overlayRef = overlayRef;
                };
                /**
                 * Enables repositioning of the attached overlay on scroll.
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.enable = function () {
                    var _this = this;
                    if (!this._scrollSubscription) {
                        /** @type {?} */
                        var throttle = this._config ? this._config.scrollThrottle : 0;
                        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(( /**
                         * @return {?}
                         */function () {
                            _this._overlayRef.updatePosition();
                            // TODO(crisbeto): make `close` on by default once all components can handle it.
                            if (_this._config && _this._config.autoClose) {
                                /** @type {?} */
                                var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();
                                var _b = _this._viewportRuler.getViewportSize(), width = _b.width, height = _b.height;
                                // TODO(crisbeto): include all ancestor scroll containers here once
                                // we have a way of exposing the trigger element to the scroll strategy.
                                /** @type {?} */
                                var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];
                                if (isElementScrolledOutsideView(overlayRect, parentRects)) {
                                    _this.disable();
                                    _this._ngZone.run(( /**
                                     * @return {?}
                                     */function () { return _this._overlayRef.detach(); }));
                                }
                            }
                        }));
                    }
                };
                /**
                 * Disables repositioning of the attached overlay on scroll.
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.disable = function () {
                    if (this._scrollSubscription) {
                        this._scrollSubscription.unsubscribe();
                        this._scrollSubscription = null;
                    }
                };
                /**
                 * @return {?}
                 */
                RepositionScrollStrategy.prototype.detach = function () {
                    this.disable();
                    this._overlayRef = ( /** @type {?} */(null));
                };
                return RepositionScrollStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Options for how an overlay will handle scrolling.
             *
             * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
             * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
             */
            var ScrollStrategyOptions = /** @class */ (function () {
                /**
                 * @param {?} _scrollDispatcher
                 * @param {?} _viewportRuler
                 * @param {?} _ngZone
                 * @param {?} document
                 */
                function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {
                    var _this = this;
                    this._scrollDispatcher = _scrollDispatcher;
                    this._viewportRuler = _viewportRuler;
                    this._ngZone = _ngZone;
                    /**
                     * Do nothing on scroll.
                     */
                    this.noop = ( /**
                     * @return {?}
                     */function () { return new NoopScrollStrategy(); });
                    /**
                     * Close the overlay as soon as the user scrolls.
                     * @param config Configuration to be used inside the scroll strategy.
                     */
                    this.close = ( /**
                     * @param {?=} config
                     * @return {?}
                     */function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); });
                    /**
                     * Block scrolling.
                     */
                    this.block = ( /**
                     * @return {?}
                     */function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); });
                    /**
                     * Update the overlay's position on scroll.
                     * @param config Configuration to be used inside the scroll strategy.
                     * Allows debouncing the reposition calls.
                     */
                    this.reposition = ( /**
                     * @param {?=} config
                     * @return {?}
                     */function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); });
                    this._document = document;
                }
                return ScrollStrategyOptions;
            }());
            ScrollStrategyOptions.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ScrollStrategyOptions.ctorParameters = function () { return [
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"] },
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: ScrollStrategyOptions, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Initial configuration used when creating an overlay.
             */
            var OverlayConfig = /** @class */ (function () {
                /**
                 * @param {?=} config
                 */
                function OverlayConfig(config) {
                    var e_2, _b;
                    /**
                     * Strategy to be used when handling scroll events while the overlay is open.
                     */
                    this.scrollStrategy = new NoopScrollStrategy();
                    /**
                     * Custom class to add to the overlay pane.
                     */
                    this.panelClass = '';
                    /**
                     * Whether the overlay has a backdrop.
                     */
                    this.hasBackdrop = false;
                    /**
                     * Custom class to add to the backdrop
                     */
                    this.backdropClass = 'cdk-overlay-dark-backdrop';
                    /**
                     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.
                     * Note that this usually doesn't include clicking on links (unless the user is using
                     * the `HashLocationStrategy`).
                     */
                    this.disposeOnNavigation = false;
                    if (config) {
                        /** @type {?} */
                        var configKeys = ( /** @type {?} */(Object.keys(config)));
                        try {
                            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                                var key = configKeys_1_1.value;
                                if (config[key] !== undefined) {
                                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression
                                    // as "I don't know *which* key this is, so the only valid value is the intersection
                                    // of all the posible values." In this case, that happens to be `undefined`. TypeScript
                                    // is not smart enough to see that the right-hand-side is actually an access of the same
                                    // exact type with the same exact key, meaning that the value type must be identical.
                                    // So we use `any` to work around this.
                                    this[key] = ( /** @type {?} */(config[key]));
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (configKeys_1_1 && !configKeys_1_1.done && (_b = configKeys_1.return)) _b.call(configKeys_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
                return OverlayConfig;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The points of the origin element and the overlay element to connect.
             */
            var ConnectionPositionPair = /** @class */ (function () {
                /**
                 * @param {?} origin
                 * @param {?} overlay
                 * @param {?=} offsetX
                 * @param {?=} offsetY
                 * @param {?=} panelClass
                 */
                function ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {
                    this.offsetX = offsetX;
                    this.offsetY = offsetY;
                    this.panelClass = panelClass;
                    this.originX = origin.originX;
                    this.originY = origin.originY;
                    this.overlayX = overlay.overlayX;
                    this.overlayY = overlay.overlayY;
                }
                return ConnectionPositionPair;
            }());
            /**
             * Set of properties regarding the position of the origin and overlay relative to the viewport
             * with respect to the containing Scrollable elements.
             *
             * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
             * bounds of any one of the strategy's Scrollable's bounding client rectangle.
             *
             * The overlay and origin are outside view if there is no overlap between their bounding client
             * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
             *
             *       -----------                    -----------
             *       | outside |                    | clipped |
             *       |  view   |              --------------------------
             *       |         |              |     |         |        |
             *       ----------               |     -----------        |
             *  --------------------------    |                        |
             *  |                        |    |      Scrollable        |
             *  |                        |    |                        |
             *  |                        |     --------------------------
             *  |      Scrollable        |
             *  |                        |
             *  --------------------------
             *
             * \@docs-private
             */
            var ScrollingVisibility = /** @class */ (function () {
                function ScrollingVisibility() {
                }
                return ScrollingVisibility;
            }());
            /**
             * The change event emitted by the strategy when a fallback position is used.
             */
            var ConnectedOverlayPositionChange = /** @class */ (function () {
                /**
                 * @param {?} connectionPair
                 * @param {?} scrollableViewProperties
                 */
                function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {
                    this.connectionPair = connectionPair;
                    this.scrollableViewProperties = scrollableViewProperties;
                }
                return ConnectedOverlayPositionChange;
            }());
            /** @nocollapse */
            ConnectedOverlayPositionChange.ctorParameters = function () { return [
                { type: ConnectionPositionPair },
                { type: ScrollingVisibility, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            /**
             * Validates whether a vertical position property matches the expected values.
             * \@docs-private
             * @param {?} property Name of the property being validated.
             * @param {?} value Value of the property being validated.
             * @return {?}
             */
            function validateVerticalPosition(property, value) {
                if (value !== 'top' && value !== 'bottom' && value !== 'center') {
                    throw Error("ConnectedPosition: Invalid " + property + " \"" + value + "\". " +
                        "Expected \"top\", \"bottom\" or \"center\".");
                }
            }
            /**
             * Validates whether a horizontal position property matches the expected values.
             * \@docs-private
             * @param {?} property Name of the property being validated.
             * @param {?} value Value of the property being validated.
             * @return {?}
             */
            function validateHorizontalPosition(property, value) {
                if (value !== 'start' && value !== 'end' && value !== 'center') {
                    throw Error("ConnectedPosition: Invalid " + property + " \"" + value + "\". " +
                        "Expected \"start\", \"end\" or \"center\".");
                }
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
             * if any. It maintains a list of attached overlays to determine best suited overlay based
             * on event target and order of overlay opens.
             */
            var OverlayKeyboardDispatcher = /** @class */ (function () {
                /**
                 * @param {?} document
                 */
                function OverlayKeyboardDispatcher(document) {
                    var _this = this;
                    /**
                     * Currently attached overlays in the order they were attached.
                     */
                    this._attachedOverlays = [];
                    /**
                     * Keyboard event listener that will be attached to the body.
                     */
                    this._keydownListener = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        /** @type {?} */
                        var overlays = _this._attachedOverlays;
                        for (var i = overlays.length - 1; i > -1; i--) {
                            // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.
                            // We want to target the most recent overlay, rather than trying to match where the event came
                            // from, because some components might open an overlay, but keep focus on a trigger element
                            // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,
                            // because we don't want overlays that don't handle keyboard events to block the ones below
                            // them that do.
                            if (overlays[i]._keydownEventSubscriptions > 0) {
                                overlays[i]._keydownEvents.next(event);
                                break;
                            }
                        }
                    });
                    this._document = document;
                }
                /**
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype.ngOnDestroy = function () {
                    this._detach();
                };
                /**
                 * Add a new overlay to the list of attached overlay refs.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype.add = function (overlayRef) {
                    // Ensure that we don't get the same overlay multiple times.
                    this.remove(overlayRef);
                    // Lazily start dispatcher once first overlay is added
                    if (!this._isAttached) {
                        this._document.body.addEventListener('keydown', this._keydownListener);
                        this._isAttached = true;
                    }
                    this._attachedOverlays.push(overlayRef);
                };
                /**
                 * Remove an overlay from the list of attached overlay refs.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype.remove = function (overlayRef) {
                    /** @type {?} */
                    var index = this._attachedOverlays.indexOf(overlayRef);
                    if (index > -1) {
                        this._attachedOverlays.splice(index, 1);
                    }
                    // Remove the global listener once there are no more overlays.
                    if (this._attachedOverlays.length === 0) {
                        this._detach();
                    }
                };
                /**
                 * Detaches the global keyboard event listener.
                 * @private
                 * @return {?}
                 */
                OverlayKeyboardDispatcher.prototype._detach = function () {
                    if (this._isAttached) {
                        this._document.body.removeEventListener('keydown', this._keydownListener);
                        this._isAttached = false;
                    }
                };
                return OverlayKeyboardDispatcher;
            }());
            OverlayKeyboardDispatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            OverlayKeyboardDispatcher.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: OverlayKeyboardDispatcher, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} dispatcher
             * @param {?} _document
             * @return {?}
             */
            function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {
                return dispatcher || new OverlayKeyboardDispatcher(_document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {
                // If there is already an OverlayKeyboardDispatcher available, use that.
                // Otherwise, provide a new one.
                provide: OverlayKeyboardDispatcher,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"](), OverlayKeyboardDispatcher],
                    ( /** @type {?} */(
                    // Coerce to `InjectionToken` so that the `deps` match the "shape"
                    // of the type expected by Angular
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))
                ],
                useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Container inside which all overlays will render.
             */
            var OverlayContainer = /** @class */ (function () {
                /**
                 * @param {?} document
                 */
                function OverlayContainer(document) {
                    this._document = document;
                }
                /**
                 * @return {?}
                 */
                OverlayContainer.prototype.ngOnDestroy = function () {
                    if (this._containerElement && this._containerElement.parentNode) {
                        this._containerElement.parentNode.removeChild(this._containerElement);
                    }
                };
                /**
                 * This method returns the overlay container element. It will lazily
                 * create the element the first time  it is called to facilitate using
                 * the container in non-browser environments.
                 * @return {?} the container element
                 */
                OverlayContainer.prototype.getContainerElement = function () {
                    if (!this._containerElement) {
                        this._createContainer();
                    }
                    return this._containerElement;
                };
                /**
                 * Create the overlay container element, which is simply a div
                 * with the 'cdk-overlay-container' class on the document body.
                 * @protected
                 * @return {?}
                 */
                OverlayContainer.prototype._createContainer = function () {
                    /** @type {?} */
                    var containerClass = 'cdk-overlay-container';
                    /** @type {?} */
                    var previousContainers = this._document.getElementsByClassName(containerClass);
                    // Remove any old containers. This can happen when transitioning from the server to the client.
                    for (var i = 0; i < previousContainers.length; i++) {
                        ( /** @type {?} */(previousContainers[i].parentNode)).removeChild(previousContainers[i]);
                    }
                    /** @type {?} */
                    var container = this._document.createElement('div');
                    container.classList.add(containerClass);
                    this._document.body.appendChild(container);
                    this._containerElement = container;
                };
                return OverlayContainer;
            }());
            OverlayContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            OverlayContainer.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ OverlayContainer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function OverlayContainer_Factory() { return new OverlayContainer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: OverlayContainer, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentContainer
             * @param {?} _document
             * @return {?}
             */
            function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {
                return parentContainer || new OverlayContainer(_document);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var OVERLAY_CONTAINER_PROVIDER = {
                // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.
                provide: OverlayContainer,
                deps: [
                    [new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"](), OverlayContainer],
                    ( /** @type {?} */(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]))
                ],
                useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Reference to an overlay that has been created with the Overlay service.
             * Used to manipulate or dispose of said overlay.
             */
            var OverlayRef = /** @class */ (function () {
                /**
                 * @param {?} _portalOutlet
                 * @param {?} _host
                 * @param {?} _pane
                 * @param {?} _config
                 * @param {?} _ngZone
                 * @param {?} _keyboardDispatcher
                 * @param {?} _document
                 * @param {?=} _location
                 */
                function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {
                    var _this = this;
                    this._portalOutlet = _portalOutlet;
                    this._host = _host;
                    this._pane = _pane;
                    this._config = _config;
                    this._ngZone = _ngZone;
                    this._keyboardDispatcher = _keyboardDispatcher;
                    this._document = _document;
                    this._location = _location;
                    this._backdropElement = null;
                    this._backdropClick = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._attachments = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._detachments = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    this._locationChanges = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    this._backdropClickHandler = ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) { return _this._backdropClick.next(event); });
                    this._keydownEventsObservable = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        /** @type {?} */
                        var subscription = _this._keydownEvents.subscribe(observer);
                        _this._keydownEventSubscriptions++;
                        return ( /**
                         * @return {?}
                         */function () {
                            subscription.unsubscribe();
                            _this._keydownEventSubscriptions--;
                        });
                    }));
                    /**
                     * Stream of keydown events dispatched to this overlay.
                     */
                    this._keydownEvents = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Amount of subscriptions to the keydown events.
                     */
                    this._keydownEventSubscriptions = 0;
                    if (_config.scrollStrategy) {
                        this._scrollStrategy = _config.scrollStrategy;
                        this._scrollStrategy.attach(this);
                    }
                    this._positionStrategy = _config.positionStrategy;
                }
                Object.defineProperty(OverlayRef.prototype, "overlayElement", {
                    /**
                     * The overlay's HTML element
                     * @return {?}
                     */
                    get: function () {
                        return this._pane;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OverlayRef.prototype, "backdropElement", {
                    /**
                     * The overlay's backdrop HTML element.
                     * @return {?}
                     */
                    get: function () {
                        return this._backdropElement;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OverlayRef.prototype, "hostElement", {
                    /**
                     * Wrapper around the panel element. Can be used for advanced
                     * positioning where a wrapper with specific styling is
                     * required around the overlay pane.
                     * @return {?}
                     */
                    get: function () {
                        return this._host;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attaches content, given via a Portal, to the overlay.
                 * If the overlay is configured to have a backdrop, it will be created.
                 *
                 * @param {?} portal Portal instance to which to attach the overlay.
                 * @return {?} The portal attachment result.
                 */
                OverlayRef.prototype.attach = function (portal) {
                    var _this = this;
                    /** @type {?} */
                    var attachResult = this._portalOutlet.attach(portal);
                    if (this._positionStrategy) {
                        this._positionStrategy.attach(this);
                    }
                    // Update the pane element with the given configuration.
                    if (!this._host.parentElement && this._previousHostParent) {
                        this._previousHostParent.appendChild(this._host);
                    }
                    this._updateStackingOrder();
                    this._updateElementSize();
                    this._updateElementDirection();
                    if (this._scrollStrategy) {
                        this._scrollStrategy.enable();
                    }
                    // Update the position once the zone is stable so that the overlay will be fully rendered
                    // before attempting to position it, as the position may depend on the size of the rendered
                    // content.
                    this._ngZone.onStable
                        .asObservable()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1))
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        // The overlay could've been detached before the zone has stabilized.
                        if (_this.hasAttached()) {
                            _this.updatePosition();
                        }
                    }));
                    // Enable pointer events for the overlay pane element.
                    this._togglePointerEvents(true);
                    if (this._config.hasBackdrop) {
                        this._attachBackdrop();
                    }
                    if (this._config.panelClass) {
                        this._toggleClasses(this._pane, this._config.panelClass, true);
                    }
                    // Only emit the `attachments` event once all other setup is done.
                    this._attachments.next();
                    // Track this overlay by the keyboard dispatcher
                    this._keyboardDispatcher.add(this);
                    // @breaking-change 8.0.0 remove the null check for `_location`
                    // once the constructor parameter is made required.
                    if (this._config.disposeOnNavigation && this._location) {
                        this._locationChanges = this._location.subscribe(( /**
                         * @return {?}
                         */function () { return _this.dispose(); }));
                    }
                    return attachResult;
                };
                /**
                 * Detaches an overlay from a portal.
                 * @return {?} The portal detachment result.
                 */
                OverlayRef.prototype.detach = function () {
                    if (!this.hasAttached()) {
                        return;
                    }
                    this.detachBackdrop();
                    // When the overlay is detached, the pane element should disable pointer events.
                    // This is necessary because otherwise the pane element will cover the page and disable
                    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.
                    this._togglePointerEvents(false);
                    if (this._positionStrategy && this._positionStrategy.detach) {
                        this._positionStrategy.detach();
                    }
                    if (this._scrollStrategy) {
                        this._scrollStrategy.disable();
                    }
                    /** @type {?} */
                    var detachmentResult = this._portalOutlet.detach();
                    // Only emit after everything is detached.
                    this._detachments.next();
                    // Remove this overlay from keyboard dispatcher tracking.
                    this._keyboardDispatcher.remove(this);
                    // Keeping the host element in DOM the can cause scroll jank, because it still gets
                    // rendered, even though it's transparent and unclickable which is why we remove it.
                    this._detachContentWhenStable();
                    // Stop listening for location changes.
                    this._locationChanges.unsubscribe();
                    return detachmentResult;
                };
                /**
                 * Cleans up the overlay from the DOM.
                 * @return {?}
                 */
                OverlayRef.prototype.dispose = function () {
                    /** @type {?} */
                    var isAttached = this.hasAttached();
                    if (this._positionStrategy) {
                        this._positionStrategy.dispose();
                    }
                    this._disposeScrollStrategy();
                    this.detachBackdrop();
                    this._locationChanges.unsubscribe();
                    this._keyboardDispatcher.remove(this);
                    this._portalOutlet.dispose();
                    this._attachments.complete();
                    this._backdropClick.complete();
                    this._keydownEvents.complete();
                    if (this._host && this._host.parentNode) {
                        this._host.parentNode.removeChild(this._host);
                        this._host = ( /** @type {?} */(null));
                    }
                    this._previousHostParent = this._pane = ( /** @type {?} */(null));
                    if (isAttached) {
                        this._detachments.next();
                    }
                    this._detachments.complete();
                };
                /**
                 * Whether the overlay has attached content.
                 * @return {?}
                 */
                OverlayRef.prototype.hasAttached = function () {
                    return this._portalOutlet.hasAttached();
                };
                /**
                 * Gets an observable that emits when the backdrop has been clicked.
                 * @return {?}
                 */
                OverlayRef.prototype.backdropClick = function () {
                    return this._backdropClick.asObservable();
                };
                /**
                 * Gets an observable that emits when the overlay has been attached.
                 * @return {?}
                 */
                OverlayRef.prototype.attachments = function () {
                    return this._attachments.asObservable();
                };
                /**
                 * Gets an observable that emits when the overlay has been detached.
                 * @return {?}
                 */
                OverlayRef.prototype.detachments = function () {
                    return this._detachments.asObservable();
                };
                /**
                 * Gets an observable of keydown events targeted to this overlay.
                 * @return {?}
                 */
                OverlayRef.prototype.keydownEvents = function () {
                    return this._keydownEventsObservable;
                };
                /**
                 * Gets the current overlay configuration, which is immutable.
                 * @return {?}
                 */
                OverlayRef.prototype.getConfig = function () {
                    return this._config;
                };
                /**
                 * Updates the position of the overlay based on the position strategy.
                 * @return {?}
                 */
                OverlayRef.prototype.updatePosition = function () {
                    if (this._positionStrategy) {
                        this._positionStrategy.apply();
                    }
                };
                /**
                 * Switches to a new position strategy and updates the overlay position.
                 * @param {?} strategy
                 * @return {?}
                 */
                OverlayRef.prototype.updatePositionStrategy = function (strategy) {
                    if (strategy === this._positionStrategy) {
                        return;
                    }
                    if (this._positionStrategy) {
                        this._positionStrategy.dispose();
                    }
                    this._positionStrategy = strategy;
                    if (this.hasAttached()) {
                        strategy.attach(this);
                        this.updatePosition();
                    }
                };
                /**
                 * Update the size properties of the overlay.
                 * @param {?} sizeConfig
                 * @return {?}
                 */
                OverlayRef.prototype.updateSize = function (sizeConfig) {
                    this._config = Object.assign({}, this._config, sizeConfig);
                    this._updateElementSize();
                };
                /**
                 * Sets the LTR/RTL direction for the overlay.
                 * @param {?} dir
                 * @return {?}
                 */
                OverlayRef.prototype.setDirection = function (dir) {
                    this._config = Object.assign({}, this._config, { direction: dir });
                    this._updateElementDirection();
                };
                /**
                 * Add a CSS class or an array of classes to the overlay pane.
                 * @param {?} classes
                 * @return {?}
                 */
                OverlayRef.prototype.addPanelClass = function (classes) {
                    if (this._pane) {
                        this._toggleClasses(this._pane, classes, true);
                    }
                };
                /**
                 * Remove a CSS class or an array of classes from the overlay pane.
                 * @param {?} classes
                 * @return {?}
                 */
                OverlayRef.prototype.removePanelClass = function (classes) {
                    if (this._pane) {
                        this._toggleClasses(this._pane, classes, false);
                    }
                };
                /**
                 * Returns the layout direction of the overlay panel.
                 * @return {?}
                 */
                OverlayRef.prototype.getDirection = function () {
                    /** @type {?} */
                    var direction = this._config.direction;
                    if (!direction) {
                        return 'ltr';
                    }
                    return typeof direction === 'string' ? direction : direction.value;
                };
                /**
                 * Switches to a new scroll strategy.
                 * @param {?} strategy
                 * @return {?}
                 */
                OverlayRef.prototype.updateScrollStrategy = function (strategy) {
                    if (strategy === this._scrollStrategy) {
                        return;
                    }
                    this._disposeScrollStrategy();
                    this._scrollStrategy = strategy;
                    if (this.hasAttached()) {
                        strategy.attach(this);
                        strategy.enable();
                    }
                };
                /**
                 * Updates the text direction of the overlay panel.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._updateElementDirection = function () {
                    this._host.setAttribute('dir', this.getDirection());
                };
                /**
                 * Updates the size of the overlay element based on the overlay config.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._updateElementSize = function () {
                    if (!this._pane) {
                        return;
                    }
                    /** @type {?} */
                    var style = this._pane.style;
                    style.width = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.width);
                    style.height = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.height);
                    style.minWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.minWidth);
                    style.minHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.minHeight);
                    style.maxWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.maxWidth);
                    style.maxHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.maxHeight);
                };
                /**
                 * Toggles the pointer events for the overlay pane element.
                 * @private
                 * @param {?} enablePointer
                 * @return {?}
                 */
                OverlayRef.prototype._togglePointerEvents = function (enablePointer) {
                    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';
                };
                /**
                 * Attaches a backdrop for this overlay.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._attachBackdrop = function () {
                    var _this = this;
                    /** @type {?} */
                    var showingClass = 'cdk-overlay-backdrop-showing';
                    this._backdropElement = this._document.createElement('div');
                    this._backdropElement.classList.add('cdk-overlay-backdrop');
                    if (this._config.backdropClass) {
                        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);
                    }
                    // Insert the backdrop before the pane in the DOM order,
                    // in order to handle stacked overlays properly.
                    ( /** @type {?} */(this._host.parentElement)).insertBefore(this._backdropElement, this._host);
                    // Forward backdrop clicks such that the consumer of the overlay can perform whatever
                    // action desired when such a click occurs (usually closing the overlay).
                    this._backdropElement.addEventListener('click', this._backdropClickHandler);
                    // Add class to fade-in the backdrop after one frame.
                    if (typeof requestAnimationFrame !== 'undefined') {
                        this._ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () {
                            requestAnimationFrame(( /**
                             * @return {?}
                             */function () {
                                if (_this._backdropElement) {
                                    _this._backdropElement.classList.add(showingClass);
                                }
                            }));
                        }));
                    }
                    else {
                        this._backdropElement.classList.add(showingClass);
                    }
                };
                /**
                 * Updates the stacking order of the element, moving it to the top if necessary.
                 * This is required in cases where one overlay was detached, while another one,
                 * that should be behind it, was destroyed. The next time both of them are opened,
                 * the stacking will be wrong, because the detached element's pane will still be
                 * in its original DOM position.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._updateStackingOrder = function () {
                    if (this._host.nextSibling) {
                        ( /** @type {?} */(this._host.parentNode)).appendChild(this._host);
                    }
                };
                /**
                 * Detaches the backdrop (if any) associated with the overlay.
                 * @return {?}
                 */
                OverlayRef.prototype.detachBackdrop = function () {
                    var _this = this;
                    /** @type {?} */
                    var backdropToDetach = this._backdropElement;
                    if (!backdropToDetach) {
                        return;
                    }
                    /** @type {?} */
                    var timeoutId;
                    /** @type {?} */
                    var finishDetach = ( /**
                     * @return {?}
                     */function () {
                        // It may not be attached to anything in certain cases (e.g. unit tests).
                        if (backdropToDetach) {
                            backdropToDetach.removeEventListener('click', _this._backdropClickHandler);
                            backdropToDetach.removeEventListener('transitionend', finishDetach);
                            if (backdropToDetach.parentNode) {
                                backdropToDetach.parentNode.removeChild(backdropToDetach);
                            }
                        }
                        // It is possible that a new portal has been attached to this overlay since we started
                        // removing the backdrop. If that is the case, only clear the backdrop reference if it
                        // is still the same instance that we started to remove.
                        if (_this._backdropElement == backdropToDetach) {
                            _this._backdropElement = null;
                        }
                        if (_this._config.backdropClass) {
                            _this._toggleClasses(( /** @type {?} */(backdropToDetach)), _this._config.backdropClass, false);
                        }
                        clearTimeout(timeoutId);
                    });
                    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        ( /** @type {?} */(backdropToDetach)).addEventListener('transitionend', finishDetach);
                    }));
                    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
                    // In this case we make it unclickable and we try to remove it after a delay.
                    backdropToDetach.style.pointerEvents = 'none';
                    // Run this outside the Angular zone because there's nothing that Angular cares about.
                    // If it were to run inside the Angular zone, every test that used Overlay would have to be
                    // either async or fakeAsync.
                    timeoutId = this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () { return setTimeout(finishDetach, 500); }));
                };
                /**
                 * Toggles a single CSS class or an array of classes on an element.
                 * @private
                 * @param {?} element
                 * @param {?} cssClasses
                 * @param {?} isAdd
                 * @return {?}
                 */
                OverlayRef.prototype._toggleClasses = function (element, cssClasses, isAdd) {
                    /** @type {?} */
                    var classList = element.classList;
                    Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceArray"])(cssClasses).forEach(( /**
                     * @param {?} cssClass
                     * @return {?}
                     */function (/**
                     * @param {?} cssClass
                     * @return {?}
                     */ cssClass) {
                        // We can't do a spread here, because IE doesn't support setting multiple classes.
                        // Also trying to add an empty string to a DOMTokenList will throw.
                        if (cssClass) {
                            isAdd ? classList.add(cssClass) : classList.remove(cssClass);
                        }
                    }));
                };
                /**
                 * Detaches the overlay content next time the zone stabilizes.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._detachContentWhenStable = function () {
                    var _this = this;
                    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however
                    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will
                    // be patched to run inside the zone, which will throw us into an infinite loop.
                    this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        // We can't remove the host here immediately, because the overlay pane's content
                        // might still be animating. This stream helps us avoid interrupting the animation
                        // by waiting for the pane to become empty.
                        /** @type {?} */
                        var subscription = _this._ngZone.onStable
                            .asObservable()
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(_this._attachments, _this._detachments)))
                            .subscribe(( /**
                     * @return {?}
                     */function () {
                            // Needs a couple of checks for the pane and host, because
                            // they may have been removed by the time the zone stabilizes.
                            if (!_this._pane || !_this._host || _this._pane.children.length === 0) {
                                if (_this._pane && _this._config.panelClass) {
                                    _this._toggleClasses(_this._pane, _this._config.panelClass, false);
                                }
                                if (_this._host && _this._host.parentElement) {
                                    _this._previousHostParent = _this._host.parentElement;
                                    _this._previousHostParent.removeChild(_this._host);
                                }
                                subscription.unsubscribe();
                            }
                        }));
                    }));
                };
                /**
                 * Disposes of a scroll strategy.
                 * @private
                 * @return {?}
                 */
                OverlayRef.prototype._disposeScrollStrategy = function () {
                    /** @type {?} */
                    var scrollStrategy = this._scrollStrategy;
                    if (scrollStrategy) {
                        scrollStrategy.disable();
                        if (scrollStrategy.detach) {
                            scrollStrategy.detach();
                        }
                    }
                };
                return OverlayRef;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // TODO: refactor clipping detection into a separate thing (part of scrolling module)
            // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.
            /**
             * Class to be added to the overlay bounding box.
             * @type {?}
             */
            var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';
            /**
             * A strategy for positioning overlays. Using this strategy, an overlay is given an
             * implicit position relative some origin element. The relative position is defined in terms of
             * a point on the origin element that is connected to a point on the overlay element. For example,
             * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
             * of the overlay.
             */
            var FlexibleConnectedPositionStrategy = /** @class */ (function () {
                /**
                 * @param {?} connectedTo
                 * @param {?} _viewportRuler
                 * @param {?} _document
                 * @param {?} _platform
                 * @param {?} _overlayContainer
                 */
                function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {
                    this._viewportRuler = _viewportRuler;
                    this._document = _document;
                    this._platform = _platform;
                    this._overlayContainer = _overlayContainer;
                    /**
                     * Last size used for the bounding box. Used to avoid resizing the overlay after open.
                     */
                    this._lastBoundingBoxSize = { width: 0, height: 0 };
                    /**
                     * Whether the overlay was pushed in a previous positioning.
                     */
                    this._isPushed = false;
                    /**
                     * Whether the overlay can be pushed on-screen on the initial open.
                     */
                    this._canPush = true;
                    /**
                     * Whether the overlay can grow via flexible width/height after the initial open.
                     */
                    this._growAfterOpen = false;
                    /**
                     * Whether the overlay's width and height can be constrained to fit within the viewport.
                     */
                    this._hasFlexibleDimensions = true;
                    /**
                     * Whether the overlay position is locked.
                     */
                    this._positionLocked = false;
                    /**
                     * Amount of space that must be maintained between the overlay and the edge of the viewport.
                     */
                    this._viewportMargin = 0;
                    /**
                     * The Scrollable containers used to check scrollable view properties on position change.
                     */
                    this._scrollables = [];
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     */
                    this._preferredPositions = [];
                    /**
                     * Subject that emits whenever the position changes.
                     */
                    this._positionChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                    /**
                     * Subscription to viewport size changes.
                     */
                    this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Default offset for the overlay along the x axis.
                     */
                    this._offsetX = 0;
                    /**
                     * Default offset for the overlay along the y axis.
                     */
                    this._offsetY = 0;
                    /**
                     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.
                     */
                    this._appliedPanelClasses = [];
                    /**
                     * Observable sequence of position changes.
                     */
                    this.positionChanges = this._positionChanges.asObservable();
                    this.setOrigin(connectedTo);
                }
                Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, "positions", {
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     * @return {?}
                     */
                    get: function () {
                        return this._preferredPositions;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attaches this position strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.attach = function (overlayRef) {
                    var _this = this;
                    if (this._overlayRef && overlayRef !== this._overlayRef) {
                        throw Error('This position strategy is already attached to an overlay');
                    }
                    this._validatePositions();
                    overlayRef.hostElement.classList.add(boundingBoxClass);
                    this._overlayRef = overlayRef;
                    this._boundingBox = overlayRef.hostElement;
                    this._pane = overlayRef.overlayElement;
                    this._isDisposed = false;
                    this._isInitialRender = true;
                    this._lastPosition = null;
                    this._resizeSubscription.unsubscribe();
                    this._resizeSubscription = this._viewportRuler.change().subscribe(( /**
                     * @return {?}
                     */function () {
                        // When the window is resized, we want to trigger the next reposition as if it
                        // was an initial render, in order for the strategy to pick a new optimal position,
                        // otherwise position locking will cause it to stay at the old one.
                        _this._isInitialRender = true;
                        _this.apply();
                    }));
                };
                /**
                 * Updates the position of the overlay element, using whichever preferred position relative
                 * to the origin best fits on-screen.
                 *
                 * The selection of a position goes as follows:
                 *  - If any positions fit completely within the viewport as-is,
                 *      choose the first position that does so.
                 *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,
                 *      choose the position with the greatest available size modified by the positions' weight.
                 *  - If pushing is enabled, take the position that went off-screen the least and push it
                 *      on-screen.
                 *  - If none of the previous criteria were met, use the position that goes off-screen the least.
                 * \@docs-private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.apply = function () {
                    var e_3, _b, e_4, _c;
                    // We shouldn't do anything if the strategy was disposed or we're on the server.
                    if (this._isDisposed || !this._platform.isBrowser) {
                        return;
                    }
                    // If the position has been applied already (e.g. when the overlay was opened) and the
                    // consumer opted into locking in the position, re-use the old position, in order to
                    // prevent the overlay from jumping around.
                    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {
                        this.reapplyLastPosition();
                        return;
                    }
                    this._clearPanelClasses();
                    this._resetOverlayElementStyles();
                    this._resetBoundingBoxStyles();
                    // We need the bounding rects for the origin and the overlay to determine how to position
                    // the overlay relative to the origin.
                    // We use the viewport rect to determine whether a position would go off-screen.
                    this._viewportRect = this._getNarrowedViewportRect();
                    this._originRect = this._getOriginRect();
                    this._overlayRect = this._pane.getBoundingClientRect();
                    /** @type {?} */
                    var originRect = this._originRect;
                    /** @type {?} */
                    var overlayRect = this._overlayRect;
                    /** @type {?} */
                    var viewportRect = this._viewportRect;
                    // Positions where the overlay will fit with flexible dimensions.
                    /** @type {?} */
                    var flexibleFits = [];
                    // Fallback if none of the preferred positions fit within the viewport.
                    /** @type {?} */
                    var fallback;
                    try {
                        // Go through each of the preferred positions looking for a good fit.
                        // If a good fit is found, it will be applied immediately.
                        for (var _d = __values(this._preferredPositions), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var pos = _e.value;
                            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.
                            /** @type {?} */
                            var originPoint = this._getOriginPoint(originRect, pos);
                            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the
                            // overlay in this position. We use the top-left corner for calculations and later translate
                            // this into an appropriate (top, left, bottom, right) style.
                            /** @type {?} */
                            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);
                            // Calculate how well the overlay would fit into the viewport with this point.
                            /** @type {?} */
                            var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);
                            // If the overlay, without any further work, fits into the viewport, use this position.
                            if (overlayFit.isCompletelyWithinViewport) {
                                this._isPushed = false;
                                this._applyPosition(pos, originPoint);
                                return;
                            }
                            // If the overlay has flexible dimensions, we can use this position
                            // so long as there's enough space for the minimum dimensions.
                            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {
                                // Save positions where the overlay will fit with flexible dimensions. We will use these
                                // if none of the positions fit *without* flexible dimensions.
                                flexibleFits.push({
                                    position: pos,
                                    origin: originPoint,
                                    overlayRect: overlayRect,
                                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)
                                });
                                continue;
                            }
                            // If the current preferred position does not fit on the screen, remember the position
                            // if it has more visible area on-screen than we've seen and move onto the next preferred
                            // position.
                            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {
                                fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    // If there are any positions where the overlay would fit with flexible dimensions, choose the
                    // one that has the greatest area available modified by the position's weight
                    if (flexibleFits.length) {
                        /** @type {?} */
                        var bestFit = null;
                        /** @type {?} */
                        var bestScore = -1;
                        try {
                            for (var flexibleFits_1 = __values(flexibleFits), flexibleFits_1_1 = flexibleFits_1.next(); !flexibleFits_1_1.done; flexibleFits_1_1 = flexibleFits_1.next()) {
                                var fit = flexibleFits_1_1.value;
                                /** @type {?} */
                                var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);
                                if (score > bestScore) {
                                    bestScore = score;
                                    bestFit = fit;
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (flexibleFits_1_1 && !flexibleFits_1_1.done && (_c = flexibleFits_1.return)) _c.call(flexibleFits_1);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        this._isPushed = false;
                        this._applyPosition(( /** @type {?} */(bestFit)).position, ( /** @type {?} */(bestFit)).origin);
                        return;
                    }
                    // When none of the preferred positions fit within the viewport, take the position
                    // that went off-screen the least and attempt to push it on-screen.
                    if (this._canPush) {
                        // TODO(jelbourn): after pushing, the opening "direction" of the overlay might not make sense.
                        this._isPushed = true;
                        this._applyPosition(( /** @type {?} */(fallback)).position, ( /** @type {?} */(fallback)).originPoint);
                        return;
                    }
                    // All options for getting the overlay within the viewport have been exhausted, so go with the
                    // position that went off-screen the least.
                    this._applyPosition(( /** @type {?} */(fallback)).position, ( /** @type {?} */(fallback)).originPoint);
                };
                /**
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.detach = function () {
                    this._clearPanelClasses();
                    this._lastPosition = null;
                    this._previousPushAmount = null;
                    this._resizeSubscription.unsubscribe();
                };
                /**
                 * Cleanup after the element gets destroyed.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.dispose = function () {
                    if (this._isDisposed) {
                        return;
                    }
                    // We can't use `_resetBoundingBoxStyles` here, because it resets
                    // some properties to zero, rather than removing them.
                    if (this._boundingBox) {
                        extendStyles(this._boundingBox.style, ( /** @type {?} */({
                            top: '',
                            left: '',
                            right: '',
                            bottom: '',
                            height: '',
                            width: '',
                            alignItems: '',
                            justifyContent: '',
                        })));
                    }
                    if (this._pane) {
                        this._resetOverlayElementStyles();
                    }
                    if (this._overlayRef) {
                        this._overlayRef.hostElement.classList.remove(boundingBoxClass);
                    }
                    this.detach();
                    this._positionChanges.complete();
                    this._overlayRef = this._boundingBox = ( /** @type {?} */(null));
                    this._isDisposed = true;
                };
                /**
                 * This re-aligns the overlay element with the trigger in its last calculated position,
                 * even if a position higher in the "preferred positions" list would now fit. This
                 * allows one to re-align the panel without changing the orientation of the panel.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = function () {
                    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {
                        this._originRect = this._getOriginRect();
                        this._overlayRect = this._pane.getBoundingClientRect();
                        this._viewportRect = this._getNarrowedViewportRect();
                        /** @type {?} */
                        var lastPosition = this._lastPosition || this._preferredPositions[0];
                        /** @type {?} */
                        var originPoint = this._getOriginPoint(this._originRect, lastPosition);
                        this._applyPosition(lastPosition, originPoint);
                    }
                };
                /**
                 * Sets the list of Scrollable containers that host the origin element so that
                 * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
                 * Scrollable must be an ancestor element of the strategy's origin element.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} scrollables
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {
                    ( /** @type {?} */(this))._scrollables = scrollables;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Adds new preferred positions.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} positions List of positions options for this overlay.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withPositions = function (positions) {
                    ( /** @type {?} */(this))._preferredPositions = positions;
                    // If the last calculated position object isn't part of the positions anymore, clear
                    // it in order to avoid it being picked up if the consumer tries to re-apply.
                    if (positions.indexOf(( /** @type {?} */(( /** @type {?} */(this))._lastPosition))) === -1) {
                        ( /** @type {?} */(this))._lastPosition = null;
                    }
                    ( /** @type {?} */(this))._validatePositions();
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets a minimum distance the overlay may be positioned to the edge of the viewport.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} margin Required margin between the overlay and the viewport edge in pixels.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withViewportMargin = function (margin) {
                    ( /** @type {?} */(this))._viewportMargin = margin;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay's width and height can be constrained to fit within the viewport.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} flexibleDimensions
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = function (flexibleDimensions) {
                    if (flexibleDimensions === void 0) { flexibleDimensions = true; }
                    ( /** @type {?} */(this))._hasFlexibleDimensions = flexibleDimensions;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay can grow after the initial open via flexible width/height.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} growAfterOpen
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = function (growAfterOpen) {
                    if (growAfterOpen === void 0) { growAfterOpen = true; }
                    ( /** @type {?} */(this))._growAfterOpen = growAfterOpen;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} canPush
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withPush = function (canPush) {
                    if (canPush === void 0) { canPush = true; }
                    ( /** @type {?} */(this))._canPush = canPush;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay's position should be locked in after it is positioned
                 * initially. When an overlay is locked in, it won't attempt to reposition itself
                 * when the position is re-applied (e.g. when the user scrolls away).
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} isLocked Whether the overlay should locked in.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {
                    if (isLocked === void 0) { isLocked = true; }
                    ( /** @type {?} */(this))._positionLocked = isLocked;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the origin, relative to which to position the overlay.
                 * Using an element origin is useful for building components that need to be positioned
                 * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be
                 * used for cases like contextual menus which open relative to the user's pointer.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} origin Reference to the new origin.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.setOrigin = function (origin) {
                    ( /** @type {?} */(this))._origin = origin;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the default offset for the overlay's connection point on the x-axis.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the X axis.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = function (offset) {
                    ( /** @type {?} */(this))._offsetX = offset;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the default offset for the overlay's connection point on the y-axis.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the Y axis.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = function (offset) {
                    ( /** @type {?} */(this))._offsetY = offset;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Configures that the position strategy should set a `transform-origin` on some elements
                 * inside the overlay, depending on the current position that is being applied. This is
                 * useful for the cases where the origin of an animation can change depending on the
                 * alignment of the overlay.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} selector CSS selector that will be used to find the target
                 *    elements onto which to set the transform origin.
                 * @return {THIS}
                 */
                FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = function (selector) {
                    ( /** @type {?} */(this))._transformOriginSelector = selector;
                    return ( /** @type {?} */(this));
                };
                /**
                 * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
                 * @private
                 * @param {?} originRect
                 * @param {?} pos
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOriginPoint = function (originRect, pos) {
                    /** @type {?} */
                    var x;
                    if (pos.originX == 'center') {
                        // Note: when centering we should always use the `left`
                        // offset, otherwise the position will be wrong in RTL.
                        x = originRect.left + (originRect.width / 2);
                    }
                    else {
                        /** @type {?} */
                        var startX = this._isRtl() ? originRect.right : originRect.left;
                        /** @type {?} */
                        var endX = this._isRtl() ? originRect.left : originRect.right;
                        x = pos.originX == 'start' ? startX : endX;
                    }
                    /** @type {?} */
                    var y;
                    if (pos.originY == 'center') {
                        y = originRect.top + (originRect.height / 2);
                    }
                    else {
                        y = pos.originY == 'top' ? originRect.top : originRect.bottom;
                    }
                    return { x: x, y: y };
                };
                /**
                 * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
                 * origin point to which the overlay should be connected.
                 * @private
                 * @param {?} originPoint
                 * @param {?} overlayRect
                 * @param {?} pos
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {
                    // Calculate the (overlayStartX, overlayStartY), the start of the
                    // potential overlay position relative to the origin point.
                    /** @type {?} */
                    var overlayStartX;
                    if (pos.overlayX == 'center') {
                        overlayStartX = -overlayRect.width / 2;
                    }
                    else if (pos.overlayX === 'start') {
                        overlayStartX = this._isRtl() ? -overlayRect.width : 0;
                    }
                    else {
                        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;
                    }
                    /** @type {?} */
                    var overlayStartY;
                    if (pos.overlayY == 'center') {
                        overlayStartY = -overlayRect.height / 2;
                    }
                    else {
                        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
                    }
                    // The (x, y) coordinates of the overlay.
                    return {
                        x: originPoint.x + overlayStartX,
                        y: originPoint.y + overlayStartY,
                    };
                };
                /**
                 * Gets how well an overlay at the given point will fit within the viewport.
                 * @private
                 * @param {?} point
                 * @param {?} overlay
                 * @param {?} viewport
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOverlayFit = function (point, overlay, viewport, position) {
                    var x = point.x, y = point.y;
                    /** @type {?} */
                    var offsetX = this._getOffset(position, 'x');
                    /** @type {?} */
                    var offsetY = this._getOffset(position, 'y');
                    // Account for the offsets since they could push the overlay out of the viewport.
                    if (offsetX) {
                        x += offsetX;
                    }
                    if (offsetY) {
                        y += offsetY;
                    }
                    // How much the overlay would overflow at this position, on each side.
                    /** @type {?} */
                    var leftOverflow = 0 - x;
                    /** @type {?} */
                    var rightOverflow = (x + overlay.width) - viewport.width;
                    /** @type {?} */
                    var topOverflow = 0 - y;
                    /** @type {?} */
                    var bottomOverflow = (y + overlay.height) - viewport.height;
                    // Visible parts of the element on each axis.
                    /** @type {?} */
                    var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);
                    /** @type {?} */
                    var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);
                    /** @type {?} */
                    var visibleArea = visibleWidth * visibleHeight;
                    return {
                        visibleArea: visibleArea,
                        isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,
                        fitsInViewportVertically: visibleHeight === overlay.height,
                        fitsInViewportHorizontally: visibleWidth == overlay.width,
                    };
                };
                /**
                 * Whether the overlay can fit within the viewport when it may resize either its width or height.
                 * @private
                 * @param {?} fit How well the overlay fits in the viewport at some position.
                 * @param {?} point The (x, y) coordinates of the overlat at some position.
                 * @param {?} viewport The geometry of the viewport.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = function (fit, point, viewport) {
                    if (this._hasFlexibleDimensions) {
                        /** @type {?} */
                        var availableHeight = viewport.bottom - point.y;
                        /** @type {?} */
                        var availableWidth = viewport.right - point.x;
                        /** @type {?} */
                        var minHeight = this._overlayRef.getConfig().minHeight;
                        /** @type {?} */
                        var minWidth = this._overlayRef.getConfig().minWidth;
                        /** @type {?} */
                        var verticalFit = fit.fitsInViewportVertically ||
                            (minHeight != null && minHeight <= availableHeight);
                        /** @type {?} */
                        var horizontalFit = fit.fitsInViewportHorizontally ||
                            (minWidth != null && minWidth <= availableWidth);
                        return verticalFit && horizontalFit;
                    }
                    return false;
                };
                /**
                 * Gets the point at which the overlay can be "pushed" on-screen. If the overlay is larger than
                 * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the
                 * right and bottom).
                 *
                 * @private
                 * @param {?} start Starting point from which the overlay is pushed.
                 * @param {?} overlay Dimensions of the overlay.
                 * @param {?} scrollPosition Current viewport scroll position.
                 * @return {?} The point at which to position the overlay after pushing. This is effectively a new
                 *     originPoint.
                 */
                FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = function (start, overlay, scrollPosition) {
                    // If the position is locked and we've pushed the overlay already, reuse the previous push
                    // amount, rather than pushing it again. If we were to continue pushing, the element would
                    // remain in the viewport, which goes against the expectations when position locking is enabled.
                    if (this._previousPushAmount && this._positionLocked) {
                        return {
                            x: start.x + this._previousPushAmount.x,
                            y: start.y + this._previousPushAmount.y
                        };
                    }
                    /** @type {?} */
                    var viewport = this._viewportRect;
                    // Determine how much the overlay goes outside the viewport on each
                    // side, which we'll use to decide which direction to push it.
                    /** @type {?} */
                    var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);
                    /** @type {?} */
                    var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);
                    /** @type {?} */
                    var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);
                    /** @type {?} */
                    var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);
                    // Amount by which to push the overlay in each axis such that it remains on-screen.
                    /** @type {?} */
                    var pushX = 0;
                    /** @type {?} */
                    var pushY = 0;
                    // If the overlay fits completely within the bounds of the viewport, push it from whichever
                    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the
                    // viewport and allow for the trailing end of the overlay to go out of bounds.
                    if (overlay.width <= viewport.width) {
                        pushX = overflowLeft || -overflowRight;
                    }
                    else {
                        pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;
                    }
                    if (overlay.height <= viewport.height) {
                        pushY = overflowTop || -overflowBottom;
                    }
                    else {
                        pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;
                    }
                    this._previousPushAmount = { x: pushX, y: pushY };
                    return {
                        x: start.x + pushX,
                        y: start.y + pushY,
                    };
                };
                /**
                 * Applies a computed position to the overlay and emits a position change.
                 * @private
                 * @param {?} position The position preference
                 * @param {?} originPoint The point on the origin element where the overlay is connected.
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._applyPosition = function (position, originPoint) {
                    this._setTransformOrigin(position);
                    this._setOverlayElementStyles(originPoint, position);
                    this._setBoundingBoxStyles(originPoint, position);
                    if (position.panelClass) {
                        this._addPanelClasses(position.panelClass);
                    }
                    // Save the last connected position in case the position needs to be re-calculated.
                    this._lastPosition = position;
                    // Notify that the position has been changed along with its change properties.
                    // We only emit if we've got any subscriptions, because the scroll visibility
                    // calculcations can be somewhat expensive.
                    if (this._positionChanges.observers.length) {
                        /** @type {?} */
                        var scrollableViewProperties = this._getScrollVisibility();
                        /** @type {?} */
                        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);
                        this._positionChanges.next(changeEvent);
                    }
                    this._isInitialRender = false;
                };
                /**
                 * Sets the transform origin based on the configured selector and the passed-in position.
                 * @private
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = function (position) {
                    if (!this._transformOriginSelector) {
                        return;
                    }
                    /** @type {?} */
                    var elements = ( /** @type {?} */(this._boundingBox)).querySelectorAll(this._transformOriginSelector);
                    /** @type {?} */
                    var xOrigin;
                    /** @type {?} */
                    var yOrigin = position.overlayY;
                    if (position.overlayX === 'center') {
                        xOrigin = 'center';
                    }
                    else if (this._isRtl()) {
                        xOrigin = position.overlayX === 'start' ? 'right' : 'left';
                    }
                    else {
                        xOrigin = position.overlayX === 'start' ? 'left' : 'right';
                    }
                    for (var i = 0; i < elements.length; i++) {
                        elements[i].style.transformOrigin = xOrigin + " " + yOrigin;
                    }
                };
                /**
                 * Gets the position and size of the overlay's sizing container.
                 *
                 * This method does no measuring and applies no styles so that we can cheaply compute the
                 * bounds for all positions and choose the best fit based on these results.
                 * @private
                 * @param {?} origin
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = function (origin, position) {
                    /** @type {?} */
                    var viewport = this._viewportRect;
                    /** @type {?} */
                    var isRtl = this._isRtl();
                    /** @type {?} */
                    var height;
                    /** @type {?} */
                    var top;
                    /** @type {?} */
                    var bottom;
                    if (position.overlayY === 'top') {
                        // Overlay is opening "downward" and thus is bound by the bottom viewport edge.
                        top = origin.y;
                        height = viewport.height - top + this._viewportMargin;
                    }
                    else if (position.overlayY === 'bottom') {
                        // Overlay is opening "upward" and thus is bound by the top viewport edge. We need to add
                        // the viewport margin back in, because the viewport rect is narrowed down to remove the
                        // margin, whereas the `origin` position is calculated based on its `ClientRect`.
                        bottom = viewport.height - origin.y + this._viewportMargin * 2;
                        height = viewport.height - bottom + this._viewportMargin;
                    }
                    else {
                        // If neither top nor bottom, it means that the overlay is vertically centered on the
                        // origin point. Note that we want the position relative to the viewport, rather than
                        // the page, which is why we don't use something like `viewport.bottom - origin.y` and
                        // `origin.y - viewport.top`.
                        /** @type {?} */
                        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);
                        /** @type {?} */
                        var previousHeight = this._lastBoundingBoxSize.height;
                        height = smallestDistanceToViewportEdge * 2;
                        top = origin.y - smallestDistanceToViewportEdge;
                        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {
                            top = origin.y - (previousHeight / 2);
                        }
                    }
                    // The overlay is opening 'right-ward' (the content flows to the right).
                    /** @type {?} */
                    var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||
                        (position.overlayX === 'end' && isRtl);
                    // The overlay is opening 'left-ward' (the content flows to the left).
                    /** @type {?} */
                    var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||
                        (position.overlayX === 'start' && isRtl);
                    /** @type {?} */
                    var width;
                    /** @type {?} */
                    var left;
                    /** @type {?} */
                    var right;
                    if (isBoundedByLeftViewportEdge) {
                        right = viewport.width - origin.x + this._viewportMargin;
                        width = origin.x - this._viewportMargin;
                    }
                    else if (isBoundedByRightViewportEdge) {
                        left = origin.x;
                        width = viewport.right - origin.x;
                    }
                    else {
                        // If neither start nor end, it means that the overlay is horizontally centered on the
                        // origin point. Note that we want the position relative to the viewport, rather than
                        // the page, which is why we don't use something like `viewport.right - origin.x` and
                        // `origin.x - viewport.left`.
                        /** @type {?} */
                        var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);
                        /** @type {?} */
                        var previousWidth = this._lastBoundingBoxSize.width;
                        width = smallestDistanceToViewportEdge * 2;
                        left = origin.x - smallestDistanceToViewportEdge;
                        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {
                            left = origin.x - (previousWidth / 2);
                        }
                    }
                    return { top: ( /** @type {?} */(top)), left: ( /** @type {?} */(left)), bottom: ( /** @type {?} */(bottom)), right: ( /** @type {?} */(right)), width: width, height: height };
                };
                /**
                 * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the
                 * origin's connection point and stetches to the bounds of the viewport.
                 *
                 * @private
                 * @param {?} origin The point on the origin element where the overlay is connected.
                 * @param {?} position The position preference
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = function (origin, position) {
                    /** @type {?} */
                    var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);
                    // It's weird if the overlay *grows* while scrolling, so we take the last size into account
                    // when applying a new size.
                    if (!this._isInitialRender && !this._growAfterOpen) {
                        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);
                        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);
                    }
                    /** @type {?} */
                    var styles = ( /** @type {?} */({}));
                    if (this._hasExactPosition()) {
                        styles.top = styles.left = '0';
                        styles.bottom = styles.right = '';
                        styles.width = styles.height = '100%';
                    }
                    else {
                        /** @type {?} */
                        var maxHeight = this._overlayRef.getConfig().maxHeight;
                        /** @type {?} */
                        var maxWidth = this._overlayRef.getConfig().maxWidth;
                        styles.height = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.height);
                        styles.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.top);
                        styles.bottom = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.bottom);
                        styles.width = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.width);
                        styles.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.left);
                        styles.right = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.right);
                        // Push the pane content towards the proper direction.
                        if (position.overlayX === 'center') {
                            styles.alignItems = 'center';
                        }
                        else {
                            styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';
                        }
                        if (position.overlayY === 'center') {
                            styles.justifyContent = 'center';
                        }
                        else {
                            styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';
                        }
                        if (maxHeight) {
                            styles.maxHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(maxHeight);
                        }
                        if (maxWidth) {
                            styles.maxWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(maxWidth);
                        }
                    }
                    this._lastBoundingBoxSize = boundingBoxRect;
                    extendStyles(( /** @type {?} */(this._boundingBox)).style, styles);
                };
                /**
                 * Resets the styles for the bounding box so that a new positioning can be computed.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = function () {
                    extendStyles(( /** @type {?} */(this._boundingBox)).style, ( /** @type {?} */({
                        top: '0',
                        left: '0',
                        right: '0',
                        bottom: '0',
                        height: '',
                        width: '',
                        alignItems: '',
                        justifyContent: '',
                    })));
                };
                /**
                 * Resets the styles for the overlay pane so that a new positioning can be computed.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = function () {
                    extendStyles(this._pane.style, ( /** @type {?} */({
                        top: '',
                        left: '',
                        bottom: '',
                        right: '',
                        position: '',
                        transform: '',
                    })));
                };
                /**
                 * Sets positioning styles to the overlay element.
                 * @private
                 * @param {?} originPoint
                 * @param {?} position
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = function (originPoint, position) {
                    /** @type {?} */
                    var styles = ( /** @type {?} */({}));
                    if (this._hasExactPosition()) {
                        /** @type {?} */
                        var scrollPosition = this._viewportRuler.getViewportScrollPosition();
                        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));
                        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));
                    }
                    else {
                        styles.position = 'static';
                    }
                    // Use a transform to apply the offsets. We do this because the `center` positions rely on
                    // being in the normal flex flow and setting a `top` / `left` at all will completely throw
                    // off the position. We also can't use margins, because they won't have an effect in some
                    // cases where the element doesn't have anything to "push off of". Finally, this works
                    // better both with flexible and non-flexible positioning.
                    /** @type {?} */
                    var transformString = '';
                    /** @type {?} */
                    var offsetX = this._getOffset(position, 'x');
                    /** @type {?} */
                    var offsetY = this._getOffset(position, 'y');
                    if (offsetX) {
                        transformString += "translateX(" + offsetX + "px) ";
                    }
                    if (offsetY) {
                        transformString += "translateY(" + offsetY + "px)";
                    }
                    styles.transform = transformString.trim();
                    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because
                    // we need these values to both be set to "100%" for the automatic flexible sizing to work.
                    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.
                    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {
                        styles.maxHeight = '';
                    }
                    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {
                        styles.maxWidth = '';
                    }
                    extendStyles(this._pane.style, styles);
                };
                /**
                 * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.
                 * @private
                 * @param {?} position
                 * @param {?} originPoint
                 * @param {?} scrollPosition
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = function (position, originPoint, scrollPosition) {
                    // Reset any existing styles. This is necessary in case the
                    // preferred position has changed since the last `apply`.
                    /** @type {?} */
                    var styles = ( /** @type {?} */({ top: null, bottom: null }));
                    /** @type {?} */
                    var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
                    if (this._isPushed) {
                        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
                    }
                    /** @type {?} */
                    var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;
                    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an
                    // autocomplete), mobile browsers will shift everything in order to put the input in the middle
                    // of the screen and to make space for the virtual keyboard. We need to account for this offset,
                    // otherwise our positioning will be thrown off.
                    overlayPoint.y -= virtualKeyboardOffset;
                    // We want to set either `top` or `bottom` based on whether the overlay wants to appear
                    // above or below the origin and the direction in which the element will expand.
                    if (position.overlayY === 'bottom') {
                        // When using `bottom`, we adjust the y position such that it is the distance
                        // from the bottom of the viewport rather than the top.
                        /** @type {?} */
                        var documentHeight = ( /** @type {?} */(this._document.documentElement)).clientHeight;
                        styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + "px";
                    }
                    else {
                        styles.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(overlayPoint.y);
                    }
                    return styles;
                };
                /**
                 * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.
                 * @private
                 * @param {?} position
                 * @param {?} originPoint
                 * @param {?} scrollPosition
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = function (position, originPoint, scrollPosition) {
                    // Reset any existing styles. This is necessary in case the preferred position has
                    // changed since the last `apply`.
                    /** @type {?} */
                    var styles = ( /** @type {?} */({ left: null, right: null }));
                    /** @type {?} */
                    var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
                    if (this._isPushed) {
                        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
                    }
                    // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
                    // or "after" the origin, which determines the direction in which the element will expand.
                    // For the horizontal axis, the meaning of "before" and "after" change based on whether the
                    // page is in RTL or LTR.
                    /** @type {?} */
                    var horizontalStyleProperty;
                    if (this._isRtl()) {
                        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';
                    }
                    else {
                        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';
                    }
                    // When we're setting `right`, we adjust the x position such that it is the distance
                    // from the right edge of the viewport rather than the left edge.
                    if (horizontalStyleProperty === 'right') {
                        /** @type {?} */
                        var documentWidth = ( /** @type {?} */(this._document.documentElement)).clientWidth;
                        styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + "px";
                    }
                    else {
                        styles.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(overlayPoint.x);
                    }
                    return styles;
                };
                /**
                 * Gets the view properties of the trigger and overlay, including whether they are clipped
                 * or completely outside the view of any of the strategy's scrollables.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = function () {
                    // Note: needs fresh rects since the position could've changed.
                    /** @type {?} */
                    var originBounds = this._getOriginRect();
                    /** @type {?} */
                    var overlayBounds = this._pane.getBoundingClientRect();
                    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers
                    // every time, we should be able to use the scrollTop of the containers if the size of those
                    // containers hasn't changed.
                    /** @type {?} */
                    var scrollContainerBounds = this._scrollables.map(( /**
                     * @param {?} scrollable
                     * @return {?}
                     */function (/**
                     * @param {?} scrollable
                     * @return {?}
                     */ scrollable) {
                        return scrollable.getElementRef().nativeElement.getBoundingClientRect();
                    }));
                    return {
                        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
                        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
                        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
                        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),
                    };
                };
                /**
                 * Subtracts the amount that an element is overflowing on an axis from its length.
                 * @private
                 * @param {?} length
                 * @param {...?} overflows
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._subtractOverflows = function (length) {
                    var overflows = [];
                    for (var _b = 1; _b < arguments.length; _b++) {
                        overflows[_b - 1] = arguments[_b];
                    }
                    return overflows.reduce(( /**
                     * @param {?} currentValue
                     * @param {?} currentOverflow
                     * @return {?}
                     */function (currentValue, currentOverflow) {
                        return currentValue - Math.max(currentOverflow, 0);
                    }), length);
                };
                /**
                 * Narrows the given viewport rect by the current _viewportMargin.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = function () {
                    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,
                    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference
                    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`
                    // and `innerHeight` that do. This is necessary, because the overlay container uses
                    // 100% `width` and `height` which don't include the scrollbar either.
                    /** @type {?} */
                    var width = ( /** @type {?} */(this._document.documentElement)).clientWidth;
                    /** @type {?} */
                    var height = ( /** @type {?} */(this._document.documentElement)).clientHeight;
                    /** @type {?} */
                    var scrollPosition = this._viewportRuler.getViewportScrollPosition();
                    return {
                        top: scrollPosition.top + this._viewportMargin,
                        left: scrollPosition.left + this._viewportMargin,
                        right: scrollPosition.left + width - this._viewportMargin,
                        bottom: scrollPosition.top + height - this._viewportMargin,
                        width: width - (2 * this._viewportMargin),
                        height: height - (2 * this._viewportMargin),
                    };
                };
                /**
                 * Whether the we're dealing with an RTL context
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._isRtl = function () {
                    return this._overlayRef.getDirection() === 'rtl';
                };
                /**
                 * Determines whether the overlay uses exact or flexible positioning.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._hasExactPosition = function () {
                    return !this._hasFlexibleDimensions || this._isPushed;
                };
                /**
                 * Retrieves the offset of a position along the x or y axis.
                 * @private
                 * @param {?} position
                 * @param {?} axis
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOffset = function (position, axis) {
                    if (axis === 'x') {
                        // We don't do something like `position['offset' + axis]` in
                        // order to avoid breking minifiers that rename properties.
                        return position.offsetX == null ? this._offsetX : position.offsetX;
                    }
                    return position.offsetY == null ? this._offsetY : position.offsetY;
                };
                /**
                 * Validates that the current position match the expected values.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._validatePositions = function () {
                    if (!this._preferredPositions.length) {
                        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');
                    }
                    // TODO(crisbeto): remove these once Angular's template type
                    // checking is advanced enough to catch these cases.
                    this._preferredPositions.forEach(( /**
                     * @param {?} pair
                     * @return {?}
                     */function (/**
                     * @param {?} pair
                     * @return {?}
                     */ pair) {
                        validateHorizontalPosition('originX', pair.originX);
                        validateVerticalPosition('originY', pair.originY);
                        validateHorizontalPosition('overlayX', pair.overlayX);
                        validateVerticalPosition('overlayY', pair.overlayY);
                    }));
                };
                /**
                 * Adds a single CSS class or an array of classes on the overlay panel.
                 * @private
                 * @param {?} cssClasses
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._addPanelClasses = function (cssClasses) {
                    var _this = this;
                    if (this._pane) {
                        Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceArray"])(cssClasses).forEach(( /**
                         * @param {?} cssClass
                         * @return {?}
                         */function (/**
                         * @param {?} cssClass
                         * @return {?}
                         */ cssClass) {
                            if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {
                                _this._appliedPanelClasses.push(cssClass);
                                _this._pane.classList.add(cssClass);
                            }
                        }));
                    }
                };
                /**
                 * Clears the classes that the position strategy has applied from the overlay panel.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = function () {
                    var _this = this;
                    if (this._pane) {
                        this._appliedPanelClasses.forEach(( /**
                         * @param {?} cssClass
                         * @return {?}
                         */function (/**
                         * @param {?} cssClass
                         * @return {?}
                         */ cssClass) {
                            _this._pane.classList.remove(cssClass);
                        }));
                        this._appliedPanelClasses = [];
                    }
                };
                /**
                 * Returns the ClientRect of the current origin.
                 * @private
                 * @return {?}
                 */
                FlexibleConnectedPositionStrategy.prototype._getOriginRect = function () {
                    /** @type {?} */
                    var origin = this._origin;
                    if (origin instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]) {
                        return origin.nativeElement.getBoundingClientRect();
                    }
                    if (origin instanceof HTMLElement) {
                        return origin.getBoundingClientRect();
                    }
                    /** @type {?} */
                    var width = origin.width || 0;
                    /** @type {?} */
                    var height = origin.height || 0;
                    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.
                    return {
                        top: origin.y,
                        bottom: origin.y + height,
                        left: origin.x,
                        right: origin.x + width,
                        height: height,
                        width: width
                    };
                };
                return FlexibleConnectedPositionStrategy;
            }());
            /**
             * Shallow-extends a stylesheet object with another stylesheet object.
             * @param {?} dest
             * @param {?} source
             * @return {?}
             */
            function extendStyles(dest, source) {
                for (var key in source) {
                    if (source.hasOwnProperty(key)) {
                        dest[key] = source[key];
                    }
                }
                return dest;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A strategy for positioning overlays. Using this strategy, an overlay is given an
             * implicit position relative to some origin element. The relative position is defined in terms of
             * a point on the origin element that is connected to a point on the overlay element. For example,
             * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
             * of the overlay.
             * @deprecated Use `FlexibleConnectedPositionStrategy` instead.
             * \@breaking-change 8.0.0
             */
            var ConnectedPositionStrategy = /** @class */ (function () {
                /**
                 * @param {?} originPos
                 * @param {?} overlayPos
                 * @param {?} connectedTo
                 * @param {?} viewportRuler
                 * @param {?} document
                 * @param {?} platform
                 * @param {?} overlayContainer
                 */
                function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     */
                    this._preferredPositions = [];
                    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain
                    // the extra logic, we create an instance of the positioning strategy that has some
                    // defaults that make it behave as the old position strategy and to which we'll
                    // proxy all of the API calls.
                    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)
                        .withFlexibleDimensions(false)
                        .withPush(false)
                        .withViewportMargin(0);
                    this.withFallbackPosition(originPos, overlayPos);
                }
                Object.defineProperty(ConnectedPositionStrategy.prototype, "_isRtl", {
                    /**
                     * Whether the we're dealing with an RTL context
                     * @return {?}
                     */
                    get: function () {
                        return this._overlayRef.getDirection() === 'rtl';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectedPositionStrategy.prototype, "onPositionChange", {
                    /**
                     * Emits an event when the connection point changes.
                     * @return {?}
                     */
                    get: function () {
                        return this._positionStrategy.positionChanges;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectedPositionStrategy.prototype, "positions", {
                    /**
                     * Ordered list of preferred positions, from most to least desirable.
                     * @return {?}
                     */
                    get: function () {
                        return this._preferredPositions;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attach this position strategy to an overlay.
                 * @param {?} overlayRef
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.attach = function (overlayRef) {
                    this._overlayRef = overlayRef;
                    this._positionStrategy.attach(overlayRef);
                    if (this._direction) {
                        overlayRef.setDirection(this._direction);
                        this._direction = null;
                    }
                };
                /**
                 * Disposes all resources used by the position strategy.
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.dispose = function () {
                    this._positionStrategy.dispose();
                };
                /**
                 * \@docs-private
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.detach = function () {
                    this._positionStrategy.detach();
                };
                /**
                 * Updates the position of the overlay element, using whichever preferred position relative
                 * to the origin fits on-screen.
                 * \@docs-private
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.apply = function () {
                    this._positionStrategy.apply();
                };
                /**
                 * Re-positions the overlay element with the trigger in its last calculated position,
                 * even if a position higher in the "preferred positions" list would now fit. This
                 * allows one to re-align the panel without changing the orientation of the panel.
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {
                    this._positionStrategy.reapplyLastPosition();
                };
                /**
                 * Sets the list of Scrollable containers that host the origin element so that
                 * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
                 * Scrollable must be an ancestor element of the strategy's origin element.
                 * @param {?} scrollables
                 * @return {?}
                 */
                ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {
                    this._positionStrategy.withScrollableContainers(scrollables);
                };
                /**
                 * Adds a new preferred fallback position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} originPos
                 * @param {?} overlayPos
                 * @param {?=} offsetX
                 * @param {?=} offsetY
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos, offsetX, offsetY) {
                    /** @type {?} */
                    var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);
                    ( /** @type {?} */(this))._preferredPositions.push(position);
                    ( /** @type {?} */(this))._positionStrategy.withPositions(( /** @type {?} */(this))._preferredPositions);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the layout direction so the overlay's position can be adjusted to match.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} dir New layout direction.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withDirection = function (dir) {
                    // Since the direction might be declared before the strategy is attached,
                    // we save the value in a temporary property and we'll transfer it to the
                    // overlay ref on attachment.
                    if (( /** @type {?} */(this))._overlayRef) {
                        ( /** @type {?} */(this))._overlayRef.setDirection(dir);
                    }
                    else {
                        ( /** @type {?} */(this))._direction = dir;
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets an offset for the overlay's connection point on the x-axis
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the X axis.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {
                    ( /** @type {?} */(this))._positionStrategy.withDefaultOffsetX(offset);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets an offset for the overlay's connection point on the y-axis
                 * @template THIS
                 * @this {THIS}
                 * @param {?} offset New offset in the Y axis.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {
                    ( /** @type {?} */(this))._positionStrategy.withDefaultOffsetY(offset);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets whether the overlay's position should be locked in after it is positioned
                 * initially. When an overlay is locked in, it won't attempt to reposition itself
                 * when the position is re-applied (e.g. when the user scrolls away).
                 * @template THIS
                 * @this {THIS}
                 * @param {?} isLocked Whether the overlay should locked in.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {
                    ( /** @type {?} */(this))._positionStrategy.withLockedPosition(isLocked);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Overwrites the current set of positions with an array of new ones.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} positions Position pairs to be set on the strategy.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.withPositions = function (positions) {
                    ( /** @type {?} */(this))._preferredPositions = positions.slice();
                    ( /** @type {?} */(this))._positionStrategy.withPositions(( /** @type {?} */(this))._preferredPositions);
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the origin element, relative to which to position the overlay.
                 * @template THIS
                 * @this {THIS}
                 * @param {?} origin Reference to the new origin element.
                 * @return {THIS}
                 */
                ConnectedPositionStrategy.prototype.setOrigin = function (origin) {
                    ( /** @type {?} */(this))._positionStrategy.setOrigin(origin);
                    return ( /** @type {?} */(this));
                };
                return ConnectedPositionStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Class to be added to the overlay pane wrapper.
             * @type {?}
             */
            var wrapperClass = 'cdk-global-overlay-wrapper';
            /**
             * A strategy for positioning overlays. Using this strategy, an overlay is given an
             * explicit position relative to the browser's viewport. We use flexbox, instead of
             * transforms, in order to avoid issues with subpixel rendering which can cause the
             * element to become blurry.
             */
            var GlobalPositionStrategy = /** @class */ (function () {
                function GlobalPositionStrategy() {
                    this._cssPosition = 'static';
                    this._topOffset = '';
                    this._bottomOffset = '';
                    this._leftOffset = '';
                    this._rightOffset = '';
                    this._alignItems = '';
                    this._justifyContent = '';
                    this._width = '';
                    this._height = '';
                }
                /**
                 * @param {?} overlayRef
                 * @return {?}
                 */
                GlobalPositionStrategy.prototype.attach = function (overlayRef) {
                    /** @type {?} */
                    var config = overlayRef.getConfig();
                    this._overlayRef = overlayRef;
                    if (this._width && !config.width) {
                        overlayRef.updateSize({ width: this._width });
                    }
                    if (this._height && !config.height) {
                        overlayRef.updateSize({ height: this._height });
                    }
                    overlayRef.hostElement.classList.add(wrapperClass);
                    this._isDisposed = false;
                };
                /**
                 * Sets the top position of the overlay. Clears any previously set vertical position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New top offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.top = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._bottomOffset = '';
                    ( /** @type {?} */(this))._topOffset = value;
                    ( /** @type {?} */(this))._alignItems = 'flex-start';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the left position of the overlay. Clears any previously set horizontal position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New left offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.left = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._rightOffset = '';
                    ( /** @type {?} */(this))._leftOffset = value;
                    ( /** @type {?} */(this))._justifyContent = 'flex-start';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the bottom position of the overlay. Clears any previously set vertical position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New bottom offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.bottom = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._topOffset = '';
                    ( /** @type {?} */(this))._bottomOffset = value;
                    ( /** @type {?} */(this))._alignItems = 'flex-end';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the right position of the overlay. Clears any previously set horizontal position.
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New right offset.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.right = function (value) {
                    if (value === void 0) { value = ''; }
                    ( /** @type {?} */(this))._leftOffset = '';
                    ( /** @type {?} */(this))._rightOffset = value;
                    ( /** @type {?} */(this))._justifyContent = 'flex-end';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the overlay width and clears any previously set width.
                 * @deprecated Pass the `width` through the `OverlayConfig`.
                 * \@breaking-change 8.0.0
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New width for the overlay
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.width = function (value) {
                    if (value === void 0) { value = ''; }
                    if (( /** @type {?} */(this))._overlayRef) {
                        ( /** @type {?} */(this))._overlayRef.updateSize({ width: value });
                    }
                    else {
                        ( /** @type {?} */(this))._width = value;
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Sets the overlay height and clears any previously set height.
                 * @deprecated Pass the `height` through the `OverlayConfig`.
                 * \@breaking-change 8.0.0
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} value New height for the overlay
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.height = function (value) {
                    if (value === void 0) { value = ''; }
                    if (( /** @type {?} */(this))._overlayRef) {
                        ( /** @type {?} */(this))._overlayRef.updateSize({ height: value });
                    }
                    else {
                        ( /** @type {?} */(this))._height = value;
                    }
                    return ( /** @type {?} */(this));
                };
                /**
                 * Centers the overlay horizontally with an optional offset.
                 * Clears any previously set horizontal position.
                 *
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} offset Overlay offset from the horizontal center.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {
                    if (offset === void 0) { offset = ''; }
                    ( /** @type {?} */(this)).left(offset);
                    ( /** @type {?} */(this))._justifyContent = 'center';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Centers the overlay vertically with an optional offset.
                 * Clears any previously set vertical position.
                 *
                 * @template THIS
                 * @this {THIS}
                 * @param {?=} offset Overlay offset from the vertical center.
                 * @return {THIS}
                 */
                GlobalPositionStrategy.prototype.centerVertically = function (offset) {
                    if (offset === void 0) { offset = ''; }
                    ( /** @type {?} */(this)).top(offset);
                    ( /** @type {?} */(this))._alignItems = 'center';
                    return ( /** @type {?} */(this));
                };
                /**
                 * Apply the position to the element.
                 * \@docs-private
                 * @return {?}
                 */
                GlobalPositionStrategy.prototype.apply = function () {
                    // Since the overlay ref applies the strategy asynchronously, it could
                    // have been disposed before it ends up being applied. If that is the
                    // case, we shouldn't do anything.
                    if (!this._overlayRef || !this._overlayRef.hasAttached()) {
                        return;
                    }
                    /** @type {?} */
                    var styles = this._overlayRef.overlayElement.style;
                    /** @type {?} */
                    var parentStyles = this._overlayRef.hostElement.style;
                    /** @type {?} */
                    var config = this._overlayRef.getConfig();
                    styles.position = this._cssPosition;
                    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;
                    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;
                    styles.marginBottom = this._bottomOffset;
                    styles.marginRight = this._rightOffset;
                    if (config.width === '100%') {
                        parentStyles.justifyContent = 'flex-start';
                    }
                    else if (this._justifyContent === 'center') {
                        parentStyles.justifyContent = 'center';
                    }
                    else if (this._overlayRef.getConfig().direction === 'rtl') {
                        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we
                        // don't want that because our positioning is explicitly `left` and `right`, hence
                        // why we do another inversion to ensure that the overlay stays in the same position.
                        // TODO: reconsider this if we add `start` and `end` methods.
                        if (this._justifyContent === 'flex-start') {
                            parentStyles.justifyContent = 'flex-end';
                        }
                        else if (this._justifyContent === 'flex-end') {
                            parentStyles.justifyContent = 'flex-start';
                        }
                    }
                    else {
                        parentStyles.justifyContent = this._justifyContent;
                    }
                    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;
                };
                /**
                 * Cleans up the DOM changes from the position strategy.
                 * \@docs-private
                 * @return {?}
                 */
                GlobalPositionStrategy.prototype.dispose = function () {
                    if (this._isDisposed || !this._overlayRef) {
                        return;
                    }
                    /** @type {?} */
                    var styles = this._overlayRef.overlayElement.style;
                    /** @type {?} */
                    var parent = this._overlayRef.hostElement;
                    /** @type {?} */
                    var parentStyles = parent.style;
                    parent.classList.remove(wrapperClass);
                    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =
                        styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';
                    this._overlayRef = ( /** @type {?} */(null));
                    this._isDisposed = true;
                };
                return GlobalPositionStrategy;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Builder for overlay position strategy.
             */
            var OverlayPositionBuilder = /** @class */ (function () {
                /**
                 * @param {?} _viewportRuler
                 * @param {?} _document
                 * @param {?} _platform
                 * @param {?} _overlayContainer
                 */
                function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {
                    this._viewportRuler = _viewportRuler;
                    this._document = _document;
                    this._platform = _platform;
                    this._overlayContainer = _overlayContainer;
                }
                /**
                 * Creates a global position strategy.
                 * @return {?}
                 */
                OverlayPositionBuilder.prototype.global = function () {
                    return new GlobalPositionStrategy();
                };
                /**
                 * Creates a relative position strategy.
                 * @deprecated Use `flexibleConnectedTo` instead.
                 * \@breaking-change 8.0.0
                 * @param {?} elementRef
                 * @param {?} originPos
                 * @param {?} overlayPos
                 * @return {?}
                 */
                OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {
                    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);
                };
                /**
                 * Creates a flexible position strategy.
                 * @param {?} origin Origin relative to which to position the overlay.
                 * @return {?}
                 */
                OverlayPositionBuilder.prototype.flexibleConnectedTo = function (origin) {
                    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
                };
                return OverlayPositionBuilder;
            }());
            OverlayPositionBuilder.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            OverlayPositionBuilder.ctorParameters = function () { return [
                { type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
                { type: OverlayContainer }
            ]; };
            /** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Next overlay unique ID.
             * @type {?}
             */
            var nextUniqueId = 0;
            // Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver
            // it needs is different based on where OverlayModule is imported.
            /**
             * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
             * used as a low-level building block for other components. Dialogs, tooltips, menus,
             * selects, etc. can all be built using overlays. The service should primarily be used by authors
             * of re-usable components rather than developers building end-user applications.
             *
             * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.
             */
            var Overlay = /** @class */ (function () {
                /**
                 * @param {?} scrollStrategies
                 * @param {?} _overlayContainer
                 * @param {?} _componentFactoryResolver
                 * @param {?} _positionBuilder
                 * @param {?} _keyboardDispatcher
                 * @param {?} _injector
                 * @param {?} _ngZone
                 * @param {?} _document
                 * @param {?} _directionality
                 * @param {?=} _location
                 */
                function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {
                    this.scrollStrategies = scrollStrategies;
                    this._overlayContainer = _overlayContainer;
                    this._componentFactoryResolver = _componentFactoryResolver;
                    this._positionBuilder = _positionBuilder;
                    this._keyboardDispatcher = _keyboardDispatcher;
                    this._injector = _injector;
                    this._ngZone = _ngZone;
                    this._document = _document;
                    this._directionality = _directionality;
                    this._location = _location;
                }
                /**
                 * Creates an overlay.
                 * @param {?=} config Configuration applied to the overlay.
                 * @return {?} Reference to the created overlay.
                 */
                Overlay.prototype.create = function (config) {
                    /** @type {?} */
                    var host = this._createHostElement();
                    /** @type {?} */
                    var pane = this._createPaneElement(host);
                    /** @type {?} */
                    var portalOutlet = this._createPortalOutlet(pane);
                    /** @type {?} */
                    var overlayConfig = new OverlayConfig(config);
                    overlayConfig.direction = overlayConfig.direction || this._directionality.value;
                    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);
                };
                /**
                 * Gets a position builder that can be used, via fluent API,
                 * to construct and configure a position strategy.
                 * @return {?} An overlay position builder.
                 */
                Overlay.prototype.position = function () {
                    return this._positionBuilder;
                };
                /**
                 * Creates the DOM element for an overlay and appends it to the overlay container.
                 * @private
                 * @param {?} host
                 * @return {?} Newly-created pane element
                 */
                Overlay.prototype._createPaneElement = function (host) {
                    /** @type {?} */
                    var pane = this._document.createElement('div');
                    pane.id = "cdk-overlay-" + nextUniqueId++;
                    pane.classList.add('cdk-overlay-pane');
                    host.appendChild(pane);
                    return pane;
                };
                /**
                 * Creates the host element that wraps around an overlay
                 * and can be used for advanced positioning.
                 * @private
                 * @return {?} Newly-create host element.
                 */
                Overlay.prototype._createHostElement = function () {
                    /** @type {?} */
                    var host = this._document.createElement('div');
                    this._overlayContainer.getContainerElement().appendChild(host);
                    return host;
                };
                /**
                 * Create a DomPortalOutlet into which the overlay content can be loaded.
                 * @private
                 * @param {?} pane The DOM element to turn into a portal outlet.
                 * @return {?} A portal outlet for the given DOM element.
                 */
                Overlay.prototype._createPortalOutlet = function (pane) {
                    // We have to resolve the ApplicationRef later in order to allow people
                    // to use overlay-based providers during app initialization.
                    if (!this._appRef) {
                        this._appRef = this._injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"]);
                    }
                    return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["DomPortalOutlet"](pane, this._componentFactoryResolver, this._appRef, this._injector);
                };
                return Overlay;
            }());
            Overlay.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"] },
            ];
            /** @nocollapse */
            Overlay.ctorParameters = function () { return [
                { type: ScrollStrategyOptions },
                { type: OverlayContainer },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"] },
                { type: OverlayPositionBuilder },
                { type: OverlayKeyboardDispatcher },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Default set of positions for the overlay. Follows the behavior of a dropdown.
             * @type {?}
             */
            var defaultPositionList = [
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top'
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom'
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'bottom'
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'top'
                }
            ];
            /**
             * Injection token that determines the scroll handling while the connected overlay is open.
             * @type {?}
             */
            var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('cdk-connected-overlay-scroll-strategy');
            /**
             * Directive applied to an element to make it usable as an origin for an Overlay using a
             * ConnectedPositionStrategy.
             */
            var CdkOverlayOrigin = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 */
                function CdkOverlayOrigin(elementRef) {
                    this.elementRef = elementRef;
                }
                return CdkOverlayOrigin;
            }());
            CdkOverlayOrigin.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',
                            exportAs: 'cdkOverlayOrigin',
                        },] },
            ];
            /** @nocollapse */
            CdkOverlayOrigin.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] }
            ]; };
            /**
             * Directive to facilitate declarative creation of an
             * Overlay using a FlexibleConnectedPositionStrategy.
             */
            var CdkConnectedOverlay = /** @class */ (function () {
                // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
                /**
                 * @param {?} _overlay
                 * @param {?} templateRef
                 * @param {?} viewContainerRef
                 * @param {?} scrollStrategyFactory
                 * @param {?} _dir
                 */
                function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {
                    this._overlay = _overlay;
                    this._dir = _dir;
                    this._hasBackdrop = false;
                    this._lockPosition = false;
                    this._growAfterOpen = false;
                    this._flexibleDimensions = false;
                    this._push = false;
                    this._backdropSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                    /**
                     * Margin between the overlay and the viewport edges.
                     */
                    this.viewportMargin = 0;
                    /**
                     * Whether the overlay is open.
                     */
                    this.open = false;
                    /**
                     * Event emitted when the backdrop is clicked.
                     */
                    this.backdropClick = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the position has changed.
                     */
                    this.positionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the overlay has been attached.
                     */
                    this.attach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Event emitted when the overlay has been detached.
                     */
                    this.detach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    /**
                     * Emits when there are keyboard events that are targeted at the overlay.
                     */
                    this.overlayKeydown = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                    this._templatePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["TemplatePortal"](templateRef, viewContainerRef);
                    this._scrollStrategyFactory = scrollStrategyFactory;
                    this.scrollStrategy = this._scrollStrategyFactory();
                }
                Object.defineProperty(CdkConnectedOverlay.prototype, "offsetX", {
                    /**
                     * The offset in pixels for the overlay connection point on the x-axis
                     * @return {?}
                     */
                    get: function () { return this._offsetX; },
                    /**
                     * @param {?} offsetX
                     * @return {?}
                     */
                    set: function (offsetX) {
                        this._offsetX = offsetX;
                        if (this._position) {
                            this._updatePositionStrategy(this._position);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "offsetY", {
                    /**
                     * The offset in pixels for the overlay connection point on the y-axis
                     * @return {?}
                     */
                    get: function () { return this._offsetY; },
                    /**
                     * @param {?} offsetY
                     * @return {?}
                     */
                    set: function (offsetY) {
                        this._offsetY = offsetY;
                        if (this._position) {
                            this._updatePositionStrategy(this._position);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "hasBackdrop", {
                    /**
                     * Whether or not the overlay should attach a backdrop.
                     * @return {?}
                     */
                    get: function () { return this._hasBackdrop; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "lockPosition", {
                    /**
                     * Whether or not the overlay should be locked when scrolling.
                     * @return {?}
                     */
                    get: function () { return this._lockPosition; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._lockPosition = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "flexibleDimensions", {
                    /**
                     * Whether the overlay's width and height can be constrained to fit within the viewport.
                     * @return {?}
                     */
                    get: function () { return this._flexibleDimensions; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._flexibleDimensions = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "growAfterOpen", {
                    /**
                     * Whether the overlay can grow after the initial open when flexible positioning is turned on.
                     * @return {?}
                     */
                    get: function () { return this._growAfterOpen; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._growAfterOpen = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "push", {
                    /**
                     * Whether the overlay can be pushed on-screen if none of the provided positions fit.
                     * @return {?}
                     */
                    get: function () { return this._push; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._push = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "overlayRef", {
                    /**
                     * The associated overlay reference.
                     * @return {?}
                     */
                    get: function () {
                        return this._overlayRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkConnectedOverlay.prototype, "dir", {
                    /**
                     * The element's layout direction.
                     * @return {?}
                     */
                    get: function () {
                        return this._dir ? this._dir.value : 'ltr';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype.ngOnDestroy = function () {
                    if (this._overlayRef) {
                        this._overlayRef.dispose();
                    }
                    this._backdropSubscription.unsubscribe();
                };
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype.ngOnChanges = function (changes) {
                    if (this._position) {
                        this._updatePositionStrategy(this._position);
                        this._overlayRef.updateSize({
                            width: this.width,
                            minWidth: this.minWidth,
                            height: this.height,
                            minHeight: this.minHeight,
                        });
                        if (changes['origin'] && this.open) {
                            this._position.apply();
                        }
                    }
                    if (changes['open']) {
                        this.open ? this._attachOverlay() : this._detachOverlay();
                    }
                };
                /**
                 * Creates an overlay
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._createOverlay = function () {
                    var _this = this;
                    if (!this.positions || !this.positions.length) {
                        this.positions = defaultPositionList;
                    }
                    this._overlayRef = this._overlay.create(this._buildConfig());
                    this._overlayRef.keydownEvents().subscribe(( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        _this.overlayKeydown.next(event);
                        if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ESCAPE"] && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["hasModifierKey"])(event)) {
                            event.preventDefault();
                            _this._detachOverlay();
                        }
                    }));
                };
                /**
                 * Builds the overlay config based on the directive's inputs
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._buildConfig = function () {
                    /** @type {?} */
                    var positionStrategy = this._position = this._createPositionStrategy();
                    /** @type {?} */
                    var overlayConfig = new OverlayConfig({
                        direction: this._dir,
                        positionStrategy: positionStrategy,
                        scrollStrategy: this.scrollStrategy,
                        hasBackdrop: this.hasBackdrop
                    });
                    if (this.width || this.width === 0) {
                        overlayConfig.width = this.width;
                    }
                    if (this.height || this.height === 0) {
                        overlayConfig.height = this.height;
                    }
                    if (this.minWidth || this.minWidth === 0) {
                        overlayConfig.minWidth = this.minWidth;
                    }
                    if (this.minHeight || this.minHeight === 0) {
                        overlayConfig.minHeight = this.minHeight;
                    }
                    if (this.backdropClass) {
                        overlayConfig.backdropClass = this.backdropClass;
                    }
                    if (this.panelClass) {
                        overlayConfig.panelClass = this.panelClass;
                    }
                    return overlayConfig;
                };
                /**
                 * Updates the state of a position strategy, based on the values of the directive inputs.
                 * @private
                 * @param {?} positionStrategy
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._updatePositionStrategy = function (positionStrategy) {
                    var _this = this;
                    /** @type {?} */
                    var positions = this.positions.map(( /**
                     * @param {?} currentPosition
                     * @return {?}
                     */function (/**
                     * @param {?} currentPosition
                     * @return {?}
                     */ currentPosition) { return ({
                        originX: currentPosition.originX,
                        originY: currentPosition.originY,
                        overlayX: currentPosition.overlayX,
                        overlayY: currentPosition.overlayY,
                        offsetX: currentPosition.offsetX || _this.offsetX,
                        offsetY: currentPosition.offsetY || _this.offsetY,
                        panelClass: currentPosition.panelClass || undefined,
                    }); }));
                    return positionStrategy
                        .setOrigin(this.origin.elementRef)
                        .withPositions(positions)
                        .withFlexibleDimensions(this.flexibleDimensions)
                        .withPush(this.push)
                        .withGrowAfterOpen(this.growAfterOpen)
                        .withViewportMargin(this.viewportMargin)
                        .withLockedPosition(this.lockPosition);
                };
                /**
                 * Returns the position strategy of the overlay to be set on the overlay config
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._createPositionStrategy = function () {
                    var _this = this;
                    /** @type {?} */
                    var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);
                    this._updatePositionStrategy(strategy);
                    strategy.positionChanges.subscribe(( /**
                     * @param {?} p
                     * @return {?}
                     */function (/**
                     * @param {?} p
                     * @return {?}
                     */ p) { return _this.positionChange.emit(p); }));
                    return strategy;
                };
                /**
                 * Attaches the overlay and subscribes to backdrop clicks if backdrop exists
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._attachOverlay = function () {
                    var _this = this;
                    if (!this._overlayRef) {
                        this._createOverlay();
                    }
                    else {
                        // Update the overlay size, in case the directive's inputs have changed
                        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;
                    }
                    if (!this._overlayRef.hasAttached()) {
                        this._overlayRef.attach(this._templatePortal);
                        this.attach.emit();
                    }
                    if (this.hasBackdrop) {
                        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(( /**
                         * @param {?} event
                         * @return {?}
                         */function (/**
                         * @param {?} event
                         * @return {?}
                         */ event) {
                            _this.backdropClick.emit(event);
                        }));
                    }
                    else {
                        this._backdropSubscription.unsubscribe();
                    }
                };
                /**
                 * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists
                 * @private
                 * @return {?}
                 */
                CdkConnectedOverlay.prototype._detachOverlay = function () {
                    if (this._overlayRef) {
                        this._overlayRef.detach();
                        this.detach.emit();
                    }
                    this._backdropSubscription.unsubscribe();
                };
                return CdkConnectedOverlay;
            }());
            CdkConnectedOverlay.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',
                            exportAs: 'cdkConnectedOverlay'
                        },] },
            ];
            /** @nocollapse */
            CdkConnectedOverlay.ctorParameters = function () { return [
                { type: Overlay },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            CdkConnectedOverlay.propDecorators = {
                origin: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOrigin',] }],
                positions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayPositions',] }],
                offsetX: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOffsetX',] }],
                offsetY: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOffsetY',] }],
                width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayWidth',] }],
                height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayHeight',] }],
                minWidth: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayMinWidth',] }],
                minHeight: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayMinHeight',] }],
                backdropClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayBackdropClass',] }],
                panelClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayPanelClass',] }],
                viewportMargin: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayViewportMargin',] }],
                scrollStrategy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayScrollStrategy',] }],
                open: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayOpen',] }],
                hasBackdrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayHasBackdrop',] }],
                lockPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayLockPosition',] }],
                flexibleDimensions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayFlexibleDimensions',] }],
                growAfterOpen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayGrowAfterOpen',] }],
                push: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkConnectedOverlayPush',] }],
                backdropClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                positionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                attach: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                detach: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }],
                overlayKeydown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"] }]
            };
            /**
             * \@docs-private
             * @param {?} overlay
             * @return {?}
             */
            function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
                return ( /**
                 * @return {?}
                 */function () { return overlay.scrollStrategies.reposition(); });
            }
            /**
             * \@docs-private
             * @type {?}
             */
            var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
                provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
                deps: [Overlay],
                useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var OverlayModule = /** @class */ (function () {
                function OverlayModule() {
                }
                return OverlayModule;
            }());
            OverlayModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["BidiModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["PortalModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollingModule"]],
                            exports: [CdkConnectedOverlay, CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollingModule"]],
                            declarations: [CdkConnectedOverlay, CdkOverlayOrigin],
                            providers: [
                                Overlay,
                                CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,
                            ],
                        },] },
            ];
            /**
             * @deprecated Use `OverlayModule` instead.
             * \@breaking-change 8.0.0
             * \@docs-private
             * @type {?}
             */
            var OVERLAY_PROVIDERS = [
                Overlay,
                OverlayPositionBuilder,
                OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,
                _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["VIEWPORT_RULER_PROVIDER"],
                OVERLAY_CONTAINER_PROVIDER,
                CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Alternative to OverlayContainer that supports correct displaying of overlay elements in
             * Fullscreen mode
             * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
             *
             * Should be provided in the root component.
             */
            var FullscreenOverlayContainer = /** @class */ (function (_super) {
                __extends(FullscreenOverlayContainer, _super);
                /**
                 * @param {?} _document
                 */
                function FullscreenOverlayContainer(_document) {
                    return _super.call(this, _document) || this;
                }
                /**
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype.ngOnDestroy = function () {
                    _super.prototype.ngOnDestroy.call(this);
                    if (this._fullScreenEventName && this._fullScreenListener) {
                        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);
                    }
                };
                /**
                 * @protected
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._createContainer = function () {
                    var _this = this;
                    _super.prototype._createContainer.call(this);
                    this._adjustParentForFullscreenChange();
                    this._addFullscreenChangeListener(( /**
                     * @return {?}
                     */function () { return _this._adjustParentForFullscreenChange(); }));
                };
                /**
                 * @private
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {
                    if (!this._containerElement) {
                        return;
                    }
                    /** @type {?} */
                    var fullscreenElement = this.getFullscreenElement();
                    /** @type {?} */
                    var parent = fullscreenElement || this._document.body;
                    parent.appendChild(this._containerElement);
                };
                /**
                 * @private
                 * @param {?} fn
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {
                    /** @type {?} */
                    var eventName = this._getEventName();
                    if (eventName) {
                        if (this._fullScreenListener) {
                            this._document.removeEventListener(eventName, this._fullScreenListener);
                        }
                        this._document.addEventListener(eventName, fn);
                        this._fullScreenListener = fn;
                    }
                };
                /**
                 * @private
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype._getEventName = function () {
                    if (!this._fullScreenEventName) {
                        /** @type {?} */
                        var _document = ( /** @type {?} */(this._document));
                        if (_document.fullscreenEnabled) {
                            this._fullScreenEventName = 'fullscreenchange';
                        }
                        else if (_document.webkitFullscreenEnabled) {
                            this._fullScreenEventName = 'webkitfullscreenchange';
                        }
                        else if (_document.mozFullScreenEnabled) {
                            this._fullScreenEventName = 'mozfullscreenchange';
                        }
                        else if (_document.msFullscreenEnabled) {
                            this._fullScreenEventName = 'MSFullscreenChange';
                        }
                    }
                    return this._fullScreenEventName;
                };
                /**
                 * When the page is put into fullscreen mode, a specific element is specified.
                 * Only that element and its children are visible when in fullscreen mode.
                 * @return {?}
                 */
                FullscreenOverlayContainer.prototype.getFullscreenElement = function () {
                    /** @type {?} */
                    var _document = ( /** @type {?} */(this._document));
                    return _document.fullscreenElement ||
                        _document.webkitFullscreenElement ||
                        _document.mozFullScreenElement ||
                        _document.msFullscreenElement ||
                        null;
                };
                return FullscreenOverlayContainer;
            }(OverlayContainer));
            FullscreenOverlayContainer.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            FullscreenOverlayContainer.ctorParameters = function () { return [
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] }
            ]; };
            /** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"])); }, token: FullscreenOverlayContainer, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=overlay.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/platform.js": 
        /*!*******************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/platform.js ***!
          \*******************************************************/
        /*! exports provided: Platform, PlatformModule, getSupportedInputTypes, supportsPassiveEventListeners, normalizePassiveListenerOptions, supportsScrollBehavior, getRtlScrollAxisType, RtlScrollAxisType, _supportsShadowDom */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Platform", function () { return Platform; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformModule", function () { return PlatformModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSupportedInputTypes", function () { return getSupportedInputTypes; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsPassiveEventListeners", function () { return supportsPassiveEventListeners; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizePassiveListenerOptions", function () { return normalizePassiveListenerOptions; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsScrollBehavior", function () { return supportsScrollBehavior; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRtlScrollAxisType", function () { return getRtlScrollAxisType; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RtlScrollAxisType", function () { return RtlScrollAxisType; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_supportsShadowDom", function () { return _supportsShadowDom; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            // Whether the current platform supports the V8 Break Iterator. The V8 check
            // is necessary to detect all Blink based browsers.
            /** @type {?} */
            var hasV8BreakIterator;
            // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
            // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
            // the consumer is providing a polyfilled `Map`. See:
            // https://github.com/Microsoft/ChakraCore/issues/3189
            // https://github.com/angular/components/issues/15687
            try {
                hasV8BreakIterator = (typeof Intl !== 'undefined' && (( /** @type {?} */(Intl))).v8BreakIterator);
            }
            catch (_a) {
                hasV8BreakIterator = false;
            }
            /**
             * Service to detect the current platform by comparing the userAgent strings and
             * checking browser-specific global properties.
             */
            var Platform = /** @class */ (function () {
                /**
                 * \@breaking-change 8.0.0 remove optional decorator
                 * @param {?=} _platformId
                 */
                function Platform(_platformId) {
                    this._platformId = _platformId;
                    /**
                     * Whether the Angular application is being rendered in the browser.
                     * We want to use the Angular platform check because if the Document is shimmed
                     * without the navigator, the following checks will fail. This is preferred because
                     * sometimes the Document may be shimmed without the user's knowledge or intention
                     */
                    this.isBrowser = this._platformId ?
                        Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId) : typeof document === 'object' && !!document;
                    /**
                     * Whether the current browser is Microsoft Edge.
                     */
                    this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
                    /**
                     * Whether the current rendering engine is Microsoft Trident.
                     */
                    this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
                    /**
                     * Whether the current rendering engine is Blink.
                     */
                    // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.
                    this.BLINK = this.isBrowser && (!!((( /** @type {?} */(window))).chrome || hasV8BreakIterator) &&
                        typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);
                    /**
                     * Whether the current rendering engine is WebKit.
                     */
                    // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
                    // ensure that Webkit runs standalone and is not used as another engine's base.
                    this.WEBKIT = this.isBrowser &&
                        /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
                    /**
                     * Whether the current platform is Apple iOS.
                     */
                    this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&
                        !('MSStream' in window);
                    /**
                     * Whether the current browser is Firefox.
                     */
                    // It's difficult to detect the plain Gecko engine, because most of the browsers identify
                    // them self as Gecko-like browsers and modify the userAgent's according to that.
                    // Since we only cover one explicit Firefox case, we can simply check for Firefox
                    // instead of having an unstable check for Gecko.
                    this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
                    /**
                     * Whether the current platform is Android.
                     */
                    // Trident on mobile adds the android platform to the userAgent to trick detections.
                    this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
                    /**
                     * Whether the current browser is Safari.
                     */
                    // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
                    // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
                    // Safari browser should also use Webkit as its layout engine.
                    this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
                }
                return Platform;
            }());
            Platform.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            Platform.ctorParameters = function () { return [
                { type: Object, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] }
            ]; };
            /** @nocollapse */ Platform.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function Platform_Factory() { return new Platform(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"], 8)); }, token: Platform, providedIn: "root" });
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var PlatformModule = /** @class */ (function () {
                function PlatformModule() {
                }
                return PlatformModule;
            }());
            PlatformModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{},] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Cached result Set of input types support by the current browser.
             * @type {?}
             */
            var supportedInputTypes;
            /**
             * Types of `<input>` that *might* be supported.
             * @type {?}
             */
            var candidateInputTypes = [
                // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
                // first changing it to something else:
                // The specified value "" does not conform to the required format.
                // The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
                'color',
                'button',
                'checkbox',
                'date',
                'datetime-local',
                'email',
                'file',
                'hidden',
                'image',
                'month',
                'number',
                'password',
                'radio',
                'range',
                'reset',
                'search',
                'submit',
                'tel',
                'text',
                'time',
                'url',
                'week',
            ];
            /**
             * @return {?} The input types supported by this browser.
             */
            function getSupportedInputTypes() {
                // Result is cached.
                if (supportedInputTypes) {
                    return supportedInputTypes;
                }
                // We can't check if an input type is not supported until we're on the browser, so say that
                // everything is supported when not on the browser. We don't use `Platform` here since it's
                // just a helper function and can't inject it.
                if (typeof document !== 'object' || !document) {
                    supportedInputTypes = new Set(candidateInputTypes);
                    return supportedInputTypes;
                }
                /** @type {?} */
                var featureTestInput = document.createElement('input');
                supportedInputTypes = new Set(candidateInputTypes.filter(( /**
                 * @param {?} value
                 * @return {?}
                 */function (/**
                 * @param {?} value
                 * @return {?}
                 */ value) {
                    featureTestInput.setAttribute('type', value);
                    return featureTestInput.type === value;
                })));
                return supportedInputTypes;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Cached result of whether the user's browser supports passive event listeners.
             * @type {?}
             */
            var supportsPassiveEvents;
            /**
             * Checks whether the user's browser supports passive event listeners.
             * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
             * @return {?}
             */
            function supportsPassiveEventListeners() {
                if (supportsPassiveEvents == null && typeof window !== 'undefined') {
                    try {
                        window.addEventListener('test', ( /** @type {?} */(null)), Object.defineProperty({}, 'passive', {
                            get: ( /**
                             * @return {?}
                             */function () { return supportsPassiveEvents = true; })
                        }));
                    }
                    finally {
                        supportsPassiveEvents = supportsPassiveEvents || false;
                    }
                }
                return supportsPassiveEvents;
            }
            /**
             * Normalizes an `AddEventListener` object to something that can be passed
             * to `addEventListener` on any browser, no matter whether it supports the
             * `options` parameter.
             * @param {?} options Object to be normalized.
             * @return {?}
             */
            function normalizePassiveListenerOptions(options) {
                return supportsPassiveEventListeners() ? options : !!options.capture;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @enum {number} */
            var RtlScrollAxisType = {
                /**
                 * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled
                 * all the way right.
                 */
                NORMAL: 0,
                /**
                 * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
                 * all the way right.
                 */
                NEGATED: 1,
                /**
                 * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
                 * all the way right.
                 */
                INVERTED: 2,
            };
            RtlScrollAxisType[RtlScrollAxisType.NORMAL] = 'NORMAL';
            RtlScrollAxisType[RtlScrollAxisType.NEGATED] = 'NEGATED';
            RtlScrollAxisType[RtlScrollAxisType.INVERTED] = 'INVERTED';
            /**
             * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.
             * @type {?}
             */
            var rtlScrollAxisType;
            /**
             * Check whether the browser supports scroll behaviors.
             * @return {?}
             */
            function supportsScrollBehavior() {
                return !!(typeof document == 'object' && 'scrollBehavior' in ( /** @type {?} */(document.documentElement)).style);
            }
            /**
             * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
             * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
             * @return {?}
             */
            function getRtlScrollAxisType() {
                // We can't check unless we're on the browser. Just assume 'normal' if we're not.
                if (typeof document !== 'object' || !document) {
                    return RtlScrollAxisType.NORMAL;
                }
                if (!rtlScrollAxisType) {
                    // Create a 1px wide scrolling container and a 2px wide content element.
                    /** @type {?} */
                    var scrollContainer = document.createElement('div');
                    /** @type {?} */
                    var containerStyle = scrollContainer.style;
                    scrollContainer.dir = 'rtl';
                    containerStyle.height = '1px';
                    containerStyle.width = '1px';
                    containerStyle.overflow = 'auto';
                    containerStyle.visibility = 'hidden';
                    containerStyle.pointerEvents = 'none';
                    containerStyle.position = 'absolute';
                    /** @type {?} */
                    var content = document.createElement('div');
                    /** @type {?} */
                    var contentStyle = content.style;
                    contentStyle.width = '2px';
                    contentStyle.height = '1px';
                    scrollContainer.appendChild(content);
                    document.body.appendChild(scrollContainer);
                    rtlScrollAxisType = RtlScrollAxisType.NORMAL;
                    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
                    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
                    // dealing with one of the other two types of browsers.
                    if (scrollContainer.scrollLeft === 0) {
                        // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
                        // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
                        // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
                        // return 0 when we read it again.
                        scrollContainer.scrollLeft = 1;
                        rtlScrollAxisType =
                            scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;
                    }
                    ( /** @type {?} */(scrollContainer.parentNode)).removeChild(scrollContainer);
                }
                return rtlScrollAxisType;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var shadowDomIsSupported;
            /**
             * Checks whether the user's browser support Shadow DOM.
             * @return {?}
             */
            function _supportsShadowDom() {
                if (shadowDomIsSupported == null) {
                    /** @type {?} */
                    var head = typeof document !== 'undefined' ? document.head : null;
                    shadowDomIsSupported = !!(head && ((( /** @type {?} */(head))).createShadowRoot || head.attachShadow));
                }
                return shadowDomIsSupported;
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=platform.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/portal.js": 
        /*!*****************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/portal.js ***!
          \*****************************************************/
        /*! exports provided: Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Portal", function () { return Portal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentPortal", function () { return ComponentPortal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplatePortal", function () { return TemplatePortal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePortalOutlet", function () { return BasePortalOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePortalHost", function () { return BasePortalHost; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomPortalOutlet", function () { return DomPortalOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomPortalHost", function () { return DomPortalHost; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkPortal", function () { return CdkPortal; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplatePortalDirective", function () { return TemplatePortalDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkPortalOutlet", function () { return CdkPortalOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalHostDirective", function () { return PortalHostDirective; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalModule", function () { return PortalModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalInjector", function () { return PortalInjector; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Throws an exception when attempting to attach a null portal to a host.
             * \@docs-private
             * @return {?}
             */
            function throwNullPortalError() {
                throw Error('Must provide a portal to attach');
            }
            /**
             * Throws an exception when attempting to attach a portal to a host that is already attached.
             * \@docs-private
             * @return {?}
             */
            function throwPortalAlreadyAttachedError() {
                throw Error('Host already has a portal attached');
            }
            /**
             * Throws an exception when attempting to attach a portal to an already-disposed host.
             * \@docs-private
             * @return {?}
             */
            function throwPortalOutletAlreadyDisposedError() {
                throw Error('This PortalOutlet has already been disposed');
            }
            /**
             * Throws an exception when attempting to attach an unknown portal type.
             * \@docs-private
             * @return {?}
             */
            function throwUnknownPortalTypeError() {
                throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +
                    'a ComponentPortal or a TemplatePortal.');
            }
            /**
             * Throws an exception when attempting to attach a portal to a null host.
             * \@docs-private
             * @return {?}
             */
            function throwNullPortalOutletError() {
                throw Error('Attempting to attach a portal to a null PortalOutlet');
            }
            /**
             * Throws an exception when attempting to detach a portal that is not attached.
             * \@docs-private
             * @return {?}
             */
            function throwNoPortalAttachedError() {
                throw Error('Attempting to detach a portal that is not attached to a host');
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A `Portal` is something that you want to render somewhere else.
             * It can be attach to / detached from a `PortalOutlet`.
             * @abstract
             * @template T
             */
            var Portal = /** @class */ (function () {
                function Portal() {
                }
                /**
                 * Attach this portal to a host.
                 * @param {?} host
                 * @return {?}
                 */
                Portal.prototype.attach = function (host) {
                    if (host == null) {
                        throwNullPortalOutletError();
                    }
                    if (host.hasAttached()) {
                        throwPortalAlreadyAttachedError();
                    }
                    this._attachedHost = host;
                    return ( /** @type {?} */(host.attach(this)));
                };
                /**
                 * Detach this portal from its host
                 * @return {?}
                 */
                Portal.prototype.detach = function () {
                    /** @type {?} */
                    var host = this._attachedHost;
                    if (host == null) {
                        throwNoPortalAttachedError();
                    }
                    else {
                        this._attachedHost = null;
                        host.detach();
                    }
                };
                Object.defineProperty(Portal.prototype, "isAttached", {
                    /**
                     * Whether this portal is attached to a host.
                     * @return {?}
                     */
                    get: function () {
                        return this._attachedHost != null;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
                 * the PortalOutlet when it is performing an `attach()` or `detach()`.
                 * @param {?} host
                 * @return {?}
                 */
                Portal.prototype.setAttachedHost = function (host) {
                    this._attachedHost = host;
                };
                return Portal;
            }());
            /**
             * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
             * @template T
             */
            var ComponentPortal = /** @class */ (function (_super) {
                __extends(ComponentPortal, _super);
                /**
                 * @param {?} component
                 * @param {?=} viewContainerRef
                 * @param {?=} injector
                 * @param {?=} componentFactoryResolver
                 */
                function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {
                    var _this = _super.call(this) || this;
                    _this.component = component;
                    _this.viewContainerRef = viewContainerRef;
                    _this.injector = injector;
                    _this.componentFactoryResolver = componentFactoryResolver;
                    return _this;
                }
                return ComponentPortal;
            }(Portal));
            /**
             * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
             * @template C
             */
            var TemplatePortal = /** @class */ (function (_super) {
                __extends(TemplatePortal, _super);
                /**
                 * @param {?} template
                 * @param {?} viewContainerRef
                 * @param {?=} context
                 */
                function TemplatePortal(template, viewContainerRef, context) {
                    var _this = _super.call(this) || this;
                    _this.templateRef = template;
                    _this.viewContainerRef = viewContainerRef;
                    _this.context = context;
                    return _this;
                }
                Object.defineProperty(TemplatePortal.prototype, "origin", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this.templateRef.elementRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Attach the portal to the provided `PortalOutlet`.
                 * When a context is provided it will override the `context` property of the `TemplatePortal`
                 * instance.
                 * @param {?} host
                 * @param {?=} context
                 * @return {?}
                 */
                TemplatePortal.prototype.attach = function (host, context) {
                    if (context === void 0) { context = this.context; }
                    this.context = context;
                    return _super.prototype.attach.call(this, host);
                };
                /**
                 * @return {?}
                 */
                TemplatePortal.prototype.detach = function () {
                    this.context = undefined;
                    return _super.prototype.detach.call(this);
                };
                return TemplatePortal;
            }(Portal));
            /**
             * Partial implementation of PortalOutlet that handles attaching
             * ComponentPortal and TemplatePortal.
             * @abstract
             */
            var BasePortalOutlet = /** @class */ (function () {
                function BasePortalOutlet() {
                    /**
                     * Whether this host has already been permanently disposed.
                     */
                    this._isDisposed = false;
                }
                /**
                 * Whether this host has an attached portal.
                 * @return {?}
                 */
                BasePortalOutlet.prototype.hasAttached = function () {
                    return !!this._attachedPortal;
                };
                /**
                 * Attaches a portal.
                 * @param {?} portal
                 * @return {?}
                 */
                BasePortalOutlet.prototype.attach = function (portal) {
                    if (!portal) {
                        throwNullPortalError();
                    }
                    if (this.hasAttached()) {
                        throwPortalAlreadyAttachedError();
                    }
                    if (this._isDisposed) {
                        throwPortalOutletAlreadyDisposedError();
                    }
                    if (portal instanceof ComponentPortal) {
                        this._attachedPortal = portal;
                        return this.attachComponentPortal(portal);
                    }
                    else if (portal instanceof TemplatePortal) {
                        this._attachedPortal = portal;
                        return this.attachTemplatePortal(portal);
                    }
                    throwUnknownPortalTypeError();
                };
                /**
                 * Detaches a previously attached portal.
                 * @return {?}
                 */
                BasePortalOutlet.prototype.detach = function () {
                    if (this._attachedPortal) {
                        this._attachedPortal.setAttachedHost(null);
                        this._attachedPortal = null;
                    }
                    this._invokeDisposeFn();
                };
                /**
                 * Permanently dispose of this portal host.
                 * @return {?}
                 */
                BasePortalOutlet.prototype.dispose = function () {
                    if (this.hasAttached()) {
                        this.detach();
                    }
                    this._invokeDisposeFn();
                    this._isDisposed = true;
                };
                /**
                 * \@docs-private
                 * @param {?} fn
                 * @return {?}
                 */
                BasePortalOutlet.prototype.setDisposeFn = function (fn) {
                    this._disposeFn = fn;
                };
                /**
                 * @private
                 * @return {?}
                 */
                BasePortalOutlet.prototype._invokeDisposeFn = function () {
                    if (this._disposeFn) {
                        this._disposeFn();
                        this._disposeFn = null;
                    }
                };
                return BasePortalOutlet;
            }());
            /**
             * @deprecated Use `BasePortalOutlet` instead.
             * \@breaking-change 9.0.0
             * @abstract
             */
            var BasePortalHost = /** @class */ (function (_super) {
                __extends(BasePortalHost, _super);
                function BasePortalHost() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return BasePortalHost;
            }(BasePortalOutlet));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
             * application context.
             */
            var DomPortalOutlet = /** @class */ (function (_super) {
                __extends(DomPortalOutlet, _super);
                /**
                 * @param {?} outletElement
                 * @param {?} _componentFactoryResolver
                 * @param {?} _appRef
                 * @param {?} _defaultInjector
                 */
                function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {
                    var _this = _super.call(this) || this;
                    _this.outletElement = outletElement;
                    _this._componentFactoryResolver = _componentFactoryResolver;
                    _this._appRef = _appRef;
                    _this._defaultInjector = _defaultInjector;
                    return _this;
                }
                /**
                 * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
                 * @template T
                 * @param {?} portal Portal to be attached
                 * @return {?} Reference to the created component.
                 */
                DomPortalOutlet.prototype.attachComponentPortal = function (portal) {
                    var _this = this;
                    /** @type {?} */
                    var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
                    /** @type {?} */
                    var componentFactory = resolver.resolveComponentFactory(portal.component);
                    /** @type {?} */
                    var componentRef;
                    // If the portal specifies a ViewContainerRef, we will use that as the attachment point
                    // for the component (in terms of Angular's component tree, not rendering).
                    // When the ViewContainerRef is missing, we use the factory to create the component directly
                    // and then manually attach the view to the application.
                    if (portal.viewContainerRef) {
                        componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);
                        this.setDisposeFn(( /**
                         * @return {?}
                         */function () { return componentRef.destroy(); }));
                    }
                    else {
                        componentRef = componentFactory.create(portal.injector || this._defaultInjector);
                        this._appRef.attachView(componentRef.hostView);
                        this.setDisposeFn(( /**
                         * @return {?}
                         */function () {
                            _this._appRef.detachView(componentRef.hostView);
                            componentRef.destroy();
                        }));
                    }
                    // At this point the component has been instantiated, so we move it to the location in the DOM
                    // where we want it to be rendered.
                    this.outletElement.appendChild(this._getComponentRootNode(componentRef));
                    return componentRef;
                };
                /**
                 * Attaches a template portal to the DOM as an embedded view.
                 * @template C
                 * @param {?} portal Portal to be attached.
                 * @return {?} Reference to the created embedded view.
                 */
                DomPortalOutlet.prototype.attachTemplatePortal = function (portal) {
                    var _this = this;
                    /** @type {?} */
                    var viewContainer = portal.viewContainerRef;
                    /** @type {?} */
                    var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);
                    viewRef.detectChanges();
                    // The method `createEmbeddedView` will add the view as a child of the viewContainer.
                    // But for the DomPortalOutlet the view can be added everywhere in the DOM
                    // (e.g Overlay Container) To move the view to the specified host element. We just
                    // re-append the existing root nodes.
                    viewRef.rootNodes.forEach(( /**
                     * @param {?} rootNode
                     * @return {?}
                     */function (/**
                     * @param {?} rootNode
                     * @return {?}
                     */ rootNode) { return _this.outletElement.appendChild(rootNode); }));
                    this.setDisposeFn((( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var index = viewContainer.indexOf(viewRef);
                        if (index !== -1) {
                            viewContainer.remove(index);
                        }
                    })));
                    // TODO(jelbourn): Return locals from view.
                    return viewRef;
                };
                /**
                 * Clears out a portal from the DOM.
                 * @return {?}
                 */
                DomPortalOutlet.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                    if (this.outletElement.parentNode != null) {
                        this.outletElement.parentNode.removeChild(this.outletElement);
                    }
                };
                /**
                 * Gets the root HTMLElement for an instantiated component.
                 * @private
                 * @param {?} componentRef
                 * @return {?}
                 */
                DomPortalOutlet.prototype._getComponentRootNode = function (componentRef) {
                    return ( /** @type {?} */((( /** @type {?} */(componentRef.hostView))).rootNodes[0]));
                };
                return DomPortalOutlet;
            }(BasePortalOutlet));
            /**
             * @deprecated Use `DomPortalOutlet` instead.
             * \@breaking-change 9.0.0
             */
            var DomPortalHost = /** @class */ (function (_super) {
                __extends(DomPortalHost, _super);
                function DomPortalHost() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return DomPortalHost;
            }(DomPortalOutlet));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
             * the directive instance itself can be attached to a host, enabling declarative use of portals.
             */
            var CdkPortal = /** @class */ (function (_super) {
                __extends(CdkPortal, _super);
                /**
                 * @param {?} templateRef
                 * @param {?} viewContainerRef
                 */
                function CdkPortal(templateRef, viewContainerRef) {
                    return _super.call(this, templateRef, viewContainerRef) || this;
                }
                return CdkPortal;
            }(TemplatePortal));
            CdkPortal.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkPortal]',
                            exportAs: 'cdkPortal',
                        },] },
            ];
            /** @nocollapse */
            CdkPortal.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
            ]; };
            /**
             * @deprecated Use `CdkPortal` instead.
             * \@breaking-change 9.0.0
             */
            var TemplatePortalDirective = /** @class */ (function (_super) {
                __extends(TemplatePortalDirective, _super);
                function TemplatePortalDirective() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return TemplatePortalDirective;
            }(CdkPortal));
            TemplatePortalDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdk-portal], [portal]',
                            exportAs: 'cdkPortal',
                            providers: [{
                                    provide: CdkPortal,
                                    useExisting: TemplatePortalDirective
                                }]
                        },] },
            ];
            /**
             * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
             * directly attached to it, enabling declarative use.
             *
             * Usage:
             * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
             */
            var CdkPortalOutlet = /** @class */ (function (_super) {
                __extends(CdkPortalOutlet, _super);
                /**
                 * @param {?} _componentFactoryResolver
                 * @param {?} _viewContainerRef
                 */
                function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {
                    var _this = _super.call(this) || this;
                    _this._componentFactoryResolver = _componentFactoryResolver;
                    _this._viewContainerRef = _viewContainerRef;
                    /**
                     * Whether the portal component is initialized.
                     */
                    _this._isInitialized = false;
                    /**
                     * Emits when a portal is attached to the outlet.
                     */
                    _this.attached = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                    return _this;
                }
                Object.defineProperty(CdkPortalOutlet.prototype, "portal", {
                    /**
                     * Portal associated with the Portal outlet.
                     * @return {?}
                     */
                    get: function () {
                        return this._attachedPortal;
                    },
                    /**
                     * @param {?} portal
                     * @return {?}
                     */
                    set: function (portal) {
                        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
                        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
                        // and attach a portal programmatically in the parent component. When Angular does the first CD
                        // round, it will fire the setter with empty string, causing the user's content to be cleared.
                        if (this.hasAttached() && !portal && !this._isInitialized) {
                            return;
                        }
                        if (this.hasAttached()) {
                            _super.prototype.detach.call(this);
                        }
                        if (portal) {
                            _super.prototype.attach.call(this, portal);
                        }
                        this._attachedPortal = portal;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkPortalOutlet.prototype, "attachedRef", {
                    /**
                     * Component or view reference that is attached to the portal.
                     * @return {?}
                     */
                    get: function () {
                        return this._attachedRef;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkPortalOutlet.prototype.ngOnInit = function () {
                    this._isInitialized = true;
                };
                /**
                 * @return {?}
                 */
                CdkPortalOutlet.prototype.ngOnDestroy = function () {
                    _super.prototype.dispose.call(this);
                    this._attachedPortal = null;
                    this._attachedRef = null;
                };
                /**
                 * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
                 *
                 * @template T
                 * @param {?} portal Portal to be attached to the portal outlet.
                 * @return {?} Reference to the created component.
                 */
                CdkPortalOutlet.prototype.attachComponentPortal = function (portal) {
                    portal.setAttachedHost(this);
                    // If the portal specifies an origin, use that as the logical location of the component
                    // in the application tree. Otherwise use the location of this PortalOutlet.
                    /** @type {?} */
                    var viewContainerRef = portal.viewContainerRef != null ?
                        portal.viewContainerRef :
                        this._viewContainerRef;
                    /** @type {?} */
                    var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
                    /** @type {?} */
                    var componentFactory = resolver.resolveComponentFactory(portal.component);
                    /** @type {?} */
                    var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);
                    _super.prototype.setDisposeFn.call(this, ( /**
                     * @return {?}
                     */function () { return ref.destroy(); }));
                    this._attachedPortal = portal;
                    this._attachedRef = ref;
                    this.attached.emit(ref);
                    return ref;
                };
                /**
                 * Attach the given TemplatePortal to this PortlHost as an embedded View.
                 * @template C
                 * @param {?} portal Portal to be attached.
                 * @return {?} Reference to the created embedded view.
                 */
                CdkPortalOutlet.prototype.attachTemplatePortal = function (portal) {
                    var _this = this;
                    portal.setAttachedHost(this);
                    /** @type {?} */
                    var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);
                    _super.prototype.setDisposeFn.call(this, ( /**
                     * @return {?}
                     */function () { return _this._viewContainerRef.clear(); }));
                    this._attachedPortal = portal;
                    this._attachedRef = viewRef;
                    this.attached.emit(viewRef);
                    return viewRef;
                };
                return CdkPortalOutlet;
            }(BasePortalOutlet));
            CdkPortalOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkPortalOutlet]',
                            exportAs: 'cdkPortalOutlet',
                            inputs: ['portal: cdkPortalOutlet']
                        },] },
            ];
            /** @nocollapse */
            CdkPortalOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
            ]; };
            CdkPortalOutlet.propDecorators = {
                attached: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
            };
            /**
             * @deprecated Use `CdkPortalOutlet` instead.
             * \@breaking-change 9.0.0
             */
            var PortalHostDirective = /** @class */ (function (_super) {
                __extends(PortalHostDirective, _super);
                function PortalHostDirective() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return PortalHostDirective;
            }(CdkPortalOutlet));
            PortalHostDirective.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkPortalHost], [portalHost]',
                            exportAs: 'cdkPortalHost',
                            inputs: ['portal: cdkPortalHost'],
                            providers: [{
                                    provide: CdkPortalOutlet,
                                    useExisting: PortalHostDirective
                                }]
                        },] },
            ];
            var PortalModule = /** @class */ (function () {
                function PortalModule() {
                }
                return PortalModule;
            }());
            PortalModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
                            declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Custom injector to be used when providing custom
             * injection tokens to components inside a portal.
             * \@docs-private
             */
            var PortalInjector = /** @class */ (function () {
                /**
                 * @param {?} _parentInjector
                 * @param {?} _customTokens
                 */
                function PortalInjector(_parentInjector, _customTokens) {
                    this._parentInjector = _parentInjector;
                    this._customTokens = _customTokens;
                }
                /**
                 * @param {?} token
                 * @param {?=} notFoundValue
                 * @return {?}
                 */
                PortalInjector.prototype.get = function (token, notFoundValue) {
                    /** @type {?} */
                    var value = this._customTokens.get(token);
                    if (typeof value !== 'undefined') {
                        return value;
                    }
                    return this._parentInjector.get(token, notFoundValue);
                };
                return PortalInjector;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=portal.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/scrolling.js": 
        /*!********************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/scrolling.js ***!
          \********************************************************/
        /*! exports provided: _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_fixedSizeVirtualScrollStrategyFactory", function () { return _fixedSizeVirtualScrollStrategyFactory; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedSizeVirtualScrollStrategy", function () { return FixedSizeVirtualScrollStrategy; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFixedSizeVirtualScroll", function () { return CdkFixedSizeVirtualScroll; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER_FACTORY", function () { return SCROLL_DISPATCHER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SCROLL_TIME", function () { return DEFAULT_SCROLL_TIME; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function () { return ScrollDispatcher; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER", function () { return SCROLL_DISPATCHER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkScrollable", function () { return CdkScrollable; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollingModule", function () { return ScrollingModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatchModule", function () { return ScrollDispatchModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER_FACTORY", function () { return VIEWPORT_RULER_PROVIDER_FACTORY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RESIZE_TIME", function () { return DEFAULT_RESIZE_TIME; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewportRuler", function () { return ViewportRuler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function () { return VIEWPORT_RULER_PROVIDER; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkVirtualForOf", function () { return CdkVirtualForOf; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIRTUAL_SCROLL_STRATEGY", function () { return VIRTUAL_SCROLL_STRATEGY; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkVirtualScrollViewport", function () { return CdkVirtualScrollViewport; });
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The injection token used to specify the virtual scrolling strategy.
             * @type {?}
             */
            var VIRTUAL_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('VIRTUAL_SCROLL_STRATEGY');
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Virtual scrolling strategy for lists with items of known fixed size.
             */
            var FixedSizeVirtualScrollStrategy = /** @class */ (function () {
                /**
                 * @param {?} itemSize The size of the items in the virtually scrolling list.
                 * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
                 * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
                 */
                function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {
                    this._scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * \@docs-private Implemented as part of VirtualScrollStrategy.
                     */
                    this.scrolledIndexChange = this._scrolledIndexChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["distinctUntilChanged"])());
                    /**
                     * The attached viewport.
                     */
                    this._viewport = null;
                    this._itemSize = itemSize;
                    this._minBufferPx = minBufferPx;
                    this._maxBufferPx = maxBufferPx;
                }
                /**
                 * Attaches this scroll strategy to a viewport.
                 * @param {?} viewport The viewport to attach this strategy to.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.attach = function (viewport) {
                    this._viewport = viewport;
                    this._updateTotalContentSize();
                    this._updateRenderedRange();
                };
                /**
                 * Detaches this scroll strategy from the currently attached viewport.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.detach = function () {
                    this._scrolledIndexChange.complete();
                    this._viewport = null;
                };
                /**
                 * Update the item size and buffer size.
                 * @param {?} itemSize The size of the items in the virtually scrolling list.
                 * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
                 * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.updateItemAndBufferSize = function (itemSize, minBufferPx, maxBufferPx) {
                    if (maxBufferPx < minBufferPx) {
                        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');
                    }
                    this._itemSize = itemSize;
                    this._minBufferPx = minBufferPx;
                    this._maxBufferPx = maxBufferPx;
                    this._updateTotalContentSize();
                    this._updateRenderedRange();
                };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onContentScrolled = function () {
                    this._updateRenderedRange();
                };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onDataLengthChanged = function () {
                    this._updateTotalContentSize();
                    this._updateRenderedRange();
                };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onContentRendered = function () { };
                /**
                 * \@docs-private Implemented as part of VirtualScrollStrategy.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };
                /**
                 * Scroll to the offset for the given index.
                 * @param {?} index The index of the element to scroll to.
                 * @param {?} behavior The ScrollBehavior to use when scrolling.
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {
                    if (this._viewport) {
                        this._viewport.scrollToOffset(index * this._itemSize, behavior);
                    }
                };
                /**
                 * Update the viewport's total content size.
                 * @private
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype._updateTotalContentSize = function () {
                    if (!this._viewport) {
                        return;
                    }
                    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
                };
                /**
                 * Update the viewport's rendered range.
                 * @private
                 * @return {?}
                 */
                FixedSizeVirtualScrollStrategy.prototype._updateRenderedRange = function () {
                    if (!this._viewport) {
                        return;
                    }
                    /** @type {?} */
                    var scrollOffset = this._viewport.measureScrollOffset();
                    /** @type {?} */
                    var firstVisibleIndex = scrollOffset / this._itemSize;
                    /** @type {?} */
                    var renderedRange = this._viewport.getRenderedRange();
                    /** @type {?} */
                    var newRange = { start: renderedRange.start, end: renderedRange.end };
                    /** @type {?} */
                    var viewportSize = this._viewport.getViewportSize();
                    /** @type {?} */
                    var dataLength = this._viewport.getDataLength();
                    /** @type {?} */
                    var startBuffer = scrollOffset - newRange.start * this._itemSize;
                    if (startBuffer < this._minBufferPx && newRange.start != 0) {
                        /** @type {?} */
                        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
                        newRange.start = Math.max(0, newRange.start - expandStart);
                        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
                    }
                    else {
                        /** @type {?} */
                        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);
                        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
                            /** @type {?} */
                            var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);
                            if (expandEnd > 0) {
                                newRange.end = Math.min(dataLength, newRange.end + expandEnd);
                                newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
                            }
                        }
                    }
                    this._viewport.setRenderedRange(newRange);
                    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);
                    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
                };
                return FixedSizeVirtualScrollStrategy;
            }());
            /**
             * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created
             * `FixedSizeVirtualScrollStrategy` from the given directive.
             * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the
             *     `FixedSizeVirtualScrollStrategy` from.
             * @return {?}
             */
            function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {
                return fixedSizeDir._scrollStrategy;
            }
            /**
             * A virtual scroll strategy that supports fixed-size items.
             */
            var CdkFixedSizeVirtualScroll = /** @class */ (function () {
                function CdkFixedSizeVirtualScroll() {
                    this._itemSize = 20;
                    this._minBufferPx = 100;
                    this._maxBufferPx = 200;
                    /**
                     * The scroll strategy used by this directive.
                     */
                    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
                }
                Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, "itemSize", {
                    /**
                     * The size of the items in the list (in pixels).
                     * @return {?}
                     */
                    get: function () { return this._itemSize; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._itemSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, "minBufferPx", {
                    /**
                     * The minimum amount of buffer rendered beyond the viewport (in pixels).
                     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
                     * @return {?}
                     */
                    get: function () { return this._minBufferPx; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._minBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, "maxBufferPx", {
                    /**
                     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
                     * @return {?}
                     */
                    get: function () { return this._maxBufferPx; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._maxBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkFixedSizeVirtualScroll.prototype.ngOnChanges = function () {
                    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
                };
                return CdkFixedSizeVirtualScroll;
            }());
            CdkFixedSizeVirtualScroll.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: 'cdk-virtual-scroll-viewport[itemSize]',
                            providers: [{
                                    provide: VIRTUAL_SCROLL_STRATEGY,
                                    useFactory: _fixedSizeVirtualScrollStrategyFactory,
                                    deps: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(( /**
                                             * @return {?}
                                             */function () { return CdkFixedSizeVirtualScroll; }))],
                                }],
                        },] },
            ];
            CdkFixedSizeVirtualScroll.propDecorators = {
                itemSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                minBufferPx: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                maxBufferPx: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Time in ms to throttle the scrolling events by default.
             * @type {?}
             */
            var DEFAULT_SCROLL_TIME = 20;
            /**
             * Service contained all registered Scrollable references and emits an event when any one of the
             * Scrollable references emit a scrolled event.
             */
            var ScrollDispatcher = /** @class */ (function () {
                /**
                 * @param {?} _ngZone
                 * @param {?} _platform
                 */
                function ScrollDispatcher(_ngZone, _platform) {
                    this._ngZone = _ngZone;
                    this._platform = _platform;
                    /**
                     * Subject for notifying that a registered scrollable reference element has been scrolled.
                     */
                    this._scrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Keeps track of the global `scroll` and `resize` subscriptions.
                     */
                    this._globalSubscription = null;
                    /**
                     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.
                     */
                    this._scrolledCount = 0;
                    /**
                     * Map of all the scrollable references that are registered with the service and their
                     * scroll event subscriptions.
                     */
                    this.scrollContainers = new Map();
                }
                /**
                 * Registers a scrollable instance with the service and listens for its scrolled events. When the
                 * scrollable is scrolled, the service emits the event to its scrolled observable.
                 * @param {?} scrollable Scrollable instance to be registered.
                 * @return {?}
                 */
                ScrollDispatcher.prototype.register = function (scrollable) {
                    var _this = this;
                    if (!this.scrollContainers.has(scrollable)) {
                        this.scrollContainers.set(scrollable, scrollable.elementScrolled()
                            .subscribe(( /**
                     * @return {?}
                     */function () { return _this._scrolled.next(scrollable); })));
                    }
                };
                /**
                 * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
                 * @param {?} scrollable Scrollable instance to be deregistered.
                 * @return {?}
                 */
                ScrollDispatcher.prototype.deregister = function (scrollable) {
                    /** @type {?} */
                    var scrollableReference = this.scrollContainers.get(scrollable);
                    if (scrollableReference) {
                        scrollableReference.unsubscribe();
                        this.scrollContainers.delete(scrollable);
                    }
                };
                /**
                 * Returns an observable that emits an event whenever any of the registered Scrollable
                 * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
                 * to override the default "throttle" time.
                 *
                 * **Note:** in order to avoid hitting change detection for every scroll event,
                 * all of the events emitted from this stream will be run outside the Angular zone.
                 * If you need to update any data bindings as a result of a scroll event, you have
                 * to run the callback using `NgZone.run`.
                 * @param {?=} auditTimeInMs
                 * @return {?}
                 */
                ScrollDispatcher.prototype.scrolled = function (auditTimeInMs) {
                    var _this = this;
                    if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }
                    if (!this._platform.isBrowser) {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
                    }
                    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) {
                        if (!_this._globalSubscription) {
                            _this._addGlobalListener();
                        }
                        // In the case of a 0ms delay, use an observable without auditTime
                        // since it does add a perceptible delay in processing overhead.
                        /** @type {?} */
                        var subscription = auditTimeInMs > 0 ?
                            _this._scrolled.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(auditTimeInMs)).subscribe(observer) :
                            _this._scrolled.subscribe(observer);
                        _this._scrolledCount++;
                        return ( /**
                         * @return {?}
                         */function () {
                            subscription.unsubscribe();
                            _this._scrolledCount--;
                            if (!_this._scrolledCount) {
                                _this._removeGlobalListener();
                            }
                        });
                    }));
                };
                /**
                 * @return {?}
                 */
                ScrollDispatcher.prototype.ngOnDestroy = function () {
                    var _this = this;
                    this._removeGlobalListener();
                    this.scrollContainers.forEach(( /**
                     * @param {?} _
                     * @param {?} container
                     * @return {?}
                     */function (_, container) { return _this.deregister(container); }));
                    this._scrolled.complete();
                };
                /**
                 * Returns an observable that emits whenever any of the
                 * scrollable ancestors of an element are scrolled.
                 * @param {?} elementRef Element whose ancestors to listen for.
                 * @param {?=} auditTimeInMs Time to throttle the scroll events.
                 * @return {?}
                 */
                ScrollDispatcher.prototype.ancestorScrolled = function (elementRef, auditTimeInMs) {
                    /** @type {?} */
                    var ancestors = this.getAncestorScrollContainers(elementRef);
                    return this.scrolled(auditTimeInMs).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(( /**
                     * @param {?} target
                     * @return {?}
                     */function (/**
                     * @param {?} target
                     * @return {?}
                     */ target) {
                        return !target || ancestors.indexOf(target) > -1;
                    })));
                };
                /**
                 * Returns all registered Scrollables that contain the provided element.
                 * @param {?} elementRef
                 * @return {?}
                 */
                ScrollDispatcher.prototype.getAncestorScrollContainers = function (elementRef) {
                    var _this = this;
                    /** @type {?} */
                    var scrollingContainers = [];
                    this.scrollContainers.forEach(( /**
                     * @param {?} _subscription
                     * @param {?} scrollable
                     * @return {?}
                     */function (_subscription, scrollable) {
                        if (_this._scrollableContainsElement(scrollable, elementRef)) {
                            scrollingContainers.push(scrollable);
                        }
                    }));
                    return scrollingContainers;
                };
                /**
                 * Returns true if the element is contained within the provided Scrollable.
                 * @private
                 * @param {?} scrollable
                 * @param {?} elementRef
                 * @return {?}
                 */
                ScrollDispatcher.prototype._scrollableContainsElement = function (scrollable, elementRef) {
                    /** @type {?} */
                    var element = elementRef.nativeElement;
                    /** @type {?} */
                    var scrollableElement = scrollable.getElementRef().nativeElement;
                    // Traverse through the element parents until we reach null, checking if any of the elements
                    // are the scrollable's element.
                    do {
                        if (element == scrollableElement) {
                            return true;
                        }
                    } while (element = ( /** @type {?} */(element)).parentElement);
                    return false;
                };
                /**
                 * Sets up the global scroll listeners.
                 * @private
                 * @return {?}
                 */
                ScrollDispatcher.prototype._addGlobalListener = function () {
                    var _this = this;
                    this._globalSubscription = this._ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window.document, 'scroll').subscribe(( /**
                         * @return {?}
                         */function () { return _this._scrolled.next(); }));
                    }));
                };
                /**
                 * Cleans up the global scroll listener.
                 * @private
                 * @return {?}
                 */
                ScrollDispatcher.prototype._removeGlobalListener = function () {
                    if (this._globalSubscription) {
                        this._globalSubscription.unsubscribe();
                        this._globalSubscription = null;
                    }
                };
                return ScrollDispatcher;
            }());
            ScrollDispatcher.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ScrollDispatcher.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"] }
            ]; };
            /** @nocollapse */ ScrollDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"])); }, token: ScrollDispatcher, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentDispatcher
             * @param {?} ngZone
             * @param {?} platform
             * @return {?}
             */
            function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
                return parentDispatcher || new ScrollDispatcher(ngZone, platform);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var SCROLL_DISPATCHER_PROVIDER = {
                // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.
                provide: ScrollDispatcher,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), ScrollDispatcher], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]],
                useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Sends an event when the directive's element is scrolled. Registers itself with the
             * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
             * can be listened to through the service.
             */
            var CdkScrollable = /** @class */ (function () {
                /**
                 * @param {?} elementRef
                 * @param {?} scrollDispatcher
                 * @param {?} ngZone
                 * @param {?=} dir
                 */
                function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {
                    var _this = this;
                    this.elementRef = elementRef;
                    this.scrollDispatcher = scrollDispatcher;
                    this.ngZone = ngZone;
                    this.dir = dir;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) { return _this.ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () { return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(_this.elementRef.nativeElement, 'scroll').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(_this._destroyed))
                        .subscribe(observer); })); }));
                }
                /**
                 * @return {?}
                 */
                CdkScrollable.prototype.ngOnInit = function () {
                    this.scrollDispatcher.register(this);
                };
                /**
                 * @return {?}
                 */
                CdkScrollable.prototype.ngOnDestroy = function () {
                    this.scrollDispatcher.deregister(this);
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Returns observable that emits when a scroll event is fired on the host element.
                 * @return {?}
                 */
                CdkScrollable.prototype.elementScrolled = function () {
                    return this._elementScrolled;
                };
                /**
                 * Gets the ElementRef for the viewport.
                 * @return {?}
                 */
                CdkScrollable.prototype.getElementRef = function () {
                    return this.elementRef;
                };
                /**
                 * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
                 * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
                 * left and right always refer to the left and right side of the scrolling container irrespective
                 * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
                 * in an RTL context.
                 * @param {?} options specified the offsets to scroll to.
                 * @return {?}
                 */
                CdkScrollable.prototype.scrollTo = function (options) {
                    /** @type {?} */
                    var el = this.elementRef.nativeElement;
                    /** @type {?} */
                    var isRtl = this.dir && this.dir.value == 'rtl';
                    // Rewrite start & end offsets as right or left offsets.
                    options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;
                    options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;
                    // Rewrite the bottom offset as a top offset.
                    if (options.bottom != null) {
                        (( /** @type {?} */(options))).top =
                            el.scrollHeight - el.clientHeight - options.bottom;
                    }
                    // Rewrite the right offset as a left offset.
                    if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() != _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NORMAL) {
                        if (options.left != null) {
                            (( /** @type {?} */(options))).right =
                                el.scrollWidth - el.clientWidth - options.left;
                        }
                        if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].INVERTED) {
                            options.left = options.right;
                        }
                        else if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NEGATED) {
                            options.left = options.right ? -options.right : options.right;
                        }
                    }
                    else {
                        if (options.right != null) {
                            (( /** @type {?} */(options))).left =
                                el.scrollWidth - el.clientWidth - options.right;
                        }
                    }
                    this._applyScrollToOptions(options);
                };
                /**
                 * @private
                 * @param {?} options
                 * @return {?}
                 */
                CdkScrollable.prototype._applyScrollToOptions = function (options) {
                    /** @type {?} */
                    var el = this.elementRef.nativeElement;
                    if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["supportsScrollBehavior"])()) {
                        el.scrollTo(options);
                    }
                    else {
                        if (options.top != null) {
                            el.scrollTop = options.top;
                        }
                        if (options.left != null) {
                            el.scrollLeft = options.left;
                        }
                    }
                };
                /**
                 * Measures the scroll offset relative to the specified edge of the viewport. This method can be
                 * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
                 * about what scrollLeft means in RTL. The values returned by this method are normalized such that
                 * left and right always refer to the left and right side of the scrolling container irrespective
                 * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
                 * in an RTL context.
                 * @param {?} from The edge to measure from.
                 * @return {?}
                 */
                CdkScrollable.prototype.measureScrollOffset = function (from) {
                    /** @type {?} */
                    var LEFT = 'left';
                    /** @type {?} */
                    var RIGHT = 'right';
                    /** @type {?} */
                    var el = this.elementRef.nativeElement;
                    if (from == 'top') {
                        return el.scrollTop;
                    }
                    if (from == 'bottom') {
                        return el.scrollHeight - el.clientHeight - el.scrollTop;
                    }
                    // Rewrite start & end as left or right offsets.
                    /** @type {?} */
                    var isRtl = this.dir && this.dir.value == 'rtl';
                    if (from == 'start') {
                        from = isRtl ? RIGHT : LEFT;
                    }
                    else if (from == 'end') {
                        from = isRtl ? LEFT : RIGHT;
                    }
                    if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].INVERTED) {
                        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and
                        // 0 when scrolled all the way right.
                        if (from == LEFT) {
                            return el.scrollWidth - el.clientWidth - el.scrollLeft;
                        }
                        else {
                            return el.scrollLeft;
                        }
                    }
                    else if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NEGATED) {
                        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and
                        // 0 when scrolled all the way right.
                        if (from == LEFT) {
                            return el.scrollLeft + el.scrollWidth - el.clientWidth;
                        }
                        else {
                            return -el.scrollLeft;
                        }
                    }
                    else {
                        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and
                        // (scrollWidth - clientWidth) when scrolled all the way right.
                        if (from == LEFT) {
                            return el.scrollLeft;
                        }
                        else {
                            return el.scrollWidth - el.clientWidth - el.scrollLeft;
                        }
                    }
                };
                return CdkScrollable;
            }());
            CdkScrollable.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdk-scrollable], [cdkScrollable]'
                        },] },
            ];
            /** @nocollapse */
            CdkScrollable.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: ScrollDispatcher },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Checks if the given ranges are equal.
             * @param {?} r1
             * @param {?} r2
             * @return {?}
             */
            function rangesEqual(r1, r2) {
                return r1.start == r2.start && r1.end == r2.end;
            }
            /**
             * Scheduler to be used for scroll events. Needs to fall back to
             * something that doesn't rely on requestAnimationFrame on environments
             * that don't support it (e.g. server-side rendering).
             * @type {?}
             */
            var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs__WEBPACK_IMPORTED_MODULE_2__["animationFrameScheduler"] : rxjs__WEBPACK_IMPORTED_MODULE_2__["asapScheduler"];
            /**
             * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.
             */
            var CdkVirtualScrollViewport = /** @class */ (function (_super) {
                __extends(CdkVirtualScrollViewport, _super);
                /**
                 * @param {?} elementRef
                 * @param {?} _changeDetectorRef
                 * @param {?} ngZone
                 * @param {?} _scrollStrategy
                 * @param {?} dir
                 * @param {?} scrollDispatcher
                 */
                function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {
                    var _this = _super.call(this, elementRef, scrollDispatcher, ngZone, dir) || this;
                    _this.elementRef = elementRef;
                    _this._changeDetectorRef = _changeDetectorRef;
                    _this._scrollStrategy = _scrollStrategy;
                    /**
                     * Emits when the viewport is detached from a CdkVirtualForOf.
                     */
                    _this._detachedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Emits when the rendered range changes.
                     */
                    _this._renderedRangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    _this._orientation = 'vertical';
                    // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll
                    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because
                    // depending on how the strategy calculates the scrolled index, it may come at a cost to
                    // performance.
                    /**
                     * Emits when the index of the first element visible in the viewport changes.
                     */
                    _this.scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](( /**
                     * @param {?} observer
                     * @return {?}
                     */function (observer) { return _this._scrollStrategy.scrolledIndexChange.subscribe(( /**
                     * @param {?} index
                     * @return {?}
                     */function (/**
                     * @param {?} index
                     * @return {?}
                     */ index) { return Promise.resolve().then(( /**
                     * @return {?}
                     */function () { return _this.ngZone.run(( /**
                     * @return {?}
                     */function () { return observer.next(index); })); })); })); }));
                    /**
                     * A stream that emits whenever the rendered range changes.
                     */
                    _this.renderedRangeStream = _this._renderedRangeSubject.asObservable();
                    /**
                     * The total size of all content (in pixels), including content that is not currently rendered.
                     */
                    _this._totalContentSize = 0;
                    /**
                     * A string representing the `style.width` property value to be used for the spacer element.
                     */
                    _this._totalContentWidth = '';
                    /**
                     * A string representing the `style.height` property value to be used for the spacer element.
                     */
                    _this._totalContentHeight = '';
                    /**
                     * The currently rendered range of indices.
                     */
                    _this._renderedRange = { start: 0, end: 0 };
                    /**
                     * The length of the data bound to this viewport (in number of items).
                     */
                    _this._dataLength = 0;
                    /**
                     * The size of the viewport (in pixels).
                     */
                    _this._viewportSize = 0;
                    /**
                     * The last rendered content offset that was set.
                     */
                    _this._renderedContentOffset = 0;
                    /**
                     * Whether the last rendered content offset was to the end of the content (and therefore needs to
                     * be rewritten as an offset to the start of the content).
                     */
                    _this._renderedContentOffsetNeedsRewrite = false;
                    /**
                     * Whether there is a pending change detection cycle.
                     */
                    _this._isChangeDetectionPending = false;
                    /**
                     * A list of functions to run after the next change detection cycle.
                     */
                    _this._runAfterChangeDetection = [];
                    if (!_scrollStrategy) {
                        throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
                    }
                    return _this;
                }
                Object.defineProperty(CdkVirtualScrollViewport.prototype, "orientation", {
                    /**
                     * The direction the viewport scrolls.
                     * @return {?}
                     */
                    get: function () {
                        return this._orientation;
                    },
                    /**
                     * @param {?} orientation
                     * @return {?}
                     */
                    set: function (orientation) {
                        if (this._orientation !== orientation) {
                            this._orientation = orientation;
                            this._calculateSpacerSize();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.ngOnInit = function () {
                    var _this = this;
                    _super.prototype.ngOnInit.call(this);
                    // It's still too early to measure the viewport at this point. Deferring with a promise allows
                    // the Viewport to be rendered with the correct size before we measure. We run this outside the
                    // zone to avoid causing more change detection cycles. We handle the change detection loop
                    // ourselves instead.
                    this.ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () { return Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        _this._measureViewportSize();
                        _this._scrollStrategy.attach(_this);
                        _this.elementScrolled()
                            .pipe(
                        // Start off with a fake scroll event so we properly detect our initial position.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(( /** @type {?} */(null))), 
                        // Collect multiple events into one until the next animation frame. This way if
                        // there are multiple scroll events in the same frame we only need to recheck
                        // our layout once.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(0, SCROLL_SCHEDULER))
                            .subscribe(( /**
                     * @return {?}
                     */function () { return _this._scrollStrategy.onContentScrolled(); }));
                        _this._markChangeDetectionNeeded();
                    })); }));
                };
                /**
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.ngOnDestroy = function () {
                    this.detach();
                    this._scrollStrategy.detach();
                    // Complete all subjects
                    this._renderedRangeSubject.complete();
                    this._detachedSubject.complete();
                    _super.prototype.ngOnDestroy.call(this);
                };
                /**
                 * Attaches a `CdkVirtualForOf` to this viewport.
                 * @param {?} forOf
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.attach = function (forOf) {
                    var _this = this;
                    if (this._forOf) {
                        throw Error('CdkVirtualScrollViewport is already attached.');
                    }
                    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length
                    // changes. Run outside the zone to avoid triggering change detection, since we're managing the
                    // change detection loop ourselves.
                    this.ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._forOf = forOf;
                        _this._forOf.dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(_this._detachedSubject)).subscribe(( /**
                         * @param {?} data
                         * @return {?}
                         */function (/**
                         * @param {?} data
                         * @return {?}
                         */ data) {
                            /** @type {?} */
                            var newLength = data.length;
                            if (newLength !== _this._dataLength) {
                                _this._dataLength = newLength;
                                _this._scrollStrategy.onDataLengthChanged();
                            }
                            _this._doChangeDetection();
                        }));
                    }));
                };
                /**
                 * Detaches the current `CdkVirtualForOf`.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.detach = function () {
                    this._forOf = null;
                    this._detachedSubject.next();
                };
                /**
                 * Gets the length of the data bound to this viewport (in number of items).
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getDataLength = function () {
                    return this._dataLength;
                };
                /**
                 * Gets the size of the viewport (in pixels).
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getViewportSize = function () {
                    return this._viewportSize;
                };
                // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
                // cycle happens. I'm being careful to only call it after the render cycle is complete and before
                // setting it to something else, but its error prone and should probably be split into
                // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.
                /**
                 * Get the current rendered range of items.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getRenderedRange = function () {
                    return this._renderedRange;
                };
                /**
                 * Sets the total size of all content (in pixels), including content that is not currently
                 * rendered.
                 * @param {?} size
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.setTotalContentSize = function (size) {
                    if (this._totalContentSize !== size) {
                        this._totalContentSize = size;
                        this._calculateSpacerSize();
                        this._markChangeDetectionNeeded();
                    }
                };
                /**
                 * Sets the currently rendered range of indices.
                 * @param {?} range
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.setRenderedRange = function (range) {
                    var _this = this;
                    if (!rangesEqual(this._renderedRange, range)) {
                        this._renderedRangeSubject.next(this._renderedRange = range);
                        this._markChangeDetectionNeeded(( /**
                         * @return {?}
                         */function () { return _this._scrollStrategy.onContentRendered(); }));
                    }
                };
                /**
                 * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.getOffsetToRenderedContentStart = function () {
                    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
                };
                /**
                 * Sets the offset from the start of the viewport to either the start or end of the rendered data
                 * (in pixels).
                 * @param {?} offset
                 * @param {?=} to
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.setRenderedContentOffset = function (offset, to) {
                    var _this = this;
                    if (to === void 0) { to = 'to-start'; }
                    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis
                    // in the negative direction.
                    /** @type {?} */
                    var isRtl = this.dir && this.dir.value == 'rtl';
                    /** @type {?} */
                    var isHorizontal = this.orientation == 'horizontal';
                    /** @type {?} */
                    var axis = isHorizontal ? 'X' : 'Y';
                    /** @type {?} */
                    var axisDirection = isHorizontal && isRtl ? -1 : 1;
                    /** @type {?} */
                    var transform = "translate" + axis + "(" + Number(axisDirection * offset) + "px)";
                    this._renderedContentOffset = offset;
                    if (to === 'to-end') {
                        transform += " translate" + axis + "(-100%)";
                        // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise
                        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would
                        // expand upward).
                        this._renderedContentOffsetNeedsRewrite = true;
                    }
                    if (this._renderedContentTransform != transform) {
                        // We know this value is safe because we parse `offset` with `Number()` before passing it
                        // into the string.
                        this._renderedContentTransform = transform;
                        this._markChangeDetectionNeeded(( /**
                         * @return {?}
                         */function () {
                            if (_this._renderedContentOffsetNeedsRewrite) {
                                _this._renderedContentOffset -= _this.measureRenderedContentSize();
                                _this._renderedContentOffsetNeedsRewrite = false;
                                _this.setRenderedContentOffset(_this._renderedContentOffset);
                            }
                            else {
                                _this._scrollStrategy.onRenderedOffsetChanged();
                            }
                        }));
                    }
                };
                /**
                 * Scrolls to the given offset from the start of the viewport. Please note that this is not always
                 * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
                 * direction, this would be the equivalent of setting a fictional `scrollRight` property.
                 * @param {?} offset The offset to scroll to.
                 * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.scrollToOffset = function (offset, behavior) {
                    if (behavior === void 0) { behavior = 'auto'; }
                    /** @type {?} */
                    var options = { behavior: behavior };
                    if (this.orientation === 'horizontal') {
                        options.start = offset;
                    }
                    else {
                        options.top = offset;
                    }
                    this.scrollTo(options);
                };
                /**
                 * Scrolls to the offset for the given index.
                 * @param {?} index The index of the element to scroll to.
                 * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.scrollToIndex = function (index, behavior) {
                    if (behavior === void 0) { behavior = 'auto'; }
                    this._scrollStrategy.scrollToIndex(index, behavior);
                };
                /**
                 * Gets the current scroll offset from the start of the viewport (in pixels).
                 * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
                 *     in horizontal mode.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.measureScrollOffset = function (from) {
                    return _super.prototype.measureScrollOffset.call(this, from ? from : this.orientation === 'horizontal' ? 'start' : 'top');
                };
                /**
                 * Measure the combined size of all of the rendered items.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.measureRenderedContentSize = function () {
                    /** @type {?} */
                    var contentEl = this._contentWrapper.nativeElement;
                    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;
                };
                /**
                 * Measure the total combined size of the given range. Throws if the range includes items that are
                 * not rendered.
                 * @param {?} range
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.measureRangeSize = function (range) {
                    if (!this._forOf) {
                        return 0;
                    }
                    return this._forOf.measureRangeSize(range, this.orientation);
                };
                /**
                 * Update the viewport dimensions and re-render.
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype.checkViewportSize = function () {
                    // TODO: Cleanup later when add logic for handling content resize
                    this._measureViewportSize();
                    this._scrollStrategy.onDataLengthChanged();
                };
                /**
                 * Measure the viewport size.
                 * @private
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._measureViewportSize = function () {
                    /** @type {?} */
                    var viewportEl = this.elementRef.nativeElement;
                    this._viewportSize = this.orientation === 'horizontal' ?
                        viewportEl.clientWidth : viewportEl.clientHeight;
                };
                /**
                 * Queue up change detection to run.
                 * @private
                 * @param {?=} runAfter
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._markChangeDetectionNeeded = function (runAfter) {
                    var _this = this;
                    if (runAfter) {
                        this._runAfterChangeDetection.push(runAfter);
                    }
                    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of
                    // properties sequentially we only have to run `_doChangeDetection` once at the end.
                    if (!this._isChangeDetectionPending) {
                        this._isChangeDetectionPending = true;
                        this.ngZone.runOutsideAngular(( /**
                         * @return {?}
                         */function () { return Promise.resolve().then(( /**
                         * @return {?}
                         */function () {
                            _this._doChangeDetection();
                        })); }));
                    }
                };
                /**
                 * Run change detection.
                 * @private
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._doChangeDetection = function () {
                    var e_5, _b;
                    var _this = this;
                    this._isChangeDetectionPending = false;
                    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection
                    // from the root, since the repeated items are content projected in. Calling `detectChanges`
                    // instead does not properly check the projected content.
                    this.ngZone.run(( /**
                     * @return {?}
                     */function () { return _this._changeDetectorRef.markForCheck(); }));
                    // Apply the content transform. The transform can't be set via an Angular binding because
                    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of
                    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through
                    // the `Number` function first to coerce it to a numeric value.
                    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;
                    /** @type {?} */
                    var runAfterChangeDetection = this._runAfterChangeDetection;
                    this._runAfterChangeDetection = [];
                    try {
                        for (var runAfterChangeDetection_1 = __values(runAfterChangeDetection), runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next(); !runAfterChangeDetection_1_1.done; runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next()) {
                            var fn = runAfterChangeDetection_1_1.value;
                            fn();
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (runAfterChangeDetection_1_1 && !runAfterChangeDetection_1_1.done && (_b = runAfterChangeDetection_1.return)) _b.call(runAfterChangeDetection_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                };
                /**
                 * Calculates the `style.width` and `style.height` for the spacer element.
                 * @private
                 * @return {?}
                 */
                CdkVirtualScrollViewport.prototype._calculateSpacerSize = function () {
                    this._totalContentHeight =
                        this.orientation === 'horizontal' ? '' : this._totalContentSize + "px";
                    this._totalContentWidth =
                        this.orientation === 'horizontal' ? this._totalContentSize + "px" : '';
                };
                return CdkVirtualScrollViewport;
            }(CdkScrollable));
            CdkVirtualScrollViewport.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{ selector: 'cdk-virtual-scroll-viewport',
                            template: "<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\"><ng-content></ng-content></div><div class=\"cdk-virtual-scroll-spacer\" [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>",
                            styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}"],
                            host: {
                                'class': 'cdk-virtual-scroll-viewport',
                                '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === "horizontal"',
                                '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== "horizontal"',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                            providers: [{
                                    provide: CdkScrollable,
                                    useExisting: CdkVirtualScrollViewport,
                                }]
                        },] },
            ];
            /** @nocollapse */
            CdkVirtualScrollViewport.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [VIRTUAL_SCROLL_STRATEGY,] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] },
                { type: ScrollDispatcher }
            ]; };
            CdkVirtualScrollViewport.propDecorators = {
                orientation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                scrolledIndexChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
                _contentWrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['contentWrapper', { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Helper to extract size from a DOM Node.
             * @param {?} orientation
             * @param {?} node
             * @return {?}
             */
            function getSize(orientation, node) {
                /** @type {?} */
                var el = ( /** @type {?} */(node));
                if (!el.getBoundingClientRect) {
                    return 0;
                }
                /** @type {?} */
                var rect = el.getBoundingClientRect();
                return orientation == 'horizontal' ? rect.width : rect.height;
            }
            /**
             * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling
             * container.
             * @template T
             */
            var CdkVirtualForOf = /** @class */ (function () {
                /**
                 * @param {?} _viewContainerRef
                 * @param {?} _template
                 * @param {?} _differs
                 * @param {?} _viewport
                 * @param {?} ngZone
                 */
                function CdkVirtualForOf(_viewContainerRef, _template, _differs, _viewport, ngZone) {
                    var _this = this;
                    this._viewContainerRef = _viewContainerRef;
                    this._template = _template;
                    this._differs = _differs;
                    this._viewport = _viewport;
                    /**
                     * Emits when the rendered view of the data changes.
                     */
                    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * Subject that emits when a new DataSource instance is given.
                     */
                    this._dataSourceChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    /**
                     * The size of the cache used to store templates that are not being used for re-use later.
                     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
                     */
                    this.cdkVirtualForTemplateCacheSize = 20;
                    /**
                     * Emits whenever the data in the current DataSource changes.
                     */
                    this.dataStream = this._dataSourceChanges
                        .pipe(
                    // Start off with null `DataSource`.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(( /** @type {?} */(null))), 
                    // Bundle up the previous and current data sources so we can work with both.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["pairwise"])(), 
                    // Use `_changeDataSource` to disconnect from the previous data source and connect to the
                    // new one, passing back a stream of data changes which we run through `switchMap` to give
                    // us a data stream that emits the latest data from whatever the current `DataSource` is.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(( /**
                     * @param {?} __0
                     * @return {?}
                     */function (_b) {
                        var _c = __read(_b, 2), prev = _c[0], cur = _c[1];
                        return _this._changeDataSource(prev, cur);
                    })), 
                    // Replay the last emitted data when someone subscribes.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["shareReplay"])(1));
                    /**
                     * The differ used to calculate changes to the data.
                     */
                    this._differ = null;
                    /**
                     * The template cache used to hold on ot template instancess that have been stamped out, but don't
                     * currently need to be rendered. These instances will be reused in the future rather than
                     * stamping out brand new ones.
                     */
                    this._templateCache = [];
                    /**
                     * Whether the rendered data should be updated during the next ngDoCheck cycle.
                     */
                    this._needsUpdate = false;
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    this.dataStream.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (/**
                     * @param {?} data
                     * @return {?}
                     */ data) {
                        _this._data = data;
                        _this._onRenderedDataChange();
                    }));
                    this._viewport.renderedRangeStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(( /**
                     * @param {?} range
                     * @return {?}
                     */function (/**
                     * @param {?} range
                     * @return {?}
                     */ range) {
                        _this._renderedRange = range;
                        ngZone.run(( /**
                         * @return {?}
                         */function () { return _this.viewChange.next(_this._renderedRange); }));
                        _this._onRenderedDataChange();
                    }));
                    this._viewport.attach(this);
                }
                Object.defineProperty(CdkVirtualForOf.prototype, "cdkVirtualForOf", {
                    /**
                     * The DataSource to display.
                     * @return {?}
                     */
                    get: function () {
                        return this._cdkVirtualForOf;
                    },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        this._cdkVirtualForOf = value;
                        /** @type {?} */
                        var ds = Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["isDataSource"])(value) ? value :
                            // Slice the value if its an NgIterable to ensure we're working with an array.
                            new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["ArrayDataSource"](value instanceof rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"] ? value : Array.prototype.slice.call(value || []));
                        this._dataSourceChanges.next(ds);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkVirtualForOf.prototype, "cdkVirtualForTrackBy", {
                    /**
                     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
                     * the item and produces a value to be used as the item's identity when tracking changes.
                     * @return {?}
                     */
                    get: function () {
                        return this._cdkVirtualForTrackBy;
                    },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        var _this = this;
                        this._needsUpdate = true;
                        this._cdkVirtualForTrackBy = fn ?
                            ( /**
                             * @param {?} index
                             * @param {?} item
                             * @return {?}
                             */function (index, item) { return fn(index + (_this._renderedRange ? _this._renderedRange.start : 0), item); }) :
                            undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkVirtualForOf.prototype, "cdkVirtualForTemplate", {
                    /**
                     * The template used to stamp out new elements.
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value) {
                            this._needsUpdate = true;
                            this._template = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Measures the combined size (width for horizontal orientation, height for vertical) of all items
                 * in the specified range. Throws an error if the range includes items that are not currently
                 * rendered.
                 * @param {?} range
                 * @param {?} orientation
                 * @return {?}
                 */
                CdkVirtualForOf.prototype.measureRangeSize = function (range, orientation) {
                    if (range.start >= range.end) {
                        return 0;
                    }
                    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {
                        throw Error("Error: attempted to measure an item that isn't rendered.");
                    }
                    // The index into the list of rendered views for the first item in the range.
                    /** @type {?} */
                    var renderedStartIndex = range.start - this._renderedRange.start;
                    // The length of the range we're measuring.
                    /** @type {?} */
                    var rangeLen = range.end - range.start;
                    // Loop over all root nodes for all items in the range and sum up their size.
                    /** @type {?} */
                    var totalSize = 0;
                    /** @type {?} */
                    var i = rangeLen;
                    while (i--) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(this._viewContainerRef.get(i + renderedStartIndex)));
                        /** @type {?} */
                        var j = view ? view.rootNodes.length : 0;
                        while (j--) {
                            totalSize += getSize(orientation, ( /** @type {?} */(view)).rootNodes[j]);
                        }
                    }
                    return totalSize;
                };
                /**
                 * @return {?}
                 */
                CdkVirtualForOf.prototype.ngDoCheck = function () {
                    if (this._differ && this._needsUpdate) {
                        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of
                        // this list being rendered (can use simpler algorithm) vs needs update due to data actually
                        // changing (need to do this diff).
                        /** @type {?} */
                        var changes = this._differ.diff(this._renderedItems);
                        if (!changes) {
                            this._updateContext();
                        }
                        else {
                            this._applyChanges(changes);
                        }
                        this._needsUpdate = false;
                    }
                };
                /**
                 * @return {?}
                 */
                CdkVirtualForOf.prototype.ngOnDestroy = function () {
                    var e_6, _b;
                    this._viewport.detach();
                    this._dataSourceChanges.next();
                    this._dataSourceChanges.complete();
                    this.viewChange.complete();
                    this._destroyed.next();
                    this._destroyed.complete();
                    try {
                        for (var _c = __values(this._templateCache), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var view = _d.value;
                            view.destroy();
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                };
                /**
                 * React to scroll state changes in the viewport.
                 * @private
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._onRenderedDataChange = function () {
                    if (!this._renderedRange) {
                        return;
                    }
                    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);
                    if (!this._differ) {
                        this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);
                    }
                    this._needsUpdate = true;
                };
                /**
                 * Swap out one `DataSource` for another.
                 * @private
                 * @param {?} oldDs
                 * @param {?} newDs
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._changeDataSource = function (oldDs, newDs) {
                    if (oldDs) {
                        oldDs.disconnect(this);
                    }
                    this._needsUpdate = true;
                    return newDs ? newDs.connect(this) : Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
                };
                /**
                 * Update the `CdkVirtualForOfContext` for all views.
                 * @private
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._updateContext = function () {
                    /** @type {?} */
                    var count = this._data.length;
                    /** @type {?} */
                    var i = this._viewContainerRef.length;
                    while (i--) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(this._viewContainerRef.get(i)));
                        view.context.index = this._renderedRange.start + i;
                        view.context.count = count;
                        this._updateComputedContextProperties(view.context);
                        view.detectChanges();
                    }
                };
                /**
                 * Apply changes to the DOM.
                 * @private
                 * @param {?} changes
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._applyChanges = function (changes) {
                    var _this = this;
                    // Rearrange the views to put them in the right location.
                    changes.forEachOperation(( /**
                     * @param {?} record
                     * @param {?} adjustedPreviousIndex
                     * @param {?} currentIndex
                     * @return {?}
                     */function (record, adjustedPreviousIndex, currentIndex) {
                        if (record.previousIndex == null) { // Item added.
                            // Item added.
                            /** @type {?} */
                            var view = _this._insertViewForNewItem(( /** @type {?} */(currentIndex)));
                            view.context.$implicit = record.item;
                        }
                        else if (currentIndex == null) { // Item removed.
                            _this._cacheView(_this._detachView(( /** @type {?} */(adjustedPreviousIndex))));
                        }
                        else { // Item moved.
                            // Item moved.
                            /** @type {?} */
                            var view = ( /** @type {?} */(_this._viewContainerRef.get(( /** @type {?} */(adjustedPreviousIndex)))));
                            _this._viewContainerRef.move(view, currentIndex);
                            view.context.$implicit = record.item;
                        }
                    }));
                    // Update $implicit for any items that had an identity change.
                    changes.forEachIdentityChange(( /**
                     * @param {?} record
                     * @return {?}
                     */function (record) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(_this._viewContainerRef.get(( /** @type {?} */(record.currentIndex)))));
                        view.context.$implicit = record.item;
                    }));
                    // Update the context variables on all items.
                    /** @type {?} */
                    var count = this._data.length;
                    /** @type {?} */
                    var i = this._viewContainerRef.length;
                    while (i--) {
                        /** @type {?} */
                        var view = ( /** @type {?} */(this._viewContainerRef.get(i)));
                        view.context.index = this._renderedRange.start + i;
                        view.context.count = count;
                        this._updateComputedContextProperties(view.context);
                    }
                };
                /**
                 * Cache the given detached view.
                 * @private
                 * @param {?} view
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._cacheView = function (view) {
                    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {
                        this._templateCache.push(view);
                    }
                    else {
                        /** @type {?} */
                        var index = this._viewContainerRef.indexOf(view);
                        // It's very unlikely that the index will ever be -1, but just in case,
                        // destroy the view on its own, otherwise destroy it through the
                        // container to ensure that all the references are removed.
                        if (index === -1) {
                            view.destroy();
                        }
                        else {
                            this._viewContainerRef.remove(index);
                        }
                    }
                };
                /**
                 * Inserts a view for a new item, either from the cache or by creating a new one.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._insertViewForNewItem = function (index) {
                    return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);
                };
                /**
                 * Update the computed properties on the `CdkVirtualForOfContext`.
                 * @private
                 * @param {?} context
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._updateComputedContextProperties = function (context) {
                    context.first = context.index === 0;
                    context.last = context.index === context.count - 1;
                    context.even = context.index % 2 === 0;
                    context.odd = !context.even;
                };
                /**
                 * Creates a new embedded view and moves it to the given index
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._createEmbeddedViewAt = function (index) {
                    // Note that it's important that we insert the item directly at the proper index,
                    // rather than inserting it and the moving it in place, because if there's a directive
                    // on the same node that injects the `ViewContainerRef`, Angular will insert another
                    // comment node which can throw off the move when it's being repeated for all items.
                    return this._viewContainerRef.createEmbeddedView(this._template, {
                        $implicit: ( /** @type {?} */(null)),
                        cdkVirtualForOf: this._cdkVirtualForOf,
                        index: -1,
                        count: -1,
                        first: false,
                        last: false,
                        odd: false,
                        even: false
                    }, index);
                };
                /**
                 * Inserts a recycled view from the cache at the given index.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._insertViewFromCache = function (index) {
                    /** @type {?} */
                    var cachedView = this._templateCache.pop();
                    if (cachedView) {
                        this._viewContainerRef.insert(cachedView, index);
                    }
                    return cachedView || null;
                };
                /**
                 * Detaches the embedded view at the given index.
                 * @private
                 * @param {?} index
                 * @return {?}
                 */
                CdkVirtualForOf.prototype._detachView = function (index) {
                    return ( /** @type {?} */(this._viewContainerRef.detach(index)));
                };
                return CdkVirtualForOf;
            }());
            CdkVirtualForOf.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                            selector: '[cdkVirtualFor][cdkVirtualForOf]',
                        },] },
            ];
            /** @nocollapse */
            CdkVirtualForOf.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"] },
                { type: CdkVirtualScrollViewport, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"] }] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
            ]; };
            CdkVirtualForOf.propDecorators = {
                cdkVirtualForOf: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                cdkVirtualForTrackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                cdkVirtualForTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
                cdkVirtualForTemplateCacheSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ScrollingModule = /** @class */ (function () {
                function ScrollingModule() {
                }
                return ScrollingModule;
            }());
            ScrollingModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["PlatformModule"]],
                            exports: [
                                _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"],
                                CdkFixedSizeVirtualScroll,
                                CdkScrollable,
                                CdkVirtualForOf,
                                CdkVirtualScrollViewport,
                            ],
                            declarations: [
                                CdkFixedSizeVirtualScroll,
                                CdkScrollable,
                                CdkVirtualForOf,
                                CdkVirtualScrollViewport,
                            ],
                        },] },
            ];
            /**
             * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.
             * \@breaking-change 8.0.0 delete this alias
             */
            var ScrollDispatchModule = /** @class */ (function () {
                function ScrollDispatchModule() {
                }
                return ScrollDispatchModule;
            }());
            ScrollDispatchModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                            imports: [ScrollingModule],
                            exports: [ScrollingModule],
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Time in ms to throttle the resize events by default.
             * @type {?}
             */
            var DEFAULT_RESIZE_TIME = 20;
            /**
             * Simple utility for getting the bounds of the browser viewport.
             * \@docs-private
             */
            var ViewportRuler = /** @class */ (function () {
                /**
                 * @param {?} _platform
                 * @param {?} ngZone
                 */
                function ViewportRuler(_platform, ngZone) {
                    var _this = this;
                    this._platform = _platform;
                    ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this._change = _platform.isBrowser ?
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'resize'), Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'orientationchange')) :
                            Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
                        // Note that we need to do the subscription inside `runOutsideAngular`
                        // since subscribing is what causes the event listener to be added.
                        _this._invalidateCache = _this.change().subscribe(( /**
                         * @return {?}
                         */function () { return _this._updateViewportSize(); }));
                    }));
                }
                /**
                 * @return {?}
                 */
                ViewportRuler.prototype.ngOnDestroy = function () {
                    this._invalidateCache.unsubscribe();
                };
                /**
                 * Returns the viewport's width and height.
                 * @return {?}
                 */
                ViewportRuler.prototype.getViewportSize = function () {
                    if (!this._viewportSize) {
                        this._updateViewportSize();
                    }
                    /** @type {?} */
                    var output = { width: this._viewportSize.width, height: this._viewportSize.height };
                    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.
                    if (!this._platform.isBrowser) {
                        this._viewportSize = ( /** @type {?} */(null));
                    }
                    return output;
                };
                /**
                 * Gets a ClientRect for the viewport's bounds.
                 * @return {?}
                 */
                ViewportRuler.prototype.getViewportRect = function () {
                    // Use the document element's bounding rect rather than the window scroll properties
                    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
                    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
                    // conceptual viewports. Under most circumstances these viewports are equivalent, but they
                    // can disagree when the page is pinch-zoomed (on devices that support touch).
                    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
                    // We use the documentElement instead of the body because, by default (without a css reset)
                    // browsers typically give the document body an 8px margin, which is not included in
                    // getBoundingClientRect().
                    /** @type {?} */
                    var scrollPosition = this.getViewportScrollPosition();
                    var _b = this.getViewportSize(), width = _b.width, height = _b.height;
                    return {
                        top: scrollPosition.top,
                        left: scrollPosition.left,
                        bottom: scrollPosition.top + height,
                        right: scrollPosition.left + width,
                        height: height,
                        width: width,
                    };
                };
                /**
                 * Gets the (top, left) scroll position of the viewport.
                 * @return {?}
                 */
                ViewportRuler.prototype.getViewportScrollPosition = function () {
                    // While we can get a reference to the fake document
                    // during SSR, it doesn't have getBoundingClientRect.
                    if (!this._platform.isBrowser) {
                        return { top: 0, left: 0 };
                    }
                    // The top-left-corner of the viewport is determined by the scroll position of the document
                    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
                    // whether `document.body` or `document.documentElement` is the scrolled element, so reading
                    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
                    // `document.documentElement` works consistently, where the `top` and `left` values will
                    // equal negative the scroll position.
                    /** @type {?} */
                    var documentElement = ( /** @type {?} */(document.documentElement));
                    /** @type {?} */
                    var documentRect = documentElement.getBoundingClientRect();
                    /** @type {?} */
                    var top = -documentRect.top || document.body.scrollTop || window.scrollY ||
                        documentElement.scrollTop || 0;
                    /** @type {?} */
                    var left = -documentRect.left || document.body.scrollLeft || window.scrollX ||
                        documentElement.scrollLeft || 0;
                    return { top: top, left: left };
                };
                /**
                 * Returns a stream that emits whenever the size of the viewport changes.
                 * @param {?=} throttleTime Time in milliseconds to throttle the stream.
                 * @return {?}
                 */
                ViewportRuler.prototype.change = function (throttleTime) {
                    if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }
                    return throttleTime > 0 ? this._change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(throttleTime)) : this._change;
                };
                /**
                 * Updates the cached viewport size.
                 * @private
                 * @return {?}
                 */
                ViewportRuler.prototype._updateViewportSize = function () {
                    this._viewportSize = this._platform.isBrowser ?
                        { width: window.innerWidth, height: window.innerHeight } :
                        { width: 0, height: 0 };
                };
                return ViewportRuler;
            }());
            ViewportRuler.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{ providedIn: 'root' },] },
            ];
            /** @nocollapse */
            ViewportRuler.ctorParameters = function () { return [
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
            ]; };
            /** @nocollapse */ ViewportRuler.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ViewportRuler_Factory() { return new ViewportRuler(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"])); }, token: ViewportRuler, providedIn: "root" });
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @param {?} parentRuler
             * @param {?} platform
             * @param {?} ngZone
             * @return {?}
             */
            function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {
                return parentRuler || new ViewportRuler(platform, ngZone);
            }
            /**
             * \@docs-private \@deprecated \@breaking-change 8.0.0
             * @type {?}
             */
            var VIEWPORT_RULER_PROVIDER = {
                // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.
                provide: ViewportRuler,
                deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), ViewportRuler], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]],
                useFactory: VIEWPORT_RULER_PROVIDER_FACTORY
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=scrolling.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/table.js": 
        /*!****************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/table.js ***!
          \****************************************************/
        /*! exports provided: DataSource, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataRowOutlet", function () { return DataRowOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderRowOutlet", function () { return HeaderRowOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FooterRowOutlet", function () { return FooterRowOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_TABLE_TEMPLATE", function () { return CDK_TABLE_TEMPLATE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTable", function () { return CdkTable; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkCellDef", function () { return CdkCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderCellDef", function () { return CdkHeaderCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterCellDef", function () { return CdkFooterCellDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkColumnDef", function () { return CdkColumnDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseCdkCell", function () { return BaseCdkCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderCell", function () { return CdkHeaderCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterCell", function () { return CdkFooterCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkCell", function () { return CdkCell; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_ROW_TEMPLATE", function () { return CDK_ROW_TEMPLATE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseRowDef", function () { return BaseRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderRowDef", function () { return CdkHeaderRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterRowDef", function () { return CdkFooterRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkRowDef", function () { return CdkRowDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkCellOutlet", function () { return CdkCellOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkHeaderRow", function () { return CdkHeaderRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkFooterRow", function () { return CdkFooterRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkRow", function () { return CdkRow; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTableModule", function () { return CdkTableModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STICKY_DIRECTIONS", function () { return STICKY_DIRECTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StickyStyler", function () { return StickyStyler; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mixinHasStickyInput", function () { return mixinHasStickyInput; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXT_COLUMN_OPTIONS", function () { return TEXT_COLUMN_OPTIONS; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTextColumn", function () { return CdkTextColumn; });
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataSource", function () { return _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["DataSource"]; });
            /* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm2015/platform.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Mixin to provide a directive with a function that checks if the sticky input has been
             * changed since the last time the function was called. Essentially adds a dirty-check to the
             * sticky value.
             * \@docs-private
             * @template T
             * @param {?} base
             * @return {?}
             */
            function mixinHasStickyInput(base) {
                return /** @class */ (function (_super) {
                    __extends(class_1, _super);
                    /**
                     * @param {...?} args
                     */
                    function class_1() {
                        var args = [];
                        for (var _b = 0; _b < arguments.length; _b++) {
                            args[_b] = arguments[_b];
                        }
                        var _this = _super.apply(this, __spread(args)) || this;
                        _this._sticky = false;
                        /**
                         * Whether the sticky input has changed since it was last checked.
                         */
                        _this._hasStickyChanged = false;
                        return _this;
                    }
                    Object.defineProperty(class_1.prototype, "sticky", {
                        /**
                         * Whether sticky positioning should be applied.
                         * @return {?}
                         */
                        get: function () { return this._sticky; },
                        /**
                         * @param {?} v
                         * @return {?}
                         */
                        set: function (v) {
                            /** @type {?} */
                            var prevValue = this._sticky;
                            this._sticky = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v);
                            this._hasStickyChanged = prevValue !== this._sticky;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    /**
                     * Whether the sticky value has changed since this was last called.
                     * @return {?}
                     */
                    class_1.prototype.hasStickyChanged = function () {
                        /** @type {?} */
                        var hasStickyChanged = this._hasStickyChanged;
                        this._hasStickyChanged = false;
                        return hasStickyChanged;
                    };
                    /**
                     * Resets the dirty check for cases where the sticky state has been used without checking.
                     * @return {?}
                     */
                    class_1.prototype.resetStickyChanged = function () {
                        this._hasStickyChanged = false;
                    };
                    return class_1;
                }(base));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Cell definition for a CDK table.
             * Captures the template of a column's data row cell as well as cell-specific properties.
             */
            var CdkCellDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function CdkCellDef(/** @docs-private */ template) {
                    this.template = template;
                }
                return CdkCellDef;
            }());
            CdkCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkCellDef]' },] },
            ];
            /** @nocollapse */
            CdkCellDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] }
            ]; };
            /**
             * Header cell definition for a CDK table.
             * Captures the template of a column's header cell and as well as cell-specific properties.
             */
            var CdkHeaderCellDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function CdkHeaderCellDef(/** @docs-private */ template) {
                    this.template = template;
                }
                return CdkHeaderCellDef;
            }());
            CdkHeaderCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkHeaderCellDef]' },] },
            ];
            /** @nocollapse */
            CdkHeaderCellDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] }
            ]; };
            /**
             * Footer cell definition for a CDK table.
             * Captures the template of a column's footer cell and as well as cell-specific properties.
             */
            var CdkFooterCellDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 */
                function CdkFooterCellDef(/** @docs-private */ template) {
                    this.template = template;
                }
                return CdkFooterCellDef;
            }());
            CdkFooterCellDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkFooterCellDef]' },] },
            ];
            /** @nocollapse */
            CdkFooterCellDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] }
            ]; };
            // Boilerplate for applying mixins to CdkColumnDef.
            /**
             * \@docs-private
             */
            var CdkColumnDefBase = /** @class */ (function () {
                function CdkColumnDefBase() {
                }
                return CdkColumnDefBase;
            }());
            /** @type {?} */
            var _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);
            /**
             * Column definition for the CDK table.
             * Defines a set of cells available for a table column.
             */
            var CdkColumnDef = /** @class */ (function (_super) {
                __extends(CdkColumnDef, _super);
                function CdkColumnDef() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this._stickyEnd = false;
                    return _this;
                }
                Object.defineProperty(CdkColumnDef.prototype, "name", {
                    /**
                     * Unique name for this column.
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        // If the directive is set without a name (updated programatically), then this setter will
                        // trigger with an empty string and should not overwrite the programatically set value.
                        if (!name) {
                            return;
                        }
                        this._name = name;
                        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkColumnDef.prototype, "stickyEnd", {
                    /**
                     * Whether this column should be sticky positioned on the end of the row. Should make sure
                     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value
                     * has been changed.
                     * @return {?}
                     */
                    get: function () {
                        return this._stickyEnd;
                    },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        /** @type {?} */
                        var prevValue = this._stickyEnd;
                        this._stickyEnd = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v);
                        this._hasStickyChanged = prevValue !== this._stickyEnd;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CdkColumnDef;
            }(_CdkColumnDefBase));
            CdkColumnDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkColumnDef]',
                            inputs: ['sticky'],
                            providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],
                        },] },
            ];
            CdkColumnDef.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkColumnDef',] }],
                stickyEnd: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['stickyEnd',] }],
                cell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [CdkCellDef, { static: false },] }],
                headerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [CdkHeaderCellDef, { static: false },] }],
                footerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [CdkFooterCellDef, { static: false },] }]
            };
            /**
             * Base class for the cells. Adds a CSS classname that identifies the column it renders in.
             */
            var BaseCdkCell = /** @class */ (function () {
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function BaseCdkCell(columnDef, elementRef) {
                    /** @type {?} */
                    var columnClassName = "cdk-column-" + columnDef.cssClassFriendlyName;
                    elementRef.nativeElement.classList.add(columnClassName);
                }
                return BaseCdkCell;
            }());
            /**
             * Header cell template container that adds the right classes and role.
             */
            var CdkHeaderCell = /** @class */ (function (_super) {
                __extends(CdkHeaderCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function CdkHeaderCell(columnDef, elementRef) {
                    return _super.call(this, columnDef, elementRef) || this;
                }
                return CdkHeaderCell;
            }(BaseCdkCell));
            CdkHeaderCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-header-cell, th[cdk-header-cell]',
                            host: {
                                'class': 'cdk-header-cell',
                                'role': 'columnheader',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkHeaderCell.ctorParameters = function () { return [
                { type: CdkColumnDef },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Footer cell template container that adds the right classes and role.
             */
            var CdkFooterCell = /** @class */ (function (_super) {
                __extends(CdkFooterCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function CdkFooterCell(columnDef, elementRef) {
                    return _super.call(this, columnDef, elementRef) || this;
                }
                return CdkFooterCell;
            }(BaseCdkCell));
            CdkFooterCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-footer-cell, td[cdk-footer-cell]',
                            host: {
                                'class': 'cdk-footer-cell',
                                'role': 'gridcell',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkFooterCell.ctorParameters = function () { return [
                { type: CdkColumnDef },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Cell template container that adds the right classes and role.
             */
            var CdkCell = /** @class */ (function (_super) {
                __extends(CdkCell, _super);
                /**
                 * @param {?} columnDef
                 * @param {?} elementRef
                 */
                function CdkCell(columnDef, elementRef) {
                    return _super.call(this, columnDef, elementRef) || this;
                }
                return CdkCell;
            }(BaseCdkCell));
            CdkCell.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: 'cdk-cell, td[cdk-cell]',
                            host: {
                                'class': 'cdk-cell',
                                'role': 'gridcell',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkCell.ctorParameters = function () { return [
                { type: CdkColumnDef },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * The row template that can be used by the mat-table. Should not be used outside of the
             * material library.
             * @type {?}
             */
            var CDK_ROW_TEMPLATE = "<ng-container cdkCellOutlet></ng-container>";
            /**
             * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs
             * for changes and notifying the table.
             * @abstract
             */
            var BaseRowDef = /** @class */ (function () {
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function BaseRowDef(template, _differs) {
                    this.template = template;
                    this._differs = _differs;
                }
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                BaseRowDef.prototype.ngOnChanges = function (changes) {
                    // Create a new columns differ if one does not yet exist. Initialize it based on initial value
                    // of the columns property or an empty array if none is provided.
                    if (!this._columnsDiffer) {
                        /** @type {?} */
                        var columns = (changes['columns'] && changes['columns'].currentValue) || [];
                        this._columnsDiffer = this._differs.find(columns).create();
                        this._columnsDiffer.diff(columns);
                    }
                };
                /**
                 * Returns the difference between the current columns and the columns from the last diff, or null
                 * if there is no difference.
                 * @return {?}
                 */
                BaseRowDef.prototype.getColumnsDiff = function () {
                    return this._columnsDiffer.diff(this.columns);
                };
                /**
                 * Gets this row def's relevant cell template from the provided column def.
                 * @param {?} column
                 * @return {?}
                 */
                BaseRowDef.prototype.extractCellTemplate = function (column) {
                    if (this instanceof CdkHeaderRowDef) {
                        return column.headerCell.template;
                    }
                    if (this instanceof CdkFooterRowDef) {
                        return column.footerCell.template;
                    }
                    else {
                        return column.cell.template;
                    }
                };
                return BaseRowDef;
            }());
            // Boilerplate for applying mixins to CdkHeaderRowDef.
            /**
             * \@docs-private
             */
            var CdkHeaderRowDefBase = /** @class */ (function (_super) {
                __extends(CdkHeaderRowDefBase, _super);
                function CdkHeaderRowDefBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return CdkHeaderRowDefBase;
            }(BaseRowDef));
            /** @type {?} */
            var _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);
            /**
             * Header row definition for the CDK table.
             * Captures the header row's template and other header properties such as the columns to display.
             */
            var CdkHeaderRowDef = /** @class */ (function (_super) {
                __extends(CdkHeaderRowDef, _super);
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function CdkHeaderRowDef(template, _differs) {
                    return _super.call(this, template, _differs) || this;
                }
                // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
                // Explicitly define it so that the method is called as part of the Angular lifecycle.
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkHeaderRowDef.prototype.ngOnChanges = function (changes) {
                    _super.prototype.ngOnChanges.call(this, changes);
                };
                return CdkHeaderRowDef;
            }(_CdkHeaderRowDefBase));
            CdkHeaderRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkHeaderRowDef]',
                            inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],
                        },] },
            ];
            /** @nocollapse */
            CdkHeaderRowDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] }
            ]; };
            // Boilerplate for applying mixins to CdkFooterRowDef.
            /**
             * \@docs-private
             */
            var CdkFooterRowDefBase = /** @class */ (function (_super) {
                __extends(CdkFooterRowDefBase, _super);
                function CdkFooterRowDefBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return CdkFooterRowDefBase;
            }(BaseRowDef));
            /** @type {?} */
            var _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);
            /**
             * Footer row definition for the CDK table.
             * Captures the footer row's template and other footer properties such as the columns to display.
             */
            var CdkFooterRowDef = /** @class */ (function (_super) {
                __extends(CdkFooterRowDef, _super);
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function CdkFooterRowDef(template, _differs) {
                    return _super.call(this, template, _differs) || this;
                }
                // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
                // Explicitly define it so that the method is called as part of the Angular lifecycle.
                /**
                 * @param {?} changes
                 * @return {?}
                 */
                CdkFooterRowDef.prototype.ngOnChanges = function (changes) {
                    _super.prototype.ngOnChanges.call(this, changes);
                };
                return CdkFooterRowDef;
            }(_CdkFooterRowDefBase));
            CdkFooterRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkFooterRowDef]',
                            inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],
                        },] },
            ];
            /** @nocollapse */
            CdkFooterRowDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] }
            ]; };
            /**
             * Data row definition for the CDK table.
             * Captures the header row's template and other row properties such as the columns to display and
             * a when predicate that describes when this row should be used.
             * @template T
             */
            var CdkRowDef = /** @class */ (function (_super) {
                __extends(CdkRowDef, _super);
                // TODO(andrewseguin): Add an input for providing a switch function to determine
                //   if this template should be used.
                /**
                 * @param {?} template
                 * @param {?} _differs
                 */
                function CdkRowDef(template, _differs) {
                    return _super.call(this, template, _differs) || this;
                }
                return CdkRowDef;
            }(BaseRowDef));
            CdkRowDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                            selector: '[cdkRowDef]',
                            inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],
                        },] },
            ];
            /** @nocollapse */
            CdkRowDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] }
            ]; };
            /**
             * Outlet for rendering cells inside of a row or header row.
             * \@docs-private
             */
            var CdkCellOutlet = /** @class */ (function () {
                /**
                 * @param {?} _viewContainer
                 */
                function CdkCellOutlet(_viewContainer) {
                    this._viewContainer = _viewContainer;
                    CdkCellOutlet.mostRecentCellOutlet = this;
                }
                /**
                 * @return {?}
                 */
                CdkCellOutlet.prototype.ngOnDestroy = function () {
                    // If this was the last outlet being rendered in the view, remove the reference
                    // from the static property after it has been destroyed to avoid leaking memory.
                    if (CdkCellOutlet.mostRecentCellOutlet === this) {
                        CdkCellOutlet.mostRecentCellOutlet = null;
                    }
                };
                return CdkCellOutlet;
            }());
            /**
             * Static property containing the latest constructed instance of this class.
             * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using
             * createEmbeddedView. After one of these components are created, this property will provide
             * a handle to provide that component's cells and context. After init, the CdkCellOutlet will
             * construct the cells with the provided context.
             */
            CdkCellOutlet.mostRecentCellOutlet = null;
            CdkCellOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[cdkCellOutlet]' },] },
            ];
            /** @nocollapse */
            CdkCellOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] }
            ]; };
            /**
             * Header template container that contains the cell outlet. Adds the right class and role.
             */
            var CdkHeaderRow = /** @class */ (function () {
                function CdkHeaderRow() {
                }
                return CdkHeaderRow;
            }());
            CdkHeaderRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-header-row, tr[cdk-header-row]',
                            template: CDK_ROW_TEMPLATE,
                            host: {
                                'class': 'cdk-header-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        },] },
            ];
            /**
             * Footer template container that contains the cell outlet. Adds the right class and role.
             */
            var CdkFooterRow = /** @class */ (function () {
                function CdkFooterRow() {
                }
                return CdkFooterRow;
            }());
            CdkFooterRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-footer-row, tr[cdk-footer-row]',
                            template: CDK_ROW_TEMPLATE,
                            host: {
                                'class': 'cdk-footer-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        },] },
            ];
            /**
             * Data row template container that contains the cell outlet. Adds the right class and role.
             */
            var CdkRow = /** @class */ (function () {
                function CdkRow() {
                }
                return CdkRow;
            }());
            CdkRow.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-row, tr[cdk-row]',
                            template: CDK_ROW_TEMPLATE,
                            host: {
                                'class': 'cdk-row',
                                'role': 'row',
                            },
                            // See note on CdkTable for explanation on why this uses the default change detection strategy.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * List of all possible directions that can be used for sticky positioning.
             * \@docs-private
             * @type {?}
             */
            var STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];
            /**
             * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.
             * \@docs-private
             */
            var StickyStyler = /** @class */ (function () {
                /**
                 * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table
                 *     that uses the native `<table>` element.
                 * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has
                 *     sticky positioning applied.
                 * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning
                 *     by reversing left/right positions.
                 * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.
                 */
                function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser) {
                    if (_isBrowser === void 0) { _isBrowser = true; }
                    this._isNativeHtmlTable = _isNativeHtmlTable;
                    this._stickCellCss = _stickCellCss;
                    this.direction = direction;
                    this._isBrowser = _isBrowser;
                }
                /**
                 * Clears the sticky positioning styles from the row and its cells by resetting the `position`
                 * style, setting the zIndex to 0, and unsetting each provided sticky direction.
                 * @param {?} rows The list of rows that should be cleared from sticking in the provided directions
                 * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.
                 * @return {?}
                 */
                StickyStyler.prototype.clearStickyPositioning = function (rows, stickyDirections) {
                    var e_7, _b;
                    try {
                        for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                            var row = rows_1_1.value;
                            // If the row isn't an element (e.g. if it's an `ng-container`),
                            // it won't have inline styles or `children` so we skip it.
                            if (row.nodeType !== row.ELEMENT_NODE) {
                                continue;
                            }
                            this._removeStickyStyle(row, stickyDirections);
                            for (var i = 0; i < row.children.length; i++) {
                                /** @type {?} */
                                var cell = ( /** @type {?} */(row.children[i]));
                                this._removeStickyStyle(cell, stickyDirections);
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (rows_1_1 && !rows_1_1.done && (_b = rows_1.return)) _b.call(rows_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                };
                /**
                 * Applies sticky left and right positions to the cells of each row according to the sticky
                 * states of the rendered column definitions.
                 * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.
                 * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell
                 *     in this index position should be stuck to the start of the row.
                 * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell
                 *     in this index position should be stuck to the end of the row.
                 * @return {?}
                 */
                StickyStyler.prototype.updateStickyColumns = function (rows, stickyStartStates, stickyEndStates) {
                    var e_8, _b;
                    /** @type {?} */
                    var hasStickyColumns = stickyStartStates.some(( /**
                     * @param {?} state
                     * @return {?}
                     */function (/**
                     * @param {?} state
                     * @return {?}
                     */ state) { return state; })) || stickyEndStates.some(( /**
                     * @param {?} state
                     * @return {?}
                     */function (/**
                     * @param {?} state
                     * @return {?}
                     */ state) { return state; }));
                    if (!rows.length || !hasStickyColumns || !this._isBrowser) {
                        return;
                    }
                    /** @type {?} */
                    var firstRow = rows[0];
                    /** @type {?} */
                    var numCells = firstRow.children.length;
                    /** @type {?} */
                    var cellWidths = this._getCellWidths(firstRow);
                    /** @type {?} */
                    var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);
                    /** @type {?} */
                    var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);
                    /** @type {?} */
                    var isRtl = this.direction === 'rtl';
                    try {
                        for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {
                            var row = rows_2_1.value;
                            for (var i = 0; i < numCells; i++) {
                                /** @type {?} */
                                var cell = ( /** @type {?} */(row.children[i]));
                                if (stickyStartStates[i]) {
                                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);
                                }
                                if (stickyEndStates[i]) {
                                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);
                                }
                            }
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (rows_2_1 && !rows_2_1.done && (_b = rows_2.return)) _b.call(rows_2);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                };
                /**
                 * Applies sticky positioning to the row's cells if using the native table layout, and to the
                 * row itself otherwise.
                 * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding
                 *     sticky state and to the provided top or bottom position.
                 * @param {?} stickyStates A list of boolean states where each state represents whether the row
                 *     should be stuck in the particular top or bottom position.
                 * @param {?} position The position direction in which the row should be stuck if that row should be
                 *     sticky.
                 *
                 * @return {?}
                 */
                StickyStyler.prototype.stickRows = function (rowsToStick, stickyStates, position) {
                    // Since we can't measure the rows on the server, we can't stick the rows properly.
                    if (!this._isBrowser) {
                        return;
                    }
                    // If positioning the rows to the bottom, reverse their order when evaluating the sticky
                    // position such that the last row stuck will be "bottom: 0px" and so on.
                    /** @type {?} */
                    var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;
                    /** @type {?} */
                    var stickyHeight = 0;
                    for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
                        if (!stickyStates[rowIndex]) {
                            continue;
                        }
                        /** @type {?} */
                        var row = rows[rowIndex];
                        if (this._isNativeHtmlTable) {
                            for (var j = 0; j < row.children.length; j++) {
                                /** @type {?} */
                                var cell = ( /** @type {?} */(row.children[j]));
                                this._addStickyStyle(cell, position, stickyHeight);
                            }
                        }
                        else {
                            // Flex does not respect the stick positioning on the cells, needs to be applied to the row.
                            // If this is applied on a native table, Safari causes the header to fly in wrong direction.
                            this._addStickyStyle(row, position, stickyHeight);
                        }
                        if (rowIndex === rows.length - 1) {
                            // prevent unnecessary reflow from getBoundingClientRect()
                            return;
                        }
                        stickyHeight += row.getBoundingClientRect().height;
                    }
                };
                /**
                 * When using the native table in Safari, sticky footer cells do not stick. The only way to stick
                 * footer rows is to apply sticky styling to the tfoot container. This should only be done if
                 * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from
                 * the tfoot element.
                 * @param {?} tableElement
                 * @param {?} stickyStates
                 * @return {?}
                 */
                StickyStyler.prototype.updateStickyFooterContainer = function (tableElement, stickyStates) {
                    if (!this._isNativeHtmlTable) {
                        return;
                    }
                    /** @type {?} */
                    var tfoot = ( /** @type {?} */(tableElement.querySelector('tfoot')));
                    if (stickyStates.some(( /**
                     * @param {?} state
                     * @return {?}
                     */function (/**
                     * @param {?} state
                     * @return {?}
                     */ state) { return !state; }))) {
                        this._removeStickyStyle(tfoot, ['bottom']);
                    }
                    else {
                        this._addStickyStyle(tfoot, 'bottom', 0);
                    }
                };
                /**
                 * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating
                 * the zIndex, removing each of the provided sticky directions, and removing the
                 * sticky position if there are no more directions.
                 * @param {?} element
                 * @param {?} stickyDirections
                 * @return {?}
                 */
                StickyStyler.prototype._removeStickyStyle = function (element, stickyDirections) {
                    var e_9, _b;
                    try {
                        for (var stickyDirections_1 = __values(stickyDirections), stickyDirections_1_1 = stickyDirections_1.next(); !stickyDirections_1_1.done; stickyDirections_1_1 = stickyDirections_1.next()) {
                            var dir = stickyDirections_1_1.value;
                            element.style[dir] = '';
                        }
                    }
                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                    finally {
                        try {
                            if (stickyDirections_1_1 && !stickyDirections_1_1.done && (_b = stickyDirections_1.return)) _b.call(stickyDirections_1);
                        }
                        finally { if (e_9) throw e_9.error; }
                    }
                    element.style.zIndex = this._getCalculatedZIndex(element);
                    // If the element no longer has any more sticky directions, remove sticky positioning and
                    // the sticky CSS class.
                    /** @type {?} */
                    var hasDirection = STICKY_DIRECTIONS.some(( /**
                     * @param {?} dir
                     * @return {?}
                     */function (/**
                     * @param {?} dir
                     * @return {?}
                     */ dir) { return !!element.style[dir]; }));
                    if (!hasDirection) {
                        element.style.position = '';
                        element.classList.remove(this._stickCellCss);
                    }
                };
                /**
                 * Adds the sticky styling to the element by adding the sticky style class, changing position
                 * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky
                 * direction and value.
                 * @param {?} element
                 * @param {?} dir
                 * @param {?} dirValue
                 * @return {?}
                 */
                StickyStyler.prototype._addStickyStyle = function (element, dir, dirValue) {
                    element.classList.add(this._stickCellCss);
                    element.style[dir] = dirValue + "px";
                    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';
                    element.style.zIndex = this._getCalculatedZIndex(element);
                };
                /**
                 * Calculate what the z-index should be for the element, depending on what directions (top,
                 * bottom, left, right) have been set. It should be true that elements with a top direction
                 * should have the highest index since these are elements like a table header. If any of those
                 * elements are also sticky in another direction, then they should appear above other elements
                 * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements
                 * (e.g. footer rows) should then be next in the ordering such that they are below the header
                 * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)
                 * should minimally increment so that they are above non-sticky elements but below top and bottom
                 * elements.
                 * @param {?} element
                 * @return {?}
                 */
                StickyStyler.prototype._getCalculatedZIndex = function (element) {
                    var e_10, _b;
                    /** @type {?} */
                    var zIndexIncrements = {
                        top: 100,
                        bottom: 10,
                        left: 1,
                        right: 1,
                    };
                    /** @type {?} */
                    var zIndex = 0;
                    try {
                        for (var STICKY_DIRECTIONS_1 = __values(STICKY_DIRECTIONS), STICKY_DIRECTIONS_1_1 = STICKY_DIRECTIONS_1.next(); !STICKY_DIRECTIONS_1_1.done; STICKY_DIRECTIONS_1_1 = STICKY_DIRECTIONS_1.next()) {
                            var dir = STICKY_DIRECTIONS_1_1.value;
                            if (element.style[dir]) {
                                zIndex += zIndexIncrements[dir];
                            }
                        }
                    }
                    catch (e_10_1) { e_10 = { error: e_10_1 }; }
                    finally {
                        try {
                            if (STICKY_DIRECTIONS_1_1 && !STICKY_DIRECTIONS_1_1.done && (_b = STICKY_DIRECTIONS_1.return)) _b.call(STICKY_DIRECTIONS_1);
                        }
                        finally { if (e_10) throw e_10.error; }
                    }
                    return zIndex ? "" + zIndex : '';
                };
                /**
                 * Gets the widths for each cell in the provided row.
                 * @param {?} row
                 * @return {?}
                 */
                StickyStyler.prototype._getCellWidths = function (row) {
                    /** @type {?} */
                    var cellWidths = [];
                    /** @type {?} */
                    var firstRowCells = row.children;
                    for (var i = 0; i < firstRowCells.length; i++) {
                        /** @type {?} */
                        var cell = ( /** @type {?} */(firstRowCells[i]));
                        cellWidths.push(cell.getBoundingClientRect().width);
                    }
                    return cellWidths;
                };
                /**
                 * Determines the left and right positions of each sticky column cell, which will be the
                 * accumulation of all sticky column cell widths to the left and right, respectively.
                 * Non-sticky cells do not need to have a value set since their positions will not be applied.
                 * @param {?} widths
                 * @param {?} stickyStates
                 * @return {?}
                 */
                StickyStyler.prototype._getStickyStartColumnPositions = function (widths, stickyStates) {
                    /** @type {?} */
                    var positions = [];
                    /** @type {?} */
                    var nextPosition = 0;
                    for (var i = 0; i < widths.length; i++) {
                        if (stickyStates[i]) {
                            positions[i] = nextPosition;
                            nextPosition += widths[i];
                        }
                    }
                    return positions;
                };
                /**
                 * Determines the left and right positions of each sticky column cell, which will be the
                 * accumulation of all sticky column cell widths to the left and right, respectively.
                 * Non-sticky cells do not need to have a value set since their positions will not be applied.
                 * @param {?} widths
                 * @param {?} stickyStates
                 * @return {?}
                 */
                StickyStyler.prototype._getStickyEndColumnPositions = function (widths, stickyStates) {
                    /** @type {?} */
                    var positions = [];
                    /** @type {?} */
                    var nextPosition = 0;
                    for (var i = widths.length; i > 0; i--) {
                        if (stickyStates[i]) {
                            positions[i] = nextPosition;
                            nextPosition += widths[i];
                        }
                    }
                    return positions;
                };
                return StickyStyler;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an error to be thrown when attempting to find an unexisting column.
             * \@docs-private
             * @param {?} id Id whose lookup failed.
             * @return {?}
             */
            function getTableUnknownColumnError(id) {
                return Error("Could not find column with id \"" + id + "\".");
            }
            /**
             * Returns an error to be thrown when two column definitions have the same name.
             * \@docs-private
             * @param {?} name
             * @return {?}
             */
            function getTableDuplicateColumnNameError(name) {
                return Error("Duplicate column definition name provided: \"" + name + "\".");
            }
            /**
             * Returns an error to be thrown when there are multiple rows that are missing a when function.
             * \@docs-private
             * @return {?}
             */
            function getTableMultipleDefaultRowDefsError() {
                return Error("There can only be one default row without a when predicate function.");
            }
            /**
             * Returns an error to be thrown when there are no matching row defs for a particular set of data.
             * \@docs-private
             * @param {?} data
             * @return {?}
             */
            function getTableMissingMatchingRowDefError(data) {
                return Error("Could not find a matching row definition for the" +
                    ("provided row data: " + JSON.stringify(data)));
            }
            /**
             * Returns an error to be thrown when there is no row definitions present in the content.
             * \@docs-private
             * @return {?}
             */
            function getTableMissingRowDefsError() {
                return Error('Missing definitions for header, footer, and row; ' +
                    'cannot determine which columns should be rendered.');
            }
            /**
             * Returns an error to be thrown when the data source does not match the compatible types.
             * \@docs-private
             * @return {?}
             */
            function getTableUnknownDataSourceError() {
                return Error("Provided data source did not match an array, Observable, or DataSource");
            }
            /**
             * Returns an error to be thrown when the text column cannot find a parent table to inject.
             * \@docs-private
             * @return {?}
             */
            function getTableTextColumnMissingParentTableError() {
                return Error("Text column could not find a parent table for registration.");
            }
            /**
             * Returns an error to be thrown when a table text column doesn't have a name.
             * \@docs-private
             * @return {?}
             */
            function getTableTextColumnMissingNameError() {
                return Error("Table text column must have a name.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Provides a handle for the table to grab the view container's ng-container to insert data rows.
             * \@docs-private
             */
            var DataRowOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?} elementRef
                 */
                function DataRowOutlet(viewContainer, elementRef) {
                    this.viewContainer = viewContainer;
                    this.elementRef = elementRef;
                }
                return DataRowOutlet;
            }());
            DataRowOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[rowOutlet]' },] },
            ];
            /** @nocollapse */
            DataRowOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Provides a handle for the table to grab the view container's ng-container to insert the header.
             * \@docs-private
             */
            var HeaderRowOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?} elementRef
                 */
                function HeaderRowOutlet(viewContainer, elementRef) {
                    this.viewContainer = viewContainer;
                    this.elementRef = elementRef;
                }
                return HeaderRowOutlet;
            }());
            HeaderRowOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[headerRowOutlet]' },] },
            ];
            /** @nocollapse */
            HeaderRowOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * Provides a handle for the table to grab the view container's ng-container to insert the footer.
             * \@docs-private
             */
            var FooterRowOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?} elementRef
                 */
                function FooterRowOutlet(viewContainer, elementRef) {
                    this.viewContainer = viewContainer;
                    this.elementRef = elementRef;
                }
                return FooterRowOutlet;
            }());
            FooterRowOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{ selector: '[footerRowOutlet]' },] },
            ];
            /** @nocollapse */
            FooterRowOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
            ]; };
            /**
             * The table template that can be used by the mat-table. Should not be used outside of the
             * material library.
             * \@docs-private
             * @type {?}
             */
            var CDK_TABLE_TEMPLATE = 
            // Note that according to MDN, the `caption` element has to be projected as the **first**
            // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption
            "\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n";
            /**
             * A data table that can render a header row, data rows, and a footer row.
             * Uses the dataSource input to determine the data to be rendered. The data can be provided either
             * as a data array, an Observable stream that emits the data array to render, or a DataSource with a
             * connect function that will return an Observable stream that emits the data array to render.
             * @template T
             */
            var CdkTable = /** @class */ (function () {
                /**
                 * @param {?} _differs
                 * @param {?} _changeDetectorRef
                 * @param {?} _elementRef
                 * @param {?} role
                 * @param {?} _dir
                 * @param {?} _document
                 * @param {?} _platform
                 */
                function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {
                    this._differs = _differs;
                    this._changeDetectorRef = _changeDetectorRef;
                    this._elementRef = _elementRef;
                    this._dir = _dir;
                    this._platform = _platform;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                    /**
                     * Map of all the user's defined columns (header, data, and footer cell template) identified by
                     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as
                     * any custom column definitions added to `_customColumnDefs`.
                     */
                    this._columnDefsByName = new Map();
                    /**
                     * Column definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                     * column definitions as *its* content child.
                     */
                    this._customColumnDefs = new Set();
                    /**
                     * Data row definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                     * built-in data rows as *its* content child.
                     */
                    this._customRowDefs = new Set();
                    /**
                     * Header row definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                     * built-in header rows as *its* content child.
                     */
                    this._customHeaderRowDefs = new Set();
                    /**
                     * Footer row definitions that were defined outside of the direct content children of the table.
                     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a
                     * built-in footer row as *its* content child.
                     */
                    this._customFooterRowDefs = new Set();
                    /**
                     * Whether the header row definition has been changed. Triggers an update to the header row after
                     * content is checked. Initialized as true so that the table renders the initial set of rows.
                     */
                    this._headerRowDefChanged = true;
                    /**
                     * Whether the footer row definition has been changed. Triggers an update to the footer row after
                     * content is checked. Initialized as true so that the table renders the initial set of rows.
                     */
                    this._footerRowDefChanged = true;
                    /**
                     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing
                     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with
                     * the cached `RenderRow` objects when possible, the row identity is preserved when the data
                     * and row template matches, which allows the `IterableDiffer` to check rows by reference
                     * and understand which rows are added/moved/removed.
                     *
                     * Implemented as a map of maps where the first key is the `data: T` object and the second is the
                     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that
                     * contains an array of created pairs. The array is necessary to handle cases where the data
                     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be
                     * stored.
                     */
                    this._cachedRenderRowsMap = new Map();
                    /**
                     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by
                     * table subclasses.
                     */
                    this.stickyCssClass = 'cdk-table-sticky';
                    this._multiTemplateDataRows = false;
                    // TODO(andrewseguin): Remove max value as the end index
                    //   and instead calculate the view on init and scroll.
                    /**
                     * Stream containing the latest information on what rows are being displayed on screen.
                     * Can be used by the data source to as a heuristic of what data should be provided.
                     *
                     * \@docs-private
                     */
                    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]({ start: 0, end: Number.MAX_VALUE });
                    if (!role) {
                        this._elementRef.nativeElement.setAttribute('role', 'grid');
                    }
                    this._document = _document;
                    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';
                }
                Object.defineProperty(CdkTable.prototype, "trackBy", {
                    /**
                     * Tracking function that will be used to check the differences in data changes. Used similarly
                     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data
                     * relative to the function to know if a row should be added/removed/moved.
                     * Accepts a function that takes two parameters, `index` and `item`.
                     * @return {?}
                     */
                    get: function () {
                        return this._trackByFn;
                    },
                    /**
                     * @param {?} fn
                     * @return {?}
                     */
                    set: function (fn) {
                        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && fn != null && typeof fn !== 'function' && ( /** @type {?} */(console)) &&
                            ( /** @type {?} */(console.warn))) {
                            console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ".");
                        }
                        this._trackByFn = fn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTable.prototype, "dataSource", {
                    /**
                     * The table's source of data, which can be provided in three ways (in order of complexity):
                     *   - Simple data array (each object represents one table row)
                     *   - Stream that emits a data array each time the array changes
                     *   - `DataSource` object that implements the connect/disconnect interface.
                     *
                     * If a data array is provided, the table must be notified when the array's objects are
                     * added, removed, or moved. This can be done by calling the `renderRows()` function which will
                     * render the diff since the last table render. If the data array reference is changed, the table
                     * will automatically trigger an update to the rows.
                     *
                     * When providing an Observable stream, the table will trigger an update automatically when the
                     * stream emits a new array of data.
                     *
                     * Finally, when providing a `DataSource` object, the table will use the Observable stream
                     * provided by the connect function and trigger updates when that stream emits new data array
                     * values. During the table's ngOnDestroy or when the data source is removed from the table, the
                     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any
                     * subscriptions registered during the connect process).
                     * @return {?}
                     */
                    get: function () {
                        return this._dataSource;
                    },
                    /**
                     * @param {?} dataSource
                     * @return {?}
                     */
                    set: function (dataSource) {
                        if (this._dataSource !== dataSource) {
                            this._switchDataSource(dataSource);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTable.prototype, "multiTemplateDataRows", {
                    /**
                     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'
                     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each
                     * dataobject will render the first row that evaluates its when predicate to true, in the order
                     * defined in the table, or otherwise the default row which does not have a when predicate.
                     * @return {?}
                     */
                    get: function () {
                        return this._multiTemplateDataRows;
                    },
                    /**
                     * @param {?} v
                     * @return {?}
                     */
                    set: function (v) {
                        this._multiTemplateDataRows = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(v);
                        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),
                        // this setter will be invoked before the row outlet has been defined hence the null check.
                        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {
                            this._forceRenderDataRows();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTable.prototype.ngOnInit = function () {
                    var _this = this;
                    this._setupStickyStyler();
                    if (this._isNativeHtmlTable) {
                        this._applyNativeTableSections();
                    }
                    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If
                    // the user has provided a custom trackBy, return the result of that function as evaluated
                    // with the values of the `RenderRow`'s data and index.
                    this._dataDiffer = this._differs.find([]).create(( /**
                     * @param {?} _i
                     * @param {?} dataRow
                     * @return {?}
                     */function (_i, dataRow) {
                        return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;
                    }));
                };
                /**
                 * @return {?}
                 */
                CdkTable.prototype.ngAfterContentChecked = function () {
                    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.
                    this._cacheRowDefs();
                    this._cacheColumnDefs();
                    // Make sure that the user has at least added header, footer, or data row def.
                    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {
                        throw getTableMissingRowDefsError();
                    }
                    // Render updates if the list of columns have been changed for the header, row, or footer defs.
                    this._renderUpdatedColumns();
                    // If the header row definition has been changed, trigger a render to the header row.
                    if (this._headerRowDefChanged) {
                        this._forceRenderHeaderRows();
                        this._headerRowDefChanged = false;
                    }
                    // If the footer row definition has been changed, trigger a render to the footer row.
                    if (this._footerRowDefChanged) {
                        this._forceRenderFooterRows();
                        this._footerRowDefChanged = false;
                    }
                    // If there is a data source and row definitions, connect to the data source unless a
                    // connection has already been made.
                    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {
                        this._observeRenderChanges();
                    }
                    this._checkStickyStates();
                };
                /**
                 * @return {?}
                 */
                CdkTable.prototype.ngOnDestroy = function () {
                    this._rowOutlet.viewContainer.clear();
                    this._headerRowOutlet.viewContainer.clear();
                    this._footerRowOutlet.viewContainer.clear();
                    this._cachedRenderRowsMap.clear();
                    this._onDestroy.next();
                    this._onDestroy.complete();
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["isDataSource"])(this.dataSource)) {
                        this.dataSource.disconnect(this);
                    }
                };
                /**
                 * Renders rows based on the table's latest set of data, which was either provided directly as an
                 * input or retrieved through an Observable stream (directly or from a DataSource).
                 * Checks for differences in the data since the last diff to perform only the necessary
                 * changes (add/remove/move rows).
                 *
                 * If the table's data source is a DataSource or Observable, this will be invoked automatically
                 * each time the provided Observable stream emits a new data array. Otherwise if your data is
                 * an array, this function will need to be called to render any changes.
                 * @return {?}
                 */
                CdkTable.prototype.renderRows = function () {
                    var _this = this;
                    this._renderRows = this._getAllRenderRows();
                    /** @type {?} */
                    var changes = this._dataDiffer.diff(this._renderRows);
                    if (!changes) {
                        return;
                    }
                    /** @type {?} */
                    var viewContainer = this._rowOutlet.viewContainer;
                    changes.forEachOperation(( /**
                     * @param {?} record
                     * @param {?} prevIndex
                     * @param {?} currentIndex
                     * @return {?}
                     */function (record, prevIndex, currentIndex) {
                        if (record.previousIndex == null) {
                            _this._insertRow(record.item, ( /** @type {?} */(currentIndex)));
                        }
                        else if (currentIndex == null) {
                            viewContainer.remove(( /** @type {?} */(prevIndex)));
                        }
                        else {
                            /** @type {?} */
                            var view = ( /** @type {?} */(viewContainer.get(( /** @type {?} */(prevIndex)))));
                            viewContainer.move(( /** @type {?} */(view)), currentIndex);
                        }
                    }));
                    // Update the meta context of a row's context data (index, count, first, last, ...)
                    this._updateRowIndexContext();
                    // Update rows that did not get added/removed/moved but may have had their identity changed,
                    // e.g. if trackBy matched data on some property but the actual data reference changed.
                    changes.forEachIdentityChange(( /**
                     * @param {?} record
                     * @return {?}
                     */function (record) {
                        /** @type {?} */
                        var rowView = ( /** @type {?} */(viewContainer.get(( /** @type {?} */(record.currentIndex)))));
                        rowView.context.$implicit = record.item.data;
                    }));
                    this.updateStickyColumnStyles();
                };
                /**
                 * Sets the header row definition to be used. Overrides the header row definition gathered by
                 * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the
                 * table's content is checked.
                 * \@docs-private
                 * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead
                 * \@breaking-change 8.0.0
                 * @param {?} headerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.setHeaderRowDef = function (headerRowDef) {
                    this._customHeaderRowDefs = new Set([headerRowDef]);
                    this._headerRowDefChanged = true;
                };
                /**
                 * Sets the footer row definition to be used. Overrides the footer row definition gathered by
                 * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the
                 * table's content is checked.
                 * \@docs-private
                 * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead
                 * \@breaking-change 8.0.0
                 * @param {?} footerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.setFooterRowDef = function (footerRowDef) {
                    this._customFooterRowDefs = new Set([footerRowDef]);
                    this._footerRowDefChanged = true;
                };
                /**
                 * Adds a column definition that was not included as part of the content children.
                 * @param {?} columnDef
                 * @return {?}
                 */
                CdkTable.prototype.addColumnDef = function (columnDef) {
                    this._customColumnDefs.add(columnDef);
                };
                /**
                 * Removes a column definition that was not included as part of the content children.
                 * @param {?} columnDef
                 * @return {?}
                 */
                CdkTable.prototype.removeColumnDef = function (columnDef) {
                    this._customColumnDefs.delete(columnDef);
                };
                /**
                 * Adds a row definition that was not included as part of the content children.
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype.addRowDef = function (rowDef) {
                    this._customRowDefs.add(rowDef);
                };
                /**
                 * Removes a row definition that was not included as part of the content children.
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype.removeRowDef = function (rowDef) {
                    this._customRowDefs.delete(rowDef);
                };
                /**
                 * Adds a header row definition that was not included as part of the content children.
                 * @param {?} headerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.addHeaderRowDef = function (headerRowDef) {
                    this._customHeaderRowDefs.add(headerRowDef);
                    this._headerRowDefChanged = true;
                };
                /**
                 * Removes a header row definition that was not included as part of the content children.
                 * @param {?} headerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.removeHeaderRowDef = function (headerRowDef) {
                    this._customHeaderRowDefs.delete(headerRowDef);
                    this._headerRowDefChanged = true;
                };
                /**
                 * Adds a footer row definition that was not included as part of the content children.
                 * @param {?} footerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.addFooterRowDef = function (footerRowDef) {
                    this._customFooterRowDefs.add(footerRowDef);
                    this._footerRowDefChanged = true;
                };
                /**
                 * Removes a footer row definition that was not included as part of the content children.
                 * @param {?} footerRowDef
                 * @return {?}
                 */
                CdkTable.prototype.removeFooterRowDef = function (footerRowDef) {
                    this._customFooterRowDefs.delete(footerRowDef);
                    this._footerRowDefChanged = true;
                };
                /**
                 * Updates the header sticky styles. First resets all applied styles with respect to the cells
                 * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is
                 * automatically called when the header row changes its displayed set of columns, or if its
                 * sticky input changes. May be called manually for cases where the cell content changes outside
                 * of these events.
                 * @return {?}
                 */
                CdkTable.prototype.updateStickyHeaderRowStyles = function () {
                    /** @type {?} */
                    var headerRows = this._getRenderedRows(this._headerRowOutlet);
                    /** @type {?} */
                    var tableElement = ( /** @type {?} */(this._elementRef.nativeElement));
                    // Hide the thead element if there are no header rows. This is necessary to satisfy
                    // overzealous a11y checkers that fail because the `rowgroup` element does not contain
                    // required child `row`.
                    /** @type {?} */
                    var thead = tableElement.querySelector('thead');
                    if (thead) {
                        thead.style.display = headerRows.length ? '' : 'none';
                    }
                    /** @type {?} */
                    var stickyStates = this._headerRowDefs.map(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.sticky; }));
                    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);
                    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');
                    // Reset the dirty state of the sticky input change since it has been used.
                    this._headerRowDefs.forEach(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.resetStickyChanged(); }));
                };
                /**
                 * Updates the footer sticky styles. First resets all applied styles with respect to the cells
                 * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is
                 * automatically called when the footer row changes its displayed set of columns, or if its
                 * sticky input changes. May be called manually for cases where the cell content changes outside
                 * of these events.
                 * @return {?}
                 */
                CdkTable.prototype.updateStickyFooterRowStyles = function () {
                    /** @type {?} */
                    var footerRows = this._getRenderedRows(this._footerRowOutlet);
                    /** @type {?} */
                    var tableElement = ( /** @type {?} */(this._elementRef.nativeElement));
                    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy
                    // overzealous a11y checkers that fail because the `rowgroup` element does not contain
                    // required child `row`.
                    /** @type {?} */
                    var tfoot = tableElement.querySelector('tfoot');
                    if (tfoot) {
                        tfoot.style.display = footerRows.length ? '' : 'none';
                    }
                    /** @type {?} */
                    var stickyStates = this._footerRowDefs.map(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.sticky; }));
                    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);
                    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');
                    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);
                    // Reset the dirty state of the sticky input change since it has been used.
                    this._footerRowDefs.forEach(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.resetStickyChanged(); }));
                };
                /**
                 * Updates the column sticky styles. First resets all applied styles with respect to the cells
                 * sticking to the left and right. Then sticky styles are added for the left and right according
                 * to the column definitions for each cell in each row. This is automatically called when
                 * the data source provides a new set of data or when a column definition changes its sticky
                 * input. May be called manually for cases where the cell content changes outside of these events.
                 * @return {?}
                 */
                CdkTable.prototype.updateStickyColumnStyles = function () {
                    var _this = this;
                    /** @type {?} */
                    var headerRows = this._getRenderedRows(this._headerRowOutlet);
                    /** @type {?} */
                    var dataRows = this._getRenderedRows(this._rowOutlet);
                    /** @type {?} */
                    var footerRows = this._getRenderedRows(this._footerRowOutlet);
                    // Clear the left and right positioning from all columns in the table across all rows since
                    // sticky columns span across all table sections (header, data, footer)
                    this._stickyStyler.clearStickyPositioning(__spread(headerRows, dataRows, footerRows), ['left', 'right']);
                    // Update the sticky styles for each header row depending on the def's sticky state
                    headerRows.forEach(( /**
                     * @param {?} headerRow
                     * @param {?} i
                     * @return {?}
                     */function (headerRow, i) {
                        _this._addStickyColumnStyles([headerRow], _this._headerRowDefs[i]);
                    }));
                    // Update the sticky styles for each data row depending on its def's sticky state
                    this._rowDefs.forEach(( /**
                     * @param {?} rowDef
                     * @return {?}
                     */function (/**
                     * @param {?} rowDef
                     * @return {?}
                     */ rowDef) {
                        // Collect all the rows rendered with this row definition.
                        /** @type {?} */
                        var rows = [];
                        for (var i = 0; i < dataRows.length; i++) {
                            if (_this._renderRows[i].rowDef === rowDef) {
                                rows.push(dataRows[i]);
                            }
                        }
                        _this._addStickyColumnStyles(rows, rowDef);
                    }));
                    // Update the sticky styles for each footer row depending on the def's sticky state
                    footerRows.forEach(( /**
                     * @param {?} footerRow
                     * @param {?} i
                     * @return {?}
                     */function (footerRow, i) {
                        _this._addStickyColumnStyles([footerRow], _this._footerRowDefs[i]);
                    }));
                    // Reset the dirty state of the sticky input change since it has been used.
                    Array.from(this._columnDefsByName.values()).forEach(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.resetStickyChanged(); }));
                };
                /**
                 * Get the list of RenderRow objects to render according to the current list of data and defined
                 * row definitions. If the previous list already contained a particular pair, it should be reused
                 * so that the differ equates their references.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._getAllRenderRows = function () {
                    /** @type {?} */
                    var renderRows = [];
                    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the
                    // new cache while unused ones can be picked up by garbage collection.
                    /** @type {?} */
                    var prevCachedRenderRows = this._cachedRenderRowsMap;
                    this._cachedRenderRowsMap = new Map();
                    // For each data object, get the list of rows that should be rendered, represented by the
                    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.
                    for (var i = 0; i < this._data.length; i++) {
                        /** @type {?} */
                        var data = this._data[i];
                        /** @type {?} */
                        var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));
                        if (!this._cachedRenderRowsMap.has(data)) {
                            this._cachedRenderRowsMap.set(data, new WeakMap());
                        }
                        for (var j = 0; j < renderRowsForData.length; j++) {
                            /** @type {?} */
                            var renderRow = renderRowsForData[j];
                            /** @type {?} */
                            var cache = ( /** @type {?} */(this._cachedRenderRowsMap.get(renderRow.data)));
                            if (cache.has(renderRow.rowDef)) {
                                ( /** @type {?} */(cache.get(renderRow.rowDef))).push(renderRow);
                            }
                            else {
                                cache.set(renderRow.rowDef, [renderRow]);
                            }
                            renderRows.push(renderRow);
                        }
                    }
                    return renderRows;
                };
                /**
                 * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that
                 * should be rendered for this data. Reuses the cached RenderRow objects if they match the same
                 * `(T, CdkRowDef)` pair.
                 * @private
                 * @param {?} data
                 * @param {?} dataIndex
                 * @param {?=} cache
                 * @return {?}
                 */
                CdkTable.prototype._getRenderRowsForData = function (data, dataIndex, cache) {
                    /** @type {?} */
                    var rowDefs = this._getRowDefs(data, dataIndex);
                    return rowDefs.map(( /**
                     * @param {?} rowDef
                     * @return {?}
                     */function (/**
                     * @param {?} rowDef
                     * @return {?}
                     */ rowDef) {
                        /** @type {?} */
                        var cachedRenderRows = (cache && cache.has(rowDef)) ? ( /** @type {?} */(cache.get(rowDef))) : [];
                        if (cachedRenderRows.length) {
                            /** @type {?} */
                            var dataRow = ( /** @type {?} */(cachedRenderRows.shift()));
                            dataRow.dataIndex = dataIndex;
                            return dataRow;
                        }
                        else {
                            return { data: data, rowDef: rowDef, dataIndex: dataIndex };
                        }
                    }));
                };
                /**
                 * Update the map containing the content's column definitions.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._cacheColumnDefs = function () {
                    var _this = this;
                    this._columnDefsByName.clear();
                    /** @type {?} */
                    var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);
                    columnDefs.forEach(( /**
                     * @param {?} columnDef
                     * @return {?}
                     */function (/**
                     * @param {?} columnDef
                     * @return {?}
                     */ columnDef) {
                        if (_this._columnDefsByName.has(columnDef.name)) {
                            throw getTableDuplicateColumnNameError(columnDef.name);
                        }
                        _this._columnDefsByName.set(columnDef.name, columnDef);
                    }));
                };
                /**
                 * Update the list of all available row definitions that can be used.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._cacheRowDefs = function () {
                    this._headerRowDefs =
                        mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);
                    this._footerRowDefs =
                        mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);
                    this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);
                    // After all row definitions are determined, find the row definition to be considered default.
                    /** @type {?} */
                    var defaultRowDefs = this._rowDefs.filter(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return !def.when; }));
                    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {
                        throw getTableMultipleDefaultRowDefsError();
                    }
                    this._defaultRowDef = defaultRowDefs[0];
                };
                /**
                 * Check if the header, data, or footer rows have changed what columns they want to display or
                 * whether the sticky states have changed for the header or footer. If there is a diff, then
                 * re-render that section.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._renderUpdatedColumns = function () {
                    /** @type {?} */
                    var columnsDiffReducer = ( /**
                     * @param {?} acc
                     * @param {?} def
                     * @return {?}
                     */function (acc, def) { return acc || !!def.getColumnsDiff(); });
                    // Force re-render data rows if the list of column definitions have changed.
                    if (this._rowDefs.reduce(columnsDiffReducer, false)) {
                        this._forceRenderDataRows();
                    }
                    // Force re-render header/footer rows if the list of column definitions have changed..
                    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {
                        this._forceRenderHeaderRows();
                    }
                    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {
                        this._forceRenderFooterRows();
                    }
                };
                /**
                 * Switch to the provided data source by resetting the data and unsubscribing from the current
                 * render change subscription if one exists. If the data source is null, interpret this by
                 * clearing the row outlet. Otherwise start listening for new data.
                 * @private
                 * @param {?} dataSource
                 * @return {?}
                 */
                CdkTable.prototype._switchDataSource = function (dataSource) {
                    this._data = [];
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["isDataSource"])(this.dataSource)) {
                        this.dataSource.disconnect(this);
                    }
                    // Stop listening for data from the previous data source.
                    if (this._renderChangeSubscription) {
                        this._renderChangeSubscription.unsubscribe();
                        this._renderChangeSubscription = null;
                    }
                    if (!dataSource) {
                        if (this._dataDiffer) {
                            this._dataDiffer.diff([]);
                        }
                        this._rowOutlet.viewContainer.clear();
                    }
                    this._dataSource = dataSource;
                };
                /**
                 * Set up a subscription for the data provided by the data source.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._observeRenderChanges = function () {
                    var _this = this;
                    // If no data source has been set, there is nothing to observe for changes.
                    if (!this.dataSource) {
                        return;
                    }
                    /** @type {?} */
                    var dataStream;
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["isDataSource"])(this.dataSource)) {
                        dataStream = this.dataSource.connect(this);
                    }
                    else if (this.dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_6__["Observable"]) {
                        dataStream = this.dataSource;
                    }
                    else if (Array.isArray(this.dataSource)) {
                        dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(this.dataSource);
                    }
                    if (dataStream === undefined) {
                        throw getTableUnknownDataSourceError();
                    }
                    this._renderChangeSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._onDestroy)).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (/**
                     * @param {?} data
                     * @return {?}
                     */ data) {
                        _this._data = data || [];
                        _this.renderRows();
                    }));
                };
                /**
                 * Clears any existing content in the header row outlet and creates a new embedded view
                 * in the outlet using the header row definition.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._forceRenderHeaderRows = function () {
                    var _this = this;
                    // Clear the header row outlet if any content exists.
                    if (this._headerRowOutlet.viewContainer.length > 0) {
                        this._headerRowOutlet.viewContainer.clear();
                    }
                    this._headerRowDefs.forEach(( /**
                     * @param {?} def
                     * @param {?} i
                     * @return {?}
                     */function (def, i) { return _this._renderRow(_this._headerRowOutlet, def, i); }));
                    this.updateStickyHeaderRowStyles();
                    this.updateStickyColumnStyles();
                };
                /**
                 * Clears any existing content in the footer row outlet and creates a new embedded view
                 * in the outlet using the footer row definition.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._forceRenderFooterRows = function () {
                    var _this = this;
                    // Clear the footer row outlet if any content exists.
                    if (this._footerRowOutlet.viewContainer.length > 0) {
                        this._footerRowOutlet.viewContainer.clear();
                    }
                    this._footerRowDefs.forEach(( /**
                     * @param {?} def
                     * @param {?} i
                     * @return {?}
                     */function (def, i) { return _this._renderRow(_this._footerRowOutlet, def, i); }));
                    this.updateStickyFooterRowStyles();
                    this.updateStickyColumnStyles();
                };
                /**
                 * Adds the sticky column styles for the rows according to the columns' stick states.
                 * @private
                 * @param {?} rows
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype._addStickyColumnStyles = function (rows, rowDef) {
                    var _this = this;
                    /** @type {?} */
                    var columnDefs = Array.from(rowDef.columns || []).map(( /**
                     * @param {?} columnName
                     * @return {?}
                     */function (/**
                     * @param {?} columnName
                     * @return {?}
                     */ columnName) {
                        /** @type {?} */
                        var columnDef = _this._columnDefsByName.get(columnName);
                        if (!columnDef) {
                            throw getTableUnknownColumnError(columnName);
                        }
                        return ( /** @type {?} */(columnDef));
                    }));
                    /** @type {?} */
                    var stickyStartStates = columnDefs.map(( /**
                     * @param {?} columnDef
                     * @return {?}
                     */function (/**
                     * @param {?} columnDef
                     * @return {?}
                     */ columnDef) { return columnDef.sticky; }));
                    /** @type {?} */
                    var stickyEndStates = columnDefs.map(( /**
                     * @param {?} columnDef
                     * @return {?}
                     */function (/**
                     * @param {?} columnDef
                     * @return {?}
                     */ columnDef) { return columnDef.stickyEnd; }));
                    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);
                };
                /**
                 * Gets the list of rows that have been rendered in the row outlet.
                 * @param {?} rowOutlet
                 * @return {?}
                 */
                CdkTable.prototype._getRenderedRows = function (rowOutlet) {
                    /** @type {?} */
                    var renderedRows = [];
                    for (var i = 0; i < rowOutlet.viewContainer.length; i++) {
                        /** @type {?} */
                        var viewRef = (( /** @type {?} */(( /** @type {?} */(rowOutlet.viewContainer.get(i))))));
                        renderedRows.push(viewRef.rootNodes[0]);
                    }
                    return renderedRows;
                };
                /**
                 * Get the matching row definitions that should be used for this row data. If there is only
                 * one row definition, it is returned. Otherwise, find the row definitions that has a when
                 * predicate that returns true with the data. If none return true, return the default row
                 * definition.
                 * @param {?} data
                 * @param {?} dataIndex
                 * @return {?}
                 */
                CdkTable.prototype._getRowDefs = function (data, dataIndex) {
                    if (this._rowDefs.length == 1) {
                        return [this._rowDefs[0]];
                    }
                    /** @type {?} */
                    var rowDefs = [];
                    if (this.multiTemplateDataRows) {
                        rowDefs = this._rowDefs.filter(( /**
                         * @param {?} def
                         * @return {?}
                         */function (/**
                         * @param {?} def
                         * @return {?}
                         */ def) { return !def.when || def.when(dataIndex, data); }));
                    }
                    else {
                        /** @type {?} */
                        var rowDef = this._rowDefs.find(( /**
                         * @param {?} def
                         * @return {?}
                         */function (/**
                         * @param {?} def
                         * @return {?}
                         */ def) { return def.when && def.when(dataIndex, data); })) || this._defaultRowDef;
                        if (rowDef) {
                            rowDefs.push(rowDef);
                        }
                    }
                    if (!rowDefs.length) {
                        throw getTableMissingMatchingRowDefError(data);
                    }
                    return rowDefs;
                };
                /**
                 * Create the embedded view for the data row template and place it in the correct index location
                 * within the data row view container.
                 * @private
                 * @param {?} renderRow
                 * @param {?} renderIndex
                 * @return {?}
                 */
                CdkTable.prototype._insertRow = function (renderRow, renderIndex) {
                    /** @type {?} */
                    var rowDef = renderRow.rowDef;
                    /** @type {?} */
                    var context = { $implicit: renderRow.data };
                    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);
                };
                /**
                 * Creates a new row template in the outlet and fills it with the set of cell templates.
                 * Optionally takes a context to provide to the row and cells, as well as an optional index
                 * of where to place the new row template in the outlet.
                 * @private
                 * @param {?} outlet
                 * @param {?} rowDef
                 * @param {?} index
                 * @param {?=} context
                 * @return {?}
                 */
                CdkTable.prototype._renderRow = function (outlet, rowDef, index, context) {
                    var e_11, _b;
                    if (context === void 0) { context = {}; }
                    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView
                    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);
                    try {
                        for (var _c = __values(this._getCellTemplates(rowDef)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var cellTemplate = _d.value;
                            if (CdkCellOutlet.mostRecentCellOutlet) {
                                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);
                            }
                        }
                    }
                    catch (e_11_1) { e_11 = { error: e_11_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_11) throw e_11.error; }
                    }
                    this._changeDetectorRef.markForCheck();
                };
                /**
                 * Updates the index-related context for each row to reflect any changes in the index of the rows,
                 * e.g. first/last/even/odd.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._updateRowIndexContext = function () {
                    /** @type {?} */
                    var viewContainer = this._rowOutlet.viewContainer;
                    for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {
                        /** @type {?} */
                        var viewRef = ( /** @type {?} */(viewContainer.get(renderIndex)));
                        /** @type {?} */
                        var context = ( /** @type {?} */(viewRef.context));
                        context.count = count;
                        context.first = renderIndex === 0;
                        context.last = renderIndex === count - 1;
                        context.even = renderIndex % 2 === 0;
                        context.odd = !context.even;
                        if (this.multiTemplateDataRows) {
                            context.dataIndex = this._renderRows[renderIndex].dataIndex;
                            context.renderIndex = renderIndex;
                        }
                        else {
                            context.index = this._renderRows[renderIndex].dataIndex;
                        }
                    }
                };
                /**
                 * Gets the column definitions for the provided row def.
                 * @private
                 * @param {?} rowDef
                 * @return {?}
                 */
                CdkTable.prototype._getCellTemplates = function (rowDef) {
                    var _this = this;
                    if (!rowDef || !rowDef.columns) {
                        return [];
                    }
                    return Array.from(rowDef.columns, ( /**
                     * @param {?} columnId
                     * @return {?}
                     */function (/**
                     * @param {?} columnId
                     * @return {?}
                     */ columnId) {
                        /** @type {?} */
                        var column = _this._columnDefsByName.get(columnId);
                        if (!column) {
                            throw getTableUnknownColumnError(columnId);
                        }
                        return rowDef.extractCellTemplate(column);
                    }));
                };
                /**
                 * Adds native table sections (e.g. tbody) and moves the row outlets into them.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._applyNativeTableSections = function () {
                    var e_12, _b;
                    /** @type {?} */
                    var documentFragment = this._document.createDocumentFragment();
                    /** @type {?} */
                    var sections = [
                        { tag: 'thead', outlet: this._headerRowOutlet },
                        { tag: 'tbody', outlet: this._rowOutlet },
                        { tag: 'tfoot', outlet: this._footerRowOutlet },
                    ];
                    try {
                        for (var sections_1 = __values(sections), sections_1_1 = sections_1.next(); !sections_1_1.done; sections_1_1 = sections_1.next()) {
                            var section = sections_1_1.value;
                            /** @type {?} */
                            var element = this._document.createElement(section.tag);
                            element.setAttribute('role', 'rowgroup');
                            element.appendChild(section.outlet.elementRef.nativeElement);
                            documentFragment.appendChild(element);
                        }
                    }
                    catch (e_12_1) { e_12 = { error: e_12_1 }; }
                    finally {
                        try {
                            if (sections_1_1 && !sections_1_1.done && (_b = sections_1.return)) _b.call(sections_1);
                        }
                        finally { if (e_12) throw e_12.error; }
                    }
                    // Use a DocumentFragment so we don't hit the DOM on each iteration.
                    this._elementRef.nativeElement.appendChild(documentFragment);
                };
                /**
                 * Forces a re-render of the data rows. Should be called in cases where there has been an input
                 * change that affects the evaluation of which rows should be rendered, e.g. toggling
                 * `multiTemplateDataRows` or adding/removing row definitions.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._forceRenderDataRows = function () {
                    this._dataDiffer.diff([]);
                    this._rowOutlet.viewContainer.clear();
                    this.renderRows();
                    this.updateStickyColumnStyles();
                };
                /**
                 * Checks if there has been a change in sticky states since last check and applies the correct
                 * sticky styles. Since checking resets the "dirty" state, this should only be performed once
                 * during a change detection and after the inputs are settled (after content check).
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._checkStickyStates = function () {
                    /** @type {?} */
                    var stickyCheckReducer = ( /**
                     * @param {?} acc
                     * @param {?} d
                     * @return {?}
                     */function (acc, d) {
                        return acc || d.hasStickyChanged();
                    });
                    // Note that the check needs to occur for every definition since it notifies the definition
                    // that it can reset its dirty state. Using another operator like `some` may short-circuit
                    // remaining definitions and leave them in an unchecked state.
                    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {
                        this.updateStickyHeaderRowStyles();
                    }
                    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {
                        this.updateStickyFooterRowStyles();
                    }
                    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {
                        this.updateStickyColumnStyles();
                    }
                };
                /**
                 * Creates the sticky styler that will be used for sticky rows and columns. Listens
                 * for directionality changes and provides the latest direction to the styler. Re-applies column
                 * stickiness when directionality changes.
                 * @private
                 * @return {?}
                 */
                CdkTable.prototype._setupStickyStyler = function () {
                    var _this = this;
                    /** @type {?} */
                    var direction = this._dir ? this._dir.value : 'ltr';
                    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);
                    (this._dir ? this._dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])())
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._onDestroy))
                        .subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (/**
                 * @param {?} value
                 * @return {?}
                 */ value) {
                        _this._stickyStyler.direction = value;
                        _this.updateStickyColumnStyles();
                    }));
                };
                return CdkTable;
            }());
            CdkTable.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-table, table[cdk-table]',
                            exportAs: 'cdkTable',
                            template: CDK_TABLE_TEMPLATE,
                            host: {
                                'class': 'cdk-table',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // The "OnPush" status for the `MatTable` component is effectively a noop, so we are removing it.
                            // The view for `MatTable` consists entirely of templates declared in other views. As they are
                            // declared elsewhere, they are checked when their declaration points are checked.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                        },] },
            ];
            /** @nocollapse */
            CdkTable.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
                { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['role',] }] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],] }] },
                { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"] }
            ]; };
            CdkTable.propDecorators = {
                trackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                multiTemplateDataRows: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                _rowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [DataRowOutlet, { static: true },] }],
                _headerRowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [HeaderRowOutlet, { static: true },] }],
                _footerRowOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [FooterRowOutlet, { static: true },] }],
                _contentColumnDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkColumnDef,] }],
                _contentRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkRowDef,] }],
                _contentHeaderRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkHeaderRowDef,] }],
                _contentFooterRowDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [CdkFooterRowDef,] }]
            };
            /**
             * Utility function that gets a merged list of the entries in a QueryList and values of a Set.
             * @template T
             * @param {?} queryList
             * @param {?} set
             * @return {?}
             */
            function mergeQueryListAndSet(queryList, set) {
                return queryList.toArray().concat(Array.from(set));
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token that can be used to specify the text column options.
             * @type {?}
             */
            var TEXT_COLUMN_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('text-column-options');
            /**
             * Column that simply shows text content for the header and row cells. Assumes that the table
             * is using the native table implementation (`<table>`).
             *
             * By default, the name of this column will be the header text and data property accessor.
             * The header text can be overridden with the `headerText` input. Cell values can be overridden with
             * the `dataAccessor` input. Change the text justification to the start or end using the `justify`
             * input.
             * @template T
             */
            var CdkTextColumn = /** @class */ (function () {
                /**
                 * @param {?} _table
                 * @param {?} _options
                 */
                function CdkTextColumn(_table, _options) {
                    this._table = _table;
                    this._options = _options;
                    /**
                     * Alignment of the cell values.
                     */
                    this.justify = 'start';
                    this._options = _options || {};
                }
                Object.defineProperty(CdkTextColumn.prototype, "name", {
                    /**
                     * Column name that should be used to reference this column.
                     * @return {?}
                     */
                    get: function () {
                        return this._name;
                    },
                    /**
                     * @param {?} name
                     * @return {?}
                     */
                    set: function (name) {
                        this._name = name;
                        // With Ivy, inputs can be initialized before static query results are
                        // available. In that case, we defer the synchronization until "ngOnInit" fires.
                        this._syncColumnDefName();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTextColumn.prototype.ngOnInit = function () {
                    this._syncColumnDefName();
                    if (this.headerText === undefined) {
                        this.headerText = this._createDefaultHeaderText();
                    }
                    if (!this.dataAccessor) {
                        this.dataAccessor =
                            this._options.defaultDataAccessor || (( /**
                             * @param {?} data
                             * @param {?} name
                             * @return {?}
                             */function (data, name) { return (( /** @type {?} */(data)))[name]; }));
                    }
                    if (this._table) {
                        // Provide the cell and headerCell directly to the table with the static `ViewChild` query,
                        // since the columnDef will not pick up its content by the time the table finishes checking
                        // its content and initializing the rows.
                        this.columnDef.cell = this.cell;
                        this.columnDef.headerCell = this.headerCell;
                        this._table.addColumnDef(this.columnDef);
                    }
                    else {
                        throw getTableTextColumnMissingParentTableError();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTextColumn.prototype.ngOnDestroy = function () {
                    if (this._table) {
                        this._table.removeColumnDef(this.columnDef);
                    }
                };
                /**
                 * Creates a default header text. Use the options' header text transformation function if one
                 * has been provided. Otherwise simply capitalize the column name.
                 * @return {?}
                 */
                CdkTextColumn.prototype._createDefaultHeaderText = function () {
                    /** @type {?} */
                    var name = this.name;
                    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && !name) {
                        throw getTableTextColumnMissingNameError();
                    }
                    if (this._options && this._options.defaultHeaderTextTransform) {
                        return this._options.defaultHeaderTextTransform(name);
                    }
                    return name[0].toUpperCase() + name.slice(1);
                };
                /**
                 * Synchronizes the column definition name with the text column name.
                 * @private
                 * @return {?}
                 */
                CdkTextColumn.prototype._syncColumnDefName = function () {
                    if (this.columnDef) {
                        this.columnDef.name = this.name;
                    }
                };
                return CdkTextColumn;
            }());
            CdkTextColumn.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{ selector: 'cdk-text-column',
                            template: "\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  ",
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                            // Change detection is intentionally not set to OnPush. This component's template will be provided
                            // to the table to be inserted into its view. This is problematic when change detection runs since
                            // the bindings in this template will be evaluated _after_ the table's view is evaluated, which
                            // mean's the template in the table's view will not have the updated value (and in fact will cause
                            // an ExpressionChangedAfterItHasBeenCheckedError).
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                        },] },
            ];
            /** @nocollapse */
            CdkTextColumn.ctorParameters = function () { return [
                { type: CdkTable, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [TEXT_COLUMN_OPTIONS,] }] }
            ]; };
            CdkTextColumn.propDecorators = {
                name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                headerText: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                dataAccessor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                justify: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
                columnDef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [CdkColumnDef, { static: true },] }],
                cell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [CdkCellDef, { static: true },] }],
                headerCell: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [CdkHeaderCellDef, { static: true },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var EXPORTED_DECLARATIONS = [
                CdkTable,
                CdkRowDef,
                CdkCellDef,
                CdkCellOutlet,
                CdkHeaderCellDef,
                CdkFooterCellDef,
                CdkColumnDef,
                CdkCell,
                CdkRow,
                CdkHeaderCell,
                CdkFooterCell,
                CdkHeaderRow,
                CdkHeaderRowDef,
                CdkFooterRow,
                CdkFooterRowDef,
                DataRowOutlet,
                HeaderRowOutlet,
                FooterRowOutlet,
                CdkTextColumn,
            ];
            var CdkTableModule = /** @class */ (function () {
                function CdkTableModule() {
                }
                return CdkTableModule;
            }());
            CdkTableModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"]],
                            exports: EXPORTED_DECLARATIONS,
                            declarations: EXPORTED_DECLARATIONS
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=table.js.map
            /***/ 
        }),
        /***/ "./node_modules/@angular/cdk/esm2015/tree.js": 
        /*!***************************************************!*\
          !*** ./node_modules/@angular/cdk/esm2015/tree.js ***!
          \***************************************************/
        /*! exports provided: BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseTreeControl", function () { return BaseTreeControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatTreeControl", function () { return FlatTreeControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedTreeControl", function () { return NestedTreeControl; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkNestedTreeNode", function () { return CdkNestedTreeNode; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutletContext", function () { return CdkTreeNodeOutletContext; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeDef", function () { return CdkTreeNodeDef; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodePadding", function () { return CdkTreeNodePadding; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CDK_TREE_NODE_OUTLET_NODE", function () { return CDK_TREE_NODE_OUTLET_NODE; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutlet", function () { return CdkTreeNodeOutlet; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTree", function () { return CdkTree; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNode", function () { return CdkTreeNode; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeNoValidDataSourceError", function () { return getTreeNoValidDataSourceError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeMultipleDefaultNodeDefsError", function () { return getTreeMultipleDefaultNodeDefsError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeMissingMatchingNodeDefError", function () { return getTreeMissingMatchingNodeDefError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeControlMissingError", function () { return getTreeControlMissingError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTreeControlFunctionsMissingError", function () { return getTreeControlFunctionsMissingError; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeModule", function () { return CdkTreeModule; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkTreeNodeToggle", function () { return CdkTreeNodeToggle; });
            /* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm2015/collections.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
            /* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
            /* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /**
             * @license
             * Copyright Google LLC All Rights Reserved.
             *
             * Use of this source code is governed by an MIT-style license that can be
             * found in the LICENSE file at https://angular.io/license
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Base tree control. It has basic toggle/expand/collapse operations on a single data node.
             * @abstract
             * @template T
             */
            var BaseTreeControl = /** @class */ (function () {
                function BaseTreeControl() {
                    /**
                     * A selection model with multi-selection to track expansion status.
                     */
                    this.expansionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["SelectionModel"](true);
                }
                /**
                 * Toggles one single data node's expanded/collapsed state.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.toggle = function (dataNode) {
                    this.expansionModel.toggle(dataNode);
                };
                /**
                 * Expands one single data node.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.expand = function (dataNode) {
                    this.expansionModel.select(dataNode);
                };
                /**
                 * Collapses one single data node.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.collapse = function (dataNode) {
                    this.expansionModel.deselect(dataNode);
                };
                /**
                 * Whether a given data node is expanded or not. Returns true if the data node is expanded.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.isExpanded = function (dataNode) {
                    return this.expansionModel.isSelected(dataNode);
                };
                /**
                 * Toggles a subtree rooted at `node` recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.toggleDescendants = function (dataNode) {
                    this.expansionModel.isSelected(dataNode)
                        ? this.collapseDescendants(dataNode)
                        : this.expandDescendants(dataNode);
                };
                /**
                 * Collapse all dataNodes in the tree.
                 * @return {?}
                 */
                BaseTreeControl.prototype.collapseAll = function () {
                    this.expansionModel.clear();
                };
                /**
                 * Expands a subtree rooted at given data node recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.expandDescendants = function (dataNode) {
                    var _b;
                    /** @type {?} */
                    var toBeProcessed = [dataNode];
                    toBeProcessed.push.apply(toBeProcessed, __spread(this.getDescendants(dataNode)));
                    (_b = this.expansionModel).select.apply(_b, __spread(toBeProcessed));
                };
                /**
                 * Collapses a subtree rooted at given data node recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                BaseTreeControl.prototype.collapseDescendants = function (dataNode) {
                    var _b;
                    /** @type {?} */
                    var toBeProcessed = [dataNode];
                    toBeProcessed.push.apply(toBeProcessed, __spread(this.getDescendants(dataNode)));
                    (_b = this.expansionModel).deselect.apply(_b, __spread(toBeProcessed));
                };
                return BaseTreeControl;
            }());
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.
             * @template T
             */
            var FlatTreeControl = /** @class */ (function (_super) {
                __extends(FlatTreeControl, _super);
                /**
                 * Construct with flat tree data node functions getLevel and isExpandable.
                 * @param {?} getLevel
                 * @param {?} isExpandable
                 */
                function FlatTreeControl(getLevel, isExpandable) {
                    var _this = _super.call(this) || this;
                    _this.getLevel = getLevel;
                    _this.isExpandable = isExpandable;
                    return _this;
                }
                /**
                 * Gets a list of the data node's subtree of descendent data nodes.
                 *
                 * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes
                 * with correct levels.
                 * @param {?} dataNode
                 * @return {?}
                 */
                FlatTreeControl.prototype.getDescendants = function (dataNode) {
                    /** @type {?} */
                    var startIndex = this.dataNodes.indexOf(dataNode);
                    /** @type {?} */
                    var results = [];
                    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.
                    // The level of descendants of a tree node must be greater than the level of the given
                    // tree node.
                    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.
                    // If we reach a node whose level is greater than the level of the tree node, we hit a
                    // sibling of an ancestor.
                    for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {
                        results.push(this.dataNodes[i]);
                    }
                    return results;
                };
                /**
                 * Expands all data nodes in the tree.
                 *
                 * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened
                 * data nodes of the tree.
                 * @return {?}
                 */
                FlatTreeControl.prototype.expandAll = function () {
                    var _b;
                    (_b = this.expansionModel).select.apply(_b, __spread(this.dataNodes));
                };
                return FlatTreeControl;
            }(BaseTreeControl));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.
             * @template T
             */
            var NestedTreeControl = /** @class */ (function (_super) {
                __extends(NestedTreeControl, _super);
                /**
                 * Construct with nested tree function getChildren.
                 * @param {?} getChildren
                 */
                function NestedTreeControl(getChildren) {
                    var _this = _super.call(this) || this;
                    _this.getChildren = getChildren;
                    return _this;
                }
                /**
                 * Expands all dataNodes in the tree.
                 *
                 * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level
                 * data nodes of the tree.
                 * @return {?}
                 */
                NestedTreeControl.prototype.expandAll = function () {
                    var _b;
                    var _this = this;
                    this.expansionModel.clear();
                    /** @type {?} */
                    var allNodes = this.dataNodes.reduce(( /**
                     * @param {?} accumulator
                     * @param {?} dataNode
                     * @return {?}
                     */function (accumulator, dataNode) { return __spread(accumulator, _this.getDescendants(dataNode), [dataNode]); }), []);
                    (_b = this.expansionModel).select.apply(_b, __spread(allNodes));
                };
                /**
                 * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.
                 * @param {?} dataNode
                 * @return {?}
                 */
                NestedTreeControl.prototype.getDescendants = function (dataNode) {
                    /** @type {?} */
                    var descendants = [];
                    this._getDescendants(descendants, dataNode);
                    // Remove the node itself
                    return descendants.splice(1);
                };
                /**
                 * A helper function to get descendants recursively.
                 * @protected
                 * @param {?} descendants
                 * @param {?} dataNode
                 * @return {?}
                 */
                NestedTreeControl.prototype._getDescendants = function (descendants, dataNode) {
                    var _this = this;
                    descendants.push(dataNode);
                    /** @type {?} */
                    var childrenNodes = this.getChildren(dataNode);
                    if (Array.isArray(childrenNodes)) {
                        childrenNodes.forEach(( /**
                         * @param {?} child
                         * @return {?}
                         */function (child) { return _this._getDescendants(descendants, child); }));
                    }
                    else if (childrenNodes instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                        // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that
                        // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.
                        childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(( /** @type {?} */(Boolean))))
                            .subscribe(( /**
                     * @param {?} children
                     * @return {?}
                     */function (/**
                     * @param {?} children
                     * @return {?}
                     */ children) {
                            var e_13, _b;
                            try {
                                for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                                    var child = children_1_1.value;
                                    _this._getDescendants(descendants, child);
                                }
                            }
                            catch (e_13_1) { e_13 = { error: e_13_1 }; }
                            finally {
                                try {
                                    if (children_1_1 && !children_1_1.done && (_b = children_1.return)) _b.call(children_1);
                                }
                                finally { if (e_13) throw e_13.error; }
                            }
                        }));
                    }
                };
                return NestedTreeControl;
            }(BaseTreeControl));
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Injection token used to provide a `CdkTreeNode` to its outlet.
             * Used primarily to avoid circular imports.
             * \@docs-private
             * @type {?}
             */
            var CDK_TREE_NODE_OUTLET_NODE = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('CDK_TREE_NODE_OUTLET_NODE');
            /**
             * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes
             * inside the outlet.
             */
            var CdkTreeNodeOutlet = /** @class */ (function () {
                /**
                 * @param {?} viewContainer
                 * @param {?=} _node
                 */
                function CdkTreeNodeOutlet(viewContainer, _node) {
                    this.viewContainer = viewContainer;
                    this._node = _node;
                }
                return CdkTreeNodeOutlet;
            }());
            CdkTreeNodeOutlet.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdkTreeNodeOutlet]'
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNodeOutlet.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"] },
                { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"], args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Context provided to the tree node component.
             * @template T
             */
            var CdkTreeNodeOutletContext = /** @class */ (function () {
                /**
                 * @param {?} data
                 */
                function CdkTreeNodeOutletContext(data) {
                    this.$implicit = data;
                }
                return CdkTreeNodeOutletContext;
            }());
            /**
             * Data node definition for the CdkTree.
             * Captures the node's template and a when predicate that describes when this node should be used.
             * @template T
             */
            var CdkTreeNodeDef = /** @class */ (function () {
                /**
                 * \@docs-private
                 * @param {?} template
                 */
                function CdkTreeNodeDef(template) {
                    this.template = template;
                }
                return CdkTreeNodeDef;
            }());
            CdkTreeNodeDef.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdkTreeNodeDef]',
                            inputs: [
                                'when: cdkTreeNodeDefWhen'
                            ],
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNodeDef.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"] }
            ]; };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Returns an error to be thrown when there is no usable data.
             * \@docs-private
             * @return {?}
             */
            function getTreeNoValidDataSourceError() {
                return Error("A valid data source must be provided.");
            }
            /**
             * Returns an error to be thrown when there are multiple nodes that are missing a when function.
             * \@docs-private
             * @return {?}
             */
            function getTreeMultipleDefaultNodeDefsError() {
                return Error("There can only be one default row without a when predicate function.");
            }
            /**
             * Returns an error to be thrown when there are no matching node defs for a particular set of data.
             * \@docs-private
             * @return {?}
             */
            function getTreeMissingMatchingNodeDefError() {
                return Error("Could not find a matching node definition for the provided node data.");
            }
            /**
             * Returns an error to be thrown when there are tree control.
             * \@docs-private
             * @return {?}
             */
            function getTreeControlMissingError() {
                return Error("Could not find a tree control for the tree.");
            }
            /**
             * Returns an error to be thrown when tree control did not implement functions for flat/nested node.
             * \@docs-private
             * @return {?}
             */
            function getTreeControlFunctionsMissingError() {
                return Error("Could not find functions for nested/flat tree in tree control.");
            }
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * CDK tree component that connects with a data source to retrieve data of type `T` and renders
             * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.
             * @template T
             */
            var CdkTree = /** @class */ (function () {
                /**
                 * @param {?} _differs
                 * @param {?} _changeDetectorRef
                 */
                function CdkTree(_differs, _changeDetectorRef) {
                    this._differs = _differs;
                    this._changeDetectorRef = _changeDetectorRef;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * Level of nodes
                     */
                    this._levels = new Map();
                    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.
                    //     Remove the MAX_VALUE in viewChange
                    /**
                     * Stream containing the latest information on what rows are being displayed on screen.
                     * Can be used by the data source to as a heuristic of what data should be provided.
                     */
                    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"]({ start: 0, end: Number.MAX_VALUE });
                }
                Object.defineProperty(CdkTree.prototype, "dataSource", {
                    /**
                     * Provides a stream containing the latest data array to render. Influenced by the tree's
                     * stream of view window (what dataNodes are currently on screen).
                     * Data source can be an observable of data array, or a data array to render.
                     * @return {?}
                     */
                    get: function () { return this._dataSource; },
                    /**
                     * @param {?} dataSource
                     * @return {?}
                     */
                    set: function (dataSource) {
                        if (this._dataSource !== dataSource) {
                            this._switchDataSource(dataSource);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTree.prototype.ngOnInit = function () {
                    this._dataDiffer = this._differs.find([]).create(this.trackBy);
                    if (!this.treeControl) {
                        throw getTreeControlMissingError();
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTree.prototype.ngOnDestroy = function () {
                    this._nodeOutlet.viewContainer.clear();
                    this._onDestroy.next();
                    this._onDestroy.complete();
                    if (this._dataSource && typeof (( /** @type {?} */(this._dataSource))).disconnect === 'function') {
                        (( /** @type {?} */(this.dataSource))).disconnect(this);
                    }
                    if (this._dataSubscription) {
                        this._dataSubscription.unsubscribe();
                        this._dataSubscription = null;
                    }
                };
                /**
                 * @return {?}
                 */
                CdkTree.prototype.ngAfterContentChecked = function () {
                    /** @type {?} */
                    var defaultNodeDefs = this._nodeDefs.filter(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return !def.when; }));
                    if (defaultNodeDefs.length > 1) {
                        throw getTreeMultipleDefaultNodeDefsError();
                    }
                    this._defaultNodeDef = defaultNodeDefs[0];
                    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {
                        this._observeRenderChanges();
                    }
                };
                // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL
                //     and nested trees.
                /**
                 * Switch to the provided data source by resetting the data and unsubscribing from the current
                 * render change subscription if one exists. If the data source is null, interpret this by
                 * clearing the node outlet. Otherwise start listening for new data.
                 * @private
                 * @param {?} dataSource
                 * @return {?}
                 */
                CdkTree.prototype._switchDataSource = function (dataSource) {
                    if (this._dataSource && typeof (( /** @type {?} */(this._dataSource))).disconnect === 'function') {
                        (( /** @type {?} */(this.dataSource))).disconnect(this);
                    }
                    if (this._dataSubscription) {
                        this._dataSubscription.unsubscribe();
                        this._dataSubscription = null;
                    }
                    // Remove the all dataNodes if there is now no data source
                    if (!dataSource) {
                        this._nodeOutlet.viewContainer.clear();
                    }
                    this._dataSource = dataSource;
                    if (this._nodeDefs) {
                        this._observeRenderChanges();
                    }
                };
                /**
                 * Set up a subscription for the data provided by the data source.
                 * @private
                 * @return {?}
                 */
                CdkTree.prototype._observeRenderChanges = function () {
                    var _this = this;
                    /** @type {?} */
                    var dataStream;
                    if (Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["isDataSource"])(this._dataSource)) {
                        dataStream = this._dataSource.connect(this);
                    }
                    else if (this._dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                        dataStream = this._dataSource;
                    }
                    else if (Array.isArray(this._dataSource)) {
                        dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(this._dataSource);
                    }
                    if (dataStream) {
                        this._dataSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._onDestroy))
                            .subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (/**
                     * @param {?} data
                     * @return {?}
                     */ data) { return _this.renderNodeChanges(data); }));
                    }
                    else {
                        throw getTreeNoValidDataSourceError();
                    }
                };
                /**
                 * Check for changes made in the data and render each change (node added/removed/moved).
                 * @param {?} data
                 * @param {?=} dataDiffer
                 * @param {?=} viewContainer
                 * @param {?=} parentData
                 * @return {?}
                 */
                CdkTree.prototype.renderNodeChanges = function (data, dataDiffer, viewContainer, parentData) {
                    var _this = this;
                    if (dataDiffer === void 0) { dataDiffer = this._dataDiffer; }
                    if (viewContainer === void 0) { viewContainer = this._nodeOutlet.viewContainer; }
                    /** @type {?} */
                    var changes = dataDiffer.diff(data);
                    if (!changes) {
                        return;
                    }
                    changes.forEachOperation(( /**
                     * @param {?} item
                     * @param {?} adjustedPreviousIndex
                     * @param {?} currentIndex
                     * @return {?}
                     */function (item, adjustedPreviousIndex, currentIndex) {
                        if (item.previousIndex == null) {
                            _this.insertNode(data[( /** @type {?} */(currentIndex))], ( /** @type {?} */(currentIndex)), viewContainer, parentData);
                        }
                        else if (currentIndex == null) {
                            viewContainer.remove(( /** @type {?} */(adjustedPreviousIndex)));
                            _this._levels.delete(item.item);
                        }
                        else {
                            /** @type {?} */
                            var view = viewContainer.get(( /** @type {?} */(adjustedPreviousIndex)));
                            viewContainer.move(( /** @type {?} */(view)), currentIndex);
                        }
                    }));
                    this._changeDetectorRef.detectChanges();
                };
                /**
                 * Finds the matching node definition that should be used for this node data. If there is only
                 * one node definition, it is returned. Otherwise, find the node definition that has a when
                 * predicate that returns true with the data. If none return true, return the default node
                 * definition.
                 * @param {?} data
                 * @param {?} i
                 * @return {?}
                 */
                CdkTree.prototype._getNodeDef = function (data, i) {
                    if (this._nodeDefs.length === 1) {
                        return this._nodeDefs.first;
                    }
                    /** @type {?} */
                    var nodeDef = this._nodeDefs.find(( /**
                     * @param {?} def
                     * @return {?}
                     */function (/**
                     * @param {?} def
                     * @return {?}
                     */ def) { return def.when && def.when(i, data); })) || this._defaultNodeDef;
                    if (!nodeDef) {
                        throw getTreeMissingMatchingNodeDefError();
                    }
                    return nodeDef;
                };
                /**
                 * Create the embedded view for the data node template and place it in the correct index location
                 * within the data node view container.
                 * @param {?} nodeData
                 * @param {?} index
                 * @param {?=} viewContainer
                 * @param {?=} parentData
                 * @return {?}
                 */
                CdkTree.prototype.insertNode = function (nodeData, index, viewContainer, parentData) {
                    /** @type {?} */
                    var node = this._getNodeDef(nodeData, index);
                    // Node context that will be provided to created embedded view
                    /** @type {?} */
                    var context = new CdkTreeNodeOutletContext(nodeData);
                    // If the tree is flat tree, then use the `getLevel` function in flat tree control
                    // Otherwise, use the level of parent node.
                    if (this.treeControl.getLevel) {
                        context.level = this.treeControl.getLevel(nodeData);
                    }
                    else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {
                        context.level = ( /** @type {?} */(this._levels.get(parentData))) + 1;
                    }
                    else {
                        context.level = 0;
                    }
                    this._levels.set(nodeData, context.level);
                    // Use default tree nodeOutlet, or nested node's nodeOutlet
                    /** @type {?} */
                    var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;
                    container.createEmbeddedView(node.template, context, index);
                    // Set the data to just created `CdkTreeNode`.
                    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable
                    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.
                    if (CdkTreeNode.mostRecentTreeNode) {
                        CdkTreeNode.mostRecentTreeNode.data = nodeData;
                    }
                };
                return CdkTree;
            }());
            CdkTree.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{ selector: 'cdk-tree',
                            exportAs: 'cdkTree',
                            template: "<ng-container cdkTreeNodeOutlet></ng-container>",
                            host: {
                                'class': 'cdk-tree',
                                'role': 'tree',
                            },
                            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                            // The "OnPush" status for the `CdkTree` component is effectively a noop, so we are removing it.
                            // The view for `CdkTree` consists entirely of templates declared in other views. As they are
                            // declared elsewhere, they are checked when their declaration points are checked.
                            // tslint:disable-next-line:validate-decorators
                            changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].Default
                        },] },
            ];
            /** @nocollapse */
            CdkTree.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"] }
            ]; };
            CdkTree.propDecorators = {
                dataSource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                treeControl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                trackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
                _nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [CdkTreeNodeOutlet, { static: true },] }],
                _nodeDefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [CdkTreeNodeDef,] }]
            };
            /**
             * Tree node for CdkTree. It contains the data in the tree node.
             * @template T
             */
            var CdkTreeNode = /** @class */ (function () {
                /**
                 * @param {?} _elementRef
                 * @param {?} _tree
                 */
                function CdkTreeNode(_elementRef, _tree) {
                    this._elementRef = _elementRef;
                    this._tree = _tree;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * Emits when the node's data has changed.
                     */
                    this._dataChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * The role of the node should be 'group' if it's an internal node,
                     * and 'treeitem' if it's a leaf node.
                     */
                    this.role = 'treeitem';
                    CdkTreeNode.mostRecentTreeNode = ( /** @type {?} */(this));
                }
                Object.defineProperty(CdkTreeNode.prototype, "data", {
                    /**
                     * The tree node's data.
                     * @return {?}
                     */
                    get: function () { return this._data; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        if (value !== this._data) {
                            this._data = value;
                            this._setRoleFromData();
                            this._dataChanges.next();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTreeNode.prototype, "isExpanded", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._tree.treeControl.isExpanded(this._data);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTreeNode.prototype, "level", {
                    /**
                     * @return {?}
                     */
                    get: function () {
                        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTreeNode.prototype.ngOnDestroy = function () {
                    // If this is the last tree node being destroyed,
                    // clear out the reference to avoid leaking memory.
                    if (CdkTreeNode.mostRecentTreeNode === this) {
                        CdkTreeNode.mostRecentTreeNode = null;
                    }
                    this._dataChanges.complete();
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * Focuses the menu item. Implements for FocusableOption.
                 * @return {?}
                 */
                CdkTreeNode.prototype.focus = function () {
                    this._elementRef.nativeElement.focus();
                };
                /**
                 * @protected
                 * @return {?}
                 */
                CdkTreeNode.prototype._setRoleFromData = function () {
                    var _this = this;
                    if (this._tree.treeControl.isExpandable) {
                        this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';
                    }
                    else {
                        if (!this._tree.treeControl.getChildren) {
                            throw getTreeControlFunctionsMissingError();
                        }
                        /** @type {?} */
                        var childrenNodes = this._tree.treeControl.getChildren(this._data);
                        if (Array.isArray(childrenNodes)) {
                            this._setRoleFromChildren(( /** @type {?} */(childrenNodes)));
                        }
                        else if (childrenNodes instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                            childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                                .subscribe(( /**
                         * @param {?} children
                         * @return {?}
                         */function (/**
                         * @param {?} children
                         * @return {?}
                         */ children) { return _this._setRoleFromChildren(children); }));
                        }
                    }
                };
                /**
                 * @protected
                 * @param {?} children
                 * @return {?}
                 */
                CdkTreeNode.prototype._setRoleFromChildren = function (children) {
                    this.role = children && children.length ? 'group' : 'treeitem';
                };
                return CdkTreeNode;
            }());
            /**
             * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it
             * in `CdkTree` and set the data to it.
             */
            CdkTreeNode.mostRecentTreeNode = null;
            CdkTreeNode.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'cdk-tree-node',
                            exportAs: 'cdkTreeNode',
                            host: {
                                '[attr.aria-expanded]': 'isExpanded',
                                '[attr.aria-level]': 'role === "treeitem" ? level : null',
                                '[attr.role]': 'role',
                                'class': 'cdk-tree-node',
                            },
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNode.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: CdkTree }
            ]; };
            CdkTreeNode.propDecorators = {
                role: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Nested node is a child of `<cdk-tree>`. It works with nested tree.
             * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will
             * be added in the `cdkTreeNodeOutlet` in tree node template.
             * For example:
             *   ```html
             *   <cdk-nested-tree-node>
             *     {{node.name}}
             *     <ng-template cdkTreeNodeOutlet></ng-template>
             *   </cdk-nested-tree-node>
             *   ```
             * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be
             * like this:
             *   ```html
             *   <cdk-nested-tree-node>
             *     {{node.name}}
             *      <cdk-nested-tree-node>{{child1.name}}</cdk-nested-tree-node>
             *      <cdk-nested-tree-node>{{child2.name}}</cdk-nested-tree-node>
             *   </cdk-nested-tree-node>
             *   ```
             * @template T
             */
            var CdkNestedTreeNode = /** @class */ (function (_super) {
                __extends(CdkNestedTreeNode, _super);
                /**
                 * @param {?} _elementRef
                 * @param {?} _tree
                 * @param {?} _differs
                 */
                function CdkNestedTreeNode(_elementRef, _tree, _differs) {
                    var _this = _super.call(this, _elementRef, _tree) || this;
                    _this._elementRef = _elementRef;
                    _this._tree = _tree;
                    _this._differs = _differs;
                    return _this;
                }
                /**
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);
                    if (!this._tree.treeControl.getChildren) {
                        throw getTreeControlFunctionsMissingError();
                    }
                    /** @type {?} */
                    var childrenNodes = this._tree.treeControl.getChildren(this.data);
                    if (Array.isArray(childrenNodes)) {
                        this.updateChildrenNodes(( /** @type {?} */(childrenNodes)));
                    }
                    else if (childrenNodes instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
                        childrenNodes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                            .subscribe(( /**
                     * @param {?} result
                     * @return {?}
                     */function (/**
                     * @param {?} result
                     * @return {?}
                     */ result) { return _this.updateChildrenNodes(result); }));
                    }
                    this.nodeOutlet.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                        .subscribe(( /**
                 * @return {?}
                 */function () { return _this.updateChildrenNodes(); }));
                };
                /**
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype.ngOnDestroy = function () {
                    this._clear();
                    _super.prototype.ngOnDestroy.call(this);
                };
                /**
                 * Add children dataNodes to the NodeOutlet
                 * @protected
                 * @param {?=} children
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype.updateChildrenNodes = function (children) {
                    /** @type {?} */
                    var outlet = this._getNodeOutlet();
                    if (children) {
                        this._children = children;
                    }
                    if (outlet && this._children) {
                        /** @type {?} */
                        var viewContainer = outlet.viewContainer;
                        this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);
                    }
                    else {
                        // Reset the data differ if there's no children nodes displayed
                        this._dataDiffer.diff([]);
                    }
                };
                /**
                 * Clear the children dataNodes.
                 * @protected
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype._clear = function () {
                    /** @type {?} */
                    var outlet = this._getNodeOutlet();
                    if (outlet) {
                        outlet.viewContainer.clear();
                        this._dataDiffer.diff([]);
                    }
                };
                /**
                 * Gets the outlet for the current node.
                 * @private
                 * @return {?}
                 */
                CdkNestedTreeNode.prototype._getNodeOutlet = function () {
                    var _this = this;
                    /** @type {?} */
                    var outlets = this.nodeOutlet;
                    // Note that since we use `descendants: true` on the query, we have to ensure
                    // that we don't pick up the outlet of a child node by accident.
                    return outlets && outlets.find(( /**
                     * @param {?} outlet
                     * @return {?}
                     */function (/**
                     * @param {?} outlet
                     * @return {?}
                     */ outlet) { return !outlet._node || outlet._node === _this; }));
                };
                return CdkNestedTreeNode;
            }(CdkTreeNode));
            CdkNestedTreeNode.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: 'cdk-nested-tree-node',
                            exportAs: 'cdkNestedTreeNode',
                            host: {
                                '[attr.aria-expanded]': 'isExpanded',
                                '[attr.role]': 'role',
                                'class': 'cdk-tree-node cdk-nested-tree-node',
                            },
                            providers: [
                                { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },
                                { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }
                            ]
                        },] },
            ];
            /** @nocollapse */
            CdkNestedTreeNode.ctorParameters = function () { return [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: CdkTree },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"] }
            ]; };
            CdkNestedTreeNode.propDecorators = {
                nodeOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"], args: [CdkTreeNodeOutlet, {
                                // We need to use `descendants: true`, because Ivy will no longer match
                                // indirect descendants if it's left as false.
                                descendants: true
                            },] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Regex used to split a string on its CSS units.
             * @type {?}
             */
            var cssUnitPattern = /([A-Za-z%]+)$/;
            /**
             * Indent for the children tree dataNodes.
             * This directive will add left-padding to the node to show hierarchy.
             * @template T
             */
            var CdkTreeNodePadding = /** @class */ (function () {
                /**
                 * @param {?} _treeNode
                 * @param {?} _tree
                 * @param {?} _renderer
                 * @param {?} _element
                 * @param {?} _dir
                 */
                function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {
                    var _this = this;
                    this._treeNode = _treeNode;
                    this._tree = _tree;
                    this._renderer = _renderer;
                    this._element = _element;
                    this._dir = _dir;
                    /**
                     * Subject that emits when the component has been destroyed.
                     */
                    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                    /**
                     * CSS units used for the indentation value.
                     */
                    this.indentUnits = 'px';
                    this._indent = 40;
                    this._setPadding();
                    if (_dir) {
                        _dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed)).subscribe(( /**
                         * @return {?}
                         */function () { return _this._setPadding(true); }));
                    }
                    // In Ivy the indentation binding might be set before the tree node's data has been added,
                    // which means that we'll miss the first render. We have to subscribe to changes in the
                    // data to ensure that everything is up to date.
                    _treeNode._dataChanges.subscribe(( /**
                     * @return {?}
                     */function () { return _this._setPadding(); }));
                }
                Object.defineProperty(CdkTreeNodePadding.prototype, "level", {
                    /**
                     * The level of depth of the tree node. The padding will be `level * indent` pixels.
                     * @return {?}
                     */
                    get: function () { return this._level; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) {
                        // Set to null as the fallback value so that _setPadding can fall back to the node level if the
                        // consumer set the directive as `cdkTreeNodePadding=""`. We still want to take this value if
                        // they set 0 explicitly.
                        this._level = ( /** @type {?} */(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value, null)));
                        this._setPadding();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CdkTreeNodePadding.prototype, "indent", {
                    /**
                     * The indent for each level. Can be a number or a CSS string.
                     * Default number 40px from material design menu sub-menu spec.
                     * @return {?}
                     */
                    get: function () { return this._indent; },
                    /**
                     * @param {?} indent
                     * @return {?}
                     */
                    set: function (indent) {
                        /** @type {?} */
                        var value = indent;
                        /** @type {?} */
                        var units = 'px';
                        if (typeof indent === 'string') {
                            /** @type {?} */
                            var parts = indent.split(cssUnitPattern);
                            value = parts[0];
                            units = parts[1] || units;
                        }
                        this.indentUnits = units;
                        this._indent = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceNumberProperty"])(value);
                        this._setPadding();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                CdkTreeNodePadding.prototype.ngOnDestroy = function () {
                    this._destroyed.next();
                    this._destroyed.complete();
                };
                /**
                 * The padding indent value for the tree node. Returns a string with px numbers if not null.
                 * @return {?}
                 */
                CdkTreeNodePadding.prototype._paddingIndent = function () {
                    /** @type {?} */
                    var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)
                        ? this._tree.treeControl.getLevel(this._treeNode.data)
                        : null;
                    /** @type {?} */
                    var level = this._level == null ? nodeLevel : this._level;
                    return typeof level === 'number' ? "" + level * this._indent + this.indentUnits : null;
                };
                /**
                 * @param {?=} forceChange
                 * @return {?}
                 */
                CdkTreeNodePadding.prototype._setPadding = function (forceChange) {
                    if (forceChange === void 0) { forceChange = false; }
                    /** @type {?} */
                    var padding = this._paddingIndent();
                    if (padding !== this._currentPadding || forceChange) {
                        /** @type {?} */
                        var element = this._element.nativeElement;
                        /** @type {?} */
                        var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
                        /** @type {?} */
                        var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';
                        this._renderer.setStyle(element, paddingProp, padding);
                        this._renderer.setStyle(element, resetProp, null);
                        this._currentPadding = padding;
                    }
                };
                return CdkTreeNodePadding;
            }());
            CdkTreeNodePadding.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                            selector: '[cdkTreeNodePadding]',
                        },] },
            ];
            /** @nocollapse */
            CdkTreeNodePadding.ctorParameters = function () { return [
                { type: CdkTreeNode },
                { type: CdkTree },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"] },
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"] },
                { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"] }] }
            ]; };
            CdkTreeNodePadding.propDecorators = {
                level: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodePadding',] }],
                indent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodePaddingIndent',] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * Node toggle to expand/collapse the node.
             * @template T
             */
            var CdkTreeNodeToggle = /** @class */ (function () {
                /**
                 * @param {?} _tree
                 * @param {?} _treeNode
                 */
                function CdkTreeNodeToggle(_tree, _treeNode) {
                    this._tree = _tree;
                    this._treeNode = _treeNode;
                    this._recursive = false;
                }
                Object.defineProperty(CdkTreeNodeToggle.prototype, "recursive", {
                    /**
                     * Whether expand/collapse the node recursively.
                     * @return {?}
                     */
                    get: function () { return this._recursive; },
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    set: function (value) { this._recursive = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(value); },
                    enumerable: true,
                    configurable: true
                });
                // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
                // In Ivy the `host` bindings will be merged when this class is extended, whereas in
                // ViewEngine they're overwritten.
                // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
                // tslint:disable-next-line:no-host-decorator-in-concrete
                /**
                 * @param {?} event
                 * @return {?}
                 */
                CdkTreeNodeToggle.prototype._toggle = function (event) {
                    this.recursive
                        ? this._tree.treeControl.toggleDescendants(this._treeNode.data)
                        : this._tree.treeControl.toggle(this._treeNode.data);
                    event.stopPropagation();
                };
                return CdkTreeNodeToggle;
            }());
            CdkTreeNodeToggle.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{ selector: '[cdkTreeNodeToggle]' },] },
            ];
            /** @nocollapse */
            CdkTreeNodeToggle.ctorParameters = function () { return [
                { type: CdkTree },
                { type: CdkTreeNode }
            ]; };
            CdkTreeNodeToggle.propDecorators = {
                recursive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodeToggleRecursive',] }],
                _toggle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["HostListener"], args: ['click', ['$event'],] }]
            };
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var EXPORTED_DECLARATIONS = [
                CdkNestedTreeNode,
                CdkTreeNodeDef,
                CdkTreeNodePadding,
                CdkTreeNodeToggle,
                CdkTree,
                CdkTreeNode,
                CdkTreeNodeOutlet,
            ];
            var CdkTreeModule = /** @class */ (function () {
                function CdkTreeModule() {
                }
                return CdkTreeModule;
            }());
            CdkTreeModule.decorators = [
                { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
                            exports: EXPORTED_DECLARATIONS,
                            declarations: EXPORTED_DECLARATIONS,
                            providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_6__["FocusMonitor"], CdkTreeNodeDef]
                        },] },
            ];
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * @fileoverview added by tsickle
             * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            //# sourceMappingURL=tree.js.map
            /***/ 
        }),
        /***/ "./node_modules/decimal.js/decimal.js": 
        /*!********************************************!*\
          !*** ./node_modules/decimal.js/decimal.js ***!
          \********************************************/
        /*! no static exports found */
        /***/ (function (module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_RESULT__;
            ;
            (function (globalScope) {
                'use strict';
                /*
                 *  decimal.js v10.2.0
                 *  An arbitrary-precision Decimal type for JavaScript.
                 *  https://github.com/MikeMcl/decimal.js
                 *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
                 *  MIT Licence
                 */
                // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //
                // The maximum exponent magnitude.
                // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
                var EXP_LIMIT = 9e15, // 0 to 9e15
                // The limit on the value of `precision`, and on the value of the first argument to
                // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
                MAX_DIGITS = 1e9, // 0 to 1e9
                // Base conversion alphabet.
                NUMERALS = '0123456789abcdef', 
                // The natural logarithm of 10 (1025 digits).
                LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058', 
                // Pi (1025 digits).
                PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789', 
                // The initial configuration properties of the Decimal constructor.
                DEFAULTS = {
                    // These values must be integers within the stated ranges (inclusive).
                    // Most of these values can be changed at run-time using the `Decimal.config` method.
                    // The maximum number of significant digits of the result of a calculation or base conversion.
                    // E.g. `Decimal.config({ precision: 20 });`
                    precision: 20,
                    // The rounding mode used when rounding to `precision`.
                    //
                    // ROUND_UP         0 Away from zero.
                    // ROUND_DOWN       1 Towards zero.
                    // ROUND_CEIL       2 Towards +Infinity.
                    // ROUND_FLOOR      3 Towards -Infinity.
                    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                    //
                    // E.g.
                    // `Decimal.rounding = 4;`
                    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
                    rounding: 4,
                    // The modulo mode used when calculating the modulus: a mod n.
                    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
                    // The remainder (r) is calculated as: r = a - n * q.
                    //
                    // UP         0 The remainder is positive if the dividend is negative, else is negative.
                    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
                    // FLOOR      3 The remainder has the same sign as the divisor (Python %).
                    // HALF_EVEN  6 The IEEE 754 remainder function.
                    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
                    //
                    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
                    // division (9) are commonly used for the modulus operation. The other rounding modes can also
                    // be used, but they may not give useful results.
                    modulo: 1,
                    // The exponent value at and beneath which `toString` returns exponential notation.
                    // JavaScript numbers: -7
                    toExpNeg: -7,
                    // The exponent value at and above which `toString` returns exponential notation.
                    // JavaScript numbers: 21
                    toExpPos: 21,
                    // The minimum exponent value, beneath which underflow to zero occurs.
                    // JavaScript numbers: -324  (5e-324)
                    minE: -EXP_LIMIT,
                    // The maximum exponent value, above which overflow to Infinity occurs.
                    // JavaScript numbers: 308  (1.7976931348623157e+308)
                    maxE: EXP_LIMIT,
                    // Whether to use cryptographically-secure random number generation, if available.
                    crypto: false // true/false
                }, 
                // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //
                Decimal, inexact, noConflict, quadrant, external = true, decimalError = '[DecimalError] ', invalidArgument = decimalError + 'Invalid argument: ', precisionLimitExceeded = decimalError + 'Precision limit exceeded', cryptoUnavailable = decimalError + 'crypto unavailable', mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, 
                // Decimal.prototype object
                P = { name: '[object Decimal]' };
                // Decimal prototype methods
                /*
                 *  absoluteValue             abs
                 *  ceil
                 *  comparedTo                cmp
                 *  cosine                    cos
                 *  cubeRoot                  cbrt
                 *  decimalPlaces             dp
                 *  dividedBy                 div
                 *  dividedToIntegerBy        divToInt
                 *  equals                    eq
                 *  floor
                 *  greaterThan               gt
                 *  greaterThanOrEqualTo      gte
                 *  hyperbolicCosine          cosh
                 *  hyperbolicSine            sinh
                 *  hyperbolicTangent         tanh
                 *  inverseCosine             acos
                 *  inverseHyperbolicCosine   acosh
                 *  inverseHyperbolicSine     asinh
                 *  inverseHyperbolicTangent  atanh
                 *  inverseSine               asin
                 *  inverseTangent            atan
                 *  isFinite
                 *  isInteger                 isInt
                 *  isNaN
                 *  isNegative                isNeg
                 *  isPositive                isPos
                 *  isZero
                 *  lessThan                  lt
                 *  lessThanOrEqualTo         lte
                 *  logarithm                 log
                 *  [maximum]                 [max]
                 *  [minimum]                 [min]
                 *  minus                     sub
                 *  modulo                    mod
                 *  naturalExponential        exp
                 *  naturalLogarithm          ln
                 *  negated                   neg
                 *  plus                      add
                 *  precision                 sd
                 *  round
                 *  sine                      sin
                 *  squareRoot                sqrt
                 *  tangent                   tan
                 *  times                     mul
                 *  toBinary
                 *  toDecimalPlaces           toDP
                 *  toExponential
                 *  toFixed
                 *  toFraction
                 *  toHexadecimal             toHex
                 *  toNearest
                 *  toNumber
                 *  toOctal
                 *  toPower                   pow
                 *  toPrecision
                 *  toSignificantDigits       toSD
                 *  toString
                 *  truncated                 trunc
                 *  valueOf                   toJSON
                 */
                /*
                 * Return a new Decimal whose value is the absolute value of this Decimal.
                 *
                 */
                P.absoluteValue = P.abs = function () {
                    var x = new this.constructor(this);
                    if (x.s < 0)
                        x.s = 1;
                    return finalise(x);
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
                 * direction of positive Infinity.
                 *
                 */
                P.ceil = function () {
                    return finalise(new this.constructor(this), this.e + 1, 2);
                };
                /*
                 * Return
                 *   1    if the value of this Decimal is greater than the value of `y`,
                 *  -1    if the value of this Decimal is less than the value of `y`,
                 *   0    if they have the same value,
                 *   NaN  if the value of either Decimal is NaN.
                 *
                 */
                P.comparedTo = P.cmp = function (y) {
                    var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
                    // Either NaN or ±Infinity?
                    if (!xd || !yd) {
                        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
                    }
                    // Either zero?
                    if (!xd[0] || !yd[0])
                        return xd[0] ? xs : yd[0] ? -ys : 0;
                    // Signs differ?
                    if (xs !== ys)
                        return xs;
                    // Compare exponents.
                    if (x.e !== y.e)
                        return x.e > y.e ^ xs < 0 ? 1 : -1;
                    xdL = xd.length;
                    ydL = yd.length;
                    // Compare digit by digit.
                    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
                        if (xd[i] !== yd[i])
                            return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
                    }
                    // Compare lengths.
                    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
                };
                /*
                 * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-1, 1]
                 *
                 * cos(0)         = 1
                 * cos(-0)        = 1
                 * cos(Infinity)  = NaN
                 * cos(-Infinity) = NaN
                 * cos(NaN)       = NaN
                 *
                 */
                P.cosine = P.cos = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.d)
                        return new Ctor(NaN);
                    // cos(0) = cos(-0) = 1
                    if (!x.d[0])
                        return new Ctor(1);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
                    Ctor.rounding = 1;
                    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
                };
                /*
                 *
                 * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
                 * `precision` significant digits using rounding mode `rounding`.
                 *
                 *  cbrt(0)  =  0
                 *  cbrt(-0) = -0
                 *  cbrt(1)  =  1
                 *  cbrt(-1) = -1
                 *  cbrt(N)  =  N
                 *  cbrt(-I) = -I
                 *  cbrt(I)  =  I
                 *
                 * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
                 *
                 */
                P.cubeRoot = P.cbrt = function () {
                    var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    external = false;
                    // Initial estimate.
                    s = x.s * mathpow(x.s * x, 1 / 3);
                    // Math.cbrt underflow/overflow?
                    // Pass x to Math.pow as integer, then adjust the exponent of the result.
                    if (!s || Math.abs(s) == 1 / 0) {
                        n = digitsToString(x.d);
                        e = x.e;
                        // Adjust n exponent so it is a multiple of 3 away from x exponent.
                        if (s = (e - n.length + 1) % 3)
                            n += (s == 1 || s == -2 ? '0' : '00');
                        s = mathpow(n, 1 / 3);
                        // Rarely, e may be one less than the result exponent value.
                        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
                        if (s == 1 / 0) {
                            n = '5e' + e;
                        }
                        else {
                            n = s.toExponential();
                            n = n.slice(0, n.indexOf('e') + 1) + e;
                        }
                        r = new Ctor(n);
                        r.s = x.s;
                    }
                    else {
                        r = new Ctor(s.toString());
                    }
                    sd = (e = Ctor.precision) + 3;
                    // Halley's method.
                    // TODO? Compare Newton's method.
                    for (;;) {
                        t = r;
                        t3 = t.times(t).times(t);
                        t3plusx = t3.plus(x);
                        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
                        // TODO? Replace with for-loop and checkRoundingDigits.
                        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                            n = n.slice(sd - 3, sd + 1);
                            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
                            // , i.e. approaching a rounding boundary, continue the iteration.
                            if (n == '9999' || !rep && n == '4999') {
                                // On the first iteration only, check to see if rounding up gives the exact result as the
                                // nines may infinitely repeat.
                                if (!rep) {
                                    finalise(t, e + 1, 0);
                                    if (t.times(t).times(t).eq(x)) {
                                        r = t;
                                        break;
                                    }
                                }
                                sd += 4;
                                rep = 1;
                            }
                            else {
                                // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
                                // If not, then there are further digits and m will be truthy.
                                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                    // Truncate to the first rounding digit.
                                    finalise(r, e + 1, 1);
                                    m = !r.times(r).times(r).eq(x);
                                }
                                break;
                            }
                        }
                    }
                    external = true;
                    return finalise(r, e, Ctor.rounding, m);
                };
                /*
                 * Return the number of decimal places of the value of this Decimal.
                 *
                 */
                P.decimalPlaces = P.dp = function () {
                    var w, d = this.d, n = NaN;
                    if (d) {
                        w = d.length - 1;
                        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
                        // Subtract the number of trailing zeros of the last word.
                        w = d[w];
                        if (w)
                            for (; w % 10 == 0; w /= 10)
                                n--;
                        if (n < 0)
                            n = 0;
                    }
                    return n;
                };
                /*
                 *  n / 0 = I
                 *  n / N = N
                 *  n / I = 0
                 *  0 / n = 0
                 *  0 / 0 = N
                 *  0 / N = N
                 *  0 / I = 0
                 *  N / n = N
                 *  N / 0 = N
                 *  N / N = N
                 *  N / I = N
                 *  I / n = I
                 *  I / 0 = I
                 *  I / N = N
                 *  I / I = N
                 *
                 * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
                 * `precision` significant digits using rounding mode `rounding`.
                 *
                 */
                P.dividedBy = P.div = function (y) {
                    return divide(this, new this.constructor(y));
                };
                /*
                 * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
                 * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
                 *
                 */
                P.dividedToIntegerBy = P.divToInt = function (y) {
                    var x = this, Ctor = x.constructor;
                    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
                };
                /*
                 * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
                 *
                 */
                P.equals = P.eq = function (y) {
                    return this.cmp(y) === 0;
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
                 * direction of negative Infinity.
                 *
                 */
                P.floor = function () {
                    return finalise(new this.constructor(this), this.e + 1, 3);
                };
                /*
                 * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
                 * false.
                 *
                 */
                P.greaterThan = P.gt = function (y) {
                    return this.cmp(y) > 0;
                };
                /*
                 * Return true if the value of this Decimal is greater than or equal to the value of `y`,
                 * otherwise return false.
                 *
                 */
                P.greaterThanOrEqualTo = P.gte = function (y) {
                    var k = this.cmp(y);
                    return k == 1 || k === 0;
                };
                /*
                 * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
                 * Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [1, Infinity]
                 *
                 * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
                 *
                 * cosh(0)         = 1
                 * cosh(-0)        = 1
                 * cosh(Infinity)  = Infinity
                 * cosh(-Infinity) = Infinity
                 * cosh(NaN)       = NaN
                 *
                 *  x        time taken (ms)   result
                 * 1000      9                 9.8503555700852349694e+433
                 * 10000     25                4.4034091128314607936e+4342
                 * 100000    171               1.4033316802130615897e+43429
                 * 1000000   3817              1.5166076984010437725e+434294
                 * 10000000  abandoned after 2 minute wait
                 *
                 * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
                 *
                 */
                P.hyperbolicCosine = P.cosh = function () {
                    var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);
                    if (!x.isFinite())
                        return new Ctor(x.s ? 1 / 0 : NaN);
                    if (x.isZero())
                        return one;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
                    Ctor.rounding = 1;
                    len = x.d.length;
                    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
                    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))
                    // Estimate the optimum number of times to use the argument reduction.
                    // TODO? Estimation reused from cosine() and may not be optimal here.
                    if (len < 32) {
                        k = Math.ceil(len / 3);
                        n = (1 / tinyPow(4, k)).toString();
                    }
                    else {
                        k = 16;
                        n = '2.3283064365386962890625e-10';
                    }
                    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
                    // Reverse argument reduction
                    var cosh2_x, i = k, d8 = new Ctor(8);
                    for (; i--;) {
                        cosh2_x = x.times(x);
                        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
                    }
                    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
                };
                /*
                 * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
                 * Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-Infinity, Infinity]
                 *
                 * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
                 *
                 * sinh(0)         = 0
                 * sinh(-0)        = -0
                 * sinh(Infinity)  = Infinity
                 * sinh(-Infinity) = -Infinity
                 * sinh(NaN)       = NaN
                 *
                 * x        time taken (ms)
                 * 10       2 ms
                 * 100      5 ms
                 * 1000     14 ms
                 * 10000    82 ms
                 * 100000   886 ms            1.4033316802130615897e+43429
                 * 200000   2613 ms
                 * 300000   5407 ms
                 * 400000   8824 ms
                 * 500000   13026 ms          8.7080643612718084129e+217146
                 * 1000000  48543 ms
                 *
                 * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
                 *
                 */
                P.hyperbolicSine = P.sinh = function () {
                    var k, pr, rm, len, x = this, Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
                    Ctor.rounding = 1;
                    len = x.d.length;
                    if (len < 3) {
                        x = taylorSeries(Ctor, 2, x, x, true);
                    }
                    else {
                        // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
                        // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
                        // 3 multiplications and 1 addition
                        // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
                        // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
                        // 4 multiplications and 2 additions
                        // Estimate the optimum number of times to use the argument reduction.
                        k = 1.4 * Math.sqrt(len);
                        k = k > 16 ? 16 : k | 0;
                        x = x.times(1 / tinyPow(5, k));
                        x = taylorSeries(Ctor, 2, x, x, true);
                        // Reverse argument reduction
                        var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
                        for (; k--;) {
                            sinh2_x = x.times(x);
                            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
                        }
                    }
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(x, pr, rm, true);
                };
                /*
                 * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
                 * Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-1, 1]
                 *
                 * tanh(x) = sinh(x) / cosh(x)
                 *
                 * tanh(0)         = 0
                 * tanh(-0)        = -0
                 * tanh(Infinity)  = 1
                 * tanh(-Infinity) = -1
                 * tanh(NaN)       = NaN
                 *
                 */
                P.hyperbolicTangent = P.tanh = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(x.s);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 7;
                    Ctor.rounding = 1;
                    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
                };
                /*
                 * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
                 * this Decimal.
                 *
                 * Domain: [-1, 1]
                 * Range: [0, pi]
                 *
                 * acos(x) = pi/2 - asin(x)
                 *
                 * acos(0)       = pi/2
                 * acos(-0)      = pi/2
                 * acos(1)       = 0
                 * acos(-1)      = pi
                 * acos(1/2)     = pi/3
                 * acos(-1/2)    = 2*pi/3
                 * acos(|x| > 1) = NaN
                 * acos(NaN)     = NaN
                 *
                 */
                P.inverseCosine = P.acos = function () {
                    var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
                    if (k !== -1) {
                        return k === 0
                            // |x| is 1
                            ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
                            // |x| > 1 or x is NaN
                            : new Ctor(NaN);
                    }
                    if (x.isZero())
                        return getPi(Ctor, pr + 4, rm).times(0.5);
                    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3
                    Ctor.precision = pr + 6;
                    Ctor.rounding = 1;
                    x = x.asin();
                    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return halfPi.minus(x);
                };
                /*
                 * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
                 * value of this Decimal.
                 *
                 * Domain: [1, Infinity]
                 * Range: [0, Infinity]
                 *
                 * acosh(x) = ln(x + sqrt(x^2 - 1))
                 *
                 * acosh(x < 1)     = NaN
                 * acosh(NaN)       = NaN
                 * acosh(Infinity)  = Infinity
                 * acosh(-Infinity) = NaN
                 * acosh(0)         = NaN
                 * acosh(-0)        = NaN
                 * acosh(1)         = 0
                 * acosh(-1)        = NaN
                 *
                 */
                P.inverseHyperbolicCosine = P.acosh = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (x.lte(1))
                        return new Ctor(x.eq(1) ? 0 : NaN);
                    if (!x.isFinite())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
                    Ctor.rounding = 1;
                    external = false;
                    x = x.times(x).minus(1).sqrt().plus(x);
                    external = true;
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.ln();
                };
                /*
                 * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
                 * of this Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-Infinity, Infinity]
                 *
                 * asinh(x) = ln(x + sqrt(x^2 + 1))
                 *
                 * asinh(NaN)       = NaN
                 * asinh(Infinity)  = Infinity
                 * asinh(-Infinity) = -Infinity
                 * asinh(0)         = 0
                 * asinh(-0)        = -0
                 *
                 */
                P.inverseHyperbolicSine = P.asinh = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
                    Ctor.rounding = 1;
                    external = false;
                    x = x.times(x).plus(1).sqrt().plus(x);
                    external = true;
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.ln();
                };
                /*
                 * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
                 * value of this Decimal.
                 *
                 * Domain: [-1, 1]
                 * Range: [-Infinity, Infinity]
                 *
                 * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
                 *
                 * atanh(|x| > 1)   = NaN
                 * atanh(NaN)       = NaN
                 * atanh(Infinity)  = NaN
                 * atanh(-Infinity) = NaN
                 * atanh(0)         = 0
                 * atanh(-0)        = -0
                 * atanh(1)         = Infinity
                 * atanh(-1)        = -Infinity
                 *
                 */
                P.inverseHyperbolicTangent = P.atanh = function () {
                    var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.e >= 0)
                        return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    xsd = x.sd();
                    if (Math.max(xsd, pr) < 2 * -x.e - 1)
                        return finalise(new Ctor(x), pr, rm, true);
                    Ctor.precision = wpr = xsd - x.e;
                    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
                    Ctor.precision = pr + 4;
                    Ctor.rounding = 1;
                    x = x.ln();
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.times(0.5);
                };
                /*
                 * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
                 * Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-pi/2, pi/2]
                 *
                 * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
                 *
                 * asin(0)       = 0
                 * asin(-0)      = -0
                 * asin(1/2)     = pi/6
                 * asin(-1/2)    = -pi/6
                 * asin(1)       = pi/2
                 * asin(-1)      = -pi/2
                 * asin(|x| > 1) = NaN
                 * asin(NaN)     = NaN
                 *
                 * TODO? Compare performance of Taylor series.
                 *
                 */
                P.inverseSine = P.asin = function () {
                    var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
                    if (x.isZero())
                        return new Ctor(x);
                    k = x.abs().cmp(1);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (k !== -1) {
                        // |x| is 1
                        if (k === 0) {
                            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
                            halfPi.s = x.s;
                            return halfPi;
                        }
                        // |x| > 1 or x is NaN
                        return new Ctor(NaN);
                    }
                    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6
                    Ctor.precision = pr + 6;
                    Ctor.rounding = 1;
                    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.times(2);
                };
                /*
                 * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
                 * of this Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-pi/2, pi/2]
                 *
                 * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
                 *
                 * atan(0)         = 0
                 * atan(-0)        = -0
                 * atan(1)         = pi/4
                 * atan(-1)        = -pi/4
                 * atan(Infinity)  = pi/2
                 * atan(-Infinity) = -pi/2
                 * atan(NaN)       = NaN
                 *
                 */
                P.inverseTangent = P.atan = function () {
                    var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
                    if (!x.isFinite()) {
                        if (!x.s)
                            return new Ctor(NaN);
                        if (pr + 4 <= PI_PRECISION) {
                            r = getPi(Ctor, pr + 4, rm).times(0.5);
                            r.s = x.s;
                            return r;
                        }
                    }
                    else if (x.isZero()) {
                        return new Ctor(x);
                    }
                    else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
                        r = getPi(Ctor, pr + 4, rm).times(0.25);
                        r.s = x.s;
                        return r;
                    }
                    Ctor.precision = wpr = pr + 10;
                    Ctor.rounding = 1;
                    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);
                    // Argument reduction
                    // Ensure |x| < 0.42
                    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))
                    k = Math.min(28, wpr / LOG_BASE + 2 | 0);
                    for (i = k; i; --i)
                        x = x.div(x.times(x).plus(1).sqrt().plus(1));
                    external = false;
                    j = Math.ceil(wpr / LOG_BASE);
                    n = 1;
                    x2 = x.times(x);
                    r = new Ctor(x);
                    px = x;
                    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
                    for (; i !== -1;) {
                        px = px.times(x2);
                        t = r.minus(px.div(n += 2));
                        px = px.times(x2);
                        r = t.plus(px.div(n += 2));
                        if (r.d[j] !== void 0)
                            for (i = j; r.d[i] === t.d[i] && i--;)
                                ;
                    }
                    if (k)
                        r = r.times(2 << (k - 1));
                    external = true;
                    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
                };
                /*
                 * Return true if the value of this Decimal is a finite number, otherwise return false.
                 *
                 */
                P.isFinite = function () {
                    return !!this.d;
                };
                /*
                 * Return true if the value of this Decimal is an integer, otherwise return false.
                 *
                 */
                P.isInteger = P.isInt = function () {
                    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
                };
                /*
                 * Return true if the value of this Decimal is NaN, otherwise return false.
                 *
                 */
                P.isNaN = function () {
                    return !this.s;
                };
                /*
                 * Return true if the value of this Decimal is negative, otherwise return false.
                 *
                 */
                P.isNegative = P.isNeg = function () {
                    return this.s < 0;
                };
                /*
                 * Return true if the value of this Decimal is positive, otherwise return false.
                 *
                 */
                P.isPositive = P.isPos = function () {
                    return this.s > 0;
                };
                /*
                 * Return true if the value of this Decimal is 0 or -0, otherwise return false.
                 *
                 */
                P.isZero = function () {
                    return !!this.d && this.d[0] === 0;
                };
                /*
                 * Return true if the value of this Decimal is less than `y`, otherwise return false.
                 *
                 */
                P.lessThan = P.lt = function (y) {
                    return this.cmp(y) < 0;
                };
                /*
                 * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
                 *
                 */
                P.lessThanOrEqualTo = P.lte = function (y) {
                    return this.cmp(y) < 1;
                };
                /*
                 * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * If no base is specified, return log[10](arg).
                 *
                 * log[base](arg) = ln(arg) / ln(base)
                 *
                 * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
                 * otherwise:
                 *
                 * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
                 * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
                 * between the result and the correctly rounded result will be one ulp (unit in the last place).
                 *
                 * log[-b](a)       = NaN
                 * log[0](a)        = NaN
                 * log[1](a)        = NaN
                 * log[NaN](a)      = NaN
                 * log[Infinity](a) = NaN
                 * log[b](0)        = -Infinity
                 * log[b](-0)       = -Infinity
                 * log[b](-a)       = NaN
                 * log[b](1)        = 0
                 * log[b](Infinity) = Infinity
                 * log[b](NaN)      = NaN
                 *
                 * [base] {number|string|Decimal} The base of the logarithm.
                 *
                 */
                P.logarithm = P.log = function (base) {
                    var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;
                    // Default base is 10.
                    if (base == null) {
                        base = new Ctor(10);
                        isBase10 = true;
                    }
                    else {
                        base = new Ctor(base);
                        d = base.d;
                        // Return NaN if base is negative, or non-finite, or is 0 or 1.
                        if (base.s < 0 || !d || !d[0] || base.eq(1))
                            return new Ctor(NaN);
                        isBase10 = base.eq(10);
                    }
                    d = arg.d;
                    // Is arg negative, non-finite, 0 or 1?
                    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
                        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
                    }
                    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
                    // integer power of 10.
                    if (isBase10) {
                        if (d.length > 1) {
                            inf = true;
                        }
                        else {
                            for (k = d[0]; k % 10 === 0;)
                                k /= 10;
                            inf = k !== 1;
                        }
                    }
                    external = false;
                    sd = pr + guard;
                    num = naturalLogarithm(arg, sd);
                    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
                    // The result will have 5 rounding digits.
                    r = divide(num, denominator, sd, 1);
                    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
                    // calculate 10 further digits.
                    //
                    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
                    // that the result is above or below the boundary. Otherwise, if after calculating the 10
                    // further digits, the last 14 are nines, round up and assume the result is exact.
                    // Also assume the result is exact if the last 14 are zero.
                    //
                    // Example of a result that will be incorrectly rounded:
                    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
                    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
                    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
                    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
                    // place is still 2.6.
                    if (checkRoundingDigits(r.d, k = pr, rm)) {
                        do {
                            sd += 10;
                            num = naturalLogarithm(arg, sd);
                            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
                            r = divide(num, denominator, sd, 1);
                            if (!inf) {
                                // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
                                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                                    r = finalise(r, pr + 1, 0);
                                }
                                break;
                            }
                        } while (checkRoundingDigits(r.d, k += 10, rm));
                    }
                    external = true;
                    return finalise(r, pr, rm);
                };
                /*
                 * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
                 *
                 * arguments {number|string|Decimal}
                 *
                P.max = function () {
                  Array.prototype.push.call(arguments, this);
                  return maxOrMin(this.constructor, arguments, 'lt');
                };
                 */
                /*
                 * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
                 *
                 * arguments {number|string|Decimal}
                 *
                P.min = function () {
                  Array.prototype.push.call(arguments, this);
                  return maxOrMin(this.constructor, arguments, 'gt');
                };
                 */
                /*
                 *  n - 0 = n
                 *  n - N = N
                 *  n - I = -I
                 *  0 - n = -n
                 *  0 - 0 = 0
                 *  0 - N = N
                 *  0 - I = -I
                 *  N - n = N
                 *  N - 0 = N
                 *  N - N = N
                 *  N - I = N
                 *  I - n = I
                 *  I - 0 = I
                 *  I - N = N
                 *  I - I = N
                 *
                 * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 */
                P.minus = P.sub = function (y) {
                    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
                    y = new Ctor(y);
                    // If either is not finite...
                    if (!x.d || !y.d) {
                        // Return NaN if either is NaN.
                        if (!x.s || !y.s)
                            y = new Ctor(NaN);
                        // Return y negated if x is finite and y is ±Infinity.
                        else if (x.d)
                            y.s = -y.s;
                        // Return x if y is finite and x is ±Infinity.
                        // Return x if both are ±Infinity with different signs.
                        // Return NaN if both are ±Infinity with the same sign.
                        else
                            y = new Ctor(y.d || x.s !== y.s ? x : NaN);
                        return y;
                    }
                    // If signs differ...
                    if (x.s != y.s) {
                        y.s = -y.s;
                        return x.plus(y);
                    }
                    xd = x.d;
                    yd = y.d;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    // If either is zero...
                    if (!xd[0] || !yd[0]) {
                        // Return y negated if x is zero and y is non-zero.
                        if (yd[0])
                            y.s = -y.s;
                        // Return x if y is zero and x is non-zero.
                        else if (xd[0])
                            y = new Ctor(x);
                        // Return zero if both are zero.
                        // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
                        else
                            return new Ctor(rm === 3 ? -0 : 0);
                        return external ? finalise(y, pr, rm) : y;
                    }
                    // x and y are finite, non-zero numbers with the same sign.
                    // Calculate base 1e7 exponents.
                    e = mathfloor(y.e / LOG_BASE);
                    xe = mathfloor(x.e / LOG_BASE);
                    xd = xd.slice();
                    k = xe - e;
                    // If base 1e7 exponents differ...
                    if (k) {
                        xLTy = k < 0;
                        if (xLTy) {
                            d = xd;
                            k = -k;
                            len = yd.length;
                        }
                        else {
                            d = yd;
                            e = xe;
                            len = xd.length;
                        }
                        // Numbers with massively different exponents would result in a very high number of
                        // zeros needing to be prepended, but this can be avoided while still ensuring correct
                        // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
                        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
                        if (k > i) {
                            k = i;
                            d.length = 1;
                        }
                        // Prepend zeros to equalise exponents.
                        d.reverse();
                        for (i = k; i--;)
                            d.push(0);
                        d.reverse();
                        // Base 1e7 exponents equal.
                    }
                    else {
                        // Check digits to determine which is the bigger number.
                        i = xd.length;
                        len = yd.length;
                        xLTy = i < len;
                        if (xLTy)
                            len = i;
                        for (i = 0; i < len; i++) {
                            if (xd[i] != yd[i]) {
                                xLTy = xd[i] < yd[i];
                                break;
                            }
                        }
                        k = 0;
                    }
                    if (xLTy) {
                        d = xd;
                        xd = yd;
                        yd = d;
                        y.s = -y.s;
                    }
                    len = xd.length;
                    // Append zeros to `xd` if shorter.
                    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
                    for (i = yd.length - len; i > 0; --i)
                        xd[len++] = 0;
                    // Subtract yd from xd.
                    for (i = yd.length; i > k;) {
                        if (xd[--i] < yd[i]) {
                            for (j = i; j && xd[--j] === 0;)
                                xd[j] = BASE - 1;
                            --xd[j];
                            xd[i] += BASE;
                        }
                        xd[i] -= yd[i];
                    }
                    // Remove trailing zeros.
                    for (; xd[--len] === 0;)
                        xd.pop();
                    // Remove leading zeros and adjust exponent accordingly.
                    for (; xd[0] === 0; xd.shift())
                        --e;
                    // Zero?
                    if (!xd[0])
                        return new Ctor(rm === 3 ? -0 : 0);
                    y.d = xd;
                    y.e = getBase10Exponent(xd, e);
                    return external ? finalise(y, pr, rm) : y;
                };
                /*
                 *   n % 0 =  N
                 *   n % N =  N
                 *   n % I =  n
                 *   0 % n =  0
                 *  -0 % n = -0
                 *   0 % 0 =  N
                 *   0 % N =  N
                 *   0 % I =  0
                 *   N % n =  N
                 *   N % 0 =  N
                 *   N % N =  N
                 *   N % I =  N
                 *   I % n =  N
                 *   I % 0 =  N
                 *   I % N =  N
                 *   I % I =  N
                 *
                 * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
                 * `precision` significant digits using rounding mode `rounding`.
                 *
                 * The result depends on the modulo mode.
                 *
                 */
                P.modulo = P.mod = function (y) {
                    var q, x = this, Ctor = x.constructor;
                    y = new Ctor(y);
                    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
                    if (!x.d || !y.s || y.d && !y.d[0])
                        return new Ctor(NaN);
                    // Return x if y is ±Infinity or x is ±0.
                    if (!y.d || x.d && !x.d[0]) {
                        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
                    }
                    // Prevent rounding of intermediate calculations.
                    external = false;
                    if (Ctor.modulo == 9) {
                        // Euclidian division: q = sign(y) * floor(x / abs(y))
                        // result = x - q * y    where  0 <= result < abs(y)
                        q = divide(x, y.abs(), 0, 3, 1);
                        q.s *= y.s;
                    }
                    else {
                        q = divide(x, y, 0, Ctor.modulo, 1);
                    }
                    q = q.times(y);
                    external = true;
                    return x.minus(q);
                };
                /*
                 * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
                 * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 */
                P.naturalExponential = P.exp = function () {
                    return naturalExponential(this);
                };
                /*
                 * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
                 * rounded to `precision` significant digits using rounding mode `rounding`.
                 *
                 */
                P.naturalLogarithm = P.ln = function () {
                    return naturalLogarithm(this);
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
                 * -1.
                 *
                 */
                P.negated = P.neg = function () {
                    var x = new this.constructor(this);
                    x.s = -x.s;
                    return finalise(x);
                };
                /*
                 *  n + 0 = n
                 *  n + N = N
                 *  n + I = I
                 *  0 + n = n
                 *  0 + 0 = 0
                 *  0 + N = N
                 *  0 + I = I
                 *  N + n = N
                 *  N + 0 = N
                 *  N + N = N
                 *  N + I = N
                 *  I + n = I
                 *  I + 0 = I
                 *  I + N = N
                 *  I + I = I
                 *
                 * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 */
                P.plus = P.add = function (y) {
                    var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
                    y = new Ctor(y);
                    // If either is not finite...
                    if (!x.d || !y.d) {
                        // Return NaN if either is NaN.
                        if (!x.s || !y.s)
                            y = new Ctor(NaN);
                        // Return x if y is finite and x is ±Infinity.
                        // Return x if both are ±Infinity with the same sign.
                        // Return NaN if both are ±Infinity with different signs.
                        // Return y if x is finite and y is ±Infinity.
                        else if (!x.d)
                            y = new Ctor(y.d || x.s === y.s ? x : NaN);
                        return y;
                    }
                    // If signs differ...
                    if (x.s != y.s) {
                        y.s = -y.s;
                        return x.minus(y);
                    }
                    xd = x.d;
                    yd = y.d;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    // If either is zero...
                    if (!xd[0] || !yd[0]) {
                        // Return x if y is zero.
                        // Return y if y is non-zero.
                        if (!yd[0])
                            y = new Ctor(x);
                        return external ? finalise(y, pr, rm) : y;
                    }
                    // x and y are finite, non-zero numbers with the same sign.
                    // Calculate base 1e7 exponents.
                    k = mathfloor(x.e / LOG_BASE);
                    e = mathfloor(y.e / LOG_BASE);
                    xd = xd.slice();
                    i = k - e;
                    // If base 1e7 exponents differ...
                    if (i) {
                        if (i < 0) {
                            d = xd;
                            i = -i;
                            len = yd.length;
                        }
                        else {
                            d = yd;
                            e = k;
                            len = xd.length;
                        }
                        // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
                        k = Math.ceil(pr / LOG_BASE);
                        len = k > len ? k + 1 : len + 1;
                        if (i > len) {
                            i = len;
                            d.length = 1;
                        }
                        // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
                        d.reverse();
                        for (; i--;)
                            d.push(0);
                        d.reverse();
                    }
                    len = xd.length;
                    i = yd.length;
                    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
                    if (len - i < 0) {
                        i = len;
                        d = yd;
                        yd = xd;
                        xd = d;
                    }
                    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
                    for (carry = 0; i;) {
                        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
                        xd[i] %= BASE;
                    }
                    if (carry) {
                        xd.unshift(carry);
                        ++e;
                    }
                    // Remove trailing zeros.
                    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                    for (len = xd.length; xd[--len] == 0;)
                        xd.pop();
                    y.d = xd;
                    y.e = getBase10Exponent(xd, e);
                    return external ? finalise(y, pr, rm) : y;
                };
                /*
                 * Return the number of significant digits of the value of this Decimal.
                 *
                 * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
                 *
                 */
                P.precision = P.sd = function (z) {
                    var k, x = this;
                    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
                        throw Error(invalidArgument + z);
                    if (x.d) {
                        k = getPrecision(x.d);
                        if (z && x.e + 1 > k)
                            k = x.e + 1;
                    }
                    else {
                        k = NaN;
                    }
                    return k;
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
                 * rounding mode `rounding`.
                 *
                 */
                P.round = function () {
                    var x = this, Ctor = x.constructor;
                    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
                };
                /*
                 * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-1, 1]
                 *
                 * sin(x) = x - x^3/3! + x^5/5! - ...
                 *
                 * sin(0)         = 0
                 * sin(-0)        = -0
                 * sin(Infinity)  = NaN
                 * sin(-Infinity) = NaN
                 * sin(NaN)       = NaN
                 *
                 */
                P.sine = P.sin = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
                    Ctor.rounding = 1;
                    x = sine(Ctor, toLessThanHalfPi(Ctor, x));
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
                };
                /*
                 * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 *  sqrt(-n) =  N
                 *  sqrt(N)  =  N
                 *  sqrt(-I) =  N
                 *  sqrt(I)  =  I
                 *  sqrt(0)  =  0
                 *  sqrt(-0) = -0
                 *
                 */
                P.squareRoot = P.sqrt = function () {
                    var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;
                    // Negative/NaN/Infinity/zero?
                    if (s !== 1 || !d || !d[0]) {
                        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
                    }
                    external = false;
                    // Initial estimate.
                    s = Math.sqrt(+x);
                    // Math.sqrt underflow/overflow?
                    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
                    if (s == 0 || s == 1 / 0) {
                        n = digitsToString(d);
                        if ((n.length + e) % 2 == 0)
                            n += '0';
                        s = Math.sqrt(n);
                        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
                        if (s == 1 / 0) {
                            n = '1e' + e;
                        }
                        else {
                            n = s.toExponential();
                            n = n.slice(0, n.indexOf('e') + 1) + e;
                        }
                        r = new Ctor(n);
                    }
                    else {
                        r = new Ctor(s.toString());
                    }
                    sd = (e = Ctor.precision) + 3;
                    // Newton-Raphson iteration.
                    for (;;) {
                        t = r;
                        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
                        // TODO? Replace with for-loop and checkRoundingDigits.
                        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                            n = n.slice(sd - 3, sd + 1);
                            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
                            // 4999, i.e. approaching a rounding boundary, continue the iteration.
                            if (n == '9999' || !rep && n == '4999') {
                                // On the first iteration only, check to see if rounding up gives the exact result as the
                                // nines may infinitely repeat.
                                if (!rep) {
                                    finalise(t, e + 1, 0);
                                    if (t.times(t).eq(x)) {
                                        r = t;
                                        break;
                                    }
                                }
                                sd += 4;
                                rep = 1;
                            }
                            else {
                                // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
                                // If not, then there are further digits and m will be truthy.
                                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                    // Truncate to the first rounding digit.
                                    finalise(r, e + 1, 1);
                                    m = !r.times(r).eq(x);
                                }
                                break;
                            }
                        }
                    }
                    external = true;
                    return finalise(r, e, Ctor.rounding, m);
                };
                /*
                 * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-Infinity, Infinity]
                 *
                 * tan(0)         = 0
                 * tan(-0)        = -0
                 * tan(Infinity)  = NaN
                 * tan(-Infinity) = NaN
                 * tan(NaN)       = NaN
                 *
                 */
                P.tangent = P.tan = function () {
                    var pr, rm, x = this, Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 10;
                    Ctor.rounding = 1;
                    x = x.sin();
                    x.s = 1;
                    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
                };
                /*
                 *  n * 0 = 0
                 *  n * N = N
                 *  n * I = I
                 *  0 * n = 0
                 *  0 * 0 = 0
                 *  0 * N = N
                 *  0 * I = N
                 *  N * n = N
                 *  N * 0 = N
                 *  N * N = N
                 *  N * I = N
                 *  I * n = I
                 *  I * 0 = N
                 *  I * N = N
                 *  I * I = I
                 *
                 * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 */
                P.times = P.mul = function (y) {
                    var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
                    y.s *= x.s;
                    // If either is NaN, ±Infinity or ±0...
                    if (!xd || !xd[0] || !yd || !yd[0]) {
                        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd
                            // Return NaN if either is NaN.
                            // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
                            ? NaN
                            // Return ±Infinity if either is ±Infinity.
                            // Return ±0 if either is ±0.
                            : !xd || !yd ? y.s / 0 : y.s * 0);
                    }
                    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
                    xdL = xd.length;
                    ydL = yd.length;
                    // Ensure xd points to the longer array.
                    if (xdL < ydL) {
                        r = xd;
                        xd = yd;
                        yd = r;
                        rL = xdL;
                        xdL = ydL;
                        ydL = rL;
                    }
                    // Initialise the result array with zeros.
                    r = [];
                    rL = xdL + ydL;
                    for (i = rL; i--;)
                        r.push(0);
                    // Multiply!
                    for (i = ydL; --i >= 0;) {
                        carry = 0;
                        for (k = xdL + i; k > i;) {
                            t = r[k] + yd[i] * xd[k - i - 1] + carry;
                            r[k--] = t % BASE | 0;
                            carry = t / BASE | 0;
                        }
                        r[k] = (r[k] + carry) % BASE | 0;
                    }
                    // Remove trailing zeros.
                    for (; !r[--rL];)
                        r.pop();
                    if (carry)
                        ++e;
                    else
                        r.shift();
                    y.d = r;
                    y.e = getBase10Exponent(r, e);
                    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
                };
                /*
                 * Return a string representing the value of this Decimal in base 2, round to `sd` significant
                 * digits using rounding mode `rm`.
                 *
                 * If the optional `sd` argument is present then return binary exponential notation.
                 *
                 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 */
                P.toBinary = function (sd, rm) {
                    return toStringBinary(this, 2, sd, rm);
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
                 * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
                 *
                 * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
                 *
                 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 */
                P.toDecimalPlaces = P.toDP = function (dp, rm) {
                    var x = this, Ctor = x.constructor;
                    x = new Ctor(x);
                    if (dp === void 0)
                        return x;
                    checkInt32(dp, 0, MAX_DIGITS);
                    if (rm === void 0)
                        rm = Ctor.rounding;
                    else
                        checkInt32(rm, 0, 8);
                    return finalise(x, dp + x.e + 1, rm);
                };
                /*
                 * Return a string representing the value of this Decimal in exponential notation rounded to
                 * `dp` fixed decimal places using rounding mode `rounding`.
                 *
                 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 */
                P.toExponential = function (dp, rm) {
                    var str, x = this, Ctor = x.constructor;
                    if (dp === void 0) {
                        str = finiteToString(x, true);
                    }
                    else {
                        checkInt32(dp, 0, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        x = finalise(new Ctor(x), dp + 1, rm);
                        str = finiteToString(x, true, dp + 1);
                    }
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                /*
                 * Return a string representing the value of this Decimal in normal (fixed-point) notation to
                 * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
                 * omitted.
                 *
                 * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
                 *
                 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
                 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
                 * (-0).toFixed(3) is '0.000'.
                 * (-0.5).toFixed(0) is '-0'.
                 *
                 */
                P.toFixed = function (dp, rm) {
                    var str, y, x = this, Ctor = x.constructor;
                    if (dp === void 0) {
                        str = finiteToString(x);
                    }
                    else {
                        checkInt32(dp, 0, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        y = finalise(new Ctor(x), dp + x.e + 1, rm);
                        str = finiteToString(y, false, dp + y.e + 1);
                    }
                    // To determine whether to add the minus sign look at the value before it was rounded,
                    // i.e. look at `x` rather than `y`.
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                /*
                 * Return an array representing the value of this Decimal as a simple fraction with an integer
                 * numerator and an integer denominator.
                 *
                 * The denominator will be a positive non-zero value less than or equal to the specified maximum
                 * denominator. If a maximum denominator is not specified, the denominator will be the lowest
                 * value necessary to represent the number exactly.
                 *
                 * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
                 *
                 */
                P.toFraction = function (maxD) {
                    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;
                    if (!xd)
                        return new Ctor(x);
                    n1 = d0 = new Ctor(1);
                    d1 = n0 = new Ctor(0);
                    d = new Ctor(d1);
                    e = d.e = getPrecision(xd) - x.e - 1;
                    k = e % LOG_BASE;
                    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
                    if (maxD == null) {
                        // d is 10**e, the minimum max-denominator needed.
                        maxD = e > 0 ? d : n1;
                    }
                    else {
                        n = new Ctor(maxD);
                        if (!n.isInt() || n.lt(n1))
                            throw Error(invalidArgument + n);
                        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
                    }
                    external = false;
                    n = new Ctor(digitsToString(xd));
                    pr = Ctor.precision;
                    Ctor.precision = e = xd.length * LOG_BASE * 2;
                    for (;;) {
                        q = divide(n, d, 0, 1, 1);
                        d2 = d0.plus(q.times(d1));
                        if (d2.cmp(maxD) == 1)
                            break;
                        d0 = d1;
                        d1 = d2;
                        d2 = n1;
                        n1 = n0.plus(q.times(d2));
                        n0 = d2;
                        d2 = d;
                        d = n.minus(q.times(d2));
                        n = d2;
                    }
                    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
                    n0 = n0.plus(d2.times(n1));
                    d0 = d0.plus(d2.times(d1));
                    n0.s = n1.s = x.s;
                    // Determine which fraction is closer to x, n0/d0 or n1/d1?
                    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
                        ? [n1, d1] : [n0, d0];
                    Ctor.precision = pr;
                    external = true;
                    return r;
                };
                /*
                 * Return a string representing the value of this Decimal in base 16, round to `sd` significant
                 * digits using rounding mode `rm`.
                 *
                 * If the optional `sd` argument is present then return binary exponential notation.
                 *
                 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 */
                P.toHexadecimal = P.toHex = function (sd, rm) {
                    return toStringBinary(this, 16, sd, rm);
                };
                /*
                 * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
                 * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
                 *
                 * The return value will always have the same sign as this Decimal, unless either this Decimal
                 * or `y` is NaN, in which case the return value will be also be NaN.
                 *
                 * The return value is not affected by the value of `precision`.
                 *
                 * y {number|string|Decimal} The magnitude to round to a multiple of.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 * 'toNearest() rounding mode not an integer: {rm}'
                 * 'toNearest() rounding mode out of range: {rm}'
                 *
                 */
                P.toNearest = function (y, rm) {
                    var x = this, Ctor = x.constructor;
                    x = new Ctor(x);
                    if (y == null) {
                        // If x is not finite, return x.
                        if (!x.d)
                            return x;
                        y = new Ctor(1);
                        rm = Ctor.rounding;
                    }
                    else {
                        y = new Ctor(y);
                        if (rm === void 0) {
                            rm = Ctor.rounding;
                        }
                        else {
                            checkInt32(rm, 0, 8);
                        }
                        // If x is not finite, return x if y is not NaN, else NaN.
                        if (!x.d)
                            return y.s ? x : y;
                        // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
                        if (!y.d) {
                            if (y.s)
                                y.s = x.s;
                            return y;
                        }
                    }
                    // If y is not zero, calculate the nearest multiple of y to x.
                    if (y.d[0]) {
                        external = false;
                        x = divide(x, y, 0, rm, 1).times(y);
                        external = true;
                        finalise(x);
                        // If y is zero, return zero with the sign of x.
                    }
                    else {
                        y.s = x.s;
                        x = y;
                    }
                    return x;
                };
                /*
                 * Return the value of this Decimal converted to a number primitive.
                 * Zero keeps its sign.
                 *
                 */
                P.toNumber = function () {
                    return +this;
                };
                /*
                 * Return a string representing the value of this Decimal in base 8, round to `sd` significant
                 * digits using rounding mode `rm`.
                 *
                 * If the optional `sd` argument is present then return binary exponential notation.
                 *
                 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 */
                P.toOctal = function (sd, rm) {
                    return toStringBinary(this, 8, sd, rm);
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
                 * to `precision` significant digits using rounding mode `rounding`.
                 *
                 * ECMAScript compliant.
                 *
                 *   pow(x, NaN)                           = NaN
                 *   pow(x, ±0)                            = 1
              
                 *   pow(NaN, non-zero)                    = NaN
                 *   pow(abs(x) > 1, +Infinity)            = +Infinity
                 *   pow(abs(x) > 1, -Infinity)            = +0
                 *   pow(abs(x) == 1, ±Infinity)           = NaN
                 *   pow(abs(x) < 1, +Infinity)            = +0
                 *   pow(abs(x) < 1, -Infinity)            = +Infinity
                 *   pow(+Infinity, y > 0)                 = +Infinity
                 *   pow(+Infinity, y < 0)                 = +0
                 *   pow(-Infinity, odd integer > 0)       = -Infinity
                 *   pow(-Infinity, even integer > 0)      = +Infinity
                 *   pow(-Infinity, odd integer < 0)       = -0
                 *   pow(-Infinity, even integer < 0)      = +0
                 *   pow(+0, y > 0)                        = +0
                 *   pow(+0, y < 0)                        = +Infinity
                 *   pow(-0, odd integer > 0)              = -0
                 *   pow(-0, even integer > 0)             = +0
                 *   pow(-0, odd integer < 0)              = -Infinity
                 *   pow(-0, even integer < 0)             = +Infinity
                 *   pow(finite x < 0, finite non-integer) = NaN
                 *
                 * For non-integer or very large exponents pow(x, y) is calculated using
                 *
                 *   x^y = exp(y*ln(x))
                 *
                 * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
                 * probability of an incorrectly rounded result
                 * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
                 * i.e. 1 in 250,000,000,000,000
                 *
                 * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
                 *
                 * y {number|string|Decimal} The power to which to raise this Decimal.
                 *
                 */
                P.toPower = P.pow = function (y) {
                    var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
                    // Either ±Infinity, NaN or ±0?
                    if (!x.d || !y.d || !x.d[0] || !y.d[0])
                        return new Ctor(mathpow(+x, yn));
                    x = new Ctor(x);
                    if (x.eq(1))
                        return x;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (y.eq(1))
                        return finalise(x, pr, rm);
                    // y exponent
                    e = mathfloor(y.e / LOG_BASE);
                    // If y is a small integer use the 'exponentiation by squaring' algorithm.
                    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
                        r = intPow(Ctor, x, k, pr);
                        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
                    }
                    s = x.s;
                    // if x is negative
                    if (s < 0) {
                        // if y is not an integer
                        if (e < y.d.length - 1)
                            return new Ctor(NaN);
                        // Result is positive if x is negative and the last digit of integer y is even.
                        if ((y.d[e] & 1) == 0)
                            s = 1;
                        // if x.eq(-1)
                        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
                            x.s = s;
                            return x;
                        }
                    }
                    // Estimate result exponent.
                    // x^y = 10^e,  where e = y * log10(x)
                    // log10(x) = log10(x_significand) + x_exponent
                    // log10(x_significand) = ln(x_significand) / ln(10)
                    k = mathpow(+x, yn);
                    e = k == 0 || !isFinite(k)
                        ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
                        : new Ctor(k + '').e;
                    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.
                    // Overflow/underflow?
                    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)
                        return new Ctor(e > 0 ? s / 0 : 0);
                    external = false;
                    Ctor.rounding = x.s = 1;
                    // Estimate the extra guard digits needed to ensure five correct rounding digits from
                    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
                    // new Decimal(2.32456).pow('2087987436534566.46411')
                    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
                    k = Math.min(12, (e + '').length);
                    // r = x^y = exp(y*ln(x))
                    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
                    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
                    if (r.d) {
                        // Truncate to the required precision plus five rounding digits.
                        r = finalise(r, pr + 5, 1);
                        // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
                        // the result.
                        if (checkRoundingDigits(r.d, pr, rm)) {
                            e = pr + 10;
                            // Truncate to the increased precision plus five rounding digits.
                            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
                            // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
                            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
                                r = finalise(r, pr + 1, 0);
                            }
                        }
                    }
                    r.s = s;
                    external = true;
                    Ctor.rounding = rm;
                    return finalise(r, pr, rm);
                };
                /*
                 * Return a string representing the value of this Decimal rounded to `sd` significant digits
                 * using rounding mode `rounding`.
                 *
                 * Return exponential notation if `sd` is less than the number of digits necessary to represent
                 * the integer part of the value in normal notation.
                 *
                 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 */
                P.toPrecision = function (sd, rm) {
                    var str, x = this, Ctor = x.constructor;
                    if (sd === void 0) {
                        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    }
                    else {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        x = finalise(new Ctor(x), sd, rm);
                        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
                    }
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
                 * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
                 * omitted.
                 *
                 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
                 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
                 *
                 * 'toSD() digits out of range: {sd}'
                 * 'toSD() digits not an integer: {sd}'
                 * 'toSD() rounding mode not an integer: {rm}'
                 * 'toSD() rounding mode out of range: {rm}'
                 *
                 */
                P.toSignificantDigits = P.toSD = function (sd, rm) {
                    var x = this, Ctor = x.constructor;
                    if (sd === void 0) {
                        sd = Ctor.precision;
                        rm = Ctor.rounding;
                    }
                    else {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                    }
                    return finalise(new Ctor(x), sd, rm);
                };
                /*
                 * Return a string representing the value of this Decimal.
                 *
                 * Return exponential notation if this Decimal has a positive exponent equal to or greater than
                 * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
                 *
                 */
                P.toString = function () {
                    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    return x.isNeg() && !x.isZero() ? '-' + str : str;
                };
                /*
                 * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
                 *
                 */
                P.truncated = P.trunc = function () {
                    return finalise(new this.constructor(this), this.e + 1, 1);
                };
                /*
                 * Return a string representing the value of this Decimal.
                 * Unlike `toString`, negative zero will include the minus sign.
                 *
                 */
                P.valueOf = P.toJSON = function () {
                    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    return x.isNeg() ? '-' + str : str;
                };
                /*
                // Add aliases to match BigDecimal method names.
                // P.add = P.plus;
                P.subtract = P.minus;
                P.multiply = P.times;
                P.divide = P.div;
                P.remainder = P.mod;
                P.compareTo = P.cmp;
                P.negate = P.neg;
                 */
                // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.
                /*
                 *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
                 *                           finiteToString, naturalExponential, naturalLogarithm
                 *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
                 *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
                 *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
                 *  convertBase              toStringBinary, parseOther
                 *  cos                      P.cos
                 *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
                 *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
                 *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
                 *                           taylorSeries, atan2, parseOther
                 *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
                 *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
                 *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
                 *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
                 *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
                 *                           P.truncated, divide, getLn10, getPi, naturalExponential,
                 *                           naturalLogarithm, ceil, floor, round, trunc
                 *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
                 *                           toStringBinary
                 *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
                 *  getLn10                  P.logarithm, naturalLogarithm
                 *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
                 *  getPrecision             P.precision, P.toFraction
                 *  getZeroString            digitsToString, finiteToString
                 *  intPow                   P.toPower, parseOther
                 *  isOdd                    toLessThanHalfPi
                 *  maxOrMin                 max, min
                 *  naturalExponential       P.naturalExponential, P.toPower
                 *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
                 *                           P.toPower, naturalExponential
                 *  nonFiniteToString        finiteToString, toStringBinary
                 *  parseDecimal             Decimal
                 *  parseOther               Decimal
                 *  sin                      P.sin
                 *  taylorSeries             P.cosh, P.sinh, cos, sin
                 *  toLessThanHalfPi         P.cos, P.sin
                 *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
                 *  truncate                 intPow
                 *
                 *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
                 *                           naturalLogarithm, config, parseOther, random, Decimal
                 */
                function digitsToString(d) {
                    var i, k, ws, indexOfLastWord = d.length - 1, str = '', w = d[0];
                    if (indexOfLastWord > 0) {
                        str += w;
                        for (i = 1; i < indexOfLastWord; i++) {
                            ws = d[i] + '';
                            k = LOG_BASE - ws.length;
                            if (k)
                                str += getZeroString(k);
                            str += ws;
                        }
                        w = d[i];
                        ws = w + '';
                        k = LOG_BASE - ws.length;
                        if (k)
                            str += getZeroString(k);
                    }
                    else if (w === 0) {
                        return '0';
                    }
                    // Remove trailing zeros of last w.
                    for (; w % 10 === 0;)
                        w /= 10;
                    return str + w;
                }
                function checkInt32(i, min, max) {
                    if (i !== ~~i || i < min || i > max) {
                        throw Error(invalidArgument + i);
                    }
                }
                /*
                 * Check 5 rounding digits if `repeating` is null, 4 otherwise.
                 * `repeating == null` if caller is `log` or `pow`,
                 * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
                 */
                function checkRoundingDigits(d, i, rm, repeating) {
                    var di, k, r, rd;
                    // Get the length of the first word of the array d.
                    for (k = d[0]; k >= 10; k /= 10)
                        --i;
                    // Is the rounding digit in the first word of d?
                    if (--i < 0) {
                        i += LOG_BASE;
                        di = 0;
                    }
                    else {
                        di = Math.ceil((i + 1) / LOG_BASE);
                        i %= LOG_BASE;
                    }
                    // i is the index (0 - 6) of the rounding digit.
                    // E.g. if within the word 3487563 the first rounding digit is 5,
                    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
                    k = mathpow(10, LOG_BASE - i);
                    rd = d[di] % k | 0;
                    if (repeating == null) {
                        if (i < 3) {
                            if (i == 0)
                                rd = rd / 100 | 0;
                            else if (i == 1)
                                rd = rd / 10 | 0;
                            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
                        }
                        else {
                            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
                                (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
                                (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
                        }
                    }
                    else {
                        if (i < 4) {
                            if (i == 0)
                                rd = rd / 1000 | 0;
                            else if (i == 1)
                                rd = rd / 100 | 0;
                            else if (i == 2)
                                rd = rd / 10 | 0;
                            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
                        }
                        else {
                            r = ((repeating || rm < 4) && rd + 1 == k ||
                                (!repeating && rm > 3) && rd + 1 == k / 2) &&
                                (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
                        }
                    }
                    return r;
                }
                // Convert string of `baseIn` to an array of numbers of `baseOut`.
                // Eg. convertBase('255', 10, 16) returns [15, 15].
                // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
                function convertBase(str, baseIn, baseOut) {
                    var j, arr = [0], arrL, i = 0, strL = str.length;
                    for (; i < strL;) {
                        for (arrL = arr.length; arrL--;)
                            arr[arrL] *= baseIn;
                        arr[0] += NUMERALS.indexOf(str.charAt(i++));
                        for (j = 0; j < arr.length; j++) {
                            if (arr[j] > baseOut - 1) {
                                if (arr[j + 1] === void 0)
                                    arr[j + 1] = 0;
                                arr[j + 1] += arr[j] / baseOut | 0;
                                arr[j] %= baseOut;
                            }
                        }
                    }
                    return arr.reverse();
                }
                /*
                 * cos(x) = 1 - x^2/2! + x^4/4! - ...
                 * |x| < pi/2
                 *
                 */
                function cosine(Ctor, x) {
                    var k, y, len = x.d.length;
                    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
                    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1
                    // Estimate the optimum number of times to use the argument reduction.
                    if (len < 32) {
                        k = Math.ceil(len / 3);
                        y = (1 / tinyPow(4, k)).toString();
                    }
                    else {
                        k = 16;
                        y = '2.3283064365386962890625e-10';
                    }
                    Ctor.precision += k;
                    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
                    // Reverse argument reduction
                    for (var i = k; i--;) {
                        var cos2x = x.times(x);
                        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
                    }
                    Ctor.precision -= k;
                    return x;
                }
                /*
                 * Perform division in the specified base.
                 */
                var divide = (function () {
                    // Assumes non-zero x and k, and hence non-zero result.
                    function multiplyInteger(x, k, base) {
                        var temp, carry = 0, i = x.length;
                        for (x = x.slice(); i--;) {
                            temp = x[i] * k + carry;
                            x[i] = temp % base | 0;
                            carry = temp / base | 0;
                        }
                        if (carry)
                            x.unshift(carry);
                        return x;
                    }
                    function compare(a, b, aL, bL) {
                        var i, r;
                        if (aL != bL) {
                            r = aL > bL ? 1 : -1;
                        }
                        else {
                            for (i = r = 0; i < aL; i++) {
                                if (a[i] != b[i]) {
                                    r = a[i] > b[i] ? 1 : -1;
                                    break;
                                }
                            }
                        }
                        return r;
                    }
                    function subtract(a, b, aL, base) {
                        var i = 0;
                        // Subtract b from a.
                        for (; aL--;) {
                            a[aL] -= i;
                            i = a[aL] < b[aL] ? 1 : 0;
                            a[aL] = i * base + a[aL] - b[aL];
                        }
                        // Remove leading zeros.
                        for (; !a[0] && a.length > 1;)
                            a.shift();
                    }
                    return function (x, y, pr, rm, dp, base) {
                        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
                        // Either NaN, Infinity or 0?
                        if (!xd || !xd[0] || !yd || !yd[0]) {
                            return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
                            !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :
                                // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
                                xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
                        }
                        if (base) {
                            logBase = 1;
                            e = x.e - y.e;
                        }
                        else {
                            base = BASE;
                            logBase = LOG_BASE;
                            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
                        }
                        yL = yd.length;
                        xL = xd.length;
                        q = new Ctor(sign);
                        qd = q.d = [];
                        // Result exponent may be one less than e.
                        // The digit array of a Decimal from toStringBinary may have trailing zeros.
                        for (i = 0; yd[i] == (xd[i] || 0); i++)
                            ;
                        if (yd[i] > (xd[i] || 0))
                            e--;
                        if (pr == null) {
                            sd = pr = Ctor.precision;
                            rm = Ctor.rounding;
                        }
                        else if (dp) {
                            sd = pr + (x.e - y.e) + 1;
                        }
                        else {
                            sd = pr;
                        }
                        if (sd < 0) {
                            qd.push(1);
                            more = true;
                        }
                        else {
                            // Convert precision in number of base 10 digits to base 1e7 digits.
                            sd = sd / logBase + 2 | 0;
                            i = 0;
                            // divisor < 1e7
                            if (yL == 1) {
                                k = 0;
                                yd = yd[0];
                                sd++;
                                // k is the carry.
                                for (; (i < xL || k) && sd--; i++) {
                                    t = k * base + (xd[i] || 0);
                                    qd[i] = t / yd | 0;
                                    k = t % yd | 0;
                                }
                                more = k || i < xL;
                                // divisor >= 1e7
                            }
                            else {
                                // Normalise xd and yd so highest order digit of yd is >= base/2
                                k = base / (yd[0] + 1) | 0;
                                if (k > 1) {
                                    yd = multiplyInteger(yd, k, base);
                                    xd = multiplyInteger(xd, k, base);
                                    yL = yd.length;
                                    xL = xd.length;
                                }
                                xi = yL;
                                rem = xd.slice(0, yL);
                                remL = rem.length;
                                // Add zeros to make remainder as long as divisor.
                                for (; remL < yL;)
                                    rem[remL++] = 0;
                                yz = yd.slice();
                                yz.unshift(0);
                                yd0 = yd[0];
                                if (yd[1] >= base / 2)
                                    ++yd0;
                                do {
                                    k = 0;
                                    // Compare divisor and remainder.
                                    cmp = compare(yd, rem, yL, remL);
                                    // If divisor < remainder.
                                    if (cmp < 0) {
                                        // Calculate trial digit, k.
                                        rem0 = rem[0];
                                        if (yL != remL)
                                            rem0 = rem0 * base + (rem[1] || 0);
                                        // k will be how many times the divisor goes into the current remainder.
                                        k = rem0 / yd0 | 0;
                                        //  Algorithm:
                                        //  1. product = divisor * trial digit (k)
                                        //  2. if product > remainder: product -= divisor, k--
                                        //  3. remainder -= product
                                        //  4. if product was < remainder at 2:
                                        //    5. compare new remainder and divisor
                                        //    6. If remainder > divisor: remainder -= divisor, k++
                                        if (k > 1) {
                                            if (k >= base)
                                                k = base - 1;
                                            // product = divisor * trial digit.
                                            prod = multiplyInteger(yd, k, base);
                                            prodL = prod.length;
                                            remL = rem.length;
                                            // Compare product and remainder.
                                            cmp = compare(prod, rem, prodL, remL);
                                            // product > remainder.
                                            if (cmp == 1) {
                                                k--;
                                                // Subtract divisor from product.
                                                subtract(prod, yL < prodL ? yz : yd, prodL, base);
                                            }
                                        }
                                        else {
                                            // cmp is -1.
                                            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                                            // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                                            if (k == 0)
                                                cmp = k = 1;
                                            prod = yd.slice();
                                        }
                                        prodL = prod.length;
                                        if (prodL < remL)
                                            prod.unshift(0);
                                        // Subtract product from remainder.
                                        subtract(rem, prod, remL, base);
                                        // If product was < previous remainder.
                                        if (cmp == -1) {
                                            remL = rem.length;
                                            // Compare divisor and new remainder.
                                            cmp = compare(yd, rem, yL, remL);
                                            // If divisor < new remainder, subtract divisor from remainder.
                                            if (cmp < 1) {
                                                k++;
                                                // Subtract divisor from remainder.
                                                subtract(rem, yL < remL ? yz : yd, remL, base);
                                            }
                                        }
                                        remL = rem.length;
                                    }
                                    else if (cmp === 0) {
                                        k++;
                                        rem = [0];
                                    } // if cmp === 1, k will be 0
                                    // Add the next digit, k, to the result array.
                                    qd[i++] = k;
                                    // Update the remainder.
                                    if (cmp && rem[0]) {
                                        rem[remL++] = xd[xi] || 0;
                                    }
                                    else {
                                        rem = [xd[xi]];
                                        remL = 1;
                                    }
                                } while ((xi++ < xL || rem[0] !== void 0) && sd--);
                                more = rem[0] !== void 0;
                            }
                            // Leading zero?
                            if (!qd[0])
                                qd.shift();
                        }
                        // logBase is 1 when divide is being used for base conversion.
                        if (logBase == 1) {
                            q.e = e;
                            inexact = more;
                        }
                        else {
                            // To calculate q.e, first get the number of digits of qd[0].
                            for (i = 1, k = qd[0]; k >= 10; k /= 10)
                                i++;
                            q.e = i + e * logBase - 1;
                            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
                        }
                        return q;
                    };
                })();
                /*
                 * Round `x` to `sd` significant digits using rounding mode `rm`.
                 * Check for over/under-flow.
                 */
                function finalise(x, sd, rm, isTruncated) {
                    var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
                    // Don't round if sd is null or undefined.
                    out: if (sd != null) {
                        xd = x.d;
                        // Infinity/NaN.
                        if (!xd)
                            return x;
                        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
                        // w: the word of xd containing rd, a base 1e7 number.
                        // xdi: the index of w within xd.
                        // digits: the number of digits of w.
                        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
                        // they had leading zeros)
                        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
                        // Get the length of the first word of the digits array xd.
                        for (digits = 1, k = xd[0]; k >= 10; k /= 10)
                            digits++;
                        i = sd - digits;
                        // Is the rounding digit in the first word of xd?
                        if (i < 0) {
                            i += LOG_BASE;
                            j = sd;
                            w = xd[xdi = 0];
                            // Get the rounding digit at index j of w.
                            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
                        }
                        else {
                            xdi = Math.ceil((i + 1) / LOG_BASE);
                            k = xd.length;
                            if (xdi >= k) {
                                if (isTruncated) {
                                    // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
                                    for (; k++ <= xdi;)
                                        xd.push(0);
                                    w = rd = 0;
                                    digits = 1;
                                    i %= LOG_BASE;
                                    j = i - LOG_BASE + 1;
                                }
                                else {
                                    break out;
                                }
                            }
                            else {
                                w = k = xd[xdi];
                                // Get the number of digits of w.
                                for (digits = 1; k >= 10; k /= 10)
                                    digits++;
                                // Get the index of rd within w.
                                i %= LOG_BASE;
                                // Get the index of rd within w, adjusted for leading zeros.
                                // The number of leading zeros of w is given by LOG_BASE - digits.
                                j = i - LOG_BASE + digits;
                                // Get the rounding digit at index j of w.
                                rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
                            }
                        }
                        // Are there any non-zero digits after the rounding digit?
                        isTruncated = isTruncated || sd < 0 ||
                            xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
                        // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
                        // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
                        // will give 714.
                        roundUp = rm < 4
                            ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                            : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&
                                // Check whether the digit to the left of the rounding digit is odd.
                                ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
                                rm == (x.s < 0 ? 8 : 7));
                        if (sd < 1 || !xd[0]) {
                            xd.length = 0;
                            if (roundUp) {
                                // Convert sd to decimal places.
                                sd -= x.e + 1;
                                // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
                                x.e = -sd || 0;
                            }
                            else {
                                // Zero.
                                xd[0] = x.e = 0;
                            }
                            return x;
                        }
                        // Remove excess digits.
                        if (i == 0) {
                            xd.length = xdi;
                            k = 1;
                            xdi--;
                        }
                        else {
                            xd.length = xdi + 1;
                            k = mathpow(10, LOG_BASE - i);
                            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                            // j > 0 means i > number of leading zeros of w.
                            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
                        }
                        if (roundUp) {
                            for (;;) {
                                // Is the digit to be rounded up in the first word of xd?
                                if (xdi == 0) {
                                    // i will be the length of xd[0] before k is added.
                                    for (i = 1, j = xd[0]; j >= 10; j /= 10)
                                        i++;
                                    j = xd[0] += k;
                                    for (k = 1; j >= 10; j /= 10)
                                        k++;
                                    // if i != k the length has increased.
                                    if (i != k) {
                                        x.e++;
                                        if (xd[0] == BASE)
                                            xd[0] = 1;
                                    }
                                    break;
                                }
                                else {
                                    xd[xdi] += k;
                                    if (xd[xdi] != BASE)
                                        break;
                                    xd[xdi--] = 0;
                                    k = 1;
                                }
                            }
                        }
                        // Remove trailing zeros.
                        for (i = xd.length; xd[--i] === 0;)
                            xd.pop();
                    }
                    if (external) {
                        // Overflow?
                        if (x.e > Ctor.maxE) {
                            // Infinity.
                            x.d = null;
                            x.e = NaN;
                            // Underflow?
                        }
                        else if (x.e < Ctor.minE) {
                            // Zero.
                            x.e = 0;
                            x.d = [0];
                            // Ctor.underflow = true;
                        } // else Ctor.underflow = false;
                    }
                    return x;
                }
                function finiteToString(x, isExp, sd) {
                    if (!x.isFinite())
                        return nonFiniteToString(x);
                    var k, e = x.e, str = digitsToString(x.d), len = str.length;
                    if (isExp) {
                        if (sd && (k = sd - len) > 0) {
                            str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
                        }
                        else if (len > 1) {
                            str = str.charAt(0) + '.' + str.slice(1);
                        }
                        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
                    }
                    else if (e < 0) {
                        str = '0.' + getZeroString(-e - 1) + str;
                        if (sd && (k = sd - len) > 0)
                            str += getZeroString(k);
                    }
                    else if (e >= len) {
                        str += getZeroString(e + 1 - len);
                        if (sd && (k = sd - e - 1) > 0)
                            str = str + '.' + getZeroString(k);
                    }
                    else {
                        if ((k = e + 1) < len)
                            str = str.slice(0, k) + '.' + str.slice(k);
                        if (sd && (k = sd - len) > 0) {
                            if (e + 1 === len)
                                str += '.';
                            str += getZeroString(k);
                        }
                    }
                    return str;
                }
                // Calculate the base 10 exponent from the base 1e7 exponent.
                function getBase10Exponent(digits, e) {
                    var w = digits[0];
                    // Add the number of digits of the first word of the digits array.
                    for (e *= LOG_BASE; w >= 10; w /= 10)
                        e++;
                    return e;
                }
                function getLn10(Ctor, sd, pr) {
                    if (sd > LN10_PRECISION) {
                        // Reset global state in case the exception is caught.
                        external = true;
                        if (pr)
                            Ctor.precision = pr;
                        throw Error(precisionLimitExceeded);
                    }
                    return finalise(new Ctor(LN10), sd, 1, true);
                }
                function getPi(Ctor, sd, rm) {
                    if (sd > PI_PRECISION)
                        throw Error(precisionLimitExceeded);
                    return finalise(new Ctor(PI), sd, rm, true);
                }
                function getPrecision(digits) {
                    var w = digits.length - 1, len = w * LOG_BASE + 1;
                    w = digits[w];
                    // If non-zero...
                    if (w) {
                        // Subtract the number of trailing zeros of the last word.
                        for (; w % 10 == 0; w /= 10)
                            len--;
                        // Add the number of digits of the first word.
                        for (w = digits[0]; w >= 10; w /= 10)
                            len++;
                    }
                    return len;
                }
                function getZeroString(k) {
                    var zs = '';
                    for (; k--;)
                        zs += '0';
                    return zs;
                }
                /*
                 * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
                 * integer of type number.
                 *
                 * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
                 *
                 */
                function intPow(Ctor, x, n, pr) {
                    var isTruncated, r = new Ctor(1), 
                    // Max n of 9007199254740991 takes 53 loop iterations.
                    // Maximum digits array length; leaves [28, 34] guard digits.
                    k = Math.ceil(pr / LOG_BASE + 4);
                    external = false;
                    for (;;) {
                        if (n % 2) {
                            r = r.times(x);
                            if (truncate(r.d, k))
                                isTruncated = true;
                        }
                        n = mathfloor(n / 2);
                        if (n === 0) {
                            // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
                            n = r.d.length - 1;
                            if (isTruncated && r.d[n] === 0)
                                ++r.d[n];
                            break;
                        }
                        x = x.times(x);
                        truncate(x.d, k);
                    }
                    external = true;
                    return r;
                }
                function isOdd(n) {
                    return n.d[n.d.length - 1] & 1;
                }
                /*
                 * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
                 */
                function maxOrMin(Ctor, args, ltgt) {
                    var y, x = new Ctor(args[0]), i = 0;
                    for (; ++i < args.length;) {
                        y = new Ctor(args[i]);
                        if (!y.s) {
                            x = y;
                            break;
                        }
                        else if (x[ltgt](y)) {
                            x = y;
                        }
                    }
                    return x;
                }
                /*
                 * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
                 * digits.
                 *
                 * Taylor/Maclaurin series.
                 *
                 * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
                 *
                 * Argument reduction:
                 *   Repeat x = x / 32, k += 5, until |x| < 0.1
                 *   exp(x) = exp(x / 2^k)^(2^k)
                 *
                 * Previously, the argument was initially reduced by
                 * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
                 * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
                 * found to be slower than just dividing repeatedly by 32 as above.
                 *
                 * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
                 * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
                 * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
                 *
                 *  exp(Infinity)  = Infinity
                 *  exp(-Infinity) = 0
                 *  exp(NaN)       = NaN
                 *  exp(±0)        = 1
                 *
                 *  exp(x) is non-terminating for any finite, non-zero x.
                 *
                 *  The result will always be correctly rounded.
                 *
                 */
                function naturalExponential(x, sd) {
                    var denominator, guard, j, pow, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
                    // 0/NaN/Infinity?
                    if (!x.d || !x.d[0] || x.e > 17) {
                        return new Ctor(x.d
                            ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
                            : x.s ? x.s < 0 ? 0 : x : 0 / 0);
                    }
                    if (sd == null) {
                        external = false;
                        wpr = pr;
                    }
                    else {
                        wpr = sd;
                    }
                    t = new Ctor(0.03125);
                    // while abs(x) >= 0.1
                    while (x.e > -2) {
                        // x = x / 2^5
                        x = x.times(t);
                        k += 5;
                    }
                    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
                    // necessary to ensure the first 4 rounding digits are correct.
                    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
                    wpr += guard;
                    denominator = pow = sum = new Ctor(1);
                    Ctor.precision = wpr;
                    for (;;) {
                        pow = finalise(pow.times(x), wpr, 1);
                        denominator = denominator.times(++i);
                        t = sum.plus(divide(pow, denominator, wpr, 1));
                        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                            j = k;
                            while (j--)
                                sum = finalise(sum.times(sum), wpr, 1);
                            // Check to see if the first 4 rounding digits are [49]999.
                            // If so, repeat the summation with a higher precision, otherwise
                            // e.g. with precision: 18, rounding: 1
                            // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
                            // `wpr - guard` is the index of first rounding digit.
                            if (sd == null) {
                                if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                                    Ctor.precision = wpr += 10;
                                    denominator = pow = t = new Ctor(1);
                                    i = 0;
                                    rep++;
                                }
                                else {
                                    return finalise(sum, Ctor.precision = pr, rm, external = true);
                                }
                            }
                            else {
                                Ctor.precision = pr;
                                return sum;
                            }
                        }
                        sum = t;
                    }
                }
                /*
                 * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
                 * digits.
                 *
                 *  ln(-n)        = NaN
                 *  ln(0)         = -Infinity
                 *  ln(-0)        = -Infinity
                 *  ln(1)         = 0
                 *  ln(Infinity)  = Infinity
                 *  ln(-Infinity) = NaN
                 *  ln(NaN)       = NaN
                 *
                 *  ln(n) (n != 1) is non-terminating.
                 *
                 */
                function naturalLogarithm(y, sd) {
                    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
                    // Is x negative or Infinity, NaN, 0 or 1?
                    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
                        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
                    }
                    if (sd == null) {
                        external = false;
                        wpr = pr;
                    }
                    else {
                        wpr = sd;
                    }
                    Ctor.precision = wpr += guard;
                    c = digitsToString(xd);
                    c0 = c.charAt(0);
                    if (Math.abs(e = x.e) < 1.5e15) {
                        // Argument reduction.
                        // The series converges faster the closer the argument is to 1, so using
                        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
                        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
                        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
                        // later be divided by this number, then separate out the power of 10 using
                        // ln(a*10^b) = ln(a) + b*ln(10).
                        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
                        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
                        // max n is 6 (gives 0.7 - 1.3)
                        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
                            x = x.times(y);
                            c = digitsToString(x.d);
                            c0 = c.charAt(0);
                            n++;
                        }
                        e = x.e;
                        if (c0 > 1) {
                            x = new Ctor('0.' + c);
                            e++;
                        }
                        else {
                            x = new Ctor(c0 + '.' + c.slice(1));
                        }
                    }
                    else {
                        // The argument reduction method above may result in overflow if the argument y is a massive
                        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
                        // function using ln(x*10^e) = ln(x) + e*ln(10).
                        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
                        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
                        Ctor.precision = pr;
                        return sd == null ? finalise(x, pr, rm, external = true) : x;
                    }
                    // x1 is x reduced to a value near 1.
                    x1 = x;
                    // Taylor series.
                    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
                    // where x = (y - 1)/(y + 1)    (|x| < 1)
                    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
                    x2 = finalise(x.times(x), wpr, 1);
                    denominator = 3;
                    for (;;) {
                        numerator = finalise(numerator.times(x2), wpr, 1);
                        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
                        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                            sum = sum.times(2);
                            // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
                            // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
                            if (e !== 0)
                                sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
                            sum = divide(sum, new Ctor(n), wpr, 1);
                            // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
                            // been repeated previously) and the first 4 rounding digits 9999?
                            // If so, restart the summation with a higher precision, otherwise
                            // e.g. with precision: 12, rounding: 1
                            // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
                            // `wpr - guard` is the index of first rounding digit.
                            if (sd == null) {
                                if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                                    Ctor.precision = wpr += guard;
                                    t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                                    x2 = finalise(x.times(x), wpr, 1);
                                    denominator = rep = 1;
                                }
                                else {
                                    return finalise(sum, Ctor.precision = pr, rm, external = true);
                                }
                            }
                            else {
                                Ctor.precision = pr;
                                return sum;
                            }
                        }
                        sum = t;
                        denominator += 2;
                    }
                }
                // ±Infinity, NaN.
                function nonFiniteToString(x) {
                    // Unsigned.
                    return String(x.s * x.s / 0);
                }
                /*
                 * Parse the value of a new Decimal `x` from string `str`.
                 */
                function parseDecimal(x, str) {
                    var e, i, len;
                    // Decimal point?
                    if ((e = str.indexOf('.')) > -1)
                        str = str.replace('.', '');
                    // Exponential form?
                    if ((i = str.search(/e/i)) > 0) {
                        // Determine exponent.
                        if (e < 0)
                            e = i;
                        e += +str.slice(i + 1);
                        str = str.substring(0, i);
                    }
                    else if (e < 0) {
                        // Integer.
                        e = str.length;
                    }
                    // Determine leading zeros.
                    for (i = 0; str.charCodeAt(i) === 48; i++)
                        ;
                    // Determine trailing zeros.
                    for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
                        ;
                    str = str.slice(i, len);
                    if (str) {
                        len -= i;
                        x.e = e = e - i - 1;
                        x.d = [];
                        // Transform base
                        // e is the base 10 exponent.
                        // i is where to slice str to get the first word of the digits array.
                        i = (e + 1) % LOG_BASE;
                        if (e < 0)
                            i += LOG_BASE;
                        if (i < len) {
                            if (i)
                                x.d.push(+str.slice(0, i));
                            for (len -= LOG_BASE; i < len;)
                                x.d.push(+str.slice(i, i += LOG_BASE));
                            str = str.slice(i);
                            i = LOG_BASE - str.length;
                        }
                        else {
                            i -= len;
                        }
                        for (; i--;)
                            str += '0';
                        x.d.push(+str);
                        if (external) {
                            // Overflow?
                            if (x.e > x.constructor.maxE) {
                                // Infinity.
                                x.d = null;
                                x.e = NaN;
                                // Underflow?
                            }
                            else if (x.e < x.constructor.minE) {
                                // Zero.
                                x.e = 0;
                                x.d = [0];
                                // x.constructor.underflow = true;
                            } // else x.constructor.underflow = false;
                        }
                    }
                    else {
                        // Zero.
                        x.e = 0;
                        x.d = [0];
                    }
                    return x;
                }
                /*
                 * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
                 */
                function parseOther(x, str) {
                    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
                    if (str === 'Infinity' || str === 'NaN') {
                        if (!+str)
                            x.s = NaN;
                        x.e = NaN;
                        x.d = null;
                        return x;
                    }
                    if (isHex.test(str)) {
                        base = 16;
                        str = str.toLowerCase();
                    }
                    else if (isBinary.test(str)) {
                        base = 2;
                    }
                    else if (isOctal.test(str)) {
                        base = 8;
                    }
                    else {
                        throw Error(invalidArgument + str);
                    }
                    // Is there a binary exponent part?
                    i = str.search(/p/i);
                    if (i > 0) {
                        p = +str.slice(i + 1);
                        str = str.substring(2, i);
                    }
                    else {
                        str = str.slice(2);
                    }
                    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
                    // fraction part will be restored.
                    i = str.indexOf('.');
                    isFloat = i >= 0;
                    Ctor = x.constructor;
                    if (isFloat) {
                        str = str.replace('.', '');
                        len = str.length;
                        i = len - i;
                        // log[10](16) = 1.2041... , log[10](88) = 1.9444....
                        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
                    }
                    xd = convertBase(str, base, BASE);
                    xe = xd.length - 1;
                    // Remove trailing zeros.
                    for (i = xe; xd[i] === 0; --i)
                        xd.pop();
                    if (i < 0)
                        return new Ctor(x.s * 0);
                    x.e = getBase10Exponent(xd, xe);
                    x.d = xd;
                    external = false;
                    // At what precision to perform the division to ensure exact conversion?
                    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
                    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
                    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
                    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
                    // Therefore using 4 * the number of digits of str will always be enough.
                    if (isFloat)
                        x = divide(x, divisor, len * 4);
                    // Multiply by the binary exponent part if present.
                    if (p)
                        x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
                    external = true;
                    return x;
                }
                /*
                 * sin(x) = x - x^3/3! + x^5/5! - ...
                 * |x| < pi/2
                 *
                 */
                function sine(Ctor, x) {
                    var k, len = x.d.length;
                    if (len < 3)
                        return taylorSeries(Ctor, 2, x, x);
                    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
                    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
                    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))
                    // Estimate the optimum number of times to use the argument reduction.
                    k = 1.4 * Math.sqrt(len);
                    k = k > 16 ? 16 : k | 0;
                    x = x.times(1 / tinyPow(5, k));
                    x = taylorSeries(Ctor, 2, x, x);
                    // Reverse argument reduction
                    var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
                    for (; k--;) {
                        sin2_x = x.times(x);
                        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
                    }
                    return x;
                }
                // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
                function taylorSeries(Ctor, n, x, y, isHyperbolic) {
                    var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
                    external = false;
                    x2 = x.times(x);
                    u = new Ctor(y);
                    for (;;) {
                        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
                        u = isHyperbolic ? y.plus(t) : y.minus(t);
                        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
                        t = u.plus(y);
                        if (t.d[k] !== void 0) {
                            for (j = k; t.d[j] === u.d[j] && j--;)
                                ;
                            if (j == -1)
                                break;
                        }
                        j = u;
                        u = y;
                        y = t;
                        t = j;
                        i++;
                    }
                    external = true;
                    t.d.length = k + 1;
                    return t;
                }
                // Exponent e must be positive and non-zero.
                function tinyPow(b, e) {
                    var n = b;
                    while (--e)
                        n *= b;
                    return n;
                }
                // Return the absolute value of `x` reduced to less than or equal to half pi.
                function toLessThanHalfPi(Ctor, x) {
                    var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);
                    x = x.abs();
                    if (x.lte(halfPi)) {
                        quadrant = isNeg ? 4 : 1;
                        return x;
                    }
                    t = x.divToInt(pi);
                    if (t.isZero()) {
                        quadrant = isNeg ? 3 : 2;
                    }
                    else {
                        x = x.minus(t.times(pi));
                        // 0 <= x < pi
                        if (x.lte(halfPi)) {
                            quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
                            return x;
                        }
                        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
                    }
                    return x.minus(pi).abs();
                }
                /*
                 * Return the value of Decimal `x` as a string in base `baseOut`.
                 *
                 * If the optional `sd` argument is present include a binary exponent suffix.
                 */
                function toStringBinary(x, baseOut, sd, rm) {
                    var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
                    if (isExp) {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                    }
                    else {
                        sd = Ctor.precision;
                        rm = Ctor.rounding;
                    }
                    if (!x.isFinite()) {
                        str = nonFiniteToString(x);
                    }
                    else {
                        str = finiteToString(x);
                        i = str.indexOf('.');
                        // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
                        // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
                        // minBinaryExponent = floor(decimalExponent * log[2](10))
                        // log[2](10) = 3.321928094887362347870319429489390175864
                        if (isExp) {
                            base = 2;
                            if (baseOut == 16) {
                                sd = sd * 4 - 3;
                            }
                            else if (baseOut == 8) {
                                sd = sd * 3 - 2;
                            }
                        }
                        else {
                            base = baseOut;
                        }
                        // Convert the number as an integer then divide the result by its base raised to a power such
                        // that the fraction part will be restored.
                        // Non-integer.
                        if (i >= 0) {
                            str = str.replace('.', '');
                            y = new Ctor(1);
                            y.e = str.length - i;
                            y.d = convertBase(finiteToString(y), 10, base);
                            y.e = y.d.length;
                        }
                        xd = convertBase(str, 10, base);
                        e = len = xd.length;
                        // Remove trailing zeros.
                        for (; xd[--len] == 0;)
                            xd.pop();
                        if (!xd[0]) {
                            str = isExp ? '0p+0' : '0';
                        }
                        else {
                            if (i < 0) {
                                e--;
                            }
                            else {
                                x = new Ctor(x);
                                x.d = xd;
                                x.e = e;
                                x = divide(x, y, sd, rm, 0, base);
                                xd = x.d;
                                e = x.e;
                                roundUp = inexact;
                            }
                            // The rounding digit, i.e. the digit after the digit that may be rounded up.
                            i = xd[sd];
                            k = base / 2;
                            roundUp = roundUp || xd[sd + 1] !== void 0;
                            roundUp = rm < 4
                                ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
                                : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
                                    rm === (x.s < 0 ? 8 : 7));
                            xd.length = sd;
                            if (roundUp) {
                                // Rounding up may mean the previous digit has to be rounded up and so on.
                                for (; ++xd[--sd] > base - 1;) {
                                    xd[sd] = 0;
                                    if (!sd) {
                                        ++e;
                                        xd.unshift(1);
                                    }
                                }
                            }
                            // Determine trailing zeros.
                            for (len = xd.length; !xd[len - 1]; --len)
                                ;
                            // E.g. [4, 11, 15] becomes 4bf.
                            for (i = 0, str = ''; i < len; i++)
                                str += NUMERALS.charAt(xd[i]);
                            // Add binary exponent suffix?
                            if (isExp) {
                                if (len > 1) {
                                    if (baseOut == 16 || baseOut == 8) {
                                        i = baseOut == 16 ? 4 : 3;
                                        for (--len; len % i; len++)
                                            str += '0';
                                        xd = convertBase(str, base, baseOut);
                                        for (len = xd.length; !xd[len - 1]; --len)
                                            ;
                                        // xd[0] will always be be 1
                                        for (i = 1, str = '1.'; i < len; i++)
                                            str += NUMERALS.charAt(xd[i]);
                                    }
                                    else {
                                        str = str.charAt(0) + '.' + str.slice(1);
                                    }
                                }
                                str = str + (e < 0 ? 'p' : 'p+') + e;
                            }
                            else if (e < 0) {
                                for (; ++e;)
                                    str = '0' + str;
                                str = '0.' + str;
                            }
                            else {
                                if (++e > len)
                                    for (e -= len; e--;)
                                        str += '0';
                                else if (e < len)
                                    str = str.slice(0, e) + '.' + str.slice(e);
                            }
                        }
                        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
                    }
                    return x.s < 0 ? '-' + str : str;
                }
                // Does not strip trailing zeros.
                function truncate(arr, len) {
                    if (arr.length > len) {
                        arr.length = len;
                        return true;
                    }
                }
                // Decimal methods
                /*
                 *  abs
                 *  acos
                 *  acosh
                 *  add
                 *  asin
                 *  asinh
                 *  atan
                 *  atanh
                 *  atan2
                 *  cbrt
                 *  ceil
                 *  clone
                 *  config
                 *  cos
                 *  cosh
                 *  div
                 *  exp
                 *  floor
                 *  hypot
                 *  ln
                 *  log
                 *  log2
                 *  log10
                 *  max
                 *  min
                 *  mod
                 *  mul
                 *  pow
                 *  random
                 *  round
                 *  set
                 *  sign
                 *  sin
                 *  sinh
                 *  sqrt
                 *  sub
                 *  tan
                 *  tanh
                 *  trunc
                 */
                /*
                 * Return a new Decimal whose value is the absolute value of `x`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function abs(x) {
                    return new this(x).abs();
                }
                /*
                 * Return a new Decimal whose value is the arccosine in radians of `x`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function acos(x) {
                    return new this(x).acos();
                }
                /*
                 * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
                 * `precision` significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function acosh(x) {
                    return new this(x).acosh();
                }
                /*
                 * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 * y {number|string|Decimal}
                 *
                 */
                function add(x, y) {
                    return new this(x).plus(y);
                }
                /*
                 * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function asin(x) {
                    return new this(x).asin();
                }
                /*
                 * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
                 * `precision` significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function asinh(x) {
                    return new this(x).asinh();
                }
                /*
                 * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function atan(x) {
                    return new this(x).atan();
                }
                /*
                 * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
                 * `precision` significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function atanh(x) {
                    return new this(x).atanh();
                }
                /*
                 * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
                 * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
                 *
                 * Domain: [-Infinity, Infinity]
                 * Range: [-pi, pi]
                 *
                 * y {number|string|Decimal} The y-coordinate.
                 * x {number|string|Decimal} The x-coordinate.
                 *
                 * atan2(±0, -0)               = ±pi
                 * atan2(±0, +0)               = ±0
                 * atan2(±0, -x)               = ±pi for x > 0
                 * atan2(±0, x)                = ±0 for x > 0
                 * atan2(-y, ±0)               = -pi/2 for y > 0
                 * atan2(y, ±0)                = pi/2 for y > 0
                 * atan2(±y, -Infinity)        = ±pi for finite y > 0
                 * atan2(±y, +Infinity)        = ±0 for finite y > 0
                 * atan2(±Infinity, x)         = ±pi/2 for finite x
                 * atan2(±Infinity, -Infinity) = ±3*pi/4
                 * atan2(±Infinity, +Infinity) = ±pi/4
                 * atan2(NaN, x) = NaN
                 * atan2(y, NaN) = NaN
                 *
                 */
                function atan2(y, x) {
                    y = new this(y);
                    x = new this(x);
                    var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
                    // Either NaN
                    if (!y.s || !x.s) {
                        r = new this(NaN);
                        // Both ±Infinity
                    }
                    else if (!y.d && !x.d) {
                        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
                        r.s = y.s;
                        // x is ±Infinity or y is ±0
                    }
                    else if (!x.d || y.isZero()) {
                        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
                        r.s = y.s;
                        // y is ±Infinity or x is ±0
                    }
                    else if (!y.d || x.isZero()) {
                        r = getPi(this, wpr, 1).times(0.5);
                        r.s = y.s;
                        // Both non-zero and finite
                    }
                    else if (x.s < 0) {
                        this.precision = wpr;
                        this.rounding = 1;
                        r = this.atan(divide(y, x, wpr, 1));
                        x = getPi(this, wpr, 1);
                        this.precision = pr;
                        this.rounding = rm;
                        r = y.s < 0 ? r.minus(x) : r.plus(x);
                    }
                    else {
                        r = this.atan(divide(y, x, wpr, 1));
                    }
                    return r;
                }
                /*
                 * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function cbrt(x) {
                    return new this(x).cbrt();
                }
                /*
                 * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function ceil(x) {
                    return finalise(x = new this(x), x.e + 1, 2);
                }
                /*
                 * Configure global settings for a Decimal constructor.
                 *
                 * `obj` is an object with one or more of the following properties,
                 *
                 *   precision  {number}
                 *   rounding   {number}
                 *   toExpNeg   {number}
                 *   toExpPos   {number}
                 *   maxE       {number}
                 *   minE       {number}
                 *   modulo     {number}
                 *   crypto     {boolean|number}
                 *   defaults   {true}
                 *
                 * E.g. Decimal.config({ precision: 20, rounding: 4 })
                 *
                 */
                function config(obj) {
                    if (!obj || typeof obj !== 'object')
                        throw Error(decimalError + 'Object expected');
                    var i, p, v, useDefaults = obj.defaults === true, ps = [
                        'precision', 1, MAX_DIGITS,
                        'rounding', 0, 8,
                        'toExpNeg', -EXP_LIMIT, 0,
                        'toExpPos', 0, EXP_LIMIT,
                        'maxE', 0, EXP_LIMIT,
                        'minE', -EXP_LIMIT, 0,
                        'modulo', 0, 9
                    ];
                    for (i = 0; i < ps.length; i += 3) {
                        if (p = ps[i], useDefaults)
                            this[p] = DEFAULTS[p];
                        if ((v = obj[p]) !== void 0) {
                            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])
                                this[p] = v;
                            else
                                throw Error(invalidArgument + p + ': ' + v);
                        }
                    }
                    if (p = 'crypto', useDefaults)
                        this[p] = DEFAULTS[p];
                    if ((v = obj[p]) !== void 0) {
                        if (v === true || v === false || v === 0 || v === 1) {
                            if (v) {
                                if (typeof crypto != 'undefined' && crypto &&
                                    (crypto.getRandomValues || crypto.randomBytes)) {
                                    this[p] = true;
                                }
                                else {
                                    throw Error(cryptoUnavailable);
                                }
                            }
                            else {
                                this[p] = false;
                            }
                        }
                        else {
                            throw Error(invalidArgument + p + ': ' + v);
                        }
                    }
                    return this;
                }
                /*
                 * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function cos(x) {
                    return new this(x).cos();
                }
                /*
                 * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function cosh(x) {
                    return new this(x).cosh();
                }
                /*
                 * Create and return a Decimal constructor with the same configuration properties as this Decimal
                 * constructor.
                 *
                 */
                function clone(obj) {
                    var i, p, ps;
                    /*
                     * The Decimal constructor and exported function.
                     * Return a new Decimal instance.
                     *
                     * v {number|string|Decimal} A numeric value.
                     *
                     */
                    function Decimal(v) {
                        var e, i, t, x = this;
                        // Decimal called without new.
                        if (!(x instanceof Decimal))
                            return new Decimal(v);
                        // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
                        // which points to Object.
                        x.constructor = Decimal;
                        // Duplicate.
                        if (v instanceof Decimal) {
                            x.s = v.s;
                            if (external) {
                                if (!v.d || v.e > Decimal.maxE) {
                                    // Infinity.
                                    x.e = NaN;
                                    x.d = null;
                                }
                                else if (v.e < Decimal.minE) {
                                    // Zero.
                                    x.e = 0;
                                    x.d = [0];
                                }
                                else {
                                    x.e = v.e;
                                    x.d = v.d.slice();
                                }
                            }
                            else {
                                x.e = v.e;
                                x.d = v.d ? v.d.slice() : v.d;
                            }
                            return;
                        }
                        t = typeof v;
                        if (t === 'number') {
                            if (v === 0) {
                                x.s = 1 / v < 0 ? -1 : 1;
                                x.e = 0;
                                x.d = [0];
                                return;
                            }
                            if (v < 0) {
                                v = -v;
                                x.s = -1;
                            }
                            else {
                                x.s = 1;
                            }
                            // Fast path for small integers.
                            if (v === ~~v && v < 1e7) {
                                for (e = 0, i = v; i >= 10; i /= 10)
                                    e++;
                                if (external) {
                                    if (e > Decimal.maxE) {
                                        x.e = NaN;
                                        x.d = null;
                                    }
                                    else if (e < Decimal.minE) {
                                        x.e = 0;
                                        x.d = [0];
                                    }
                                    else {
                                        x.e = e;
                                        x.d = [v];
                                    }
                                }
                                else {
                                    x.e = e;
                                    x.d = [v];
                                }
                                return;
                                // Infinity, NaN.
                            }
                            else if (v * 0 !== 0) {
                                if (!v)
                                    x.s = NaN;
                                x.e = NaN;
                                x.d = null;
                                return;
                            }
                            return parseDecimal(x, v.toString());
                        }
                        else if (t !== 'string') {
                            throw Error(invalidArgument + v);
                        }
                        // Minus sign?
                        if ((i = v.charCodeAt(0)) === 45) {
                            v = v.slice(1);
                            x.s = -1;
                        }
                        else {
                            // Plus sign?
                            if (i === 43)
                                v = v.slice(1);
                            x.s = 1;
                        }
                        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
                    }
                    Decimal.prototype = P;
                    Decimal.ROUND_UP = 0;
                    Decimal.ROUND_DOWN = 1;
                    Decimal.ROUND_CEIL = 2;
                    Decimal.ROUND_FLOOR = 3;
                    Decimal.ROUND_HALF_UP = 4;
                    Decimal.ROUND_HALF_DOWN = 5;
                    Decimal.ROUND_HALF_EVEN = 6;
                    Decimal.ROUND_HALF_CEIL = 7;
                    Decimal.ROUND_HALF_FLOOR = 8;
                    Decimal.EUCLID = 9;
                    Decimal.config = Decimal.set = config;
                    Decimal.clone = clone;
                    Decimal.isDecimal = isDecimalInstance;
                    Decimal.abs = abs;
                    Decimal.acos = acos;
                    Decimal.acosh = acosh; // ES6
                    Decimal.add = add;
                    Decimal.asin = asin;
                    Decimal.asinh = asinh; // ES6
                    Decimal.atan = atan;
                    Decimal.atanh = atanh; // ES6
                    Decimal.atan2 = atan2;
                    Decimal.cbrt = cbrt; // ES6
                    Decimal.ceil = ceil;
                    Decimal.cos = cos;
                    Decimal.cosh = cosh; // ES6
                    Decimal.div = div;
                    Decimal.exp = exp;
                    Decimal.floor = floor;
                    Decimal.hypot = hypot; // ES6
                    Decimal.ln = ln;
                    Decimal.log = log;
                    Decimal.log10 = log10; // ES6
                    Decimal.log2 = log2; // ES6
                    Decimal.max = max;
                    Decimal.min = min;
                    Decimal.mod = mod;
                    Decimal.mul = mul;
                    Decimal.pow = pow;
                    Decimal.random = random;
                    Decimal.round = round;
                    Decimal.sign = sign; // ES6
                    Decimal.sin = sin;
                    Decimal.sinh = sinh; // ES6
                    Decimal.sqrt = sqrt;
                    Decimal.sub = sub;
                    Decimal.tan = tan;
                    Decimal.tanh = tanh; // ES6
                    Decimal.trunc = trunc; // ES6
                    if (obj === void 0)
                        obj = {};
                    if (obj) {
                        if (obj.defaults !== true) {
                            ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
                            for (i = 0; i < ps.length;)
                                if (!obj.hasOwnProperty(p = ps[i++]))
                                    obj[p] = this[p];
                        }
                    }
                    Decimal.config(obj);
                    return Decimal;
                }
                /*
                 * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 * y {number|string|Decimal}
                 *
                 */
                function div(x, y) {
                    return new this(x).div(y);
                }
                /*
                 * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} The power to which to raise the base of the natural log.
                 *
                 */
                function exp(x) {
                    return new this(x).exp();
                }
                /*
                 * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function floor(x) {
                    return finalise(x = new this(x), x.e + 1, 3);
                }
                /*
                 * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
                 * rounded to `precision` significant digits using rounding mode `rounding`.
                 *
                 * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
                 *
                 * arguments {number|string|Decimal}
                 *
                 */
                function hypot() {
                    var i, n, t = new this(0);
                    external = false;
                    for (i = 0; i < arguments.length;) {
                        n = new this(arguments[i++]);
                        if (!n.d) {
                            if (n.s) {
                                external = true;
                                return new this(1 / 0);
                            }
                            t = n;
                        }
                        else if (t.d) {
                            t = t.plus(n.times(n));
                        }
                    }
                    external = true;
                    return t.sqrt();
                }
                /*
                 * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
                 * otherwise return false.
                 *
                 */
                function isDecimalInstance(obj) {
                    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
                }
                /*
                 * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function ln(x) {
                    return new this(x).ln();
                }
                /*
                 * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
                 * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
                 *
                 * log[y](x)
                 *
                 * x {number|string|Decimal} The argument of the logarithm.
                 * y {number|string|Decimal} The base of the logarithm.
                 *
                 */
                function log(x, y) {
                    return new this(x).log(y);
                }
                /*
                 * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function log2(x) {
                    return new this(x).log(2);
                }
                /*
                 * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function log10(x) {
                    return new this(x).log(10);
                }
                /*
                 * Return a new Decimal whose value is the maximum of the arguments.
                 *
                 * arguments {number|string|Decimal}
                 *
                 */
                function max() {
                    return maxOrMin(this, arguments, 'lt');
                }
                /*
                 * Return a new Decimal whose value is the minimum of the arguments.
                 *
                 * arguments {number|string|Decimal}
                 *
                 */
                function min() {
                    return maxOrMin(this, arguments, 'gt');
                }
                /*
                 * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
                 * using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 * y {number|string|Decimal}
                 *
                 */
                function mod(x, y) {
                    return new this(x).mod(y);
                }
                /*
                 * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 * y {number|string|Decimal}
                 *
                 */
                function mul(x, y) {
                    return new this(x).mul(y);
                }
                /*
                 * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} The base.
                 * y {number|string|Decimal} The exponent.
                 *
                 */
                function pow(x, y) {
                    return new this(x).pow(y);
                }
                /*
                 * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
                 * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
                 * are produced).
                 *
                 * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
                 *
                 */
                function random(sd) {
                    var d, e, k, n, i = 0, r = new this(1), rd = [];
                    if (sd === void 0)
                        sd = this.precision;
                    else
                        checkInt32(sd, 1, MAX_DIGITS);
                    k = Math.ceil(sd / LOG_BASE);
                    if (!this.crypto) {
                        for (; i < k;)
                            rd[i++] = Math.random() * 1e7 | 0;
                        // Browsers supporting crypto.getRandomValues.
                    }
                    else if (crypto.getRandomValues) {
                        d = crypto.getRandomValues(new Uint32Array(k));
                        for (; i < k;) {
                            n = d[i];
                            // 0 <= n < 4294967296
                            // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
                            if (n >= 4.29e9) {
                                d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
                            }
                            else {
                                // 0 <= n <= 4289999999
                                // 0 <= (n % 1e7) <= 9999999
                                rd[i++] = n % 1e7;
                            }
                        }
                        // Node.js supporting crypto.randomBytes.
                    }
                    else if (crypto.randomBytes) {
                        // buffer
                        d = crypto.randomBytes(k *= 4);
                        for (; i < k;) {
                            // 0 <= n < 2147483648
                            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);
                            // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
                            if (n >= 2.14e9) {
                                crypto.randomBytes(4).copy(d, i);
                            }
                            else {
                                // 0 <= n <= 2139999999
                                // 0 <= (n % 1e7) <= 9999999
                                rd.push(n % 1e7);
                                i += 4;
                            }
                        }
                        i = k / 4;
                    }
                    else {
                        throw Error(cryptoUnavailable);
                    }
                    k = rd[--i];
                    sd %= LOG_BASE;
                    // Convert trailing digits to zeros according to sd.
                    if (k && sd) {
                        n = mathpow(10, LOG_BASE - sd);
                        rd[i] = (k / n | 0) * n;
                    }
                    // Remove trailing words which are zero.
                    for (; rd[i] === 0; i--)
                        rd.pop();
                    // Zero?
                    if (i < 0) {
                        e = 0;
                        rd = [0];
                    }
                    else {
                        e = -1;
                        // Remove leading words which are zero and adjust exponent accordingly.
                        for (; rd[0] === 0; e -= LOG_BASE)
                            rd.shift();
                        // Count the digits of the first word of rd to determine leading zeros.
                        for (k = 1, n = rd[0]; n >= 10; n /= 10)
                            k++;
                        // Adjust the exponent for leading zeros of the first word of rd.
                        if (k < LOG_BASE)
                            e -= LOG_BASE - k;
                    }
                    r.e = e;
                    r.d = rd;
                    return r;
                }
                /*
                 * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
                 *
                 * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function round(x) {
                    return finalise(x = new this(x), x.e + 1, this.rounding);
                }
                /*
                 * Return
                 *   1    if x > 0,
                 *  -1    if x < 0,
                 *   0    if x is 0,
                 *  -0    if x is -0,
                 *   NaN  otherwise
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function sign(x) {
                    x = new this(x);
                    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
                }
                /*
                 * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
                 * using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function sin(x) {
                    return new this(x).sin();
                }
                /*
                 * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function sinh(x) {
                    return new this(x).sinh();
                }
                /*
                 * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function sqrt(x) {
                    return new this(x).sqrt();
                }
                /*
                 * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
                 * using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal}
                 * y {number|string|Decimal}
                 *
                 */
                function sub(x, y) {
                    return new this(x).sub(y);
                }
                /*
                 * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
                 * digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function tan(x) {
                    return new this(x).tan();
                }
                /*
                 * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
                 * significant digits using rounding mode `rounding`.
                 *
                 * x {number|string|Decimal} A value in radians.
                 *
                 */
                function tanh(x) {
                    return new this(x).tanh();
                }
                /*
                 * Return a new Decimal whose value is `x` truncated to an integer.
                 *
                 * x {number|string|Decimal}
                 *
                 */
                function trunc(x) {
                    return finalise(x = new this(x), x.e + 1, 1);
                }
                // Create and configure initial Decimal constructor.
                Decimal = clone(DEFAULTS);
                Decimal['default'] = Decimal.Decimal = Decimal;
                // Create the internal constants from their string values.
                LN10 = new Decimal(LN10);
                PI = new Decimal(PI);
                // Export.
                // AMD.
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                        return Decimal;
                    }).call(exports, __webpack_require__, exports, module),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    // Node and other environments that support module.exports.
                }
                else { }
            })(this);
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/main/content/content.component.html": 
        /*!*******************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/main/content/content.component.html ***!
          \*******************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"wrapper\">\n    <div *ngFor=\"let menu of subMenus\" class=\"nx-margin-left-s margin-box\" (click)=\"func(menu.code)\">\n        <nx-icon *ngIf=\"menu.icon\" nxActionIcon [name]=\"menu.icon\" size=\"s\">{{menu.name}}</nx-icon>\n    </div>\n</div>\n<!-- <div *ngIf=\"!itemCount>0\" class=\"wrapper\">\n    No Report.....\n</div> -->\n\n<!-- <ul class=\"menus\">\n    <li *ngFor=\"let menu of subMenus\">\n            <span class=\"badge\" (click)=\"func(menu.code)\">{{menu.code}}</span>{{menu.name}}      \n    </li>\n</ul> -->\n<!-- <button (click)=\"func()\">click</button> -->");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/main/main.component.html": 
        /*!********************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/main/main.component.html ***!
          \********************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div>\n<table>\n    <tr>\n        <td width=\"20%\">\n            <app-menu></app-menu>\n        </td>\n        <td>\n            <router-outlet></router-outlet>\n        </td>\n    </tr>\n</table>\n</div>");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/main/menu/menu.component.html": 
        /*!*************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/main/menu/menu.component.html ***!
          \*************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"top\">\n  <nx-sidebar #sidebar resizeHandleAriaLabel=\"Toggle sidebar width\" resizeable minWidth=\"100\"  (widthChange)=\"log($event)\" >\n    <nx-tree [dataSource]=\"_dataSource\" [treeControl]=\"_treeControl\" >\n      <nx-tree-node *nxTreeNodeDef=\"let node\">\n         <button nxAction\n              nxTreeNodePadding\n              nxTreeNodePaddingOffset=\"40\"\n              routerLinkActive=\"is-selected\"\n              (click)=\"func(node.code)\"\n              title=\"{{node.name}}\">\n           <nx-icon *ngIf=\"node.icon\" nxActionIcon [name]=\"node.icon\" size=\"s\"></nx-icon>\n           {{node.name}}\n         </button>\n      </nx-tree-node>\n      <nx-tree-node *nxTreeNodeDef=\"let node; when: _hasChild\">\n         <button nxAction\n             nxTreeNodeToggle\n             nxTreeNodePadding\n             nxTreeNodePaddingOffset=\"40\"\n             expandable\n             (click)=\"func(node.code)\"\n             [expanded]=\"_treeControl.isExpanded(node)\"\n             title=\"{{node.name}}\">\n           <nx-icon *ngIf=\"node.icon\" nxActionIcon [name]=\"node.icon\" size=\"s\"></nx-icon>\n           {{node.name}}\n         </button>\n      </nx-tree-node>\n    </nx-tree>\n  </nx-sidebar>\n  </div>\n  <!-- <pre *ngIf=\"logMessage\">{{logMessage}}</pre> -->\n  \n  ");
            /***/ 
        }),
        /***/ "./src/app/main/content/content.component.css": 
        /*!****************************************************!*\
          !*** ./src/app/main/content/content.component.css ***!
          \****************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21haW4vY29udGVudC9jb250ZW50LmNvbXBvbmVudC5jc3MifQ== */");
            /***/ 
        }),
        /***/ "./src/app/main/content/content.component.ts": 
        /*!***************************************************!*\
          !*** ./src/app/main/content/content.component.ts ***!
          \***************************************************/
        /*! exports provided: ContentComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentComponent", function () { return ContentComponent; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _service_menu_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../service/menu.service */ "./src/app/service/menu.service.ts");
            var ContentComponent = /** @class */ (function () {
                function ContentComponent(route, menuService, location) {
                    var _this = this;
                    this.route = route;
                    this.menuService = menuService;
                    this.location = location;
                    this.route.params.subscribe(function (params) {
                        _this.code = params["code"];
                        _this.menuService.getSubMenus(_this.code)
                            .subscribe(function (subMenus) { return _this.subMenus = subMenus; });
                    });
                    this.itemCount = this.subMenus.length;
                }
                ContentComponent.prototype.ngOnInit = function () {
                    var code = this.route.snapshot.paramMap.get('code');
                    this.getSubMenu(code);
                };
                ContentComponent.prototype.getSubMenu = function (code) {
                    var _this = this;
                    //const code = +this.route.snapshot.paramMap.get('code');
                    console.log(this.route.snapshot.paramMap);
                    console.log(code + '_content');
                    this.menuService.getSubMenus(code)
                        .subscribe(function (subMenus) { return _this.subMenus = subMenus; });
                    // menus=>this.menus=menus
                };
                ContentComponent.prototype.func = function (code) {
                    console.log(code + "_Report");
                    document.addEventListener('deviceready', function () {
                        cordova.InAppBrowser.open('http://113.196.86.112/microstrategy/asp/Main.aspx?Server=AZTL-MSTR-UAT&Project=ACT&Port=0&evt=4001&src=Main.aspx.4001&reportID=24029D944CCA32D256E01FA2A26F3758&visMode=0&reportViewMode=1&reportSubtype=768&uid=webuser&pwd=webuser', '_blank', 'location=no,closebuttoncaption=關閉');
                    });
                };
                ;
                return ContentComponent;
            }());
            ContentComponent.ctorParameters = function () { return [
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"] },
                { type: _service_menu_service__WEBPACK_IMPORTED_MODULE_4__["MenuService"] },
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], ContentComponent.prototype, "menu", void 0);
            ContentComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'app-content',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./content.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/main/content/content.component.html")).default,
                    styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./content.component.css */ "./src/app/main/content/content.component.css")).default]
                })
            ], ContentComponent);
            /***/ 
        }),
        /***/ "./src/app/main/main-routing.module.ts": 
        /*!*********************************************!*\
          !*** ./src/app/main/main-routing.module.ts ***!
          \*********************************************/
        /*! exports provided: MainRoutingModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainRoutingModule", function () { return MainRoutingModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _main_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./main.component */ "./src/app/main/main.component.ts");
            /* harmony import */ var _content_content_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./content/content.component */ "./src/app/main/content/content.component.ts");
            var routes = [
                {
                    path: '',
                    component: _main_component__WEBPACK_IMPORTED_MODULE_3__["MainComponent"],
                    children: [
                        {
                            path: ':code',
                            component: _content_content_component__WEBPACK_IMPORTED_MODULE_4__["ContentComponent"]
                        },
                        {
                            path: '',
                            component: _content_content_component__WEBPACK_IMPORTED_MODULE_4__["ContentComponent"]
                        }
                    ]
                }
            ];
            var MainRoutingModule = /** @class */ (function () {
                function MainRoutingModule() {
                }
                return MainRoutingModule;
            }());
            MainRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
                    exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
                })
            ], MainRoutingModule);
            /***/ 
        }),
        /***/ "./src/app/main/main.component.css": 
        /*!*****************************************!*\
          !*** ./src/app/main/main.component.css ***!
          \*****************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = (".mainframe{\n    background-color:rgba(95,186,233,0.4);\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbWFpbi9tYWluLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxxQ0FBcUM7QUFDekMiLCJmaWxlIjoic3JjL2FwcC9tYWluL21haW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYWluZnJhbWV7XG4gICAgYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDk1LDE4NiwyMzMsMC40KTtcbn1cbiJdfQ== */");
            /***/ 
        }),
        /***/ "./src/app/main/main.component.ts": 
        /*!****************************************!*\
          !*** ./src/app/main/main.component.ts ***!
          \****************************************/
        /*! exports provided: MainComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainComponent", function () { return MainComponent; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            var MainComponent = /** @class */ (function () {
                function MainComponent() {
                }
                MainComponent.prototype.ngOnInit = function () {
                };
                return MainComponent;
            }());
            MainComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'app-main',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./main.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/main/main.component.html")).default,
                    styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./main.component.css */ "./src/app/main/main.component.css")).default]
                })
            ], MainComponent);
            /***/ 
        }),
        /***/ "./src/app/main/main.module.ts": 
        /*!*************************************!*\
          !*** ./src/app/main/main.module.ts ***!
          \*************************************/
        /*! exports provided: MainModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainModule", function () { return MainModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _allianz_ngx_ndbx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @allianz/ngx-ndbx */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx.js");
            /* harmony import */ var _allianz_ngx_ndbx_grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @allianz/ngx-ndbx/grid */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-grid.js");
            /* harmony import */ var _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @allianz/ngx-ndbx/icon */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-icon.js");
            /* harmony import */ var _allianz_ngx_ndbx_menu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @allianz/ngx-ndbx/menu */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-menu.js");
            /* harmony import */ var _allianz_ngx_ndbx_sidebar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @allianz/ngx-ndbx/sidebar */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-sidebar.js");
            /* harmony import */ var _allianz_ngx_ndbx_action__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @allianz/ngx-ndbx/action */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-action.js");
            /* harmony import */ var _allianz_ngx_ndbx_tree__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @allianz/ngx-ndbx/tree */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-tree.js");
            /* harmony import */ var _allianz_ngx_ndbx_config__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @allianz/ngx-ndbx/config */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-config.js");
            /* harmony import */ var _main_routing_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./main-routing.module */ "./src/app/main/main-routing.module.ts");
            /* harmony import */ var _menu_menu_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./menu/menu.component */ "./src/app/main/menu/menu.component.ts");
            /* harmony import */ var _content_content_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./content/content.component */ "./src/app/main/content/content.component.ts");
            /* harmony import */ var _main_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./main.component */ "./src/app/main/main.component.ts");
            //allianz
            var MainModule = /** @class */ (function () {
                function MainModule() {
                }
                return MainModule;
            }());
            MainModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    declarations: [_menu_menu_component__WEBPACK_IMPORTED_MODULE_12__["MenuComponent"], _content_content_component__WEBPACK_IMPORTED_MODULE_13__["ContentComponent"], _main_component__WEBPACK_IMPORTED_MODULE_14__["MainComponent"]],
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                        _allianz_ngx_ndbx__WEBPACK_IMPORTED_MODULE_3__["NxButtonModule"],
                        _allianz_ngx_ndbx_grid__WEBPACK_IMPORTED_MODULE_4__["NxGridModule"],
                        _allianz_ngx_ndbx_icon__WEBPACK_IMPORTED_MODULE_5__["NxIconModule"],
                        _allianz_ngx_ndbx_menu__WEBPACK_IMPORTED_MODULE_6__["NxMenuModule"],
                        _allianz_ngx_ndbx_tree__WEBPACK_IMPORTED_MODULE_9__["NxTreeModule"],
                        _allianz_ngx_ndbx_sidebar__WEBPACK_IMPORTED_MODULE_7__["NxSidebarModule"],
                        _allianz_ngx_ndbx_action__WEBPACK_IMPORTED_MODULE_8__["NxActionModule"],
                        _allianz_ngx_ndbx_config__WEBPACK_IMPORTED_MODULE_10__["NxExpertModule"],
                        _main_routing_module__WEBPACK_IMPORTED_MODULE_11__["MainRoutingModule"]
                    ]
                })
            ], MainModule);
            /***/ 
        }),
        /***/ "./src/app/main/menu/menu.component.css": 
        /*!**********************************************!*\
          !*** ./src/app/main/menu/menu.component.css ***!
          \**********************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = (":host {\n  display: flex;\n  flex-direction: column;\n}\n\n.top {\n  display: flex;\n  align-items: center;\n  background-color:rgba(95,186,233,0.4);\n\n}\n\nbutton {\n  margin-left: 40px;\n}\n\n\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbWFpbi9tZW51L21lbnUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLHFDQUFxQzs7QUFFdkM7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkIiLCJmaWxlIjoic3JjL2FwcC9tYWluL21lbnUvbWVudS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4udG9wIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDk1LDE4NiwyMzMsMC40KTtcblxufVxuXG5idXR0b24ge1xuICBtYXJnaW4tbGVmdDogNDBweDtcbn1cblxuXG4iXX0= */");
            /***/ 
        }),
        /***/ "./src/app/main/menu/menu.component.ts": 
        /*!*********************************************!*\
          !*** ./src/app/main/menu/menu.component.ts ***!
          \*********************************************/
        /*! exports provided: MenuComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenuComponent", function () { return MenuComponent; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _allianz_ngx_ndbx_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @allianz/ngx-ndbx/tree */ "./node_modules/@allianz/ngx-ndbx/fesm2015/allianz-ngx-ndbx-tree.js");
            /* harmony import */ var _service_menu_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../service/menu.service */ "./src/app/service/menu.service.ts");
            var MenuComponent = /** @class */ (function () {
                function MenuComponent(menuService, routes) {
                    this.menuService = menuService;
                    this.routes = routes;
                    this.messages = [];
                    this._hasChild = function (_, node) { return node.expandable; };
                    this._treeControl = new _allianz_ngx_ndbx_tree__WEBPACK_IMPORTED_MODULE_3__["NxFlatTreeControl"]();
                    this._dataSource = new _allianz_ngx_ndbx_tree__WEBPACK_IMPORTED_MODULE_3__["NxTreeFlatDataSource"](this._treeControl, this.navigationData);
                }
                MenuComponent.prototype.log = function (value) {
                    this.messages.push('New width value: ' + value);
                    this.logMessage = this.messages.join('\n');
                };
                MenuComponent.prototype.func = function (code) {
                    console.log(code);
                    this.routes.navigate(['/main', code]);
                };
                MenuComponent.prototype.ngOnInit = function () {
                    this.getMenus();
                };
                MenuComponent.prototype.getMenus = function () {
                    var _this = this;
                    this.menuService.getMenus()
                        .subscribe(function (navigationData) { return _this.navigationData = navigationData; });
                    this._treeControl = new _allianz_ngx_ndbx_tree__WEBPACK_IMPORTED_MODULE_3__["NxFlatTreeControl"]();
                    this._dataSource = new _allianz_ngx_ndbx_tree__WEBPACK_IMPORTED_MODULE_3__["NxTreeFlatDataSource"](this._treeControl, this.navigationData);
                    console.log(this.navigationData);
                    // this.heroes = this.heroService.getHeroes();
                };
                return MenuComponent;
            }());
            MenuComponent.ctorParameters = function () { return [
                { type: _service_menu_service__WEBPACK_IMPORTED_MODULE_4__["MenuService"] },
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] }
            ]; };
            MenuComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'app-menu',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./menu.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/main/menu/menu.component.html")).default,
                    styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./menu.component.css */ "./src/app/main/menu/menu.component.css")).default]
                })
            ], MenuComponent);
            /***/ 
        }),
        /***/ "./src/app/mock-data/menu.ts": 
        /*!***********************************!*\
          !*** ./src/app/mock-data/menu.ts ***!
          \***********************************/
        /*! exports provided: contentData, navigationData */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contentData", function () { return contentData; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "navigationData", function () { return navigationData; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var contentData = [
                {
                    code: 'A',
                    children: [
                        {
                            code: 'A-2',
                            name: '績效1',
                            order: 1,
                            icon: 'product-book'
                        },
                        {
                            code: 'A-3',
                            name: '績效2',
                            order: 1,
                            icon: 'product-folder'
                        }
                    ]
                },
                {
                    code: 'A-1',
                    children: [
                        {
                            code: 'A-1-1',
                            name: '行動投保件數',
                            order: 1,
                            icon: 'product-book'
                        },
                        {
                            code: 'A-1-2',
                            name: '紙本件數',
                            order: 1,
                            icon: 'product-folder'
                        }
                    ]
                },
                {
                    code: 'B',
                    children: [
                        {
                            code: 'B-1',
                            name: 'AO/IO',
                            order: 1,
                            icon: 'product-pen'
                        },
                        {
                            code: 'B-2',
                            name: '業務員',
                            order: 2,
                            icon: 'user'
                        },
                        {
                            code: 'B-3',
                            name: '客戶',
                            order: 3,
                            icon: 'users'
                        }
                    ]
                },
                {
                    code: 'C',
                    children: [
                        {
                            code: 'C-1',
                            name: 'ACT',
                            order: 1,
                            icon: 'users'
                        },
                        {
                            code: 'C-2',
                            name: 'Ｅngage',
                            order: 2,
                            icon: 'users'
                        },
                        {
                            code: 'C-3',
                            name: 'Discover+',
                            order: 3,
                            icon: 'users'
                        }
                    ]
                }
            ];
            var navigationData = [
                {
                    code: 'A',
                    name: '績效管理',
                    icon: 'user-business-o',
                    order: 1,
                    children: [
                        {
                            code: 'A-1',
                            name: '件數',
                            order: 1
                        }
                        // {
                        //   code: 'A-2',
                        //   name: '業績',
                        //   order: 2
                        // },
                        // {
                        //   code: 'A-3',
                        //   name: '人員',
                        //   order: 3
                        // },
                        // {
                        //       code: 'A-4',
                        //       name: '部門KPI',
                        //       order: 3
                        // },
                        // {
                        //       code: 'A-5',
                        //       name: '風控',
                        //       order: 3
                        // }
                    ]
                },
                {
                    code: 'B',
                    name: '行為管理',
                    icon: 'file',
                    order: 2
                    // children:[
                    //   {
                    //     code: 'B-1',
                    //     name: 'AO/IO',
                    //     order: 1
                    //   },
                    //   {
                    //     code: 'B-2',
                    //     name: '業務員',
                    //     order: 2
                    //   },
                    //   {
                    //     code: 'B-3',
                    //     name: '客戶',
                    //     order: 3
                    //   }        
                    // ]
                },
                {
                    code: 'C',
                    name: '活動管理',
                    icon: 'file',
                    order: 3
                    // children:[
                    //   {
                    //     code: 'C-1',
                    //     name: 'ACT',
                    //     order: 1
                    //   },
                    //   {
                    //       code: 'C-2',
                    //       name: 'Ｅngage',
                    //       order: 2
                    //   },
                    //   {
                    //       code: 'C-3',
                    //       name: 'Discover+',
                    //       order: 3
                    //   }       
                    // ]
                }
            ];
            /***/ 
        }),
        /***/ "./src/app/service/menu.service.ts": 
        /*!*****************************************!*\
          !*** ./src/app/service/menu.service.ts ***!
          \*****************************************/
        /*! exports provided: MenuService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenuService", function () { return MenuService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
            /* harmony import */ var _mock_data_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mock-data/menu */ "./src/app/mock-data/menu.ts");
            var MenuService = /** @class */ (function () {
                function MenuService() {
                }
                MenuService.prototype.getMenus = function () {
                    //this.messageService.add('HeroService: fetched heroes.');
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(_mock_data_menu__WEBPACK_IMPORTED_MODULE_3__["navigationData"]);
                };
                MenuService.prototype.getSubMenus = function (code) {
                    if (code == null) {
                        code = 'A';
                    }
                    console.log(code + "_Service");
                    console.log(_mock_data_menu__WEBPACK_IMPORTED_MODULE_3__["contentData"].find(function (menu) { return menu.code == code; }).children);
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(_mock_data_menu__WEBPACK_IMPORTED_MODULE_3__["contentData"].find(function (menu) { return menu.code == code; }).children);
                    //return of(HEROES.find(hero=>hero.id==id));
                };
                return MenuService;
            }());
            MenuService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
                    providedIn: 'root'
                })
            ], MenuService);
            /***/ 
        })
    }]);
//# sourceMappingURL=main-main-module-es2015.js.map
//# sourceMappingURL=main-main-module-es5.js.map
//# sourceMappingURL=main-main-module-es5.js.map