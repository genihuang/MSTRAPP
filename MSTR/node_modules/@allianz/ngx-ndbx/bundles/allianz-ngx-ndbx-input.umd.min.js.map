{"version":3,"sources":["ng://@allianz/ngx-ndbx/input/input.directive.ts","ng://@allianz/ngx-ndbx/input/password-toggle.component.ts","ng://@allianz/ngx-ndbx/input/input.module.ts"],"names":["NX_INPUT_VALUE_ACCESSOR","InjectionToken","INVALID_TYPES","NEVER_EMPTY","filter","t","getSupportedInputTypes","has","nextUniqueId","NxInputDirective","_elementRef","ngControl","_parentForm","_parentFormGroup","_errorStateMatcher","inputValueAccessor","this","_type","_uid","_disabled","_required","_readonly","errorState","stateChanges","Subject","focused","id","_inputValueAccessor","nativeElement","_previousNativeValue","value","Object","defineProperty","prototype","_id","coerceBooleanProperty","next","disabled","_validateType","_isTextarea","type","_onInput","_focusChanged","isFocused","readonly","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","oldState","parent","control","newState","isErrorState","setDescribedByIds","ids","_ariaDescribedby","join","setAriaLabel","_ariaLabel","_isBadInput","validity","badInput","_isNeverEmpty","indexOf","nodeName","toLowerCase","Error","empty","newValue","Directive","args","selector","host","[class.c-input]","[attr.id]","[class.is-filled]","[class.is-disabled]","[class.has-error]","[class.is-focused]","[attr.aria-label]","[attr.aria-describedby]","[attr.aria-invalid]","[attr.aria-required]","(blur)","(focus)","(input)","providers","provide","NxFormfieldControl","useExisting","ElementRef","NgControl","decorators","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","Inject","Input","visibilityIcons","NxPasswordToggleComponent","_changeDetectorRef","_currentIcon","_pressed","markForCheck","ngAfterViewInit","console","warn","toggleInputType","toggleIcon","_onKeydown","$event","keyCode","ENTER","SPACE","Component","template","[attr.tabindex]","[attr.aria-pressed]","role","(click)","(keydown)","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","NxInputModule","NgModule","imports","CommonModule","NxFormfieldModule","NxIconModule","declarations","exports"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport { Inject, Directive, DoCheck, ElementRef, Input, OnChanges, OnDestroy, Optional, Self, InjectionToken } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\nexport const NX_INPUT_VALUE_ACCESSOR = new InjectionToken<{value: any}>('NX_INPUT_VALUE_ACCESSOR');\n\nconst INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nconst NEVER_EMPTY = [\n  'date',\n  'datetime',\n  'datetime-local',\n  'month',\n  'time',\n  'week'\n].filter(t => getSupportedInputTypes().has(t));\n\nlet nextUniqueId = 0;\n\n@Directive({\n  selector: 'input[nxInput], textarea[nxInput], select[nxInput]',\n  host: {\n    '[class.c-input]': 'true',\n    '[attr.id]': 'id',\n    '[class.is-filled]': 'empty === false',\n    '[class.is-disabled]': 'disabled',\n    '[class.has-error]': 'errorState',\n    '[class.is-focused]': 'focused',\n    '[attr.aria-label]': '_ariaLabel || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: NxFormfieldControl, useExisting: NxInputDirective}],\n})\nexport class NxInputDirective implements DoCheck, OnChanges, OnDestroy, NxFormfieldControl<any> {\n  protected _type = 'text';\n\n  protected _id: string;\n  protected _uid = `nx-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  protected _disabled = false;\n  protected _required = false;\n  private _readonly: boolean = false;\n  private _inputValueAccessor: {value: any};\n  public _ariaDescribedby: string;\n\n  @Input('nxAriaLabel') _ariaLabel: string;\n\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** @docs-private */\n  stateChanges = new Subject<void>();\n\n  /** @docs-private */\n  focused = false;\n\n  /** The id of the input. */\n  @Input()\n  get id() {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n  }\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Sets the type of the input element (e.g. password, text etc). */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  constructor(\n    protected _elementRef: ElementRef,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective,\n    private _errorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(NX_INPUT_VALUE_ACCESSOR) inputValueAccessor: any\n  ) {\n    this.id = this.id;\n\n    // This will enable other directives to plugin itself as the value accessor\n    // by using the NX_INPUT_VALUE_ACCESSOR Token. Default is the given input field.\n    // TODO eliminate injected dateValueAccessor once we have intra-package support in ng-packagr\n    // See the datefield for details.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n    this._previousNativeValue = this.value;\n  }\n\n  /** @docs-private */\n  get elementRef(): ElementRef {\n    return this._elementRef;\n  }\n\n  _onInput() {\n    // force to to run change detection so we know about changes in the native form input\n  }\n\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Set a list of ids that is currently describing this input\n   * (if you have hints and errors for example).\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // allow to set a arial label value in case there\n  // is not possibility to display a proper label\n  /**\n   * Method to set the aria label.\n   * This is required if you use the input outside of a formfield\n   * where you don't have a label connected.\n   */\n  setAriaLabel(value: string) {\n    this._ariaLabel = value;\n  }\n\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** @docs-private */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  protected _isNeverEmpty() {\n    return NEVER_EMPTY.indexOf(this._type) > -1;\n  }\n\n  protected _isTextarea() {\n    const nativeElement = this._elementRef.nativeElement;\n    return nativeElement.nodeName ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  protected _validateType() {\n    if (INVALID_TYPES.indexOf(this._type) > -1) {\n      throw new Error(`Input of type '${this._type}' is not supported`);\n    }\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n}\n","import { Input, Component, AfterViewInit, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\n\nconst visibilityIcons = {\n  show: 'password-show-o',\n  hide: 'password-hide-o'\n};\n\n@Component({\n  selector: 'nx-password-toggle',\n  template:\n    `<nx-icon\n      aria-hidden=\"true\"\n      [name]=\"_currentIcon\">\n    </nx-icon>`,\n  styleUrls: ['./password-toggle.component.scss'],\n  host: {\n    '[attr.aria-label]': 'ariaLabel',\n    '[attr.tabindex]': 'tabindex',\n    '[attr.aria-pressed]': '_pressed',\n    'role': 'button',\n    '(click)': 'toggleInputType()',\n    '(keydown)': '_onKeydown($event)'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxPasswordToggleComponent implements AfterViewInit {\n\n  /** Input element using the toggle functionality. */\n  @Input() control: HTMLInputElement;\n\n  /**@docs-private */\n  _currentIcon: string = visibilityIcons['show'];\n  /**@docs-private */\n  _pressed: boolean = false;\n  private _ariaLabel: string = 'Show password';\n\n  /** Sets the aria-label needed for accessibility.\n   * Notice that this `aria-label` should describe the initial action according to the status of the visibility.\n   * E.g if you have an `input[type=password]` at the beginning then the\n   * password will be hidden and the correct aria-label would be 'Show password.'\n   */\n  @Input()\n  set ariaLabel(value: string) {\n    if (value !== this._ariaLabel) {\n      this._ariaLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get ariaLabel(): string {\n    return this._ariaLabel;\n  }\n\n  constructor (private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngAfterViewInit() {\n    if (!this.control) {\n      console.warn('You need to pass an input as a control to the password toggle.');\n    } else {\n      // show the right icon according to the initial type of the input\n      this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];\n    }\n  }\n\n  /** Toggles the type of the input. */\n  toggleInputType(): void {\n    if (this.control) {\n      this.control.type = this.control.type === 'password' ? 'text' : 'password';\n      this._pressed = !this._pressed;\n      this.toggleIcon();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**@docs-private */\n  toggleIcon(): void {\n    this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];\n  }\n\n  /**@docs-private */\n  _onKeydown($event) {\n    if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n      this.toggleInputType();\n    }\n  }\n\n  /**@docs-private */\n  get tabindex(): numberÂ {\n    if (this.control) {\n      return this.control.disabled ? -1 : 0;\n    }\n    return null;\n  }\n }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {NxFormfieldModule} from '@allianz/ngx-ndbx/formfield';\nimport { NxInputDirective } from './input.directive';\nimport { NxPasswordToggleComponent } from './password-toggle.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxInputDirective,\n    NxPasswordToggleComponent\n  ],\n  exports: [\n    NxFormfieldModule,\n    NxInputDirective,\n    NxPasswordToggleComponent\n  ]\n})\nexport class NxInputModule { }\n"]}