{"version":3,"sources":["ng://@allianz/ngx-ndbx/table/table-cell.component.ts","ng://@allianz/ngx-ndbx/table/header-cell.directive.ts","ng://@allianz/ngx-ndbx/table/table.component.ts","ng://@allianz/ngx-ndbx/table/table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-cell.component.ts","ng://@allianz/ngx-ndbx/table/expandable/toggle-button.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header-intl.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header.component.ts","ng://@allianz/ngx-ndbx/table/table.module.ts"],"names":["NxTableCellComponent","Component","args","selector","template","host","class","changeDetection","ChangeDetectionStrategy","OnPush","NxHeaderCellDirective","Directive","NxTableComponent","_changeDetectorRef","this","Object","defineProperty","prototype","_condensed","value","newValue","coerceBooleanProperty","markForCheck","_zebra","[class.nx-table--condensed]","[class.nx-table--zebra]","ChangeDetectorRef","Input","NxTableRowComponent","NxExpandableTableRowComponent","expanded","BehaviorSubject","toggle","close","expand","next","NxExpandableTableCellComponent","_row","_this","_destroyed","Subject","_open","pipe","takeUntil","subscribe","open","ngOnDestroy","complete","animations","trigger","state","style","height","transition","animate","NxToggleButtonComponent","_expanded","_ariaLabel","_target","_subscription","unsubscribe","_onClick","NxExpandableTableDirective","ngAfterViewInit","rows","changes","startWith","flatMap","combineLatest","map","row","values","reduce","a","x","distinctUntilChanged","rowsOpen","forEach","exportAs","ContentChildren","SortEvent","active","direction","NxSortDirective","_stateChanges","_direction","activeChange","EventEmitter","directionChange","sortChange","_active","emit","sort","sortable","Output","NxSortHeaderIntl","sortAscendingAriaLabel","sortDescendingAriaLabel","Injectable","NxSortHeaderComponent","_sort","_intl","_intlSubscription","_key","ngOnInit","_parentChangeSubscription","_handleClick","_onKeydown","$event","keyCode","ENTER","SPACE","preventDefault","_isSortedAscending","_isSortedDescending","_getAriaLabel","(click)","(keydown)","[tabindex]","role","[attr.aria-label]","decorators","type","Optional","EXPORTED_DECLARED_ELEMENTS","NxTableModule","NgModule","declarations","exports","imports","CommonModule","NxIconModule","providers"],"mappings":"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","sourcesContent":["import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\n\n/**\n * This is a table cell.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxTableCell], td[nxCell]',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'nx-table-cell',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableCellComponent { }\n","import { Directive } from '@angular/core';\n\n/**\n * This is a table header cell.\n */\n@Directive({\n  selector: '[nxHeaderCell]',\n  host: {\n    'class': 'nx-header-cell'\n  }\n})\nexport class NxHeaderCellDirective { }\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, ContentChildren, QueryList, AfterViewInit } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * This is a table.\n * The table supports a `zebra` and a `condensed` mode.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'table[nxTable]',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./table.component.scss'],\n  host: {\n    'class': 'nx-table',\n    '[class.nx-table--condensed]': 'condensed',\n    '[class.nx-table--zebra]': 'zebra'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTableComponent {\n\n  private _condensed: boolean;\n\n  private _zebra: boolean;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n   /** Change the table mode to condensed  */\n  @Input() set condensed(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (value !== this._condensed) {\n      this._condensed = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get condensed(): boolean {\n    return this._condensed;\n  }\n\n   /** Change the table mode to zebra  */\n  @Input() set zebra(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (value !== this._zebra) {\n      this._zebra = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get zebra(): boolean {\n    return this._zebra;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n/**\n * This is a table row.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxTableRow]',\n  host: {\n   'class': 'nx-table-row'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableRowComponent {}\n","import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * This is an expandable table row.\n * It can collapse its height to hide the content.\n * Requires the table cells to have the `[nxExpandableTableCell]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxExpandableTableRow]',\n  host: {\n   'class': 'nx-expandable-table-row'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableRowComponent implements NxExpandable {\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Toggles the expansion of this row.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands this row.\n   */\n  expand() {\n    if (!this.expanded.value) {\n      this.expanded.next(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Closes this row.\n   */\n  close() {\n    if (this.expanded.value) {\n      this.expanded.next(false);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * This is an expandable table cell.\n * Only works in conjunction with the `[nxExpandableTableRow]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxExpandableTableCell]',\n  templateUrl: './expandable-table-cell.component.html',\n  host: {\n    'class': 'nx-expandable-table-cell'\n  },\n  animations: [\n    trigger('openClose', [\n      state('open', style({\n        height: '*'\n      })),\n      state('closed, void', style({\n        height: '0'\n      })),\n      transition('closed <=> open, void => closed', [\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\n      ])\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableCellComponent implements OnDestroy {\n  private _destroyed = new Subject();\n\n  _open: boolean = false;\n\n  constructor(\n      _row: NxExpandableTableRowComponent,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    _row.expanded.pipe(takeUntil(this._destroyed))\n      .subscribe(open => {\n        this._open = open;\n        this._changeDetectorRef.markForCheck();\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\nimport { Attribute } from '@angular/compiler';\n\nexport interface NxExpandable {\n  /** Indicates if this expandable instance is open or not.  */\n  expanded: BehaviorSubject<boolean>;\n\n  /** Toggles the open state. */\n  toggle: () => void;\n\n  /** Expands this component. */\n  expand: () => void;\n\n  /** Closes this component. */\n  close: () => void;\n}\n\n/**\n * This toggle button can be clicked and toggles expandable elements.\n * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.\n */\n@Component({\n  selector: 'nx-toggle-button',\n  templateUrl: './toggle-button.component.html',\n  styleUrls: ['./toggle-button.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxToggleButtonComponent implements OnDestroy {\n  _expanded: boolean = false;\n\n  /**\n   * This is the expandable target that will be toggled when the user clicks the button.\n   */\n  @Input()\n  set target(value: NxExpandable) {\n    this._target = value;\n\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    if (this._target) {\n      this._subscription = this._target.expanded.subscribe(expanded => {\n          this._expanded = expanded;\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n  _target: NxExpandable;\n\n  @Input()\n  set ariaLabel(value: string) {\n    this._ariaLabel = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  _ariaLabel: string = '';\n\n  private _subscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  _onClick() {\n    if (this._target) {\n      this._target.toggle();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n","import { ContentChildren, QueryList, AfterViewInit, Directive } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { flatMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * The nxExpandableTable adds row expansion functionality to the nxTable.\n * It provides the logic to expand/collapse all expandable rows simultanously.\n */\n@Directive({\n  selector: 'table[nxExpandableTable]',\n  exportAs: 'nxExpandableTable'\n})\nexport class NxExpandableTableDirective implements AfterViewInit, NxExpandable {\n  @ContentChildren(NxExpandableTableRowComponent) rows: QueryList<NxExpandableTableRowComponent>;\n\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  ngAfterViewInit() {\n    this.rows.changes.pipe(\n      startWith(this.rows),\n      flatMap((rows: NxExpandableTableRowComponent[]) => {\n        return combineLatest(rows.map(row => row.expanded));\n      }),\n      map((values: boolean[]) =>\n        values.reduce((a, x) => a && x, true)\n      ),\n      distinctUntilChanged()\n    )\n    .subscribe((rowsOpen) => {\n      this.expanded.next(rowsOpen);\n    });\n  }\n\n  /**\n   * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands all expandable rows.\n   */\n  expand() {\n    this.rows.forEach(row => row.expanded.next(true));\n  }\n\n  /**\n   * Closes all expandable rows.\n   */\n  close() {\n    this.rows.forEach(row => row.expanded.next(false));\n  }\n}\n","import { Directive, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport class SortEvent {\n  /** The name of the column that is being sorted by. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n\n  constructor(active, direction) {\n    this.active = active;\n    this.direction = direction;\n  }\n}\n\n@Directive({\n  selector: 'table[nxSort]',\n  exportAs: 'NxSortDirective'\n})\nexport class NxSortDirective implements OnDestroy {\n\n  readonly _stateChanges = new Subject<void>();\n\n  private _active: string;\n\n  /** Sets the key of the most recently sorted column. */\n  @Input()\n  set active(value: string) {\n    if (this._active !== value) {\n      this._active = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get active(): string {\n    return this._active;\n  }\n\n  private _direction: SortDirection = 'asc';\n\n  /** Sets the direction of the currently active sorted column. Default: 'asc'. */\n  @Input()\n  set direction(value: SortDirection) {\n    if (this._direction !== value) {\n      this._direction = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get direction(): SortDirection {\n    return this._direction;\n  }\n\n  /**\n   * @docs-private\n   * An event emitted when the active value has changed.\n   */\n  @Output() readonly activeChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * @docs-private\n   * An event emitted when the direction value has changed.\n   */\n  @Output() readonly directionChange: EventEmitter<SortDirection> = new EventEmitter<SortDirection>();\n\n  /** An event emitted when either the active sort or sort direction changes. */\n  @Output() readonly sortChange: EventEmitter<SortEvent> = new EventEmitter<SortEvent>();\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /**\n   * Sets the active sort key and determines the new sort direction.\n   * Afterwards the output event `sortChange` is called.\n   *\n   * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.\n   * Otherwise the direction of the sorted column changes.\n   */\n  sort(sortable: string): void {\n    if (this._active !== sortable) {\n      this._active = sortable;\n      this.activeChange.emit(this.active);\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    } else if (this._direction === 'asc') {\n      this._direction = 'desc';\n      this.directionChange.emit(this.direction);\n    } else {\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    }\n\n    this.sortChange.emit(new SortEvent(this.active, this.direction));\n    this._stateChanges.next();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n@Injectable()\nexport class NxSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for a header that can be sorted ascending. */\n  sortAscendingAriaLabel: string = 'sort ascending';\n  /** The aria label for a header that can be sorted descending. */\n  sortDescendingAriaLabel: string = 'sort descending';\n}\n","import { Component, Input, Optional, ChangeDetectionStrategy, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxSortDirective } from './sort.directive';\nimport { Subscription } from 'rxjs';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { NxSortHeaderIntl } from './sort-header-intl';\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'th[nxSortHeaderCell]',\n  exportAs: 'nxSortHeaderComponent',\n  templateUrl: 'sort-header.component.html',\n  styleUrls: ['sort-header.component.scss'],\n  host: {\n    '(click)': '_handleClick()',\n    '(keydown)': '_onKeydown($event)',\n    '[tabindex]': '0',\n    'role': 'button',\n    '[attr.aria-label]': '_getAriaLabel()'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxSortHeaderComponent implements OnInit, OnDestroy {\n\n  private _parentChangeSubscription: Subscription;\n  private _intlSubscription: Subscription;\n  private _key: string;\n\n  /** Sets the key of this sort header. */\n  @Input('nxSortHeaderCell')\n  set key(value: string) {\n    if (this._key !== value) {\n      this._key = value;\n    }\n  }\n  get key(): string {\n    return this._key;\n  }\n\n  constructor(@Optional() public _sort: NxSortDirective,\n    public _intl: NxSortHeaderIntl,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this._intlSubscription = this._intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._parentChangeSubscription = this._sort._stateChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n    this._intlSubscription.unsubscribe();\n  }\n\n  _handleClick() {\n    this._sort.sort(this._key);\n  }\n\n  _onKeydown($event) {\n    if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n      this._sort.sort(this._key);\n\n      // prevent page from scrolling down\n      if ($event.keyCode === SPACE) {\n        $event.preventDefault();\n      }\n    }\n  }\n\n  _isSortedAscending() {\n    return (this._sort.active === this._key && this._sort.direction === 'asc');\n  }\n\n  _isSortedDescending() {\n    return (this._sort.active === this._key && this._sort.direction === 'desc');\n  }\n\n  _getAriaLabel(): string {\n    if (this._sort.active === this._key && this._sort.direction === 'asc') {\n      return `${this._key} ${this._intl.sortDescendingAriaLabel}`;\n    }\n    return `${this._key} ${this._intl.sortAscendingAriaLabel}`;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxTableCellComponent } from './table-cell.component';\nimport { NxHeaderCellDirective } from './header-cell.directive';\nimport { NxTableComponent } from './table.component';\nimport { NxTableRowComponent } from './table-row.component';\nimport { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';\nimport { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';\nimport { NxToggleButtonComponent } from './expandable/toggle-button.component';\nimport { NxExpandableTableDirective } from './expandable/expandable-table.directive';\nimport { NxSortHeaderComponent } from './sort-header/sort-header.component';\nimport { NxSortDirective } from './sort-header/sort.directive';\nimport { NxSortHeaderIntl } from './sort-header/sort-header-intl';\n\nconst EXPORTED_DECLARED_ELEMENTS = [\n  NxHeaderCellDirective,\n  NxTableComponent,\n  NxTableCellComponent,\n  NxTableComponent,\n  NxTableRowComponent,\n  NxToggleButtonComponent,\n  NxExpandableTableDirective,\n  NxExpandableTableRowComponent,\n  NxExpandableTableCellComponent,\n  NxSortHeaderComponent,\n  NxSortDirective\n];\n@NgModule({\n  declarations: EXPORTED_DECLARED_ELEMENTS,\n  exports: EXPORTED_DECLARED_ELEMENTS,\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  providers: [ NxSortHeaderIntl ],\n})\nexport class NxTableModule { }\n"]}