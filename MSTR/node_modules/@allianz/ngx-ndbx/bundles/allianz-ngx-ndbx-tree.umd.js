(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/core'), require('@angular/cdk/collections'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/tree')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/tree', ['exports', '@angular/common', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/core', '@angular/cdk/collections', 'rxjs', 'rxjs/operators', '@angular/cdk/tree'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].tree = {}),global.ng.common,global.ng.cdk.bidi,global.ng.cdk.coercion,global.ng.core,global.ng.cdk.collections,global.rxjs,global.rxjs.operators,global.ng.cdk.tree));
}(this, (function (exports,common,bidi,coercion,core,collections,rxjs,operators,tree) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
                if (e.indexOf(p[i]) < 0)
                    t[p[i]] = s[p[i]];
        return t;
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Outlet for nested CdkNode. Put `[nxTreeNodeOutlet]` on a tag to place children dataNodes
     * inside the outlet.
     */
    var NxTreeNodeOutletDirective = /** @class */ (function () {
        function NxTreeNodeOutletDirective(viewContainer) {
            this.viewContainer = viewContainer;
        }
        NxTreeNodeOutletDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxTreeNodeOutlet]'
                    },] }
        ];
        /** @nocollapse */
        NxTreeNodeOutletDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef }
            ];
        };
        return NxTreeNodeOutletDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wrapper for the CdkTable with NDBX design styles.
     * @template T
     */
    var NxTreeComponent = /** @class */ (function (_super) {
        __extends(NxTreeComponent, _super);
        function NxTreeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NxTreeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-tree',
                        exportAs: 'nxTree',
                        template: "<ng-container nxTreeNodeOutlet></ng-container>",
                        host: {
                            'class': 'nx-tree',
                            'role': 'tree',
                        },
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [{ provide: tree.CdkTree, useExisting: NxTreeComponent }],
                        styles: [":host.nx-tree{display:block}.nx-tree__node{display:block;overflow:hidden}"]
                    }] }
        ];
        NxTreeComponent.propDecorators = {
            _nodeOutlet: [{ type: core.ViewChild, args: [NxTreeNodeOutletDirective,] }]
        };
        return NxTreeComponent;
    }(tree.CdkTree));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wrapper for the CdkTree node with NDBX design styles.
     * @template T
     */
    var NxTreeNodeComponent = /** @class */ (function (_super) {
        __extends(NxTreeNodeComponent, _super);
        function NxTreeNodeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NxTreeNodeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-tree-node',
                        exportAs: 'nxTreeNode',
                        inputs: ['disabled', 'tabIndex'],
                        host: {
                            '[attr.aria-expanded]': 'isExpanded',
                            '[attr.aria-level]': 'role === "treeitem" ? level : null',
                            '[attr.role]': 'role',
                            'class': 'nx-tree__node',
                            '[class.is-expanded]': 'isExpanded'
                        },
                        providers: [{ provide: tree.CdkTreeNode, useExisting: NxTreeNodeComponent }],
                        template: "<div class=\"nx-tree__node-box\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        return NxTreeNodeComponent;
    }(tree.CdkTreeNode));
    /**
     * Wrapper for the CdkTree node definition with NDBX design styles.
     * @template T
     */
    var NxTreeNodeDefDirective = /** @class */ (function (_super) {
        __extends(NxTreeNodeDefDirective, _super);
        function NxTreeNodeDefDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NxTreeNodeDefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxTreeNodeDef]',
                        inputs: [
                            'when: nxTreeNodeDefWhen'
                        ],
                        providers: [{ provide: tree.CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }]
                    },] }
        ];
        NxTreeNodeDefDirective.propDecorators = {
            data: [{ type: core.Input, args: ['nxTreeNode',] }]
        };
        return NxTreeNodeDefDirective;
    }(tree.CdkTreeNodeDef));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Regex used to split a string on its CSS units.
     * @type {?}
     */
    var cssUnitPattern = /([A-Za-z%]+)$/;
    /**
     * Indent for the children tree dataNodes.
     * This directive will add left-padding to the node to show hierarchy.
     * @template T
     */
    var NxTreeNodePaddingDirective = /** @class */ (function () {
        function NxTreeNodePaddingDirective(_treeNode, _tree, _renderer, _element, _dir) {
            var _this = this;
            this._treeNode = _treeNode;
            this._tree = _tree;
            this._renderer = _renderer;
            this._element = _element;
            this._dir = _dir;
            /**
             * Subject that emits when the component has been destroyed.
             */
            this._destroyed = new rxjs.Subject();
            /**
             * CSS units used for the indentation value.
             */
            this.indentUnits = 'px';
            this._offset = 0;
            this._indent = 24;
            this._setPadding();
            if (this._dir) {
                this._dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(( /**
                 * @return {?}
                 */function () { return _this._setPadding(); }));
            }
        }
        Object.defineProperty(NxTreeNodePaddingDirective.prototype, "level", {
            /** The level of depth of the tree node. The padding will be `level * indent` pixels. */
            get: /**
             * The level of depth of the tree node. The padding will be `level * indent` pixels.
             * @return {?}
             */ function () { return this._level; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._level = coercion.coerceNumberProperty(value);
                this._setPadding();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTreeNodePaddingDirective.prototype, "offset", {
            /** The offset is added once on top of each indent. Default number is 0. */
            get: /**
             * The offset is added once on top of each indent. Default number is 0.
             * @return {?}
             */ function () { return this._offset; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._offset = coercion.coerceNumberProperty(value);
                this._setPadding();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTreeNodePaddingDirective.prototype, "indent", {
            /**
             * The indent for each level. Can be a number or a CSS string.
             * Default number 24px from material design menu sub-menu spec.
             */
            get: /**
             * The indent for each level. Can be a number or a CSS string.
             * Default number 24px from material design menu sub-menu spec.
             * @return {?}
             */ function () { return this._indent; },
            set: /**
             * @param {?} indent
             * @return {?}
             */ function (indent) {
                /** @type {?} */
                var value = indent;
                /** @type {?} */
                var units = 'px';
                if (typeof indent === 'string') {
                    /** @type {?} */
                    var parts = indent.split(cssUnitPattern);
                    value = parts[0];
                    units = parts[1] || units;
                }
                this.indentUnits = units;
                this._indent = coercion.coerceNumberProperty(value);
                this._setPadding();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxTreeNodePaddingDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._destroyed.next();
                this._destroyed.complete();
            };
        /** The padding indent value for the tree node. Returns a string with px numbers if not null. */
        /**
         * The padding indent value for the tree node. Returns a string with px numbers if not null.
         * @return {?}
         */
        NxTreeNodePaddingDirective.prototype._paddingIndent = /**
         * The padding indent value for the tree node. Returns a string with px numbers if not null.
         * @return {?}
         */
            function () {
                /** @type {?} */
                var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)
                    ? this._tree.treeControl.getLevel(this._treeNode.data)
                    : null;
                /** @type {?} */
                var level = this._level || nodeLevel;
                return level ? "" + (level * this._indent + this._offset) + this.indentUnits : null;
            };
        /**
         * @return {?}
         */
        NxTreeNodePaddingDirective.prototype._setPadding = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var padding = this._paddingIndent();
                /** @type {?} */
                var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
                this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);
            };
        NxTreeNodePaddingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxTreeNodePadding]',
                    },] }
        ];
        /** @nocollapse */
        NxTreeNodePaddingDirective.ctorParameters = function () {
            return [
                { type: tree.CdkTreeNode },
                { type: tree.CdkTree },
                { type: core.Renderer2 },
                { type: core.ElementRef },
                { type: bidi.Directionality, decorators: [{ type: core.Optional }] }
            ];
        };
        NxTreeNodePaddingDirective.propDecorators = {
            level: [{ type: core.Input, args: ['nxTreeNodePadding',] }],
            offset: [{ type: core.Input, args: ['nxTreeNodePaddingOffset',] }],
            indent: [{ type: core.Input, args: ['nxTreeNodePaddingIndent',] }]
        };
        return NxTreeNodePaddingDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wrapper for the CdkTree's toggle with NDBX design styles.
     * @template T
     */
    var NxTreeNodeToggleDirective = /** @class */ (function (_super) {
        __extends(NxTreeNodeToggleDirective, _super);
        function NxTreeNodeToggleDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.recursive = false;
            return _this;
        }
        NxTreeNodeToggleDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxTreeNodeToggle]',
                        host: {
                            '(click)': '_toggle($event)',
                        },
                        providers: [{ provide: tree.CdkTreeNodeToggle, useExisting: NxTreeNodeToggleDirective }]
                    },] }
        ];
        NxTreeNodeToggleDirective.propDecorators = {
            recursive: [{ type: core.Input, args: ['nxTreeNodeToggleRecursive',] }]
        };
        return NxTreeNodeToggleDirective;
    }(tree.CdkTreeNodeToggle));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxTreeModule = /** @class */ (function () {
        function NxTreeModule() {
        }
        NxTreeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [tree.CdkTreeModule, common.CommonModule],
                        declarations: [NxTreeComponent, NxTreeNodeComponent, NxTreeNodeDefDirective,
                            NxTreeNodePaddingDirective, NxTreeNodeToggleDirective, NxTreeNodeOutletDirective],
                        exports: [NxTreeComponent, NxTreeNodeComponent, NxTreeNodeDefDirective,
                            NxTreeNodePaddingDirective, NxTreeNodeToggleDirective, NxTreeNodeOutletDirective]
                    },] }
        ];
        return NxTreeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Tree flattener to convert a normal type of node to node with children & level information.
     * Transform nested nodes of type `T extends NxTreeNode` to flattened nodes of type `F extends NxFlatTreeNode`.
     *
     * For example, the input data of type `T` is nested, and contains its children data:
     *   SomeNode: {
     *     key: 'Fruits',
     *     children: [
     *       NodeOne: {
     *         key: 'Apple',
     *       },
     *       NodeTwo: {
     *        key: 'Pear',
     *      }
     *    ]
     *  }
     *  After flattener flatten the tree, the structure will become
     *  SomeNode: {
     *    key: 'Fruits',
     *    expandable: true,
     *    level: 1
     *  },
     *  NodeOne: {
     *    key: 'Apple',
     *    expandable: false,
     *    level: 2
     *  },
     *  NodeTwo: {
     *   key: 'Pear',
     *   expandable: false,
     *   level: 2
     * }
     * and the output flattened type is `F extends NxFlatTreeNode` with additional information.
     * @template T, F
     */
    var /**
     * Tree flattener to convert a normal type of node to node with children & level information.
     * Transform nested nodes of type `T extends NxTreeNode` to flattened nodes of type `F extends NxFlatTreeNode`.
     *
     * For example, the input data of type `T` is nested, and contains its children data:
     *   SomeNode: {
     *     key: 'Fruits',
     *     children: [
     *       NodeOne: {
     *         key: 'Apple',
     *       },
     *       NodeTwo: {
     *        key: 'Pear',
     *      }
     *    ]
     *  }
     *  After flattener flatten the tree, the structure will become
     *  SomeNode: {
     *    key: 'Fruits',
     *    expandable: true,
     *    level: 1
     *  },
     *  NodeOne: {
     *    key: 'Apple',
     *    expandable: false,
     *    level: 2
     *  },
     *  NodeTwo: {
     *   key: 'Pear',
     *   expandable: false,
     *   level: 2
     * }
     * and the output flattened type is `F extends NxFlatTreeNode` with additional information.
     * @template T, F
     */ NxTreeFlattener = /** @class */ (function () {
        function NxTreeFlattener() {
        }
        /**
         * @param {?} node
         * @param {?} level
         * @return {?}
         */
        NxTreeFlattener.prototype.transformFunction = /**
         * @param {?} node
         * @param {?} level
         * @return {?}
         */
            function (node, level) {
                var children = node.children, rest = __rest(node, ["children"]);
                return ( /** @type {?} */(__assign({}, rest, { level: level, expandable: Array.isArray(children) && children.length > 0 })));
            };
        /**
         * @param {?} node
         * @return {?}
         */
        NxTreeFlattener.prototype.getLevel = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                return node.level;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        NxTreeFlattener.prototype.isExpandable = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                return node.expandable;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        NxTreeFlattener.prototype.getChildren = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                return ( /** @type {?} */(node.children));
            };
        /**
         * @param {?} node
         * @param {?} level
         * @param {?} resultNodes
         * @param {?} parentMap
         * @return {?}
         */
        NxTreeFlattener.prototype._flattenNode = /**
         * @param {?} node
         * @param {?} level
         * @param {?} resultNodes
         * @param {?} parentMap
         * @return {?}
         */
            function (node, level, resultNodes, parentMap) {
                var _this = this;
                /** @type {?} */
                var flatNode = this.transformFunction(node, level);
                resultNodes.push(flatNode);
                if (this.isExpandable(flatNode)) {
                    /** @type {?} */
                    var childrenNodes = this.getChildren(node);
                    if (Array.isArray(childrenNodes)) {
                        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);
                    }
                    else {
                        childrenNodes.pipe(operators.take(1)).subscribe(( /**
                         * @param {?} children
                         * @return {?}
                         */function (children) {
                            _this._flattenChildren(children, level, resultNodes, parentMap);
                        }));
                    }
                }
                return resultNodes;
            };
        /**
         * @param {?} children
         * @param {?} level
         * @param {?} resultNodes
         * @param {?} parentMap
         * @return {?}
         */
        NxTreeFlattener.prototype._flattenChildren = /**
         * @param {?} children
         * @param {?} level
         * @param {?} resultNodes
         * @param {?} parentMap
         * @return {?}
         */
            function (children, level, resultNodes, parentMap) {
                var _this = this;
                children.forEach(( /**
                 * @param {?} child
                 * @param {?} index
                 * @return {?}
                 */function (child, index) {
                    /** @type {?} */
                    var childParentMap = parentMap.slice();
                    childParentMap.push(index != children.length - 1); // tslint:disable-line
                    _this._flattenNode(child, level + 1, resultNodes, childParentMap);
                }));
            };
        /**
         * Flatten a list of node type T to flattened version of node F.
         * Please note that type T may be nested, and the length of `structuredData` may be different
         * from that of returned list `F[]`.
         */
        /**
         * Flatten a list of node type T to flattened version of node F.
         * Please note that type T may be nested, and the length of `structuredData` may be different
         * from that of returned list `F[]`.
         * @param {?} structuredData
         * @return {?}
         */
        NxTreeFlattener.prototype.flattenNodes = /**
         * Flatten a list of node type T to flattened version of node F.
         * Please note that type T may be nested, and the length of `structuredData` may be different
         * from that of returned list `F[]`.
         * @param {?} structuredData
         * @return {?}
         */
            function (structuredData) {
                var _this = this;
                /** @type {?} */
                var resultNodes = [];
                structuredData.forEach(( /**
                 * @param {?} node
                 * @return {?}
                 */function (node) { return _this._flattenNode(node, 0, resultNodes, []); }));
                return resultNodes;
            };
        /**
         * Expand flattened node with current expansion status.
         * The returned list may have different length.
         */
        /**
         * Expand flattened node with current expansion status.
         * The returned list may have different length.
         * @param {?} nodes
         * @param {?} treeControl
         * @return {?}
         */
        NxTreeFlattener.prototype.expandFlattenedNodes = /**
         * Expand flattened node with current expansion status.
         * The returned list may have different length.
         * @param {?} nodes
         * @param {?} treeControl
         * @return {?}
         */
            function (nodes, treeControl) {
                var _this = this;
                /** @type {?} */
                var results = [];
                /** @type {?} */
                var currentExpand = [];
                currentExpand[0] = true;
                nodes.forEach(( /**
                 * @param {?} node
                 * @return {?}
                 */function (node) {
                    /** @type {?} */
                    var expand = true;
                    for (var i = 0; i <= _this.getLevel(node); i++) {
                        expand = expand && currentExpand[i];
                    }
                    if (expand) {
                        results.push(node);
                    }
                    if (_this.isExpandable(node)) {
                        currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);
                    }
                }));
                return results;
            };
        return NxTreeFlattener;
    }());
    /**
     * Data source for flat tree.
     * The data source need to handle expansion/collapsion of the tree node and change the data feed
     * to `NxTree`.
     * The nested tree nodes of type `T extends NxTreeNode` are flattened through `NxTreeFlattener`, and converted
     * to type `F extends NxFlatTreeNode` for `NxTree` to consume.
     * @template T, F
     */
    var /**
     * Data source for flat tree.
     * The data source need to handle expansion/collapsion of the tree node and change the data feed
     * to `NxTree`.
     * The nested tree nodes of type `T extends NxTreeNode` are flattened through `NxTreeFlattener`, and converted
     * to type `F extends NxFlatTreeNode` for `NxTree` to consume.
     * @template T, F
     */ NxTreeFlatDataSource = /** @class */ (function (_super) {
        __extends(NxTreeFlatDataSource, _super);
        function NxTreeFlatDataSource(treeControl, initialData) {
            if (initialData === void 0) {
                initialData = [];
            }
            var _this = _super.call(this) || this;
            _this.treeControl = treeControl;
            _this._flattenedData = new rxjs.BehaviorSubject([]);
            _this._expandedData = new rxjs.BehaviorSubject([]);
            _this._data = new rxjs.BehaviorSubject([]);
            _this._treeFlattener = new NxTreeFlattener();
            _this.data = initialData;
            return _this;
        }
        Object.defineProperty(NxTreeFlatDataSource.prototype, "data", {
            get: /**
             * @return {?}
             */ function () { return this._data.value; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._data.next(value);
                this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));
                this.treeControl.dataNodes = this._flattenedData.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} collectionViewer
         * @return {?}
         */
        NxTreeFlatDataSource.prototype.connect = /**
         * @param {?} collectionViewer
         * @return {?}
         */
            function (collectionViewer) {
                var _this = this;
                /** @type {?} */
                var changes = [
                    collectionViewer.viewChange,
                    this.treeControl.expansionModel.onChange,
                    this._flattenedData
                ];
                return rxjs.merge.apply(void 0, __spread(changes)).pipe(operators.map(( /**
                 * @return {?}
                 */function () {
                    _this._expandedData.next(_this._treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this.treeControl));
                    return _this._expandedData.value;
                })));
            };
        /**
         * @return {?}
         */
        NxTreeFlatDataSource.prototype.disconnect = /**
         * @return {?}
         */
            function () {
                // no op
            };
        return NxTreeFlatDataSource;
    }(collections.DataSource));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Flat tree control.
     * Able to expand/collapse a subtree recursively for flattened tree.
     * @template F
     */
    var /**
     * Flat tree control.
     * Able to expand/collapse a subtree recursively for flattened tree.
     * @template F
     */ NxFlatTreeControl = /** @class */ (function (_super) {
        __extends(NxFlatTreeControl, _super);
        function NxFlatTreeControl() {
            return _super.call(this, ( /**
             * @param {?} node
             * @return {?}
             */function (node) { return node.level; }), ( /**
             * @param {?} node
             * @return {?}
             */function (node) { return node.expandable; })) || this;
        }
        return NxFlatTreeControl;
    }(tree.FlatTreeControl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxTreeModule = NxTreeModule;
    exports.NxTreeComponent = NxTreeComponent;
    exports.NxTreeFlatDataSource = NxTreeFlatDataSource;
    exports.NxFlatTreeControl = NxFlatTreeControl;
    exports.ɵb = NxTreeNodeComponent;
    exports.ɵc = NxTreeNodeDefDirective;
    exports.ɵa = NxTreeNodeOutletDirective;
    exports.ɵd = NxTreeNodePaddingDirective;
    exports.ɵe = NxTreeNodeToggleDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-tree.umd.js.map