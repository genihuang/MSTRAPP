{"version":3,"sources":["ng://@allianz/ngx-ndbx/message/message.component.ts","ng://@allianz/ngx-ndbx/message/message.module.ts"],"names":["ICONS","NxMessageComponent","_changeDetectorRef","this","_context","_showIcon","_closable","_closeButtonLabel","closeEvent","EventEmitter","Object","defineProperty","prototype","value","_icon","getIconName","markForCheck","coerceBooleanProperty","newValue","_emitCloseEvent","emit","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","host","[class.context-info]","[class.context-error]","[class.context-success]","[class.context-warning]","[class.nx-message--closable]","ChangeDetectorRef","Input","Output","NxMessageModule","NgModule","imports","CommonModule","NxIconModule","declarations","exports"],"mappings":"6kBAMMA,EACE,cADFA,EAEG,qBAFHA,EAGK,eAHLA,EAIK,uBAGXC,EAAA,WA0FE,SAAAA,EAAoBC,GAAAC,KAAAD,mBAAAA,EAzEZC,KAAAC,SAAoB,UAiBpBD,KAAAE,WAAqB,EAgBrBF,KAAAG,WAAqB,EAsBrBH,KAAAI,kBAA4B,eAgBnBJ,KAAAK,WAAa,IAAIC,EAAAA,aAsBpC,OAxFEC,OAAAC,eACIV,EAAAW,UAAA,UAAO,KAOX,WACE,OAAOT,KAAKC,cATd,SACYS,GACNA,IAAUV,KAAKC,WACjBD,KAAKC,SAAWS,EAChBV,KAAKW,MAAQX,KAAKY,cAClBZ,KAAKD,mBAAmBc,iDAc5BN,OAAAC,eACIV,EAAAW,UAAA,WAAQ,KAIZ,WACE,OAAOT,KAAKE,eANd,SACaQ,GACXV,KAAKE,UAAYY,EAAAA,sBAAsBJ,GACvCV,KAAKD,mBAAmBc,gDAS1BN,OAAAC,eACIV,EAAAW,UAAA,WAAQ,KAOZ,WACE,OAAOT,KAAKG,eATd,SACaO,OACLK,EAAWD,EAAAA,sBAAsBJ,GACnCK,IAAaf,KAAKG,YACpBH,KAAKG,UAAYY,EACjBf,KAAKD,mBAAmBc,iDAU5BN,OAAAC,eAAIV,EAAAW,UAAA,OAAI,KAAR,WACE,OAAOT,KAAKW,uCAMdJ,OAAAC,eACIV,EAAAW,UAAA,mBAAgB,KAMpB,WACE,OAAOT,KAAKI,uBARd,SACqBM,GACfA,IAAUV,KAAKI,oBACjBJ,KAAKI,kBAAoBM,EACzBV,KAAKD,mBAAmBc,iDAc5Bf,EAAAW,UAAAO,gBAAA,WACEhB,KAAKK,WAAWY,QAIlBnB,EAAAW,UAAAG,YAAA,WACE,MAAsB,SAAlBZ,KAAKC,SACAJ,EACoB,UAAlBG,KAAKC,SACPJ,EACoB,YAAlBG,KAAKC,SACPJ,EACoB,YAAlBG,KAAKC,SACPJ,EAEF,wBA5GVqB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,aACVC,SAAA,whBAEAC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,SAAU,YACVC,KAAM,CACJC,uBAAwB,qBACxBC,wBAAyB,sBACzBC,0BAA2B,wBAC3BC,0BAA2B,wBAC3BC,+BAAgC,4yDAxBgBC,EAAAA,sDAmCjDC,EAAAA,MAAKd,KAAA,CAAC,+BAmBNc,EAAAA,wBAYAA,EAAAA,gCAsBAA,EAAAA,0BAaAC,EAAAA,OAAMf,KAAA,CAAC,YAsBVrB,EA9GA,GCbAqC,EAAA,WAKA,SAAAA,KAcA,2BAdCC,EAAAA,SAAQjB,KAAA,CAAC,CACRkB,QAAS,CACPC,EAAAA,aACAC,EAAAA,cAEFC,aAAc,CACZ1C,GAEF2C,QAAS,CACP3C,OAKJqC,EAnBA","sourcesContent":["import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** The contextual type of a message. */\nexport type CONTEXT = 'regular' | 'info' | 'error' | 'success' | 'warning';\n\nconst ICONS = {\n  info: 'info-circle',\n  error: 'exclamation-circle',\n  success: 'check-circle',\n  warning: 'exclamation-triangle'\n};\n\n@Component({\n  selector: 'nx-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxMessage',\n  host: {\n    '[class.context-info]': 'context === \"info\"',\n    '[class.context-error]': 'context === \"error\"',\n    '[class.context-success]': 'context === \"success\"',\n    '[class.context-warning]': 'context === \"warning\"',\n    '[class.nx-message--closable]': 'closable'\n\n  }\n})\nexport class NxMessageComponent {\n\n  private _context: CONTEXT = 'regular';\n\n  /**\n   * Sets the context of the message.\n   * The message box will color accordingly. Default: 'regular' */\n  @Input('nxContext')\n  set context(value: CONTEXT) {\n    if (value !== this._context) {\n      this._context = value;\n      this._icon = this.getIconName();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get context(): CONTEXT {\n    return this._context;\n  }\n\n  private _showIcon: boolean = false;\n\n  /**\n   * Whether an icon that belongs to the context of the message should be displayed.\n   * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.\n   * @deletion-target 9.0.0\n   * */\n  @Input()\n  set showIcon(value: boolean) {\n    this._showIcon = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showIcon(): boolean {\n    return this._showIcon;\n  }\n\n  private _closable: boolean = false;\n\n  /** Whether a message should have a close icon in order to be dismissed. */\n  @Input()\n  set closable(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._closable) {\n      this._closable = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closable(): boolean {\n    return this._closable;\n  }\n\n  private _icon: string;\n\n  /** @docs-private */\n  get icon(): string {\n    return this._icon;\n  }\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the label of the close button of the message. */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n\n  /** Event emitted when the close icon of the message has been clicked. */\n  @Output('close') closeEvent = new EventEmitter<void>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  _emitCloseEvent() {\n    this.closeEvent.emit();\n  }\n\n  /** @docs-private */\n  getIconName(): string {\n    if (this._context === 'info') {\n      return ICONS.info;\n    } else if (this._context === 'error') {\n      return ICONS.error;\n    } else if (this._context === 'success') {\n      return ICONS.success;\n    } else if (this._context === 'warning') {\n      return ICONS.warning;\n    }\n    return '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMessageComponent } from './message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxMessageComponent\n  ],\n  exports: [\n    NxMessageComponent\n  ]\n})\nexport class NxMessageModule {\n\n}\n"]}