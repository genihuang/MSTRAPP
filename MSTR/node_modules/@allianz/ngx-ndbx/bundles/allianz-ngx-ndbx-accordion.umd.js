(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/collections'), require('@angular/cdk/accordion'), require('@angular/animations'), require('@angular/cdk/coercion'), require('@allianz/ngx-ndbx/icon'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/cdk/keycodes'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/accordion', ['exports', '@angular/cdk/collections', '@angular/cdk/accordion', '@angular/animations', '@angular/cdk/coercion', '@allianz/ngx-ndbx/icon', '@angular/cdk/portal', '@angular/common', '@angular/cdk/keycodes', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].accordion = {}),global.ng.cdk.collections,global.ng.cdk.accordion,global.ng.animations,global.ng.cdk.coercion,global.allianz['ngx-ndbx'].icon,global.ng.cdk.portal,global.ng.common,global.ng.cdk.keycodes,global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,collections,accordion,animations,coercion,icon,portal,common,keycodes,core,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_TYPE = 'regular';
    var NxAccordionDirective = /** @class */ (function (_super) {
        __extends(NxAccordionDirective, _super);
        function NxAccordionDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._style = 'regular';
            _this._negative = null;
            return _this;
        }
        Object.defineProperty(NxAccordionDirective.prototype, "style", {
            get: /**
             * @return {?}
             */ function () {
                return this._style;
            },
            /**
             * Value for the styling that should be chosen.
             * Default value: 'regular'
             */
            set: /**
             * Value for the styling that should be chosen.
             * Default value: 'regular'
             * @param {?} value
             * @return {?}
             */ function (value) {
                value = value ? value : DEFAULT_TYPE;
                var _a = __read(value.match(/regular|light/) || [DEFAULT_TYPE], 1), newValue = _a[0];
                this._style = ( /** @type {?} */(newValue));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxAccordionDirective.prototype, "negative", {
            get: /**
             * @return {?}
             */ function () {
                return this._negative;
            },
            /** Whether the negative set of styles should be used. */
            set: /**
             * Whether the negative set of styles should be used.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._negative = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        NxAccordionDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'nx-accordion',
                        host: {
                            '[class.nx-accordion]': 'true',
                            'role': 'presentation'
                        }
                    },] }
        ];
        NxAccordionDirective.propDecorators = {
            style: [{ type: core.Input, args: ['nxStyle',] }],
            negative: [{ type: core.Input }]
        };
        return NxAccordionDirective;
    }(accordion.CdkAccordion));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nxAccordionAnimations = {
        bodyExpansion: animations.trigger('bodyExpansion', [
            animations.state('closed', animations.style({ height: '0px', visibility: 'hidden' })),
            animations.state('open', animations.style({ height: '*', visibility: 'visible' })),
            animations.transition('open <=> closed', animations.animate('.5s cubic-bezier(0.86, 0, 0.07, 1)'))
        ]),
        indicatorRotate: animations.trigger('indicatorRotate', [
            animations.state('closed', animations.style({ transform: 'rotate(0deg)' })),
            animations.state('open', animations.style({ transform: 'rotate(180deg)' })),
            animations.transition('open <=> closed', animations.animate('.3s ease')),
        ])
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxExpansionPanelBodyDirective = /** @class */ (function () {
        function NxExpansionPanelBodyDirective(_template) {
            this._template = _template;
        }
        NxExpansionPanelBodyDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[nxExpansionPanelBody]' },] }
        ];
        /** @nocollapse */
        NxExpansionPanelBodyDirective.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return NxExpansionPanelBodyDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nextId = 0;
    /** @type {?} */
    var DEFAULT_TYPE$1 = 'regular';
    var Éµ0 = undefined;
    var NxExpansionPanelComponent = /** @class */ (function (_super) {
        __extends(NxExpansionPanelComponent, _super);
        function NxExpansionPanelComponent(accordion$$1, _changeDetectorRef, _expansionDispatcher, _viewContainerRef) {
            var _this = _super.call(this, accordion$$1, _changeDetectorRef, _expansionDispatcher) || this;
            _this._viewContainerRef = _viewContainerRef;
            _this._negative = null;
            _this._accordionStyle = DEFAULT_TYPE$1;
            _this._style = null;
            _this._headerId = "nx-expansion-panel-header-" + nextId++;
            /**
             * Stream that emits for changes in `\@Input` properties.
             */
            _this._inputChanges = new rxjs.Subject();
            _this.accordion = accordion$$1;
            return _this;
        }
        Object.defineProperty(NxExpansionPanelComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */ function () {
                return this._negative;
            },
            /** Whether the negative set of styles should be used. */
            set: /**
             * Whether the negative set of styles should be used.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._negative = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxExpansionPanelComponent.prototype, "style", {
            get: /**
             * @return {?}
             */ function () {
                return this._style;
            },
            /**
             * Value for the styling that should be chosen.
             * Default value: 'regular'.
             */
            set: /**
             * Value for the styling that should be chosen.
             * Default value: 'regular'.
             * @param {?} value
             * @return {?}
             */ function (value) {
                value = value ? value : DEFAULT_TYPE$1;
                var _a = __read(value.match(/regular|light/) || [DEFAULT_TYPE$1], 1), newValue = _a[0];
                this._style = ( /** @type {?} */(newValue));
                this._accordionStyle = ( /** @type {?} */(newValue));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxExpansionPanelComponent.prototype, "portal", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return this._portal;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxExpansionPanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.lazyContent) {
                    // Render the content as soon as the panel becomes open.
                    this.opened.pipe(operators.startWith(null), operators.filter(( /**
                     * @return {?}
                     */function () { return _this.expanded && !_this._portal; })), operators.take(1)).subscribe(( /**
                     * @return {?}
                     */function () {
                        _this._portal = new portal.TemplatePortal(_this.lazyContent._template, _this._viewContainerRef);
                    }));
                }
                // Inherit appearance given by the accordion (if any).
                if (Boolean(this.accordion)) {
                    if (this.style === null && this.accordion.style !== null) {
                        this.style = this.accordion.style;
                    }
                    if (this.negative === null && this.accordion.negative !== null) {
                        this.negative = this.accordion.negative;
                    }
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NxExpansionPanelComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this._inputChanges.next(changes);
            };
        /**
         * @return {?}
         */
        NxExpansionPanelComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnDestroy.call(this);
                this._inputChanges.complete();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxExpansionPanelComponent.prototype.getOpenState = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this.expanded ? 'open' : 'closed';
            };
        NxExpansionPanelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-expansion-panel',
                        exportAs: 'NxExpansionPanelComponent',
                        template: "<ng-content select=\"nx-expansion-panel-header\"></ng-content>\n\n<div class=\"nx-expansion-panel__content\" role=\"region\" [@bodyExpansion]=\"getOpenState()\"\n  [attr.aria-labelledby]=\"_headerId\" [id]=\"id\">\n  <div class=\"nx-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n</div>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        animations: [nxAccordionAnimations.bodyExpansion],
                        host: {
                            '[class.nx-expanded]': 'expanded',
                            '[class.nx-expansion-panel--light]': '_accordionStyle === "light"',
                            '[class.nx-expansion-panel--regular]': '_accordionStyle === "regular"',
                            '[class.nx-expansion-panel--negative]': 'negative'
                        },
                        providers: [
                            // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering
                            // to the same accordion.
                            { provide: NxAccordionDirective, useValue: Éµ0 },
                        ],
                        styles: [":host{display:block}:host(.nx-expansion-panel--negative) ::ng-deep div.nx-expansion-panel__body *{color:#fff}.nx-expansion-panel__content{overflow:hidden;display:block}.nx-expansion-panel__body{font-size:16px;line-height:24px;padding:24px 88px 32px 32px}@media (max-width:703px){.nx-expansion-panel__body{padding:24px 16px 32px}:host:last-child ::ng-deep .nx-expansion-panel__header-content,:host:only-child ::ng-deep .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-content{border-top:1px solid #d9d9d9;border-bottom:none}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__body{padding-top:0}:host(.nx-expansion-panel--light):first-child ::ng-deep .nx-expansion-panel__header-content{border-top:none}"]
                    }] }
        ];
        /** @nocollapse */
        NxExpansionPanelComponent.ctorParameters = function () {
            return [
                { type: NxAccordionDirective, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] },
                { type: core.ChangeDetectorRef },
                { type: collections.UniqueSelectionDispatcher },
                { type: core.ViewContainerRef }
            ];
        };
        NxExpansionPanelComponent.propDecorators = {
            negative: [{ type: core.Input }],
            style: [{ type: core.Input, args: ['nxStyle',] }],
            lazyContent: [{ type: core.ContentChild, args: [NxExpansionPanelBodyDirective,] }]
        };
        return NxExpansionPanelComponent;
    }(accordion.CdkAccordionItem));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxExpansionPanelHeaderComponent = /** @class */ (function () {
        function NxExpansionPanelHeaderComponent(panel, _changeDetectorRef) {
            var _this = this;
            this.panel = panel;
            this._changeDetectorRef = _changeDetectorRef;
            this._parentChangeSubscription = rxjs.Subscription.EMPTY;
            this._parentChangeSubscription = rxjs.merge(panel.opened, panel.closed, panel._inputChanges.pipe(operators.filter(( /**
             * @param {?} changes
             * @return {?}
             */function (changes) { return !!(changes.hideToggle || changes.disabled); }))))
                .subscribe(( /**
         * @return {?}
         */function () { return _this._changeDetectorRef.markForCheck(); }));
        }
        /**
         * @return {?}
         */
        NxExpansionPanelHeaderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._parentChangeSubscription.unsubscribe();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxExpansionPanelHeaderComponent.prototype.isExpanded = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this.panel.expanded;
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxExpansionPanelHeaderComponent.prototype.getOpenState = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this.panel.getOpenState();
            };
        /**
         * @return {?}
         */
        NxExpansionPanelHeaderComponent.prototype._getPanelId = /**
         * @return {?}
         */
            function () {
                return this.panel.id;
            };
        /**
         * Toggle the expansion panel.
         */
        /**
         * Toggle the expansion panel.
         * @return {?}
         */
        NxExpansionPanelHeaderComponent.prototype.toggle = /**
         * Toggle the expansion panel.
         * @return {?}
         */
            function () {
                this.panel.toggle();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxExpansionPanelHeaderComponent.prototype.keydown = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                switch (event.keyCode) {
                    case keycodes.SPACE:
                    case keycodes.ENTER:
                        event.preventDefault();
                        this.toggle();
                        break;
                    default:
                        return;
                }
            };
        NxExpansionPanelHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-expansion-panel-header',
                        template: "<div class=\"nx-expansion-panel__header-content\">\n  <ng-content select=\"nx-expansion-panel-title\"></ng-content>\n  <ng-content select=\"nx-expansion-panel-description\"></ng-content>\n  <nx-icon\n    [@indicatorRotate]=\"getOpenState()\"\n    class=\"nx-expansion-panel__chevron\"\n    name=\"chevron-down\">\n  </nx-icon>\n</div>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        animations: [nxAccordionAnimations.indicatorRotate],
                        host: {
                            '[class.nx-expanded]': 'isExpanded()',
                            'class': 'nx-expansion-panel__header',
                            'role': 'button',
                            '[attr.id]': 'panel._headerId',
                            '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                            '[attr.aria-controls]': '_getPanelId()',
                            '[attr.aria-expanded]': 'isExpanded()',
                            '[attr.aria-disabled]': 'panel.disabled',
                            '(keydown)': 'keydown($event)',
                            '(click)': 'toggle()'
                        },
                        styles: [":host:focus{outline:0}.nx-expansion-panel__header-content{width:100%;cursor:pointer;align-items:center;color:#414141;display:flex;justify-content:space-between;position:relative;padding:24px 32px;margin-top:16px;background:#f5f5f5;outline:0;border:none}::ng-deep .nx-expansion-panel__header-title{font-size:26px;font-weight:300;line-height:32px;letter-spacing:.3px;text-align:left;margin-right:32px}:host-context(.nx-expansion-panel--negative) .nx-expansion-panel__header-content{background-color:#fff}.nx-expansion-panel__chevron{color:#006192;pointer-events:none;font-size:24px}:host-context(.nx-expansion-panel--light) .nx-expansion-panel__header-content{margin-top:0;background:0 0}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{color:#006192;letter-spacing:.2px;font-weight:400;font-size:20px;line-height:28px}@media (max-width:703px){.nx-expansion-panel__header-content{padding:16px;margin-top:0;border-top:1px solid #d9d9d9}::ng-deep .nx-expansion-panel__header-title{font-size:20px;line-height:28px;margin-right:16px;font-weight:400}:host(.nx-expanded) .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{line-height:24px;font-size:16px}:host-context(.nx-expansion-panel--light.nx-expanded) .nx-expansion-panel__header-content{border-bottom:none}}:host[aria-disabled=true] .nx-expansion-panel__header-content{cursor:not-allowed}:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__chevron,:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__header-title{color:#c2c2c2}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content{border-color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-title{color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__chevron{color:#fff}:host-context([data-whatinput=keyboard]):focus .nx-expansion-panel__header-content{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-top-color:transparent;z-index:1}"]
                    }] }
        ];
        /** @nocollapse */
        NxExpansionPanelHeaderComponent.ctorParameters = function () {
            return [
                { type: NxExpansionPanelComponent, decorators: [{ type: core.Host }] },
                { type: core.ChangeDetectorRef }
            ];
        };
        return NxExpansionPanelHeaderComponent;
    }());
    /**
     * This directive is to be used inside of the NxExpansionPanelHeader component.
     */
    var NxExpansionPanelDescriptionDirective = /** @class */ (function () {
        function NxExpansionPanelDescriptionDirective() {
        }
        NxExpansionPanelDescriptionDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'nx-expansion-panel-description',
                        host: {
                            class: 'nx-expansion-panel__header-description'
                        }
                    },] }
        ];
        return NxExpansionPanelDescriptionDirective;
    }());
    /**
     * This directive is to be used inside of the NxExpansionPanelHeader component.
     */
    var NxExpansionPanelTitleDirective = /** @class */ (function () {
        function NxExpansionPanelTitleDirective() {
        }
        NxExpansionPanelTitleDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'nx-expansion-panel-title',
                        host: {
                            class: 'nx-expansion-panel__header-title'
                        }
                    },] }
        ];
        return NxExpansionPanelTitleDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxAccordionModule = /** @class */ (function () {
        function NxAccordionModule() {
        }
        NxAccordionModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            portal.PortalModule,
                            icon.NxIconModule
                        ],
                        exports: [
                            NxAccordionDirective,
                            NxExpansionPanelComponent,
                            NxExpansionPanelHeaderComponent,
                            NxExpansionPanelDescriptionDirective,
                            NxExpansionPanelTitleDirective,
                            NxExpansionPanelBodyDirective
                        ],
                        declarations: [
                            NxAccordionDirective,
                            NxExpansionPanelComponent,
                            NxExpansionPanelHeaderComponent,
                            NxExpansionPanelDescriptionDirective,
                            NxExpansionPanelTitleDirective,
                            NxExpansionPanelBodyDirective
                        ],
                        providers: [],
                    },] }
        ];
        return NxAccordionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxExpansionPanelComponent = NxExpansionPanelComponent;
    exports.NxAccordionDirective = NxAccordionDirective;
    exports.NxAccordionModule = NxAccordionModule;
    exports.Éµa = nxAccordionAnimations;
    exports.Éµb = NxExpansionPanelBodyDirective;
    exports.Éµd = NxExpansionPanelDescriptionDirective;
    exports.Éµc = NxExpansionPanelHeaderComponent;
    exports.Éµe = NxExpansionPanelTitleDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-accordion.umd.js.map