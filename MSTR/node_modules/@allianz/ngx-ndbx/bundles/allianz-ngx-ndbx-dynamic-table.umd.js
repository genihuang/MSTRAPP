(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@allianz/ngx-ndbx/utils'), require('@angular/core'), require('rxjs'), require('@angular/cdk/collections'), require('@angular/cdk/table'), require('@angular/cdk/scrolling')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/dynamic-table', ['exports', '@angular/common', '@allianz/ngx-ndbx/utils', '@angular/core', 'rxjs', '@angular/cdk/collections', '@angular/cdk/table', '@angular/cdk/scrolling'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx']['dynamic-table'] = {}),global.ng.common,global.allianz['ngx-ndbx'].utils,global.ng.core,global.rxjs,global.ng.cdk.collections,global.ng.cdk.table,global.ng.cdk.scrolling));
}(this, (function (exports,common,utils,core,rxjs,collections,table,scrolling) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TableDataSource = /** @class */ (function (_super) {
        __extends(TableDataSource, _super);
        function TableDataSource(_datachange) {
            var _this = _super.call(this) || this;
            _this._datachange = _datachange;
            return _this;
        }
        /** @docs-private Connect function called by the table to retrieve one stream containing the data to render. */
        /**
         * \@docs-private Connect function called by the table to retrieve one stream containing the data to render.
         * @return {?}
         */
        TableDataSource.prototype.connect = /**
         * \@docs-private Connect function called by the table to retrieve one stream containing the data to render.
         * @return {?}
         */
            function () {
                return this._datachange;
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        TableDataSource.prototype.disconnect = /**
         * \@docs-private
         * @return {?}
         */
            function () { };
        return TableDataSource;
    }(collections.DataSource));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPPING = {
        light: 'nx-table--light',
        border: 'nx-table--light nx-table--with-border'
    };
    /** @type {?} */
    var DEFAULT_CLASSES = ['nx-table '];
    var NxDynamicTableComponent = /** @class */ (function () {
        function NxDynamicTableComponent(el, _changeDetectorRef) {
            this.el = el;
            this._changeDetectorRef = _changeDetectorRef;
            this._tableStyles = '';
            this._dataChange = new rxjs.BehaviorSubject([]);
            this._classNames = utils.mapClassNames('', DEFAULT_CLASSES, MAPPING);
            /**
             * An event is dispatched when a row is clicked.
             */
            this.nxRowClick = new core.EventEmitter();
        }
        Object.defineProperty(NxDynamicTableComponent.prototype, "data", {
            get: /**
             * @return {?}
             */ function () {
                return this._data;
            },
            /** Sets the data that it will show in the table. */
            set: /**
             * Sets the data that it will show in the table.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._data = value
                    .filter(( /**
             * @param {?} element
             * @return {?}
             */function (element) { return element; }));
                // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data
                if (!this._displayedColumns) {
                    /** @type {?} */
                    var keys_1 = [];
                    /** @type {?} */
                    var cArray_1 = [];
                    // For catch keys of data Objects and assing title, key and type string by default to displayedColumns
                    this._data
                        .forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                        for (var key in element) {
                            if (keys_1.indexOf(key) === -1) {
                                keys_1.push(key);
                                cArray_1.push({ title: key, key: key, type: 'string' });
                            }
                        }
                    }));
                    this._columnKeys = keys_1;
                    this._displayedColumns = cArray_1;
                    // need to call markForCheck as the setter changes displayedColumns here
                    // sidenote: isn't needed for the data itself as it gets passed to the cdk-table
                    // by the datasource observable
                    this._changeDetectorRef.markForCheck();
                }
                this._dataChange.next(this._data);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxDynamicTableComponent.prototype, "displayedColumns", {
            get: /**
             * @return {?}
             */ function () {
                return this._displayedColumns;
            },
            /** Sets the name order and type of columns. */
            set: /**
             * Sets the name order and type of columns.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._displayedColumns = value;
                this._columnKeys = value.map(( /**
                 * @param {?} column
                 * @return {?}
                 */function (column) { return column.key; }));
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxDynamicTableComponent.prototype, "styles", {
            /** @deprecated The default and light header styling will be removed.
             * @deletion-target 8.0.0
            */
            set: /**
             * @deprecated The default and light header styling will be removed.
             * \@deletion-target 8.0.0
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._tableStyles === value) {
                    return;
                }
                this._classNames = utils.mapClassNames(value, DEFAULT_CLASSES, MAPPING);
                this._tableStyles = value;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxDynamicTableComponent.prototype, "dataSource", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return this._dataSource;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxDynamicTableComponent.prototype, "classNames", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return this._classNames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxDynamicTableComponent.prototype, "columnKeys", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return this._columnKeys;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxDynamicTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this._data) {
                    this._data = [];
                    this._dataChange.next(this._data);
                }
                this._dataSource = new TableDataSource(this._dataChange);
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} row
         * @return {?}
         */
        NxDynamicTableComponent.prototype.handleRowClick = /**
         * \@docs-private
         * @param {?} row
         * @return {?}
         */
            function (row) {
                this.nxRowClick.emit(row);
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} element
         * @return {?}
         */
        NxDynamicTableComponent.prototype.isNumeric = /**
         * \@docs-private
         * @param {?} element
         * @return {?}
         */
            function (element) {
                if (element.type === 'numeric') {
                    return true;
                }
                return false;
            };
        NxDynamicTableComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-dynamic-table',
                        template: "<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n  <div class=\"nx-table__scroll\">\n    <cdk-table [dataSource]=\"dataSource\" [ngClass]=\"classNames\">\n      <!-- Column Definition -->\n      <ng-container *ngFor=\"let element of displayedColumns\" cdkColumnDef=\"{{element.key}}\">\n        <cdk-header-cell *cdkHeaderCellDef class=\"nx-table__header-cell\"\n                         [ngClass]=\"{'nx-table__header-cell--number': isNumeric(element) }\">\n          <div class=\"nx-table__header-title--block\">\n            <span class=\"nx-table__header-title\"> {{element.title}}</span>\n          </div>\n        </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\" class=\"nx-table__cell\"\n                  [ngClass]=\"{'nx-table__cell--number': isNumeric(element) }\" [innerHTML]=\"row[element.key]\"></cdk-cell>\n      </ng-container>\n\n      <!-- Header and Row Declarations -->\n      <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n      <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\"\n               (dblclick)=\"handleRowClick(row)\"></cdk-row>\n\n    </cdk-table>\n  </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n  <ng-content></ng-content>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".nx-table{border-top:2px solid #d9d9d9;border-bottom:2px solid #414141;font-size:16px;text-align:left;width:100%;line-height:24px;color:#414141;display:table}.nx-table--light.nx-table{border-top:1px solid #d9d9d9}.nx-table__container{margin:32px 0}.nx-table__scroll{max-width:100%;overflow:hidden;overflow-x:auto}.nx-table__header-cell{background-color:#d9d9d9;border:1px solid #fff;border-right:none;color:#414141;padding:21px 16px 23px;position:relative;font-size:16px;line-height:24px;font-weight:700}.nx-table__header-row .nx-table__header-cell:last-child{border-right:1px solid #fff}.nx-table__header-row{background-color:#d9d9d9;border-spacing:1px none}.nx-table--light .nx-table__header-row{background-color:#fff;border-bottom:2px solid #414141;border-top:1px solid #d9d9d9}.nx-table__header-cell--number{display:flex;position:relative}.nx-table__header-cell--number .nx-table__header-title--block{justify-content:flex-end}.nx-table__cell{padding:24px 16px;vertical-align:top}.nx-table__cell--number,.nx-table__header-cell--number{text-align:right}.nx-table__row{background-color:#fff}.nx-table__header-row,.nx-table__row{display:table-row;vertical-align:inherit;border-color:inherit}.nx-table__row:nth-child(2n+1){background-color:#ececec}.nx-table--light.nx-table--with-border .nx-table__row{background-color:#fff}.nx-table--light .nx-table__header-cell{background-color:#fff;border:none;border-bottom:2px solid #414141;padding-top:23px;padding-bottom:22px}.nx-table--light.nx-table--with-border .nx-table__cell{padding-bottom:23px;border-bottom:1px solid #d9d9d9}.nx-table__row:last-child .nx-table__cell{padding-bottom:22px;border-bottom:none}.nx-table__cell,.nx-table__header-cell{display:table-cell;vertical-align:inherit}"]
                    }] }
        ];
        /** @nocollapse */
        NxDynamicTableComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.ChangeDetectorRef }
            ];
        };
        NxDynamicTableComponent.propDecorators = {
            data: [{ type: core.Input, args: ['nxData',] }],
            displayedColumns: [{ type: core.Input, args: ['nxDisplayedColumns',] }],
            styles: [{ type: core.Input, args: ['nxType',] }],
            nxRowClick: [{ type: core.Output }]
        };
        return NxDynamicTableComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxDynamicTableModule = /** @class */ (function () {
        function NxDynamicTableModule() {
        }
        NxDynamicTableModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NxDynamicTableComponent],
                        exports: [NxDynamicTableComponent],
                        imports: [common.CommonModule, table.CdkTableModule, scrolling.ScrollDispatchModule]
                    },] }
        ];
        return NxDynamicTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxDynamicTableModule = NxDynamicTableModule;
    exports.NxDynamicTableComponent = NxDynamicTableComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-dynamic-table.umd.js.map