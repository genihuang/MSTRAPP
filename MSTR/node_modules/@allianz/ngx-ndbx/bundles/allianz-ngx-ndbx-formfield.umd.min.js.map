{"version":3,"sources":["ng://@allianz/ngx-ndbx/formfield/error.directive.ts","ng://@allianz/ngx-ndbx/formfield/label.directive.ts","node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/formfield/hint.directive.ts","ng://@allianz/ngx-ndbx/formfield/note.directive.ts","ng://@allianz/ngx-ndbx/formfield/formfield-control.ts","ng://@allianz/ngx-ndbx/formfield/suffix.directive.ts","ng://@allianz/ngx-ndbx/formfield/prefix.directive.ts","ng://@allianz/ngx-ndbx/formfield/appendix.directive.ts","ng://@allianz/ngx-ndbx/formfield/formfield.component.ts","ng://@allianz/ngx-ndbx/formfield/formfield.module.ts"],"names":["uniqueId","NxFormfieldErrorDirective","this","id","Directive","args","selector","host","role","[attr.id]","Input","NxFormfieldLabelDirective","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","NxFormfieldHintDirective","NxFormfieldNoteDirective","NxFormfieldControl","NxFormfieldSuffixDirective","NxFormfieldPrefixDirective","NxFormfieldAppendixDirective","NX_STYLES","negative","FORMFIELD_DEFAULT_OPTIONS","InjectionToken","NxFormfieldComponent","elementRef","renderer","_changeDetectorRef","_defaultOptions","_styles","_subscriptions","Object","defineProperty","prototype","_floatLabel","nxFloatLabel","markForCheck","_this","getClassNameList","forEach","classStr","addClass","nativeElement","_appearance","appearance","floatLabel","_control","shouldLabelFloat","_shouldAlwaysFloat","ngAfterContentInit","subscription","subscriptions","_validateControlChild","stateChanges","pipe","startWith","subscribe","_syncDescribedByIds","_hintChildren","changes","_errorChildren","ngAfterContentChecked","ngOnDestroy","unsubscribe","getDisplayedMessage","errorState","ids","_noteChildren","map","hint","setDescribedByIds","Error","getConnectedOverlayOrigin","_connectionContainerRef","Component","template","[class.nx-formfield]","[class.is-disabled]","[class.is-readonly]","[class.is-filled]","[class.is-focused]","[class.is-floating]","[class.has-error]","[class.has-outline]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Optional","type","Inject","ContentChild","ContentChildren","ViewChild","NxFormfieldModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input } from '@angular/core';\n\nlet uniqueId = 0;\n\n@Directive({\n  selector: '[nxFormfieldError], [nxError]',\n  host: {\n    role: 'alert',\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldErrorDirective {\n  // create a unique id to be used by aria-described-by\n  /** Sets the id of the formfield error. */\n  @Input() id: string = `nx-formfield-error-${uniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n/** A directive for passing more complex custom label content. */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-formfield-label'\n})\nexport class NxFormfieldLabelDirective { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Input, Directive } from '@angular/core';\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldHint]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldHintDirective {\n  /** Sets the id of the formfield hint. */\n  @Input() id: string = `nx-formfield-hint-${uniqueId++}`;\n}\n","import { Input, Directive } from '@angular/core';\n\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldNote]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldNoteDirective {\n\n  /** Sets the id of the formfield note. */\n  @Input() id: string = `nx-formfield-note-${uniqueId++}`;\n}\n","import { ElementRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n/** @docs-private */\nexport abstract class NxFormfieldControl<T> {\n  value: T | null;\n\n  // Allow the control to notify the parent formfield about internal state changes\n  readonly stateChanges: Observable<void>;\n\n  readonly empty: boolean;\n\n  readonly id: string;\n\n  readonly ngControl: NgControl | null;\n\n  readonly focused: boolean;\n\n  readonly required: boolean;\n\n  readonly disabled: boolean;\n\n  readonly readonly: boolean;\n\n  readonly shouldLabelFloat?: boolean;\n\n  readonly errorState: boolean;\n\n  abstract setDescribedByIds(ids: string[]): void;\n\n  abstract setAriaLabel?(value: string): void;\n\n  abstract get elementRef(): ElementRef;\n}\n","import { Input, Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldSuffix]'\n})\nexport class NxFormfieldSuffixDirective {\n}\n\n\n","import { Input, Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldPrefix]'\n})\nexport class NxFormfieldPrefixDirective {\n}\n\n\n","import { Input, Directive } from '@angular/core';\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldAppendix]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldAppendixDirective {\n\n  /** Sets the id of the formfield appendix. */\n  @Input() id: string = `nx-formfield-appendix-${uniqueId++}`;\n}\n","import { ViewChild, InjectionToken, Inject, Optional } from '@angular/core';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  Renderer2\n} from '@angular/core';\nimport { startWith } from 'rxjs/operators';\nimport { getClassNameList } from '@allianz/ngx-ndbx/utils';\n\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldControl } from './formfield-control';\nimport { Subscription } from 'rxjs';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\n\nconst NX_STYLES = {\n  'negative': 'nx-formfield--negative'\n};\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `FORMFIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface FormfieldDefaultOptions {\n  /** Sets the default appearance. (optional) */\n  appearance?: AppearanceType;\n\n  /** Sets the default float label type. (optional) */\n  nxFloatLabel?: FloatLabelType;\n}\n\nexport const FORMFIELD_DEFAULT_OPTIONS =\n  new InjectionToken<FormfieldDefaultOptions>('FORMFIELD_DEFAULT_OPTIONS');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'auto';\n\n/** Type for the appearance of the formfield. */\nexport type AppearanceType = 'outline' | 'auto';\n\n@Component({\n  selector: 'nx-formfield',\n  templateUrl: 'formfield.component.html',\n  styleUrls: [\n    'formfield.scss',\n    '../input/input.scss'\n  ],\n  host: {\n    '[class.nx-formfield]': 'true',\n    '[class.is-disabled]': 'this._control.disabled',\n    '[class.is-readonly]': 'this._control.readonly',\n    '[class.is-filled]': 'this._control.empty === false',\n    '[class.is-focused]': 'this._control.focused',\n    '[class.is-floating]': 'this.shouldLabelFloat',\n    '[class.has-error]': 'this._control.errorState',\n    '[class.has-outline]': 'this.appearance === \"outline\"'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class NxFormfieldComponent implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _styles: string = '';\n  private _subscriptions: Subscription[] = [];\n\n  @ContentChild(NxFormfieldControl) _control: NxFormfieldControl<any>;\n\n  /**\n   * Sets the label which will act as a floating label.\n   * In addition, the component uses input and label to properly support accessibility.\n   */\n  @Input('nxLabel') label: string;\n\n  @ContentChild(NxFormfieldLabelDirective) _labelChild: NxFormfieldLabelDirective;\n  @ContentChildren(NxFormfieldHintDirective) _hintChildren: QueryList<NxFormfieldHintDirective>;\n  @ContentChildren(NxFormfieldNoteDirective) _noteChildren: QueryList<NxFormfieldNoteDirective>;\n  @ContentChildren(NxFormfieldErrorDirective) _errorChildren: QueryList<NxFormfieldErrorDirective>;\n  @ContentChildren(NxFormfieldSuffixDirective) _suffixChildren: QueryList<NxFormfieldSuffixDirective>;\n  @ContentChildren(NxFormfieldPrefixDirective) _prefixChildren: QueryList<NxFormfieldPrefixDirective>;\n  @ContentChildren(NxFormfieldAppendixDirective) _appendixChildren: QueryList<NxFormfieldAppendixDirective>;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n\n  /**\n   * Whether the label should float once the input is focused or filled (auto, default)\n   * or force it to always float with a value of always to simulate a more static form.\n   */\n  @Input('nxFloatLabel')\n  get floatLabel(): FloatLabelType {\n    return this._floatLabel || (this._defaultOptions && this._defaultOptions.nxFloatLabel) || 'auto';\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /**\n   * Sets the styling of the formfield.\n   * If 'negative', a negative set of stylings is used.\n   */\n  @Input('nxStyle')\n  set styles(value: string) {\n\n    if (this._styles === value) {\n      return;\n    }\n\n    const classNames = getClassNameList(value, NX_STYLES);\n\n    classNames.forEach(classStr => {\n      this.renderer.addClass(this.elementRef.nativeElement, classStr);\n    });\n\n    this._styles = value;\n  }\n\n  private _appearance: AppearanceType;\n\n  /**\n   * **NDBX Expert option**\n   *\n   * Sets the appearance of the formfield.\n   */\n  @Input()\n  set appearance(value: AppearanceType) {\n    if (this._appearance !== value) {\n      this._appearance = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get appearance(): AppearanceType {\n    return this._appearance || (this._defaultOptions && this._defaultOptions.appearance) || 'auto';\n  }\n\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always';\n  }\n\n  /** @docs-private */\n  public get shouldLabelFloat(): boolean {\n    return (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  constructor(\n    /** @docs-private */\n    public elementRef: ElementRef,\n    private renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(FORMFIELD_DEFAULT_OPTIONS) private _defaultOptions: FormfieldDefaultOptions\n    ) { }\n\n  /** @docs-private */\n  public get control() {\n    return this._control;\n  }\n\n  ngAfterContentInit() {\n    let subscription;\n    const subscriptions = [];\n\n    this._validateControlChild();\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    subscription = this._control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    subscriptions.push(subscription);\n\n    // Re-validate when the number of hints changes.\n    subscription = this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n    subscriptions.push(subscription);\n\n    // Update the aria-described by when the number of errors changes.\n    subscription = this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n    subscriptions.push(subscription);\n\n    this._subscriptions = subscriptions;\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n  }\n\n  /** @docs-private */\n  getDisplayedMessage(): 'hint' | 'error' {\n    if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {\n      return 'error';\n    }\n\n    return 'hint';\n  }\n\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n      ids = this._noteChildren.map(hint => hint.id);\n\n      if (this.getDisplayedMessage() === 'hint') {\n        ids = [...this._hintChildren.map(hint => hint.id), ...ids];\n      } else if (this._errorChildren) {\n        ids = [...this._errorChildren.map(error => error.id), ...ids];\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  // Fail if the required control is missing.\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');\n    }\n  }\n\n  /** @docs-private */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this.elementRef;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldComponent } from './formfield.component';\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NxFormfieldComponent,\n    NxFormfieldHintDirective,\n    NxFormfieldErrorDirective,\n    NxFormfieldNoteDirective,\n    NxFormfieldPrefixDirective,\n    NxFormfieldSuffixDirective,\n    NxFormfieldAppendixDirective,\n    NxFormfieldLabelDirective\n  ],\n  exports: [\n    NxFormfieldComponent,\n    NxFormfieldHintDirective,\n    NxFormfieldErrorDirective,\n    NxFormfieldNoteDirective,\n    NxFormfieldPrefixDirective,\n    NxFormfieldSuffixDirective,\n    NxFormfieldAppendixDirective,\n    NxFormfieldLabelDirective\n  ]\n})\nexport class NxFormfieldModule { }\n"]}