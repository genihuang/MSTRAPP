{"version":3,"sources":["ng://@allianz/ngx-ndbx/switcher/switcher.component.ts","ng://@allianz/ngx-ndbx/switcher/switcher.module.ts"],"names":["nextId","NxSwitcherComponent","_changeDetectorRef","this","_id","_labelPosition","_name","_checked","_big","_labelSize","_negative","_disabled","checkedChange","EventEmitter","onChangeCallback","_","onTouchedCallback","Object","defineProperty","prototype","value","markForCheck","newValue","coerceBooleanProperty","toggle","disabled","checked","emit","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","touch","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","host","[attr.id]","[class.is-negative]","[class.is-checked]","[class.is-big]","[class.nx-switcher--small-label]","[class.is-disabled]","[class.is-swapped]","ChangeDetectorRef","Input","Output","NxSwitcherModule","NgModule","declarations","exports","imports","CommonModule","NxIconModule"],"mappings":"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","sourcesContent":["import { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nlet nextId = 0;\n/** Options for placement of the label */\nexport type POSITION = 'left' | 'right';\n/** Options for sizing of the label */\nexport type LABEL_SIZE = 'small' | 'large';\n\n@Component({\n  selector: 'nx-switcher',\n  templateUrl: 'switcher.component.html',\n  styleUrls: ['./switcher.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxSwitcherComponent),\n      multi: true\n    }\n  ],\n  host: {\n    /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id\n    and on label click the input click is not triggered (double id problem) */\n    '[attr.id]': 'null',\n    '[class.is-negative]': 'negative',\n    '[class.is-checked]': 'checked',\n    '[class.is-big]': 'big',\n    '[class.nx-switcher--small-label]': 'labelSize === \"small\"',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-swapped]': 'labelPosition === \"left\"'\n  }\n})\n\nexport class NxSwitcherComponent implements ControlValueAccessor {\n\n  private _id: string = `nx-switcher-${nextId++}`;\n  /** Sets the id of the switcher */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  private _labelPosition: POSITION = 'right';\n  /** Specifies the placement of the label */\n  @Input()\n  set labelPosition(value: POSITION) {\n    this._labelPosition = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelPosition(): POSITION {\n    return this._labelPosition;\n  }\n\n  private _name: string = null;\n  /** Sets the label text of the switcher */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  private _checked: boolean = false;\n  /** Whether the switcher is checked (on) or unchecked (off) */\n  @Input()\n  set checked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  private _big: boolean = false;\n  /** Whether the big switcher is used */\n  @Input('nxBig')\n  set big(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._big = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get big(): boolean {\n    return this._big;\n  }\n\n  private _labelSize: LABEL_SIZE = 'large';\n  /** Sets the size of the label */\n  @Input()\n  set labelSize(value: LABEL_SIZE) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelSize(): LABEL_SIZE {\n    return this._labelSize;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the style for a dark background is used */\n  @Input('nxNegative')\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._negative = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _disabled: boolean = false;\n  /** Whether the switcher is in the disabled state */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._disabled = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** An event is dispatched each time the switcher value is changed */\n  @Output('checkedChange') checkedChange = new EventEmitter<boolean>();\n\n  private onChangeCallback = (_: any) => {};\n  private onTouchedCallback = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** Allows to toggle between the states */\n  toggle() {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this.checkedChange.emit(this.checked);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxSwitcherComponent } from './switcher.component';\nimport { CommonModule } from '@angular/common';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxSwitcherComponent ],\n  exports: [ NxSwitcherComponent ],\n  imports: [ CommonModule, NxIconModule ]\n})\nexport class NxSwitcherModule {}\n"]}