{"version":3,"sources":["ng://@allianz/ngx-ndbx/autocomplete/autocomplete-option.component.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete.component.ts","node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/autocomplete/autocomplete-trigger.directive.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete.module.ts"],"names":["NxAutocompleteOptionSelected","source","isUserInput","this","_uniqueIdCounter","NxAutocompleteOptionComponent","elementRef","_changeDetectorRef","_id","_selected","_active","_disabled","onSelectionChange","EventEmitter","Object","defineProperty","prototype","value","newValue","coerceBooleanProperty","_handleKeydown","event","keyCode","ENTER","SPACE","_selectViaInteraction","preventDefault","disabled","markForCheck","_emitSelectionChangeEvent","_getTabIndex","emit","nativeElement","textContent","trim","setActiveStyles","setInactiveStyles","getLabel","viewValue","select","deselect","focus","element","Component","args","selector","template","host","role","[attr.tabindex]","[id]","[attr.aria-selected]","[attr.aria-disabled]","(click)","(keydown)","[class.nx-active]","[class.nx-disabled]","[style.display]","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ChangeDetectorRef","Input","Output","_uniqueAutocompleteIdCounter","NxAutocompleteSelectedEvent","option","NxAutocompleteComponent","_elementRef","showPanel","_isOpen","_items","_hasItems","optionSelected","opened","closed","_classList","id","valueFormatter","toString","val","_this","Array","isArray","Observable","_itemsSubscription","unsubscribe","subscribe","itms","setTimeout","_setVisibility","Error","hasItems","_vOptions","_cOptions","length","split","forEach","className","ngAfterViewInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","ngOnDestroy","_setScrollTop","scrollTop","panel","_getScrollTop","_emitSelectEvent","exportAs","class","ViewChild","TemplateRef","ViewChildren","ContentChildren","descendants","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","error","NX_AUTOCOMPLETE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NxAutocompleteTriggerDirective","multi","getNxAutocompleteMissingPanelError","_element","_overlay","_viewContainerRef","_zone","_dir","_nxFormField","_nxWordField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","Subscription","EMPTY","_closeKeyEventStream","Subject","_valueChanges","_itemsCb","_debounce","_autocompleteDisabled","_overlayAttached","optionSelections","defer","autocomplete","merge","apply","__spread","arguments","concat","map","onStable","asObservable","pipe","take","switchMap","_onChange","_onTouched","coerceNumberProperty","_bindAutocompleteItems","activeItem","fromEvent","filter","clickTarget","formField","_formField","contains","_overlayRef","overlayElement","of","_destroyPanel","complete","_controlValueChangesSubscription","ngOnChanges","autocompleteDisabled","itemsSubject_1","items","valueChanges","_control","ngControl","debounceTime","input","first","result","err","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","panelOpen","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","_outsideClickStream","detachments","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ESCAPE","UP_ARROW","altKey","_resetActiveItem","stopPropagation","activeOption","prevActiveItem","isArrowKey","DOWN_ARROW","TAB","onKeydown","_isFieldEnabled","_scrollToOption","_handleInput","target","type","parseFloat","_previousValue","document","activeElement","_handleFocus","floatLabel","optionOffset","optionHeight","offsetHeight","offsetTop","newScrollPosition","_getOptionScrollPosition","currentScrollPosition","panelHeight","Math","max","_subscribeToClosingActions","firstStable","optionChanges","changes","tap","_positionStrategy","reapplyLastPosition","delay","panelClosingActions","_setValueAndClose","dispose","toDisplay","inputValue","_clearPreviousSelectedOption","skip","selected","updateSize","minWidth","_getHostWidth","_portal","TemplatePortal","create","_getOverlayConfig","change","attach","wasOpen","OverlayConfig","positionStrategy","_getOverlayPosition","scrollStrategy","_scrollStrategy","direction","position","flexibleConnectedTo","_getConnectedElement","withViewportMargin","withPush","withPositions","originX","originY","overlayX","overlayY","scrollStrategies","reposition","getConnectedOverlayOrigin","getBoundingClientRect","width","setActiveItem","readOnly","Directive","aria-autocomplete","[attr.aria-activedescendant]","[attr.aria-expanded]","[attr.aria-owns]","(focusin)","(blur)","(input)","providers","Overlay","ViewContainerRef","NgZone","Directionality","decorators","Optional","NxFormfieldComponent","Host","NxWordComponent","Inject","DOCUMENT","ViewportRuler","NxAutocompleteModule","NgModule","declarations","exports","imports","CommonModule","OverlayModule","A11yModule"],"mappings":"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","sourcesContent":["import { Component, Input, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\n\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Option selected event */\nexport class NxAutocompleteOptionSelected {\n  constructor(\n    /** The option that is selected or deselected. */\n    public source: NxAutocompleteOptionComponent,\n    /** Whether the input was triggered by the user. */\n    public isUserInput = false) { }\n}\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n@Component({\n  selector: 'nx-autocomplete-option',\n  templateUrl: 'autocomplete-option.component.html',\n  styleUrls: ['autocomplete-option.component.scss'],\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.nx-active]': 'active',\n    '[class.nx-disabled]': 'disabled',\n    '[style.display]': '\\'block\\'' // needed for to be able to calculate offset height\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxAutocompleteOptionComponent {\n\n  /** Id of the autocomplete option. By default it is set to an incremented value. */\n  public get id(): string {\n    return this._id;\n  }\n  private _id = `nx-autocomplete-option-${_uniqueIdCounter++}`;\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n  private _selected = false;\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n  private _active = false;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n    }\n  }\n  private _disabled = false;\n\n  /** The value of the autocomplete option. */\n  @Input() value: any;\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<NxAutocompleteOptionSelected>();\n\n\n  constructor(\n    /** @docs-private */ public elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));\n  }\n\n  /** @docs-private */\n  get viewValue(): string {\n    return (this.elementRef.nativeElement.textContent || '').trim();\n  }\n\n  /**\n   * @docs-private\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * @docs-private\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * @docs-private\n   * Gets the label to be used when determining whether the option should be focused.\n   */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /**\n   * @docs-private\n   * Sets focus onto this option.\n   */\n  focus(): void {\n    const element = this.elementRef.nativeElement;\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n}\n","\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ContentChildren,\n  QueryList,\n  ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy\n} from '@angular/core';\n\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\n\nimport { Observable, Subscription } from 'rxjs';\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class NxAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: NxAutocompleteComponent,\n    /** Option that was selected. */\n    public option: NxAutocompleteOptionComponent) { }\n}\n\n@Component({\n  selector: 'nx-autocomplete',\n  templateUrl: 'autocomplete.component.html',\n  styleUrls: ['autocomplete.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxAutocomplete',\n  host: {\n    'class': 'nx-autocomplete'\n  }\n})\nexport class NxAutocompleteComponent implements AfterViewInit, OnDestroy {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<NxAutocompleteOptionComponent>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /**\n   * @docs-private\n   * Element for the panel containing the autocomplete options.\n   */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Items observable. If given, autocomplete takes care of the options and ng-content is discarderd */\n  @Input()\n  set items(val: Array<string> | Observable<Array<string>>) {\n    this._hasItems = true;\n    if (Array.isArray(val)) {\n      this._items = val;\n    } else if (val instanceof Observable) {\n      if (this._itemsSubscription) {\n        this._itemsSubscription.unsubscribe();\n      }\n      this._itemsSubscription = val.subscribe((itms) => {\n        this._items = itms;\n        this._changeDetectorRef.markForCheck();\n        // and check visibility in next cycle, when options are set\n        setTimeout(() => this._setVisibility());\n      });\n    } else if (val === null) {\n      this._items = val;\n    } else {\n      throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');\n    }\n  }\n  get items(): Array<string> | Observable<Array<string>> {\n    return this._items;\n  }\n  private _items: Array<string> = null;\n  private _itemsSubscription: Subscription;\n\n  /**\n   * @docs-private\n   * Is items observable set\n   */\n  public get hasItems(): boolean {\n    return this._hasItems;\n  }\n  private _hasItems = false;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<NxAutocompleteSelectedEvent> =\n      new EventEmitter<NxAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Autocomplete options in view - ie from items */\n  @ViewChildren(NxAutocompleteOptionComponent)\n  private _vOptions: QueryList<NxAutocompleteOptionComponent>;\n\n  /** Autocomplete options in content - ie user provided */\n  @ContentChildren(NxAutocompleteOptionComponent, { descendants: true})\n  private _cOptions: QueryList<NxAutocompleteOptionComponent>;\n\n  /** Autocomplete options */\n  public get options(): QueryList<NxAutocompleteOptionComponent> {\n    return this.hasItems ? this._vOptions : this._cOptions;\n  }\n\n  /**\n   * Takes classes set on the host nx-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `nx-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  // As autocomplete option can hold any value, we might need a converter\n  // to get a string representation, which can be stored in input. Default value ? value.toString() : null.\n  /**\n   * Value to string converter.\n   */\n  @Input('nxValueFormatter')\n  public valueFormatter: (value: any) => string = (value: any) => value ? value.toString() : null\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef) {\n  }\n\n  ngAfterViewInit(): void {\n    this._keyManager = new ActiveDescendantKeyManager<NxAutocompleteOptionComponent>(this.options).withWrap();\n    this._setVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._itemsSubscription) {\n      this._itemsSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!(this.options && this.options.length);\n    this._classList['nx-autocomplete-visible'] = this.showPanel;\n    this._classList['nx-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: NxAutocompleteOptionComponent): void {\n    const event = new NxAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Observable, Subject, Subscription, defer, of, merge, fromEvent } from 'rxjs';\nimport { delay, filter, switchMap, take, tap, debounceTime, first } from 'rxjs/operators';\n\nimport { NxWordComponent } from '@allianz/ngx-ndbx/natural-language-form';\nimport { NxAutocompleteOptionComponent, NxAutocompleteOptionSelected } from './autocomplete-option.component';\nimport { NxAutocompleteComponent } from './autocomplete.component';\n\n\n\n\n\n\n\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const NX_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxAutocompleteTriggerDirective),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getNxAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +\n               'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[nxAutocomplete], textarea[nxAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'nxAutocompleteTrigger',\n  providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class NxAutocompleteTriggerDirective implements ControlValueAccessor, OnDestroy, OnChanges, AfterViewInit {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Subscription to control value changes */\n  private _controlValueChangesSubscription: Subscription;\n\n  /** Subscription to items observable */\n  private _itemsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** Value changes */\n  private readonly _valueChanges: Subject<any> = new Subject<any>();\n\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('nxAutocomplete') autocomplete: NxAutocompleteComponent;\n\n  /** The items callback. Called with input value, must return Observable of Array of strings */\n  @Input('nxAutocompleteItems')\n  set itemsCb(val: (val: string) => Observable<Array<string>>) {\n    if (typeof val === 'function') {\n      this._itemsCb = val;\n    } else {\n      throw new Error('Wrong value type for nxAutocompleteItems');\n    }\n  }\n  get itemsCb() {\n    return this._itemsCb;\n  }\n  private _itemsCb: (val: string) => Observable<Array<string>> = null;\n\n  /** Debounce in ms before items callback is triggered. Defaults to 400 */\n  @Input('nxAutocompleteDebounce')\n  set debounce(val: number) {\n    this._debounce = coerceNumberProperty(val);\n  }\n  private _debounce: number = 400;\n\n  /** Whether autocomplete functionality is disabled. */\n  @Input('nxAutocompleteDisabled')\n  set autocompleteDisabled(val: boolean) {\n    this._autocompleteDisabled = val;\n    this._bindAutocompleteItems();\n  }\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  private _autocompleteDisabled = false;\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<NxAutocompleteOptionSelected> = defer<Observable<NxAutocompleteOptionSelected>>(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to NxAutocompleteOptionComponent type. */\n  get activeOption(): NxAutocompleteOptionComponent | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return of(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField.elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = (val) => {\n    this._valueChanges.next(val);\n  }\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  private get _formField(): NxFormfieldComponent | NxWordComponent {\n    if (this._nxFormField) {\n      return this._nxFormField;\n    } else if (this._nxWordField) {\n      return this._nxWordField;\n    }\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _nxFormField: NxFormfieldComponent,\n              @Optional() @Host() private _nxWordField: NxWordComponent,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n    if (this._controlValueChangesSubscription) { this._controlValueChangesSubscription.unsubscribe(); }\n    if (this._itemsSubscription) { this._itemsSubscription.unsubscribe(); }\n  }\n\n  ngOnChanges() {\n    this._bindAutocompleteItems();\n  }\n\n  ngAfterViewInit() {\n    this._bindAutocompleteItems();\n  }\n\n  /**\n   * Binds or rebinds the autocomplete items. Prerequisites:\n   * - items callback has to be defined\n   * - autocomplete panel has to be bound\n   */\n  private _bindAutocompleteItems() {\n    if (this._controlValueChangesSubscription) {\n      this._controlValueChangesSubscription.unsubscribe();\n    }\n\n    if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {\n\n      const itemsSubject = new Subject<string[]>();\n\n      this.autocomplete.items = itemsSubject;\n\n      const valueChanges =\n        this._formField &&\n        this._formField._control &&\n        this._formField._control.ngControl &&\n        this._formField._control.ngControl.valueChanges ?\n          this._formField._control.ngControl.valueChanges : this._valueChanges;\n\n      this._controlValueChangesSubscription = valueChanges.pipe(debounceTime(this._debounce))\n        .subscribe((input) => {\n          if (this._itemsSubscription) {\n            this._itemsSubscription.unsubscribe();\n          }\n          this._itemsSubscription = this._itemsCb(input).pipe(first()).subscribe(\n            (result) => {\n              itemsSubject.next(result);\n            },\n            (err) => {\n              // On error reset\n              // TODO: Log error?\n              itemsSubject.next([]);\n            }\n          );\n        });\n    }\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    if (!this.autocompleteDisabled) {\n      this._attachOverlay();\n      this._floatLabel();\n    }\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<NxAutocompleteOptionSelected> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          of()\n    );\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._isFieldEnabled()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    const target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value === '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._isFieldEnabled() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._isFieldEnabled()) {\n      this._previousValue = this._element.nativeElement.value;\n      this.openPanel();\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(): void {\n    if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {\n      this._nxFormField.floatLabel = 'always';\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._nxFormField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n\n    if (this.autocomplete.options.length === 0) {\n      return;\n    }\n    let optionOffset = 0;\n    const optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;\n    if (this.autocomplete._keyManager.activeItem) {\n      optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;\n    }\n\n    const newScrollPosition = _getOptionScrollPosition(\n      optionOffset,\n      optionHeight,\n      this.autocomplete._getScrollTop(),\n      this.autocomplete.panel.nativeElement.offsetHeight\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() =>  this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n\n    const toDisplay = this.autocomplete && this.autocomplete.valueFormatter ?\n      this.autocomplete.valueFormatter(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: NxAutocompleteOptionSelected | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: NxAutocompleteOptionComponent) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getNxAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({minWidth: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({minWidth: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      minWidth: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withViewportMargin(16)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _scrollStrategy() {\n    return this._overlay.scrollStrategies.reposition();\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel min-width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _isFieldEnabled(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Option offset\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset: number, optionHeight: number,\n  currentScrollPosition: number, panelHeight: number): number {\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAutocompleteComponent } from './autocomplete.component';\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\nimport { NxAutocompleteTriggerDirective } from './autocomplete-trigger.directive';\n\n@NgModule({\n  declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n  exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n  imports: [CommonModule, OverlayModule, A11yModule]\n})\nexport class NxAutocompleteModule { }\n"]}