{"version":3,"sources":["ng://@allianz/ngx-ndbx/sidebar/sidebar.component.ts","ng://@allianz/ngx-ndbx/sidebar/sidebar.module.ts"],"names":["AUTO_COLLAPSE_WIDTH","NxSidebarComponent","_changeDetectorRef","renderer","_element","this","widthChange","EventEmitter","_resizeable","_minWidth","_resizeHandleAriaLabel","_open","_width","_resizing","_previousWidth","_isMobile","_resizeWidth","_unsubscribeListeners","_onResize","bind","_onResizeEnd","Object","defineProperty","prototype","value","newValue","coerceBooleanProperty","markForCheck","coerceNumberProperty","Math","max","minWidth","ngOnInit","width","nativeElement","clientWidth","ngOnDestroy","_removeDragEventListeners","expand","open","close","toggle","_emitWidthChange","_sidebarElementWidth","_onResizeStart","event","type","startsWith","changedTouches","_resizeStartX","screenX","_resizeStartWidth","_attachDragEventListeners","dx","_isMouseDrag","min","_onToggleClick","_onResizeHandleClick","_onSidebarKeydown","which","SPACE","preventDefault","LEFT_ARROW","RIGHT_ARROW","emit","startX","endX","abs","push","listen","forEach","unsubscribe","Component","args","template","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","[class.is-resizing]","[class.is-closed]","[style.width.px]","ChangeDetectorRef","Renderer2","ElementRef","Output","Input","NxSidebarModule","NgModule","imports","CommonModule","NxIconModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Input, Component, ChangeDetectorRef, OnDestroy,\n  ChangeDetectionStrategy, Renderer2, ElementRef, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { SPACE, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\n\nexport const MAX_WIDTH = 400;\nexport const MIN_WIDTH = 56;\nexport const AUTO_COLLAPSE_WIDTH = 168;\nexport const RESIZE_STEP_SIZE = 20;\n\n@Component({\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['sidebar.scss'],\n  selector: 'nx-sidebar',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-resizing]': '_resizing',\n    '[class.is-closed]': '!open',\n    '[style.width.px]': `_sidebarElementWidth`\n  },\n})\nexport class NxSidebarComponent implements OnDestroy, OnInit {\n\n  /** Emits the new width of the sidebar on resize or on close/open event.*/\n  @Output() widthChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** If set to `true` this will enable dynamic resizing of the sidebar. */\n  @Input()\n  set resizeable(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._resizeable) {\n      this._resizeable = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get resizeable() {\n    return this._resizeable;\n  }\n  private _resizeable: boolean = false;\n\n  /** Sets the minimal width (in pixel) of the sidebar. */\n  @Input()\n  set minWidth(value: number) {\n    this._minWidth = coerceNumberProperty(value) || MIN_WIDTH;\n  }\n  get minWidth() {\n    return this._minWidth;\n  }\n  private _minWidth: number = MIN_WIDTH;\n\n  /** This sets the accessibility label for the resize handle of the sidebar. */\n  @Input()\n  set resizeHandleAriaLabel(value: string) {\n    if (value !== this._resizeHandleAriaLabel) {\n      this._resizeHandleAriaLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get resizeHandleAriaLabel() {\n    return this._resizeHandleAriaLabel;\n  }\n  private _resizeHandleAriaLabel: string = '';\n\n  /** This reflects the current open state of the sidebar.\n      It will be `true` if the sidebar is expanded and `false` if the sidebar is closed.\n  */\n  set open(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._open) {\n      this._open = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get open(): boolean {\n    return this._open;\n  }\n  private _open: boolean = true;\n\n  /** This sets the width of the sidebar. */\n  set width(value: number) {\n    const newValue = Math.max(value, this.minWidth);\n\n    if (newValue !== this._width) {\n      this._width = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get width(): number {\n    return this._width;\n  }\n  _width: number = 0;\n\n  _resizing: boolean = false;\n\n  _previousWidth: number = 0;\n\n  _isMobile: boolean = false;\n\n  _resizeWidth: number = 0;\n\n  private _resizeStartX: number;\n\n  private _resizeStartWidth: number;\n\n  private _unsubscribeListeners: Array<() => void> = [];\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private renderer: Renderer2,\n    private _element: ElementRef) {\n    this._onResize = this._onResize.bind(this);\n    this._onResizeEnd = this._onResizeEnd.bind(this);\n  }\n\n  ngOnInit() {\n    this.width = this._element.nativeElement.clientWidth;\n  }\n\n  ngOnDestroy() {\n    this._removeDragEventListeners();\n  }\n\n  /** This will expand the sidebar to its full width. */\n  expand() {\n    this.open = true;\n  }\n\n  /** This will close the sidebar to its minimal width. */\n  close() {\n    this.open = false;\n  }\n\n  /** This will close or expand the sidebar depending if its expanded or closed. */\n  toggle() {\n    if (this.open) {\n      this.close();\n    } else {\n      this.expand();\n    }\n    this._emitWidthChange(this._sidebarElementWidth);\n  }\n\n  get _sidebarElementWidth() {\n    if (this._resizing) {\n      return this._resizeWidth;\n    }\n\n    return this.open ? this.width : this.minWidth;\n  }\n\n  _onResizeStart(event) {\n    if (event.type.startsWith('touch')) {\n      event = event.changedTouches[0];\n    }\n\n    this._resizeStartX = event.screenX;\n    this._resizeStartWidth = this.open ? this.width : this.minWidth;\n    this._resizeWidth = this.width;\n\n    this._attachDragEventListeners();\n  }\n\n  _onResize(event) {\n    this._resizing = true;\n\n    if (event.type.startsWith('touch')) {\n      event = event.changedTouches[0];\n    }\n\n    const dx = event.screenX - this._resizeStartX;\n    this._resizeWidth = Math.max(this.minWidth, this._resizeStartWidth + dx);\n    this.open = this._resizeWidth > this.minWidth;\n  }\n\n  _onResizeEnd(event) {\n    this._resizing = false;\n    this._removeDragEventListeners();\n\n    if (this._isMouseDrag(this._resizeStartX, event.screenX)) {\n      if (this._resizeWidth < AUTO_COLLAPSE_WIDTH) {\n        this.open = false;\n        this._emitWidthChange(this._sidebarElementWidth);\n\n      } else {\n        this.open = true;\n        this.width = Math.min(MAX_WIDTH, this._resizeWidth);\n        this._emitWidthChange(this.width);\n      }\n    }\n    this._resizeWidth = 0;\n  }\n\n  _onToggleClick() {\n    this.toggle();\n  }\n\n  _onResizeHandleClick(event) {\n    if (this._isMouseDrag(this._resizeStartX, event.screenX)) {\n      return;\n    }\n\n    this.toggle();\n  }\n\n  _onSidebarKeydown(event) {\n    if (event.which === SPACE) {\n      event.preventDefault();\n      this.toggle();\n    } else if (event.which === LEFT_ARROW) {\n      this.width = this.width - RESIZE_STEP_SIZE;\n\n      if (this.width <= AUTO_COLLAPSE_WIDTH) {\n        this.open = false;\n        this.width = AUTO_COLLAPSE_WIDTH + 1;\n      }\n      this._emitWidthChange(this.width);\n    } else if (event.which === RIGHT_ARROW) {\n      if (this.open) {\n        this.width = Math.min(MAX_WIDTH, this.width + RESIZE_STEP_SIZE);\n      } else {\n        this.open = true;\n        this.width = Math.max(this.width, AUTO_COLLAPSE_WIDTH);\n      }\n      this._emitWidthChange(this.width);\n    }\n  }\n\n  private _emitWidthChange(width: number) {\n    this.widthChange.emit(width);\n  }\n\n  private _isMouseDrag(startX: number, endX: number): boolean {\n    return Math.abs(endX - startX) > 5;\n  }\n\n  private _attachDragEventListeners() {\n    this._unsubscribeListeners.push(this.renderer.listen('document', 'mousemove', this._onResize));\n    this._unsubscribeListeners.push(this.renderer.listen('document', 'mouseup', this._onResizeEnd));\n    this._unsubscribeListeners.push(this.renderer.listen('document', 'touchmove', this._onResize));\n    this._unsubscribeListeners.push(this.renderer.listen('document', 'touchend', this._onResizeEnd));\n  }\n\n  private _removeDragEventListeners() {\n    this._unsubscribeListeners.forEach(unsubscribe => unsubscribe());\n  }\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxSidebarComponent } from './sidebar.component';\n\n@NgModule({\n  imports: [ CommonModule, NxIconModule ],\n  declarations: [ NxSidebarComponent ],\n  exports: [ NxSidebarComponent ]\n})\nexport class NxSidebarModule { }\n"]}