{"version":3,"file":"allianz-ngx-ndbx-checkbox.umd.js.map","sources":["ng://@allianz/ngx-ndbx/checkbox/checkbox.component.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ChangeDetectorRef,\n  AfterContentInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  Self,\n  OnInit, ContentChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\nlet nextId = 0;\n\nexport class NxCheckboxChangeEvent {\n  constructor(\n  /** The checked value of the checkbox. */\n  public checked: boolean,\n  /** The value of the checkbox. */\n  public value: string,\n  /** The component instance of the checkbox which emitted the change event. */\n  public checkbox: NxCheckboxComponent\n  ) {}\n}\n\n/** Size of the label. */\nexport type NxCheckboxLabelSize = 'small' | 'large';\n\n@Component({\n  selector: 'nx-checkbox-group',\n  templateUrl: 'checkbox-group.component.html',\n  styleUrls: ['checkbox-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox-group]': 'true',\n    '[class.nx-checkbox-group--negative]': 'negative',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-labelledby]': 'this._label?.id  || null',\n    '[attr.role]': '\"group\"',\n  }\n})\nexport class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n  @ContentChildren(forwardRef(() => NxCheckboxComponent), {descendants: true})\n  _checkboxes: QueryList<NxCheckboxComponent>;\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {})\n   _label: NxLabelComponent;\n\n  readonly _stateChanges = new Subject<void>();\n  @Output() selectionChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  private _id: string = `nx-checkbox-group-${nextId++}`;\n  /** Sets the Id of the checkbox group. */\n  @Input()\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string;\n  /** Sets the name of the checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Disables all checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._label) {\n      this._label.disabled = this._disabled;\n    }\n    this._stateChanges.next();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n    this._stateChanges.next();\n  }\n\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _labelSize: NxCheckboxLabelSize;\n  /** Sets the label size of the checkboxes inside the group */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._stateChanges.next();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return this._labelSize;\n  }\n\n  /** Whether the nx-checkbox-group are required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  private _value: any;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.ngControl) {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._onChange(this._value);\n      });\n    }\n\n    this._updateSelectedCheckboxFromValue();\n    this._checkboxes.changes.subscribe(() => {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      if (this.ngControl) {\n        this.ngControl.control.setValue(this._value);\n      }\n      this._updateSelectedCheckboxFromValue();\n    });\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    if (this._value) {\n      this._value = value;\n    }\n    this._updateSelectedCheckboxFromValue();\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n\n  private _onTouched: () => any = () => {};\n\n  private _updateSelectedCheckboxFromValue(): void {\n    if (this._checkboxes !== null) {\n      if (this._value) {\n        this._checkboxes.map(checkbox => {\n          if (this._value.indexOf(checkbox.value) !== -1) {\n            checkbox.checked = true;\n          }\n        });\n      }\n    }\n  }\n\n  /** @docs-private */\n  change(value) {\n    value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n    this._onChange(value);\n    if (this._onTouched) {\n      this._onTouched();\n    }\n    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));\n  }\n}\n\n@Component({\n  selector: 'nx-checkbox',\n  templateUrl: 'checkbox.component.html',\n  styleUrls: ['checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox]': 'true',\n    '[class.disabled]': 'disabled',\n    '[class.nx-checkbox--label-large]': 'labelSize === \"large\"',\n    '[class.nx-checkbox--negative]': 'negative',\n    '[attr.required]': 'required',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCheckboxComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit {\n  private _parentChangeSubscription: Subscription;\n  private _id: string = (nextId++).toString();\n  private _disabled: boolean = false;\n  private _negative: boolean = false;\n  private _labelSize: NxCheckboxLabelSize = 'small';\n  private _checked = false;\n  private _name: string = null;\n\n  /**\n   * Id of the checkbox.\n   *\n   * If not set, the checkbox gets an incremented value by default.\n   */\n  @Input()\n  set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id() {\n    return `nx-checkbox-${this._id}`;\n  }\n\n  /** Name of the checkbox. */\n  @Input()\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name(): string {\n    return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;\n  }\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;\n  }\n\n  /**\n   * Sets the label size of the checkbox. Default value: small\n   */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;\n  }\n\n  /**\n   * Whether the checkbox has negative styling.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;\n  }\n\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      if (this._indeterminate) {\n        this._setIndeterminate(false);\n      }\n      this._setChecked(newValue);\n    }\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  private _indeterminate = false;\n\n  /** Whether the checkbox is indeterminated. */\n  @Input()\n  set indeterminate(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._indeterminate !== newValue) {\n      if (this._checked) {\n        this._setChecked(false);\n      }\n      this._setIndeterminate(newValue);\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  /** Sets the value of the checkbox. Default value is the checked status. */\n  @Input()\n  get value(): string {\n    return this._value ? this._value : this.checked.toString();\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _value: string;\n\n  /** An event emitted when the indeterminate value has changed */\n  @Output()\n  indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits the boolean checked value of the changed checkbox.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits a NxCheckboxChangeEvent.\n   */\n  @Output()\n  checkboxChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public checkboxGroup: NxCheckboxGroupComponent) {\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    return !!(this.checkboxGroup && this.checkboxGroup.ngControl && this.checkboxGroup.ngControl.invalid\n      && this.checkboxGroup.ngControl.touched);\n  }\n\n  ngOnInit() {\n    if (this.checkboxGroup) {\n      this.name = this.checkboxGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  private _setIndeterminate(value: boolean) {\n    this._indeterminate = value;\n    this.indeterminateChange.emit(this._indeterminate);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _setChecked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  public toggle() {\n    this.checked = !this.checked;\n    this.onChangeCallback(this.checked);\n    if (this.checkboxGroup !== null) {\n      this.checkboxGroup.change(this);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  _onInputClick(event): void {\n    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.toggle();\n      this.checkedChange.emit(this._checked);\n      this.checkboxChange.emit(this._createChangeEvent(this._checked));\n    }\n  }\n\n  /**@docs-private */\n  private _createChangeEvent(checkedValue: boolean): NxCheckboxChangeEvent {\n    const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);\n    event.checked = checkedValue;\n    event.value = this.value;\n    event.checkbox = this;\n    return event;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxCheckboxComponent } from './checkbox.component';\nimport { NxCheckboxGroupComponent } from './checkbox.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxLabelModule } from '@allianz/ngx-ndbx/base';\n\n@NgModule({\n  declarations: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  exports: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    NxLabelModule\n  ]\n})\nexport class NxCheckboxModule { }\n"],"names":["Subject","EventEmitter","coerceBooleanProperty","Component","ChangeDetectionStrategy","ChangeDetectorRef","NgControl","Optional","Self","ContentChildren","forwardRef","ContentChild","NxLabelComponent","Output","Input","NG_VALUE_ACCESSOR","NgModule","CommonModule","NxIconModule","NxLabelModule"],"mappings":"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"}
