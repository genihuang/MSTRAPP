{"version":3,"sources":["ng://@allianz/ngx-ndbx/checkbox/checkbox.component.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.module.ts"],"names":["nextId","NxCheckboxChangeEvent","checked","value","checkbox","this","NxCheckboxGroupComponent","_changeDetectorRef","ngControl","_stateChanges","Subject","selectionChange","EventEmitter","_id","_disabled","_negative","_onChange","_onTouched","valueAccessor","Object","defineProperty","prototype","markForCheck","_name","coerceBooleanProperty","_label","disabled","next","_labelSize","_required","ngAfterContentInit","_this","_value","_checkboxes","filter","map","cb","Promise","resolve","then","_updateSelectedCheckboxFromValue","changes","subscribe","control","setValue","ngOnDestroy","complete","writeValue","registerOnChange","fn","registerOnTouched","indexOf","change","emit","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","host","[class.nx-checkbox-group]","[class.nx-checkbox-group--negative]","[attr.id]","[attr.required]","[attr.disabled]","[attr.aria-labelledby]","[attr.role]","ChangeDetectorRef","NgControl","decorators","type","Optional","Self","ContentChildren","forwardRef","NxCheckboxComponent","descendants","ContentChild","NxLabelComponent","Output","Input","checkboxGroup","toString","_checked","_indeterminate","indeterminateChange","checkedChange","checkboxChange","onChangeCallback","_","onTouchedCallback","name","newValue","labelSize","negative","_setIndeterminate","_setChecked","_controlInvalid","invalid","touched","ngOnInit","_parentChangeSubscription","unsubscribe","toggle","onChange","onTouched","setDisabledState","isDisabled","touch","_onInputClick","event","stopPropagation","_createChangeEvent","checkedValue","[class.nx-checkbox]","[class.disabled]","[class.nx-checkbox--label-large]","[class.nx-checkbox--negative]","[class.has-error]","[attr.aria-invalid]","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","NxCheckboxModule","NgModule","declarations","exports","imports","CommonModule","NxIconModule","NxLabelModule"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ChangeDetectorRef,\n  AfterContentInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  Self,\n  OnInit, ContentChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\nlet nextId = 0;\n\nexport class NxCheckboxChangeEvent {\n  constructor(\n  /** The checked value of the checkbox. */\n  public checked: boolean,\n  /** The value of the checkbox. */\n  public value: string,\n  /** The component instance of the checkbox which emitted the change event. */\n  public checkbox: NxCheckboxComponent\n  ) {}\n}\n\n/** Size of the label. */\nexport type NxCheckboxLabelSize = 'small' | 'large';\n\n@Component({\n  selector: 'nx-checkbox-group',\n  templateUrl: 'checkbox-group.component.html',\n  styleUrls: ['checkbox-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox-group]': 'true',\n    '[class.nx-checkbox-group--negative]': 'negative',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-labelledby]': 'this._label?.id  || null',\n    '[attr.role]': '\"group\"',\n  }\n})\nexport class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n  @ContentChildren(forwardRef(() => NxCheckboxComponent), {descendants: true})\n  _checkboxes: QueryList<NxCheckboxComponent>;\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {})\n   _label: NxLabelComponent;\n\n  readonly _stateChanges = new Subject<void>();\n  @Output() selectionChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  private _id: string = `nx-checkbox-group-${nextId++}`;\n  /** Sets the Id of the checkbox group. */\n  @Input()\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string;\n  /** Sets the name of the checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Disables all checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._label) {\n      this._label.disabled = this._disabled;\n    }\n    this._stateChanges.next();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n    this._stateChanges.next();\n  }\n\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _labelSize: NxCheckboxLabelSize;\n  /** Sets the label size of the checkboxes inside the group */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._stateChanges.next();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return this._labelSize;\n  }\n\n  /** Whether the nx-checkbox-group are required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  private _value: any;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.ngControl) {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._onChange(this._value);\n      });\n    }\n\n    this._updateSelectedCheckboxFromValue();\n    this._checkboxes.changes.subscribe(() => {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      if (this.ngControl) {\n        this.ngControl.control.setValue(this._value);\n      }\n      this._updateSelectedCheckboxFromValue();\n    });\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    if (this._value) {\n      this._value = value;\n    }\n    this._updateSelectedCheckboxFromValue();\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n\n  private _onTouched: () => any = () => {};\n\n  private _updateSelectedCheckboxFromValue(): void {\n    if (this._checkboxes !== null) {\n      if (this._value) {\n        this._checkboxes.map(checkbox => {\n          if (this._value.indexOf(checkbox.value) !== -1) {\n            checkbox.checked = true;\n          }\n        });\n      }\n    }\n  }\n\n  /** @docs-private */\n  change(value) {\n    value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n    this._onChange(value);\n    if (this._onTouched) {\n      this._onTouched();\n    }\n    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));\n  }\n}\n\n@Component({\n  selector: 'nx-checkbox',\n  templateUrl: 'checkbox.component.html',\n  styleUrls: ['checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox]': 'true',\n    '[class.disabled]': 'disabled',\n    '[class.nx-checkbox--label-large]': 'labelSize === \"large\"',\n    '[class.nx-checkbox--negative]': 'negative',\n    '[attr.required]': 'required',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCheckboxComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit {\n  private _parentChangeSubscription: Subscription;\n  private _id: string = (nextId++).toString();\n  private _disabled: boolean = false;\n  private _negative: boolean = false;\n  private _labelSize: NxCheckboxLabelSize = 'small';\n  private _checked = false;\n  private _name: string = null;\n\n  /**\n   * Id of the checkbox.\n   *\n   * If not set, the checkbox gets an incremented value by default.\n   */\n  @Input()\n  set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id() {\n    return `nx-checkbox-${this._id}`;\n  }\n\n  /** Name of the checkbox. */\n  @Input()\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name(): string {\n    return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;\n  }\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;\n  }\n\n  /**\n   * Sets the label size of the checkbox. Default value: small\n   */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;\n  }\n\n  /**\n   * Whether the checkbox has negative styling.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;\n  }\n\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      if (this._indeterminate) {\n        this._setIndeterminate(false);\n      }\n      this._setChecked(newValue);\n    }\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  private _indeterminate = false;\n\n  /** Whether the checkbox is indeterminated. */\n  @Input()\n  set indeterminate(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._indeterminate !== newValue) {\n      if (this._checked) {\n        this._setChecked(false);\n      }\n      this._setIndeterminate(newValue);\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  /** Sets the value of the checkbox. Default value is the checked status. */\n  @Input()\n  get value(): string {\n    return this._value ? this._value : this.checked.toString();\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _value: string;\n\n  /** An event emitted when the indeterminate value has changed */\n  @Output()\n  indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits the boolean checked value of the changed checkbox.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits a NxCheckboxChangeEvent.\n   */\n  @Output()\n  checkboxChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public checkboxGroup: NxCheckboxGroupComponent) {\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    return !!(this.checkboxGroup && this.checkboxGroup.ngControl && this.checkboxGroup.ngControl.invalid\n      && this.checkboxGroup.ngControl.touched);\n  }\n\n  ngOnInit() {\n    if (this.checkboxGroup) {\n      this.name = this.checkboxGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  private _setIndeterminate(value: boolean) {\n    this._indeterminate = value;\n    this.indeterminateChange.emit(this._indeterminate);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _setChecked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  public toggle() {\n    this.checked = !this.checked;\n    this.onChangeCallback(this.checked);\n    if (this.checkboxGroup !== null) {\n      this.checkboxGroup.change(this);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  _onInputClick(event): void {\n    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.toggle();\n      this.checkedChange.emit(this._checked);\n      this.checkboxChange.emit(this._createChangeEvent(this._checked));\n    }\n  }\n\n  /**@docs-private */\n  private _createChangeEvent(checkedValue: boolean): NxCheckboxChangeEvent {\n    const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);\n    event.checked = checkedValue;\n    event.value = this.value;\n    event.checkbox = this;\n    return event;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxCheckboxComponent } from './checkbox.component';\nimport { NxCheckboxGroupComponent } from './checkbox.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxLabelModule } from '@allianz/ngx-ndbx/base';\n\n@NgModule({\n  declarations: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  exports: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    NxLabelModule\n  ]\n})\nexport class NxCheckboxModule { }\n"]}