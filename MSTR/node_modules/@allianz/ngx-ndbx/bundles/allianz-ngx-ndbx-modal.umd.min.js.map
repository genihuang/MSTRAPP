{"version":3,"sources":["ng://@allianz/ngx-ndbx/modal/modal.service.ts","ng://@allianz/ngx-ndbx/modal/animations.ts","ng://@allianz/ngx-ndbx/modal/modal.component.ts","ng://@allianz/ngx-ndbx/modal/modal-open-on-click.directive.ts","ng://@allianz/ngx-ndbx/modal/modal.module.ts"],"names":["NxModalService","this","subject","Subject","close$","asObservable","prototype","close","next","Injectable","fadeIn","animation","style","opacity","animate","fadeOut","scaleUp","transform","scaleDown","NxModalActionsDirective","Directive","args","selector","host","[class.nx-modal__actions]","NxModalContentDirective","[class.nx-modal__content]","NxModalComponent","modalService","eventManager","_changeDetectorRef","_closeButtonLabel","hideOnEsc","hideOnClickOutside","showCloseIcon","closeEvent","EventEmitter","closeSubscription","Subscription","EMPTY","Object","defineProperty","value","markForCheck","ngOnInit","_this","subscribe","emit","addGlobalEventListener","ngOnDestroy","unsubscribe","clickOutsideModal","closeButtonClick","cancelClick","evt","stopPropagation","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","animations","trigger","transition","useAnimation","query","animateChild","[@fadeInOut]","[class.nx-modal--fixed-width]","EventManager","ChangeDetectorRef","Input","Output","NxOpenModalOnClickDirective","templateRef","viewContainer","clickHandler","event","clear","createEmbeddedView","preventDefault","subscription","elements","forEach","el","removeEventListener","length","addEventListener","elementRef","nativeElement","console","warn","TemplateRef","ViewContainerRef","NxModalModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","A11yModule","NxIconModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** @docs-private */\n@Injectable()\nexport class NxModalService {\n\n  private subject = new Subject();\n  close$: Observable<any> = this.subject.asObservable();\n\n  close() {\n    this.subject.next();\n  }\n}\n","import { animate, animation, AnimationReferenceMetadata, style } from '@angular/animations';\n\nexport const fadeIn: AnimationReferenceMetadata = animation([\n    style({opacity: 0}),\n    animate('300ms', style({opacity: 1}))\n  ]);\n\nexport const fadeOut: AnimationReferenceMetadata = animation(\n  animate('300ms', style({opacity: 0}))\n);\n\nexport const scaleUp: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1)', opacity: 1}),\n    animate('250ms', style({transform: 'scale(1.3)', opacity: 0}))\n  ]);\n\nexport const scaleDown: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1.3)', opacity: 0}),\n    animate('250ms', style({transform: 'scale(1)', opacity: 1}))\n  ]);\n","import { OnDestroy, ChangeDetectionStrategy, Directive, ChangeDetectorRef } from '@angular/core';\nimport { Component, Input, OnInit, TemplateRef, Output, EventEmitter } from '@angular/core';\nimport { NxModalService } from './modal.service';\nimport { EventManager } from '@angular/platform-browser';\nimport { fadeIn, fadeOut, scaleDown, scaleUp } from './animations';\nimport { animateChild, query, transition, trigger, useAnimation } from '@angular/animations';\nimport { Subscription } from 'rxjs';\n\n/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */\n@Directive({\n  selector: '[nxModalActions]',\n  host: {\n    '[class.nx-modal__actions]': 'true'\n  }\n})\nexport class NxModalActionsDirective {}\n\n/** Scrollable container for the content of a modal. */\n@Directive({\n  selector: '[nxModalContent]',\n  host: {\n    '[class.nx-modal__content]': 'true'\n  }\n})\nexport class NxModalContentDirective {}\n\n@Component({\n  selector: 'nx-modal',\n  templateUrl: 'modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './modal.component.scss' ],\n  animations: [\n    trigger('fadeInOut', [\n      transition(':enter', [\n        useAnimation(fadeIn),\n        query('@scaleUpDown', [\n          animateChild()\n        ])\n      ]),\n      transition(':leave', [\n        query('@scaleUpDown', [\n          animateChild()\n        ]),\n        useAnimation(fadeOut)\n      ])\n    ]),\n    trigger('scaleUpDown', [\n      transition(':enter', useAnimation(scaleDown)),\n      transition(':leave', useAnimation(scaleUp))\n    ])\n  ],\n  host: {\n    '[@fadeInOut]': '',\n    '[class.nx-modal--fixed-width]': 'size === \"fixed\"'\n  }\n})\n\nexport class NxModalComponent implements OnInit, OnDestroy {\n\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the 'aria-label' of the modal close button needed for accessibility.\n   *\n   * Default value is 'Close dialog'.\n   */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /**\n   * A template reference variable pointing to the template\n   * which contains the content of the modal view.\n   */\n  @Input('nxBody') body: TemplateRef<any>;\n\n  /**\n   * Whether the modal view should close when the user hits the escape key.\n   * Default is true.\n   */\n  @Input('nxHideOnEsc') hideOnEsc: boolean = true;\n\n  /**\n   * Whether the modal view should close when the user clicks on the backdrop.\n   * Default is true.\n   */\n  @Input('nxHideOnClickOutside') hideOnClickOutside: boolean = true;\n\n  /**\n   * Whether the modal view should have a close icon in the upper right corner.\n   * Default is true.\n   */\n  @Input('nxShowCloseIcon') showCloseIcon: boolean = true;\n\n  /**\n   * Controls the width of the dialog.\n   * On `auto` the width is controlled by the content width,\n   * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */\n  @Input('nxSize') size: 'fixed' | 'auto';\n\n  /**\n   * An event emitted when the user clicks on the backdrop or uses the built-in close button.\n   * This event can be applied in conjunction with the custom open state handling\n   * of a modal to close it when requested by the user.\n   */\n  @Output('nxClose') closeEvent = new EventEmitter<void>();\n\n  private closeSubscription: Subscription = Subscription.EMPTY;\n\n  constructor(private modalService: NxModalService, private eventManager: EventManager, private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    this.closeSubscription = this.modalService.close$.subscribe(() => this.closeEvent.emit());\n\n    this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n      if (this.hideOnEsc) {\n        this.modalService.close();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.closeSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickOutsideModal() {\n    if (this.hideOnClickOutside) {\n      this.modalService.close();\n    }\n  }\n\n  /** @docs-private */\n  closeButtonClick() {\n    this.modalService.close();\n  }\n\n  /** @docs-private */\n  cancelClick(evt: KeyboardEvent) {\n    evt.stopPropagation();\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { SubscriptionLike as ISubscription } from 'rxjs';\n\nimport { NxModalService } from './modal.service';\n\n\n@Directive({selector: '[nxOpenModalOnClick]'})\nexport class NxOpenModalOnClickDirective implements OnInit, OnDestroy {\n\n  /** @docs-private */\n  elements: Array<any>;\n\n  private subscription: ISubscription;\n\n  constructor(private templateRef: TemplateRef<any>,\n              private viewContainer: ViewContainerRef,\n              private modalService: NxModalService) {\n  }\n\n  ngOnInit() {\n    this.subscription = this.modalService.close$.subscribe(() => this.viewContainer.clear());\n  }\n\n  ngOnDestroy() {\n    this.elements.forEach(el => {\n      if (el.removeEventListener) {\n        el.removeEventListener('click', this.clickHandler);\n      }\n    });\n\n    this.subscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickHandler = (event: any) => {\n    this.viewContainer.clear();\n    // instantiate the template onto which this directive is applied\n    const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n    // we need to mark the viewRef explicitly if the modal is used inside another\n    // component that is using onPush change detection\n    viewRef.markForCheck();\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /**\n   * One or multiple template reference variables pointing to elements\n   * which should trigger opening the modal on click.\n   *\n   * Value: A single template reference variable or an array of template reference variables.\n   */\n  @Input()\n  set nxOpenModalOnClick(elements) {\n    // also support the case where only one element is passed, check for the length property to be sure elements is an array\n    if (elements.length) {\n      this.elements = elements;\n    } else {\n      this.elements = [ elements ];\n    }\n    // add a click event listener to any element passed as property to this directive\n    this.elements.forEach(el => {\n      if (el.addEventListener) {\n        el.addEventListener('click', this.clickHandler);\n      // workaround until refactoring: if the reference is a component\n      // reference the component has to implement a getter to its own elementRef\n      } else if (el.elementRef) {\n        el.elementRef.nativeElement.addEventListener('click', this.clickHandler);\n      } else {\n        console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);\n      }\n    });\n  }\n\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport {NxModalComponent, NxModalActionsDirective, NxModalContentDirective} from './modal.component';\nimport { CommonModule } from '@angular/common';\nimport { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';\nimport { NxModalService } from './modal.service';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [ CommonModule, A11yModule, NxIconModule ],\n  declarations: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n  exports: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n})\n\nexport class NxModalModule {\n  // define the modal service on root level as an application wide singleton,\n  // assuming that we only display one modal at a time, which seems quite reasonable\n  // this is static and named \"forRoot\" by convention\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NxModalModule,\n      providers: [NxModalService]\n    };\n  }\n}\n"]}