(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/keycodes'), require('@allianz/ngx-ndbx/icon'), require('@angular/cdk/coercion'), require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/taglist', ['exports', '@angular/cdk/keycodes', '@allianz/ngx-ndbx/icon', '@angular/cdk/coercion', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].taglist = {}),global.ng.cdk.keycodes,global.allianz['ngx-ndbx'].icon,global.ng.cdk.coercion,global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,keycodes,icon,coercion,core,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxTagComponent = /** @class */ (function () {
        function NxTagComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            /**
             * An event is dispatched each time when the tag is clicked.
             */
            this.clicked = new core.EventEmitter();
            /**
             * An event is dispatched each time when the tag is removed.
             */
            this.removed = new core.EventEmitter();
        }
        Object.defineProperty(NxTagComponent.prototype, "removable", {
            get: /**
             * @return {?}
             */ function () {
                return this._removable;
            },
            /** Whether the tag is removeable. */
            set: /**
             * Whether the tag is removeable.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._removable = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTagComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            /** Sets the value of the tag. */
            set: /**
             * Sets the value of the tag.
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._value !== value) {
                    this._value = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        /** @docs-private */
        // Emit the removed event that the parent can remove the value
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        // Emit the removed event that the parent can remove the value
        NxTagComponent.prototype.removeClickHandler = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
            // Emit the removed event that the parent can remove the value
            function (event) {
                event.stopPropagation();
                this.removed.emit(this.value);
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxTagComponent.prototype.removeKeyHandler = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.removable && (event.keyCode === keycodes.DELETE || event.keyCode === keycodes.BACKSPACE)) {
                    event.preventDefault();
                    event.stopPropagation();
                    this.removed.emit(this.value);
                }
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxTagComponent.prototype.tagClickHandler = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                this.clicked.emit(this.value);
            };
        NxTagComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-tag',
                        template: "{{ value }}\n<span role=\"link\" aria-label=\"close\" class=\"nx-tag__close\" *ngIf=\"removable\"\n    (click)=\"removeClickHandler($event)\">\n    <nx-icon class=\"nx-tag__close-icon\" name=\"close\"></nx-icon>\n</span>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            '(click)': 'tagClickHandler()',
                            '(keydown)': 'removeKeyHandler($event)',
                            '[attr.tabIndex]': '0'
                        },
                        styles: [":host{height:auto;max-width:100%;font-size:14px;color:#767676;padding:6px 14px;line-height:16px;letter-spacing:1px;font-weight:600;display:flex;align-items:center;border:2px solid #d9d9d9;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:background-color .2s,box-shadow .2s;cursor:pointer}:host:hover{border-color:#c2c2c2;color:#5b5b5b;background-color:#ececec}:host:focus{outline:transparent solid 2px}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}.nx-tag__close-icon{outline:0;width:16px;height:16px;display:block;font-size:16px;line-height:14px}.nx-tag__close{margin-left:8px}:host-context(.nx-taglist--keyword){padding:14px 22px}"]
                    }] }
        ];
        /** @nocollapse */
        NxTagComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        NxTagComponent.propDecorators = {
            removable: [{ type: core.Input }],
            value: [{ type: core.Input }],
            clicked: [{ type: core.Output }],
            removed: [{ type: core.Output }]
        };
        return NxTagComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxTaglistComponent = /** @class */ (function () {
        function NxTaglistComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            /**
             * An event is dispatched each time when the list of tags changed.
             */
            this.tagsChange = new core.EventEmitter();
            /**
             * An event is dispatched each time when a tag is clicked.
             */
            this.tagClickEvent = new core.EventEmitter();
            this._tags = [];
            this._allowTagDeletion = true;
            this._isKeywordList = false;
            this._labelProperty = 'nxTaglistLabel';
            this._valueFormatterFn = ( /**
             * @param {?} value
             * @return {?}
             */function (value) { return value; });
            this._onChange = ( /**
             * @return {?}
             */function () { });
            this._onTouched = ( /**
             * @return {?}
             */function () { });
        }
        Object.defineProperty(NxTaglistComponent.prototype, "tags", {
            get: /**
             * @return {?}
             */ function () {
                return this._tags;
            },
            /** Sets the list of tags. */
            set: /**
             * Sets the list of tags.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._tags = value;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "allowTagDeletion", {
            get: /**
             * @return {?}
             */ function () {
                return this._allowTagDeletion;
            },
            /** Whether the tags can be removed from the list. */
            set: /**
             * Whether the tags can be removed from the list.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._allowTagDeletion = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "isKeywordList", {
            get: /**
             * @return {?}
             */ function () {
                return this._isKeywordList;
            },
            /** Whether the tags can be styled as keywords. */
            set: /**
             * Whether the tags can be styled as keywords.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._isKeywordList = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "labelProp", {
            get: /**
             * @return {?}
             */ function () {
                return this._labelProperty;
            },
            /** Sets the label property, in case tags represent objects. */
            set: /**
             * Sets the label property, in case tags represent objects.
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._labelProperty !== value) {
                    this._labelProperty = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "labelledby", {
            get: /**
             * @return {?}
             */ function () {
                return this._ariaLabelledBy;
            },
            /** Sets the label property to improve accessibility. */
            set: /**
             * Sets the label property to improve accessibility.
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._ariaLabelledBy !== value) {
                    this._ariaLabelledBy = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "valueFormatter", {
            get: /**
             * @return {?}
             */ function () {
                return this._valueFormatterFn;
            },
            /** Sets the customization function for tag value.  */
            set: /**
             * Sets the customization function for tag value.
             * @param {?} fn
             * @return {?}
             */ function (fn) {
                this._valueFormatterFn = fn;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */
        /**
         * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
        NxTaglistComponent.prototype.delete = /**
         * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
            function (index, value) {
                if (this.allowTagDeletion) {
                    this.tags = __spread(this.tags.slice(0, index), this.tags.slice(index + 1));
                    this._onChange(this.tags);
                    this.tagsChange.emit(this.tags);
                }
            };
        /** Allows to add a tag. Takes tag object as an input */
        /**
         * Allows to add a tag. Takes tag object as an input
         * @param {?} tag
         * @return {?}
         */
        NxTaglistComponent.prototype.addTag = /**
         * Allows to add a tag. Takes tag object as an input
         * @param {?} tag
         * @return {?}
         */
            function (tag) {
                var _this = this;
                if (!tag) {
                    return;
                }
                // make sure tag is either string or has the configured label prop and is not yet in the list
                if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||
                    (tag[this.labelProp] && this.tags.filter(( /**
                     * @param {?} t
                     * @return {?}
                     */function (t) { return t[_this.labelProp] === tag[_this.labelProp]; })).length < 1)) {
                    this.tags = __spread(this.tags, [tag]);
                    this._onChange(this.tags);
                    this.tagsChange.emit(this.tags);
                }
            };
        /** Allows to clear the tag list. */
        /**
         * Allows to clear the tag list.
         * @return {?}
         */
        NxTaglistComponent.prototype.clearTags = /**
         * Allows to clear the tag list.
         * @return {?}
         */
            function () {
                this.tags = [];
                this._onChange(this.tags);
                this.tagsChange.emit(this.tags);
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} tags
         * @return {?}
         */
        NxTaglistComponent.prototype.writeValue = /**
         * \@docs-private
         * @param {?} tags
         * @return {?}
         */
            function (tags) {
                this.tags = tags;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxTaglistComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxTaglistComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} tag
         * @return {?}
         */
        NxTaglistComponent.prototype.renderTag = /**
         * \@docs-private
         * @param {?} tag
         * @return {?}
         */
            function (tag) {
                /** @type {?} */
                var tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
                return this.valueFormatter(tagStr);
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
        NxTaglistComponent.prototype.tagClick = /**
         * \@docs-private
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
            function (index, value) {
                this.tagClickEvent.emit(this.tags[index]);
            };
        NxTaglistComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-taglist',
                        template: "  <ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n      <nx-tag [value]=\"renderTag(tag)\" [removable]=\"allowTagDeletion\" (clicked)=\"tagClick(i, $event)\" (removed)=\"delete(i, $event)\"></nx-tag>\n  </li>\n  </ul>\n  <ng-content *ngIf=\"tags.length < 1\"></ng-content>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return NxTaglistComponent; })),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.nx-taglist--keyword]': 'isKeywordList',
                            '[attr.aria-labelledby]': 'labelledby || null'
                        },
                        styles: [":host{position:relative;min-height:32px;margin-bottom:32px;display:flex;justify-content:space-between}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}@media (max-width:703px){.nx-taglist--keyword{justify-content:center}}"]
                    }] }
        ];
        /** @nocollapse */
        NxTaglistComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        NxTaglistComponent.propDecorators = {
            tagsChange: [{ type: core.Output, args: ['nxTagsChange',] }],
            tagClickEvent: [{ type: core.Output, args: ['nxTagClick',] }],
            tags: [{ type: core.Input, args: ['nxTags',] }],
            allowTagDeletion: [{ type: core.Input, args: ['nxAllowTagDeletion',] }],
            isKeywordList: [{ type: core.Input, args: ['nxIsKeywordList',] }],
            labelProp: [{ type: core.Input, args: ['nxLabelProperty',] }],
            labelledby: [{ type: core.Input, args: ['aria-labelledby',] }],
            valueFormatter: [{ type: core.Input, args: ['nxValueFormatter',] }]
        };
        return NxTaglistComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxTaglistModule = /** @class */ (function () {
        function NxTaglistModule() {
        }
        NxTaglistModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NxTaglistComponent, NxTagComponent],
                        exports: [NxTaglistComponent, NxTagComponent],
                        imports: [common.CommonModule, icon.NxIconModule]
                    },] }
        ];
        return NxTaglistModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxTaglistModule = NxTaglistModule;
    exports.NxTaglistComponent = NxTaglistComponent;
    exports.ɵa = NxTagComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-taglist.umd.js.map