(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@allianz/ngx-ndbx/datefield'), require('@angular/core'), require('moment')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/moment-date-adapter', ['exports', '@allianz/ngx-ndbx/datefield', '@angular/core', 'moment'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx']['moment-date-adapter'] = {}),global.allianz['ngx-ndbx'].datefield,global.ng.core,global.momentNs));
}(this, (function (exports,datefield,core,momentNs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment = momentNs;
    /**
     * Creates an array and fills it with values.
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */
    function range(length, valueFunction) {
        /** @type {?} */
        var valuesArray = Array(length);
        for (var i = 0; i < length; i++) {
            valuesArray[i] = valueFunction(i);
        }
        return valuesArray;
    }
    /**
     * \@docs-private
     */
    var NxMomentDateAdapter = /** @class */ (function (_super) {
        __extends(NxMomentDateAdapter, _super);
        function NxMomentDateAdapter(dateLocale) {
            var _this = _super.call(this) || this;
            _this.setLocale(dateLocale || moment.locale());
            return _this;
        }
        /**
         * @param {?} locale
         * @return {?}
         */
        NxMomentDateAdapter.prototype.setLocale = /**
         * @param {?} locale
         * @return {?}
         */
            function (locale) {
                var _this = this;
                _super.prototype.setLocale.call(this, locale);
                /** @type {?} */
                var momentLocaleData = moment.localeData(locale);
                this._localeData = {
                    firstDayOfWeek: momentLocaleData.firstDayOfWeek(),
                    longMonths: momentLocaleData.months(),
                    shortMonths: momentLocaleData.monthsShort(),
                    dates: range(31, ( /**
                     * @param {?} i
                     * @return {?}
                     */function (i) { return _this.createDate(2017, 0, i + 1).format('D'); })),
                    longDaysOfWeek: momentLocaleData.weekdays(),
                    shortDaysOfWeek: momentLocaleData.weekdaysShort(),
                    narrowDaysOfWeek: momentLocaleData.weekdaysMin(),
                };
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.toIso8601 = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).format();
            };
        /**
         * @param {?} value
         * @param {?} format
         * @param {?} strict
         * @return {?}
         */
        NxMomentDateAdapter.prototype.parse = /**
         * @param {?} value
         * @param {?} format
         * @param {?} strict
         * @return {?}
         */
            function (value, format, strict) {
                if (value && typeof value === 'string') {
                    return moment(value, format, this.locale, strict);
                }
                return value ? moment(value).locale(this.locale) : null;
            };
        /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
        NxMomentDateAdapter.prototype.format = /**
         * @param {?} date
         * @param {?} displayFormat
         * @return {?}
         */
            function (date, displayFormat) {
                date = this.clone(date);
                if (!this.isValid(date)) {
                    throw Error('MomentDateAdapter: Cannot format invalid date.');
                }
                return date.format(displayFormat);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.isValid = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).isValid();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.clone = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.clone().locale(this.locale);
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        NxMomentDateAdapter.prototype.isDateInstance = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                return moment.isMoment(obj);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getYear = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).year();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).month();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).date();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NxMomentDateAdapter.prototype.deserialize = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var date;
                if (value instanceof Date) {
                    date = moment(value);
                }
                if (typeof value === 'string') {
                    if (!value) {
                        return null;
                    }
                    date = moment(value, moment.ISO_8601).locale(this.locale);
                }
                if (date && this.isValid(date)) {
                    return date;
                }
                return _super.prototype.deserialize.call(this, value);
            };
        /**
         * @return {?}
         */
        NxMomentDateAdapter.prototype.invalid = /**
         * @return {?}
         */
            function () {
                return moment.invalid();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getYearName = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).format('YYYY');
            };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.createDate = /**
         * @param {?} year
         * @param {?} month
         * @param {?} date
         * @return {?}
         */
            function (year, month, date) {
                // Moment.js will create an invalid date if any of the components are out of bounds, but we
                // explicitly check each case so we can throw more descriptive errors.
                if (month < 0 || month > 11) {
                    throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
                }
                if (date < 1) {
                    throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
                }
                /** @type {?} */
                var result = moment({ year: year, month: month, date: date }).locale(this.locale);
                // If the result isn't valid, the date must have been out of bounds for this month.
                if (!result.isValid()) {
                    throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
                }
                return result;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getNumDaysInMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).daysInMonth();
            };
        /**
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getDateNames = /**
         * @return {?}
         */
            function () {
                return this._localeData.dates;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getDayOfWeek = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return this.clone(date).day();
            };
        /**
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getFirstDayOfWeek = /**
         * @return {?}
         */
            function () {
                return this._localeData.firstDayOfWeek;
            };
        /**
         * @param {?} style
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getMonthNames = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.
                return style === 'long' ? this._localeData.longMonths : this._localeData.shortMonths;
            };
        /**
         * @return {?}
         */
        NxMomentDateAdapter.prototype.today = /**
         * @return {?}
         */
            function () {
                return moment().locale(this.locale);
            };
        /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
        NxMomentDateAdapter.prototype.addCalendarMonths = /**
         * @param {?} date
         * @param {?} months
         * @return {?}
         */
            function (date, months) {
                return this.clone(date).add({ months: months });
            };
        /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
        NxMomentDateAdapter.prototype.addCalendarDays = /**
         * @param {?} date
         * @param {?} days
         * @return {?}
         */
            function (date, days) {
                return this.clone(date).add({ days: days });
            };
        /**
         * @param {?} style
         * @return {?}
         */
        NxMomentDateAdapter.prototype.getDayOfWeekNames = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                if (style === 'long') {
                    return this._localeData.longDaysOfWeek;
                }
                if (style === 'short') {
                    return this._localeData.shortDaysOfWeek;
                }
                return this._localeData.narrowDaysOfWeek;
            };
        /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
        NxMomentDateAdapter.prototype.addCalendarYears = /**
         * @param {?} date
         * @param {?} years
         * @return {?}
         */
            function (date, years) {
                return this.clone(date).add({ years: years });
            };
        /** @nocollapse */
        NxMomentDateAdapter.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [datefield.NX_DATE_LOCALE,] }] }
            ];
        };
        return NxMomentDateAdapter;
    }(datefield.NxDateAdapter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NX_MOMENT_DATE_FORMATS = {
        parse: {
            dateInput: 'L',
        },
        display: {
            dateInput: 'L',
            monthYearLabel: 'MMM YYYY',
            dateA11yLabel: 'LL',
            monthYearA11yLabel: 'MMMM YYYY',
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MomentDateModule = /** @class */ (function () {
        function MomentDateModule() {
        }
        MomentDateModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            datefield.NX_DATE_LOCALE_PROVIDER,
                            { provide: datefield.NxDateAdapter, useClass: NxMomentDateAdapter, deps: [datefield.NX_DATE_LOCALE] }
                        ],
                    },] }
        ];
        return MomentDateModule;
    }());
    var ɵ0 = NX_MOMENT_DATE_FORMATS;
    var NxMomentDateModule = /** @class */ (function () {
        function NxMomentDateModule() {
        }
        NxMomentDateModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [MomentDateModule],
                        providers: [{ provide: datefield.NX_DATE_FORMATS, useValue: ɵ0 }],
                    },] }
        ];
        return NxMomentDateModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.MomentDateModule = MomentDateModule;
    exports.NxMomentDateModule = NxMomentDateModule;
    exports.NxMomentDateAdapter = NxMomentDateAdapter;
    exports.NX_MOMENT_DATE_FORMATS = NX_MOMENT_DATE_FORMATS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-moment-date-adapter.umd.js.map