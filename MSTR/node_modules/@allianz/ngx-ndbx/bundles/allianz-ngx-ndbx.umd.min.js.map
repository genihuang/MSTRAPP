{"version":3,"sources":["ng://@allianz/ngx-ndbx/ndbx.module.ts","node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/button/button-base.ts","ng://@allianz/ngx-ndbx/button/button.component.ts","ng://@allianz/ngx-ndbx/button/icon-button.component.ts","ng://@allianz/ngx-ndbx/button/button.module.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.component.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.module.ts","ng://@allianz/ngx-ndbx/radio-button/radio-change.ts","ng://@allianz/ngx-ndbx/radio-button/radio-button.ts","ng://@allianz/ngx-ndbx/radio-button/radio-button.module.ts","ng://@allianz/ngx-ndbx/copytext/copytext.component.ts","ng://@allianz/ngx-ndbx/copytext/copytext.module.ts","ng://@allianz/ngx-ndbx/headline/headline.component.ts","ng://@allianz/ngx-ndbx/headline/headline.module.ts","ng://@allianz/ngx-ndbx/link/link.component.ts","ng://@allianz/ngx-ndbx/link/link.module.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle/toggle-button.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle-group/circle-toggle-group.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/mobile-toggle-button/mobile-toggle-button.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle/circle-toggle.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/icon-toggle-button/icon-toggle-button.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle.module.ts","ng://@allianz/ngx-ndbx/list/list.component.ts","ng://@allianz/ngx-ndbx/list/list-icon.component.ts","ng://@allianz/ngx-ndbx/list/list.module.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle-button-base.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle-button.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle.module.ts","ng://@allianz/ngx-ndbx/checkbox-circle/checkbox-circle.component.ts","ng://@allianz/ngx-ndbx/checkbox-circle/checkbox-circle.module.ts","ng://@allianz/ngx-ndbx/spinner/spinner.component.ts","ng://@allianz/ngx-ndbx/spinner/spinner.module.ts","ng://@allianz/ngx-ndbx/modal/modal.service.ts","ng://@allianz/ngx-ndbx/modal/animations.ts","ng://@allianz/ngx-ndbx/modal/modal.component.ts","ng://@allianz/ngx-ndbx/modal/modal-open-on-click.directive.ts","ng://@allianz/ngx-ndbx/modal/modal.module.ts","ng://@allianz/ngx-ndbx/switcher/switcher.component.ts","ng://@allianz/ngx-ndbx/switcher/switcher.module.ts","ng://@allianz/ngx-ndbx/popover/popover-trigger.directive.ts","ng://@allianz/ngx-ndbx/popover/popover-content.ts","ng://@allianz/ngx-ndbx/popover/popover.component.ts","ng://@allianz/ngx-ndbx/popover/popover.module.ts","ng://@allianz/ngx-ndbx/taglist/tag.component.ts","ng://@allianz/ngx-ndbx/taglist/taglist.component.ts","ng://@allianz/ngx-ndbx/taglist/taglist.module.ts","ng://@allianz/ngx-ndbx/image/image.directive.ts","ng://@allianz/ngx-ndbx/image/figure.component.ts","ng://@allianz/ngx-ndbx/image/image.module.ts","ng://@allianz/ngx-ndbx/radio-circle/radio-circle-button.ts","ng://@allianz/ngx-ndbx/radio-circle/radio-circle.component.ts","ng://@allianz/ngx-ndbx/radio-circle/icon-button/radio-circle-icon-button.component.ts","ng://@allianz/ngx-ndbx/radio-circle/svg-button/radio-circle-svg-button.component.ts","ng://@allianz/ngx-ndbx/radio-circle/radio-circle.module.ts","ng://@allianz/ngx-ndbx/video/video.component.ts","ng://@allianz/ngx-ndbx/video/video.module.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown-errors.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.control.ts","ng://@allianz/ngx-ndbx/dropdown/group/dropdown-group.ts","ng://@allianz/ngx-ndbx/dropdown/item/dropdown-item.ts","ng://@allianz/ngx-ndbx/dropdown/closed-label.directive.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.module.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete-option.component.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete.component.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete-trigger.directive.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete.module.ts","ng://@allianz/ngx-ndbx/natural-language-form/word.component.ts","ng://@allianz/ngx-ndbx/natural-language-form/natural-language-form.component.ts","ng://@allianz/ngx-ndbx/natural-language-form/natural-language-form.module.ts","ng://@allianz/ngx-ndbx/message/message.component.ts","ng://@allianz/ngx-ndbx/message/message.module.ts","ng://@allianz/ngx-ndbx/page-search/page-search.component.ts","ng://@allianz/ngx-ndbx/page-search/page-search.module.ts","ng://@allianz/ngx-ndbx/rating/rating.component.ts","ng://@allianz/ngx-ndbx/rating/rating.module.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper-intl.ts","ng://@allianz/ngx-ndbx/number-stepper/auto-resize.directive.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper.component.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper-prefix.directive.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper-suffix.directive.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper.module.ts","ng://@allianz/ngx-ndbx/pagination/pagination-texts.ts","ng://@allianz/ngx-ndbx/pagination/pagination-utils.ts","ng://@allianz/ngx-ndbx/pagination/pagination.component.ts","ng://@allianz/ngx-ndbx/pagination/pagination.module.ts","ng://@allianz/ngx-ndbx/dynamic-table/tabledata-source.ts","ng://@allianz/ngx-ndbx/dynamic-table/dynamic-table.component.ts","ng://@allianz/ngx-ndbx/dynamic-table/dynamic-table.module.ts","ng://@allianz/ngx-ndbx/accordion/accordion.ts","ng://@allianz/ngx-ndbx/accordion/accordion-animations.ts","ng://@allianz/ngx-ndbx/accordion/expansion-panel-body.ts","ng://@allianz/ngx-ndbx/accordion/expansion-panel.ts","ng://@allianz/ngx-ndbx/accordion/expansion-panel-header.ts","ng://@allianz/ngx-ndbx/accordion/accordion.module.ts","ng://@allianz/ngx-ndbx/tabs/tab-group-base.ts","ng://@allianz/ngx-ndbx/tabs/tab.ts","ng://@allianz/ngx-ndbx/tabs/tab-body.ts","ng://@allianz/ngx-ndbx/tabs/tab-group.ts","ng://@allianz/ngx-ndbx/tabs/tab-label.ts","ng://@allianz/ngx-ndbx/tabs/tab-header.ts","ng://@allianz/ngx-ndbx/tabs/tab-nav-bar.ts","ng://@allianz/ngx-ndbx/tabs/tabs.module.ts","ng://@allianz/ngx-ndbx/core/mapped-styles.ts","ng://@allianz/ngx-ndbx/card/card.component.ts","ng://@allianz/ngx-ndbx/card/card.module.ts","ng://@allianz/ngx-ndbx/core/breakpoints.ts"],"names":["NdbxModule","forRoot","ngModule","NgModule","args","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","DEFAULT_SIZE","DEFAULT_TYPE","NX_BUTTON_HOST_BINDINGS","[class.nx-button--primary]","[class.nx-button--secondary]","[class.nx-button--tertiary]","[class.nx-button--cta]","[class.nx-button--emphasis]","[class.nx-button--large]","[class.nx-button--medium]","[class.nx-button--small-medium]","[class.nx-button--small]","[class.nx-button--block]","[class.nx-button--negative]","NxButtonBase","_changeDetectorRef","_elementRef","type","size","negative","block","defineProperty","_classNames","_b","match","_d","test","markForCheck","NxButtonComponent","changeDetectorRef","elementRef","_super","tslib_1.__extends","Component","template","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","inputs","ChangeDetectorRef","ElementRef","NxIconButtonComponent","NxButtonModule","declarations","exports","nextId","NxCheckboxChangeEvent","checked","checkbox","NxCheckboxGroupComponent","ngControl","_stateChanges","Subject","selectionChange","EventEmitter","_id","_disabled","_negative","_onChange","_onTouched","valueAccessor","_name","coerceBooleanProperty","_label","disabled","_labelSize","_required","ngAfterContentInit","_this","_value","_checkboxes","filter","map","cb","Promise","resolve","then","_updateSelectedCheckboxFromValue","changes","subscribe","control","setValue","ngOnDestroy","complete","writeValue","registerOnChange","fn","registerOnTouched","indexOf","change","emit","[class.nx-checkbox-group]","[class.nx-checkbox-group--negative]","[attr.id]","[attr.required]","[attr.disabled]","[attr.aria-labelledby]","[attr.role]","NgControl","decorators","Optional","Self","ContentChildren","forwardRef","NxCheckboxComponent","descendants","ContentChild","NxLabelComponent","Output","Input","checkboxGroup","toString","_checked","_indeterminate","indeterminateChange","checkedChange","checkboxChange","onChangeCallback","_","onTouchedCallback","name","newValue","labelSize","_setIndeterminate","_setChecked","_controlInvalid","invalid","touched","ngOnInit","_parentChangeSubscription","unsubscribe","toggle","onChange","onTouched","setDisabledState","isDisabled","touch","_onInputClick","event","stopPropagation","_createChangeEvent","checkedValue","[class.nx-checkbox]","[class.disabled]","[class.nx-checkbox--label-large]","[class.nx-checkbox--negative]","[class.has-error]","[attr.aria-invalid]","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","NxCheckboxModule","imports","CommonModule","NxIconModule","NxLabelModule","NxRadioChange","source","NxRadioGroupComponent","_parentForm","_parentFormGroup","groupValueChange","_selected","_updateSelectedRadioFromValue","_checkSelectedRadioButton","isAlreadySelected","_radios","forEach","radio","role","[class.nx-radio-group--negative]","NgForm","FormGroupDirective","NxRadioComponent","radioGroup","valueChange","id","required","_onInputChange","form","submitted","[class.nx-radio-button--small-label]","[class.nx-radio-button--big-label]","[class.nx-radio--negative]","NxRadioModule","NxCopytextComponent","[class.nx-copy]","[class.nx-copy--small]","[class.nx-copy--medium]","[class.nx-copy--normal]","[class.nx-copy--large]","[class.nx-copy--negative]","NxCopytextModule","NxHeadlineComponent","DEFAULT_TYPE$2","[class.nx-heading--page]","[class.nx-heading--page-bold-caps]","[class.nx-heading--section]","[class.nx-heading--subsection-large]","[class.nx-heading--subsection-medium]","[class.nx-heading--subsection-small]","[class.nx-heading--subsection-xsmall]","[class.nx-heading--negative]","NxHeadlineModule","MAPPING","black","text","icon-right","DEFAULT_CLASSES","NxLinkComponent","_renderer","icons","nativeElement","querySelectorAll","addClass","Renderer2","NxIconComponent","MappedStyles","NxLinkModule","ToggleButton","NxCircleToggleGroupComponent","_destroyed","_responsive","updateToggleButtonsNames","buttons","button","responsive","notifySelectedChild","ngAfterViewInit","subscribeToSelectionChanges","pipe","startWith","toggles","tap","toggleButton","resetClasses","first","setFirstButton","last","setLastButton","takeUntil","changedOrDestroyed","merge","apply","selected","find","setGroupSelection","_buttons","[class.is-responsive]","[class.is-disabled]","[attr.aria-disabled]","[attr.name]","[class.nx-circle-toggle-group]","NxMobileToggleButtonComponent","isFirst","isLast","[class.is-negative]","[class.is-first]","[class.is-last]","[class.is-flipped]","ToggleChangeEvent","NxCircleToggleComponent","toggleGroup","_checkedDispatcher","inGroup","_iconName","_svg","_svgChecked","_hint","_hover","_touched","_removeUniqueSelectionListener","src","onMouseEnter","onMouseLeave","onTouchStart","attachListenerForGroup","listen","groupId","buttonId","preventDefault","notify","svg","svgChecked","useFilledSvg","handleEnterKey","[class.nx-toggle-circle]","[class.in-group]","UniqueSelectionDispatcher","ViewChild","HostListener","NxIconToggleButtonComponent","[class.nx-circle-button]","[class.has-checkmark]","[class.is-touched]","NxCircleToggleModule","NxListComponent","orderedCircle","[class.nx-list--xsmall]","[class.nx-list--small]","[class.nx-list--normal]","[class.nx-list--negative]","[class.nx-list--ordered-circle]","NxListIconComponent","read","ViewContainerRef","NxListModule","bootstrap","NxRadioToggleButtonBaseComponent","renderer","toggleButtonId","triggerInputClick","toggleInput","click","labelContainer","removeClasses","small","NxRadioToggleComponent","_toggleId","_disableChange","toggleButtons","QueryList","option","coerced","subscribeToToggleButtonsChange","onChecked","_selection","selection","setTimeout","select","correspondingButton","mapClassNames","split","className","toggleContainer","NxRadioToggleButtonChange","NxRadioToggleButtonComponent","radioToggle","_toggleDispatcher","radioToggleId","_notifySiblings","_emitCheckedEvent","toggleId","onKeyupSpace","Inject","NxRadioToggleModule","FormsModule","NxCheckboxCircleComponent","console","warn","[class.is-checked]","NxCheckboxCircleModule","NxSpinnerComponent","_size","[class.nx-spinner--small]","[class.nx-spinner--medium]","[class.nx-spinner--large]","[class.nx-spinner--negative]","[attr.aria-busy]","[attr.aria-live]","NxSpinnerModule","NxModalService","subject","close$","asObservable","close","Injectable","fadeIn","animation","style","opacity","animate","fadeOut","scaleUp","transform","scaleDown","NxModalActionsDirective","Directive","[class.nx-modal__actions]","NxModalContentDirective","[class.nx-modal__content]","NxModalComponent","modalService","eventManager","_closeButtonLabel","hideOnEsc","hideOnClickOutside","showCloseIcon","closeEvent","closeSubscription","Subscription","EMPTY","addGlobalEventListener","clickOutsideModal","closeButtonClick","cancelClick","evt","animations","trigger","transition","useAnimation","query","animateChild","[@fadeInOut]","[class.nx-modal--fixed-width]","EventManager","NxOpenModalOnClickDirective","templateRef","viewContainer","clickHandler","clear","createEmbeddedView","subscription","elements","el","removeEventListener","addEventListener","TemplateRef","NxModalModule","A11yModule","NxSwitcherComponent","_labelPosition","_big","[class.is-big]","[class.nx-switcher--small-label]","[class.is-swapped]","NxSwitcherModule","fallbacks","originX","originY","overlayX","overlayY","offsetX","offsetY","NxPopoverTriggerDirective","overlay","viewContainerRef","_show","_closeable","changeShow","direction","popoverInitialVisible","visibleChange","modal","scrollStrategy","_documentClickObservable","fromEvent","document","openPopover","closePopover","popover","showCloseButton","isCloseable","onMouseExit","overlayRef","createOverlay","hasAttached","updatePosition","_positionStrategy","handleClick","isOpen","open","show","_embeddedViewRef","attach","portal","waitForClose","detach","TemplatePortal","overlayState","OverlayConfig","positionStrategy","getPosition","scrollStrategies","reposition","enable","hasBackdrop","subscribeToPositions","_subscribeToDetach","_subscribeToBackdropClick","position","positionChanges","pair","connectionPair","positionOverlay","positionArrow","destroyed","detectChanges","backdropClick","detachments","emitClosedEvent","target","contains","closed","targetPosition","getBoundingClientRect","left","width","overlayElement","parentElement","offsetLeft","arrowStyle","top","positions","flexibleConnectedTo","withPositions","withDefaultOffsetX","withDefaultOffsetY","exportAs","(click)","aria-haspopup","[attr.aria-expanded]","[attr.aria-describedby]","Overlay","NxPopoverContentDirective","_template","NxPopoverComponent","emitButtonClick","NxPopoverModule","OverlayModule","NxTagComponent","clicked","removed","_removable","removeClickHandler","removeKeyHandler","removable","keyCode","DELETE","BACKSPACE","tagClickHandler","(keydown)","[attr.tabIndex]","NxTaglistComponent","tagsChange","tagClickEvent","_tags","_allowTagDeletion","_isKeywordList","_labelProperty","_valueFormatterFn","_ariaLabelledBy","delete","index","allowTagDeletion","tags","slice","addTag","tag","labelProp","t","clearTags","renderTag","tagStr","valueFormatter","tagClick","[class.nx-taglist--keyword]","NxTaglistModule","NxImageDirective","NxFigureComponent","rounded","[class.nx-image--auto]","[class.nx-image--1by1]","[class.nx-image--1dot8by1]","[class.nx-image--1dot2by1]","[class.nx-image--1by1dot1]","[class.nx-image--2dot6by1]","[class.nx-image--rounded]","NxImageModule","NxRadioCircleButton","radioCircle","ngOnChanges","label","selectedButton","radioCircleId","NxRadioCircleComponent","_selectedButton","getResposiveToggle","labelElement","callback","NxRadioCircleIconButtonComponent","NxRadioCircleSvgButtonComponent","NxRadioCircleModule","NxVideoComponent","sanitizer","_videoId","_altText","_playButtonAriaLabel","_previewImageSrc","_showPlayerControls","_allowFullScreen","_interfaceLanguage","showPlayer","url","videoId","showPlayerControls","allowFullScreen","interfaceLanguage","bypassSecurityTrustResourceUrl","previewImageSrc","defaultLabel","altText","nxPlayButtonAriaLabel","DomSanitizer","NxVideoModule","getNxDropdownNonFunctionValueError","Error","NxDropdownControl","isMultiSelect","NxFormfieldControl","NxDropdownGroupComponent","NxDropdownItemChange","item","isUserInput","NxDropdownItemComponent","_dropdown","group","_hidden","_mostRecentViewValue","_destroy","onSelectionChange","filterChanges","_showOrHideByFilter","_closedStream","_active","ngAfterViewChecked","viewValue","_onClick","_selectViaInteraction","multiselect","_emitSelectionChangeEvent","hide","search","constraint","filterFn","textContent","trim","deselect","focus","setActiveStyles","setInactiveStyles","getLabel","_isContentEmpty","element","children","_onLabelChange","[id]","[attr.aria-selected]","[class.nx-hidden]","[class.nx-dropdown-item--active]","[class.nx-selected]","[class.nx-multiselect]","NxDropdownClosedLabelDirective","NxDropdownSelectChange","NxDropdownComponent","_ngZone","tabIndex","formFieldComponent","readonly","_focused","_panelOpen","errorState","_scrollTop","_overlayViewportMargin","stateChanges","_optionIds","_tabIndex","currentFilter","_ariaLabel","_style","showFilter","filterPlaceholder","openedChange","_openedStream","optionSelectionChanges","defer","options","onStable","take","switchMap","_positions","_compareWith","o1","o2","_filterFn","itemValue","toLocaleLowerCase","parseInt","_closedDropdownLabel","_selectionModel","_initializeSelection","panelOpen","ngDoCheck","updateErrorState","SelectionModel","_customClosedDropdownLabel","_defaultClosedDropdownLabel","_initKeyManager","added","_resetOptions","isErrorState","oldState","parent","newState","_keyManager","ActiveDescendantKeyManager","withTypeAhead","withWrap","withVerticalOrientation","withHorizontalOrientation","skipPredicate","tabOut","closePanel","panel","_scrollActiveOptionIntoView","activeItem","_onSelect","_setOptionIds","join","wasSelected","isSelected","setActiveItem","_sortValues","_propagateChanges","_setSelectionByValue","isArray","getNxDropdownNonArrayValueError","currentValue","_selectValue","correspondingOption","isDevMode","fallbackValue","valueToEmit","options_1","toArray","sort","a","openPanel","_triggerRect","_highlightCorrectOption","_calculateScrollTop","panelBody","scrollTop","empty","offset","_getItemOffset","panelHeight","offsetHeight","middleOfPanel","activeItemRect","containerElement","height","activeOptionIndex","activeItemIndex","itemRect","labelCount","_countGroupLabelsBeforeOption","groups","_getOptionScrollPosition","optionIndex","optionGroups","optionsArray","groupCounter","optionHeight","currentScrollPosition","optionOffset","querySelector","Math","max","setDescribedByIds","ids","ariaDescribedby","setAriaLabel","_getAriaLabel","isEmpty","hasValue","focused","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","HOME","END","SHIFT","TAB","manager","allHidden","every","Boolean","setFirstItemActive","setLastItemActive","previouslyFocusedIndex","shiftKey","formatValue","_onFilter","_onAttached","overlayDir","positionChange","filterInput","_onFocus","_onBlur","_clearFilter","_getAriaActiveDescendant","[class.nx-dropdown]","[class.is-filled]","[class.has-focus]","[class.nx-dropdown--negative]","[class.nx-dropdown--disabled]","[attr.aria-required]","[attr.aria-label]","[attr.aria-haspopup]","[attr.tabindex]","(focus)","(blur)","NgZone","Attribute","NxFormfieldComponent","CdkConnectedOverlay","NxDropdownModule","NxFormfieldModule","ObserversModule","NxAutocompleteOptionSelected","_uniqueIdCounter","NxAutocompleteOptionComponent","_getTabIndex","[class.nx-active]","[class.nx-disabled]","[style.display]","_uniqueAutocompleteIdCounter","NxAutocompleteSelectedEvent","NxAutocompleteComponent","showPanel","_isOpen","_items","_hasItems","optionSelected","opened","_classList","val","Observable","_itemsSubscription","itms","_setVisibility","hasItems","_vOptions","_cOptions","_setScrollTop","_getScrollTop","_emitSelectEvent","class","ViewChildren","NX_AUTOCOMPLETE_VALUE_ACCESSOR","NxAutocompleteTriggerDirective","getNxAutocompleteMissingPanelError","_element","_overlay","_viewContainerRef","_zone","_dir","_nxFormField","_nxWordField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","_valueChanges","_itemsCb","_debounce","_autocompleteDisabled","_overlayAttached","optionSelections","autocomplete","coerceNumberProperty","_bindAutocompleteItems","clickTarget","formField","_formField","_overlayRef","of","_destroyPanel","_controlValueChangesSubscription","autocompleteDisabled","itemsSubject_1","items","valueChanges","_control","debounceTime","input","result","err","_attachOverlay","_floatLabel","_resetLabel","_closingActionsSubscription","_outsideClickStream","_setTriggerValue","ESCAPE","_resetActiveItem","activeOption","prevActiveItem","_isFieldEnabled","_scrollToOption","_handleInput","parseFloat","_previousValue","activeElement","_handleFocus","floatLabel","offsetTop","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","delay","panelClosingActions","_setValueAndClose","dispose","toDisplay","inputValue","_clearPreviousSelectedOption","skip","updateSize","minWidth","_getHostWidth","_portal","_getOverlayConfig","wasOpen","_getOverlayPosition","_scrollStrategy","_getConnectedElement","withViewportMargin","withPush","getConnectedOverlayOrigin","readOnly","aria-autocomplete","[attr.aria-activedescendant]","[attr.aria-owns]","(focusin)","(input)","Directionality","Host","NxWordComponent","DOCUMENT","ViewportRuler","NxAutocompleteModule","subscriptionValues","hasErrors","inputChanges","currentTextWidth","_validateControlChild","updateCurrentTextWidth","measureCanvas","createElement","ctx","getContext","inputRef","styles","window","getComputedStyle","font","getFontShorthand","newWidth","measureText","paddingRight","paddingLeft","parentMeasurement","min","_popover","repositionError","[class.size-short]","[class.size-regular]","[class.size-long]","[class.is-focused]","[class.has-dropdown]","NxFormfieldErrorDirective","HostBinding","NxNaturalLanguageFormComponent","resizeEvent$","updatePopoversSubscription","onResize","subjects","_words","word","updatePositionPopovers","resizeObservable","throttleTime","resizeWords","[class.nx-natural-language-form--small]","[class.nx-natural-language-form--large]","NxNaturalLanguageFormModule","NxInputModule","ICONS","NxMessageComponent","_context","_showIcon","_closable","_icon","getIconName","_emitCloseEvent","[class.context-info]","[class.context-error]","[class.context-success]","[class.context-warning]","[class.nx-message--closable]","NxMessageModule","NxPageSearchComponent","buttonClick","_buttonLabel","_hideSearchButton","_buttonLayout","_contentLayout","hideSearchButton","onButtonClick","NxPageSearchModule","NxGridModule","NxRatingComponent","_startLabel","_endLabel","newAriaLabels","setSelection","handleKeyUp","rating","getAriaLabel","ariaLabel","[class.nx-rating--negative]","[class.nx-rating--disabled]","NxRatingModule","NxNumberStepperIntl","decrementAriaLabel","incrementAriaLabel","NxAutoResizeDirective","_cdr","_resize","updateInputWidth","bind","_addEventListener","_removeEventListener","resize","metrics","padding","sumStyles","border","borderLeftWidth","borderRightWidth","parsed","Number","isNaN","right","SIZE_MAPPING","big","normal","STYLE_MAPPING","regular","bold","light","INPUT_CLASSES","ALLOWED_CHARACTERS","RegExp","CUSTOM_VALUE_ACCESSOR","NxNumberStepperComponent","CUSTOM_VALIDATOR","NG_VALIDATORS","nextUniqueId","_intl","_step","_min","_max","_leadingZero","inputClassNames","inputId","ariaDescribedBy","_intlSubscription","setInputValue","triggerResize","ngContentWrapper","leadingZero","numberInput","pad","onInputChange","validateUserInput","increment","isBetweenLimits","getNextGreaterValue","enforceLimits","autoResize","decrement","getNextLowerValue","start","isValidStep","Decimal","minus","toNumber","toNearest","ROUND_DOWN","plus","ROUND_UP","isMinimum","isMaximum","valueDec","checkValue","mod","userInputToNumber","_validateFn","nxNumberStepperFormatError","nxNumberStepperStepError","validate","c","NxNumberStepperPrefixDirective","NxNumberStepperSuffixDirective","NxNumberStepperModule","DefaultPaginationTexts","previous","ofLabel","NX_PAGINATION_TEXTS","InjectionToken","NxPaginationUtils","_pagesToShow","_elipsisText","_classExpanded","getPages","currentPage","totalPages","getStartArray","getMiddleArray","getEndArray","pageNumber","middle","createPaginationItem","end","currentItemToShow","showEllipsis","endItem","counterPages","startItem","classExpanded","NxPaginationComponent","paginationTexts","paginationUtilsService","_type","totalNumberPages","nxGoPrev","nxGoNext","nxGoPage","_page","_count","calculateTotalPages","_perPage","getMin","getMax","ceil","onPage","onPrev","_isPaginationPreviousDisabled","onNext","_isPaginationNextDisabled","onFirst","onLast","lastPage","getPaginationItemClasses","page","is-ellipsis","nx-pagination__item--expanded-view","getPaginationNumberClasses","is-active","nx-pagination__ellipsis","nx-pagination__link","isPaginationVisible","count","isPaginationCompactVisible","includes","isPaginationContainerVisible","NxPaginationModule","TableDataSource","_datachange","connect","disconnect","DataSource","NxDynamicTableComponent","_tableStyles","_dataChange","BehaviorSubject","nxRowClick","_data","_displayedColumns","keys_1","cArray_1","key","title","_columnKeys","column","_dataSource","handleRowClick","row","isNumeric","NxDynamicTableModule","CdkTableModule","ScrollDispatchModule","NxAccordionDirective","DEFAULT_TYPE$4","[class.nx-accordion]","CdkAccordion","nxAccordionAnimations","bodyExpansion","state","visibility","indicatorRotate","NxExpansionPanelBodyDirective","undefined","NxExpansionPanelComponent","accordion","_expansionDispatcher","_accordionStyle","_headerId","_inputChanges","DEFAULT_TYPE$5","lazyContent","expanded","getOpenState","[class.nx-expanded]","[class.nx-expansion-panel--light]","[class.nx-expansion-panel--regular]","[class.nx-expansion-panel--negative]","useValue","ɵ0","SkipSelf","CdkAccordionItem","NxExpansionPanelHeaderComponent","hideToggle","isExpanded","_getPanelId","keydown","[attr.aria-controls]","NxExpansionPanelDescriptionDirective","NxExpansionPanelTitleDirective","NxAccordionModule","PortalModule","NxTabGroupBase","NxTabComponent","_tabGroup","_contentPortal","isActive","_implicitContent","NxTabBodyComponent","portalOutlet","content","CdkPortalOutlet","NxTabChangeEvent","NxTabGroupComponent","_selectedIndex","_indexToSelect","_autoselect","_mobileAccordion","_showAccordion","selectedIndexChange","selectedTabChange","focusChange","_tabsSubscription","_tabLabelSubscription","_groupId","_switchAppearance","innerWidth","_subscribeToTabLabels","tabs","_clampTabIndex","ngAfterContentChecked","indexToSelect","isFirstRun_1","tab","focusChanged","selectedIndex","tabHeader","focusIndex","getTabIndex","idx","_getTabLabelId","_getTabContentId","viewPortWidth","_showMobileVersion","_showDesktopVersion","_panelOpened","NxTabLabelDirective","NxTabHeaderComponent","selectFocusedIndex","indexFocused","updateActiveItemIndex","_isValidIndex","FocusKeyManager","labels","handleKeydown","autoselect","NxTabNavBarComponent","NxTabLinkDirective","_tabNavBar","[class.nx-tab-link]","[class.is-active]","[attr.aria-current]","NxTabsModule","mapping","baseClasses","classNames","_classNamesSanitized","appendClasses","NxCardComponent","tabindex","selectedChange","_tabindex","_selectable","_toggleSelected","selectable","_getTabindex","[class.is-selectable]","[class.is-selected]","(keydown.enter)","NxCardModule"],"mappings":"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","sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\n\n@NgModule({\n})\nexport class NdbxModule {\n\n  public static forRoot(): ModuleWithProviders {\n\n    return {\n      ngModule: NdbxModule\n    };\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  ElementRef,\n  ChangeDetectorRef\n} from '@angular/core';\n\n/** Type of a button. */\nexport type NxButtonType = 'primary' |Â 'secondary' | 'tertiary' | 'cta' | 'emphasis';\n\n/** Size of a button. */\nexport type NxButtonSize = 'small' | 'small-medium' | 'medium' | 'large' ;\n\nconst DEFAULT_SIZE = 'medium';\nconst DEFAULT_TYPE = 'primary';\n\nexport const NX_BUTTON_HOST_BINDINGS = {\n    '[class.nx-button--primary]' : 'type === \"primary\"',\n    '[class.nx-button--secondary]' : 'type === \"secondary\"',\n    '[class.nx-button--tertiary]' : 'type === \"tertiary\"',\n    '[class.nx-button--cta]' : 'type === \"cta\"',\n    '[class.nx-button--emphasis]' : 'type === \"emphasis\"',\n\n    '[class.nx-button--large]' : 'size === \"large\"',\n    '[class.nx-button--medium]' : 'size === \"medium\"',\n    '[class.nx-button--small-medium]' : 'size === \"small-medium\"',\n    '[class.nx-button--small]' : 'size === \"small\"',\n\n    '[class.nx-button--block]' : 'block',\n    '[class.nx-button--negative]' : 'negative',\n  };\n\n/** @docs-private */\nexport class NxButtonBase {\n  private _classNames: string;\n\n  /** @docs-private */\n  type: NxButtonType = DEFAULT_TYPE;\n\n  /** @docs-private */\n  size: NxButtonSize = DEFAULT_SIZE;\n\n  /** @docs-private */\n  negative: boolean = false;\n\n  /** @docs-private */\n  block: boolean = false;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) { }\n\n  public set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n\n    const [type = null] = this._classNames.match(/primary|secondary|tertiary|cta|emphasis/) || [DEFAULT_TYPE];\n    this.type = type as NxButtonType;\n\n    const [size = null] = this._classNames.match(/small-medium|small|medium|large/) || [DEFAULT_SIZE];\n    this.size = size as NxButtonSize;\n\n    this.negative = /negative/.test(this._classNames);\n    this.block = /block/.test(this._classNames);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  public get classNames(): string {\n    return this._classNames;\n  }\n\n  /**\n   * @docs-private\n   * getter used for the modal component as a quickfix\n   * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive\n   * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a\n   * way to reach the elementRef of the component until the modal gets refactored.\n   */\n  get elementRef() {\n    return this._elementRef;\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { NX_BUTTON_HOST_BINDINGS, NxButtonBase } from './button-base';\n\n@Component({\n  templateUrl: './button.html',\n  styleUrls: ['button.scss'],\n  // tslint:disable-next-line:component-selector\n  selector: 'button[nxButton]',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: NX_BUTTON_HOST_BINDINGS,\n  inputs: ['classNames:nxButton']\n})\n\nexport class NxButtonComponent extends NxButtonBase {\n  constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef) {\n    super(changeDetectorRef, elementRef);\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { NxButtonBase, NX_BUTTON_HOST_BINDINGS } from './button-base';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[nxIconButton]',\n  templateUrl: './button.html',\n  styleUrls: ['button.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: NX_BUTTON_HOST_BINDINGS,\n  inputs: ['classNames:nxIconButton']\n})\nexport class NxIconButtonComponent extends NxButtonBase {\n  constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef) {\n    super(changeDetectorRef, elementRef);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxButtonComponent } from './button.component';\nimport { NxIconButtonComponent } from './icon-button.component';\n\n@NgModule({\n  declarations: [ NxButtonComponent, NxIconButtonComponent ],\n  exports: [ NxButtonComponent, NxIconButtonComponent ]\n})\nexport class NxButtonModule { }\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ChangeDetectorRef,\n  AfterContentInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  Self,\n  OnInit, ContentChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\nlet nextId = 0;\n\nexport class NxCheckboxChangeEvent {\n  constructor(\n  /** The checked value of the checkbox. */\n  public checked: boolean,\n  /** The value of the checkbox. */\n  public value: string,\n  /** The component instance of the checkbox which emitted the change event. */\n  public checkbox: NxCheckboxComponent\n  ) {}\n}\n\n/** Size of the label. */\nexport type NxCheckboxLabelSize = 'small' | 'large';\n\n@Component({\n  selector: 'nx-checkbox-group',\n  templateUrl: 'checkbox-group.component.html',\n  styleUrls: ['checkbox-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox-group]': 'true',\n    '[class.nx-checkbox-group--negative]': 'negative',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-labelledby]': 'this._label?.id  || null',\n    '[attr.role]': '\"group\"',\n  }\n})\nexport class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n  @ContentChildren(forwardRef(() => NxCheckboxComponent), {descendants: true})\n  _checkboxes: QueryList<NxCheckboxComponent>;\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {})\n   _label: NxLabelComponent;\n\n  readonly _stateChanges = new Subject<void>();\n  @Output() selectionChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  private _id: string = `nx-checkbox-group-${nextId++}`;\n  /** Sets the Id of the checkbox group. */\n  @Input()\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string;\n  /** Sets the name of the checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Disables all checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._label) {\n      this._label.disabled = this._disabled;\n    }\n    this._stateChanges.next();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n    this._stateChanges.next();\n  }\n\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _labelSize: NxCheckboxLabelSize;\n  /** Sets the label size of the checkboxes inside the group */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._stateChanges.next();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return this._labelSize;\n  }\n\n  /** Whether the nx-checkbox-group are required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  private _value: any;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.ngControl) {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._onChange(this._value);\n      });\n    }\n\n    this._updateSelectedCheckboxFromValue();\n    this._checkboxes.changes.subscribe(() => {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      if (this.ngControl) {\n        this.ngControl.control.setValue(this._value);\n      }\n      this._updateSelectedCheckboxFromValue();\n    });\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    if (this._value) {\n      this._value = value;\n    }\n    this._updateSelectedCheckboxFromValue();\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n\n  private _onTouched: () => any = () => {};\n\n  private _updateSelectedCheckboxFromValue(): void {\n    if (this._checkboxes !== null) {\n      if (this._value) {\n        this._checkboxes.map(checkbox => {\n          if (this._value.indexOf(checkbox.value) !== -1) {\n            checkbox.checked = true;\n          }\n        });\n      }\n    }\n  }\n\n  /** @docs-private */\n  change(value) {\n    value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n    this._onChange(value);\n    if (this._onTouched) {\n      this._onTouched();\n    }\n    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));\n  }\n}\n\n@Component({\n  selector: 'nx-checkbox',\n  templateUrl: 'checkbox.component.html',\n  styleUrls: ['checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox]': 'true',\n    '[class.disabled]': 'disabled',\n    '[class.nx-checkbox--label-large]': 'labelSize === \"large\"',\n    '[class.nx-checkbox--negative]': 'negative',\n    '[attr.required]': 'required',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCheckboxComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit {\n  private _parentChangeSubscription: Subscription;\n  private _id: string = (nextId++).toString();\n  private _disabled: boolean = false;\n  private _negative: boolean = false;\n  private _labelSize: NxCheckboxLabelSize = 'small';\n  private _checked = false;\n  private _name: string = null;\n\n  /**\n   * Id of the checkbox.\n   *\n   * If not set, the checkbox gets an incremented value by default.\n   */\n  @Input()\n  set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id() {\n    return `nx-checkbox-${this._id}`;\n  }\n\n  /** Name of the checkbox. */\n  @Input()\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name(): string {\n    return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;\n  }\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;\n  }\n\n  /**\n   * Sets the label size of the checkbox. Default value: small\n   */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;\n  }\n\n  /**\n   * Whether the checkbox has negative styling.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;\n  }\n\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      if (this._indeterminate) {\n        this._setIndeterminate(false);\n      }\n      this._setChecked(newValue);\n    }\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  private _indeterminate = false;\n\n  /** Whether the checkbox is indeterminated. */\n  @Input()\n  set indeterminate(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._indeterminate !== newValue) {\n      if (this._checked) {\n        this._setChecked(false);\n      }\n      this._setIndeterminate(newValue);\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  /** Sets the value of the checkbox. Default value is the checked status. */\n  @Input()\n  get value(): string {\n    return this._value ? this._value : this.checked.toString();\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _value: string;\n\n  /** An event emitted when the indeterminate value has changed */\n  @Output()\n  indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits the boolean checked value of the changed checkbox.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits a NxCheckboxChangeEvent.\n   */\n  @Output()\n  checkboxChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public checkboxGroup: NxCheckboxGroupComponent) {\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    return !!(this.checkboxGroup && this.checkboxGroup.ngControl && this.checkboxGroup.ngControl.invalid\n      && this.checkboxGroup.ngControl.touched);\n  }\n\n  ngOnInit() {\n    if (this.checkboxGroup) {\n      this.name = this.checkboxGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  private _setIndeterminate(value: boolean) {\n    this._indeterminate = value;\n    this.indeterminateChange.emit(this._indeterminate);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _setChecked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  public toggle() {\n    this.checked = !this.checked;\n    this.onChangeCallback(this.checked);\n    if (this.checkboxGroup !== null) {\n      this.checkboxGroup.change(this);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  _onInputClick(event): void {\n    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.toggle();\n      this.checkedChange.emit(this._checked);\n      this.checkboxChange.emit(this._createChangeEvent(this._checked));\n    }\n  }\n\n  /**@docs-private */\n  private _createChangeEvent(checkedValue: boolean): NxCheckboxChangeEvent {\n    const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);\n    event.checked = checkedValue;\n    event.value = this.value;\n    event.checkbox = this;\n    return event;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxCheckboxComponent } from './checkbox.component';\nimport { NxCheckboxGroupComponent } from './checkbox.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxLabelModule } from '@allianz/ngx-ndbx/base';\n\n@NgModule({\n  declarations: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  exports: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    NxLabelModule\n  ]\n})\nexport class NxCheckboxModule { }\n","// Change event object emitted by NxRadioComponent and NxRadioGroupComponent\nimport { NxRadioComponent } from './radio-button';\n\n/** The change event object emitted by the radio group and radio button. */\nexport class NxRadioChange {\n  source: NxRadioComponent;\n  value: any;\n\n  /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */\n  constructor(source: NxRadioComponent, value: any) {\n    this.source = source;\n    this.value = value;\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl, NgForm,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxRadioChange } from './radio-change';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\n/** Label Size Types */\nexport type LabelSize  = 'small' | 'big';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-radio-group',\n  templateUrl: './radio-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'radiogroup',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[class.nx-radio-group--negative]': 'negative',\n    '[attr.aria-labelledby]': 'this._label?.id  || null'\n  },\n  styleUrls: [ 'radio-button-group.scss' ]\n})\nexport class NxRadioGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {})\n  _label: NxLabelComponent;\n\n  // emits when the internal state changes on properties which are relevant\n  // for the radio buttons so that they can mark themself for check\n  readonly _stateChanges = new Subject<void>();\n\n  private _id: string = `nx-radio-group-${nextId++}`;\n  /** Sets the Id of the radio group. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _disabled: boolean = false;\n\n  /** Whether every radio button in this group should be disabled. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    // inform childs about the change where CD should be triggered\n    this._stateChanges.next();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the radio group should have negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _required: boolean = false;\n  /** Sets if at least an option should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._stateChanges.next();\n  }\n  get required(): boolean {\n    return this._required;\n  }\n\n  /** An event is dispatched on each group value change. */\n  @Output('nxGroupValueChange') groupValueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _name: string = `nx-radio-group-${nextId++}`;\n  private _value: any = null;\n  // The currently selected radio button; should match _value\n  private _selected: NxRadioComponent | null = null;\n\n  @ContentChildren(forwardRef(() => NxRadioComponent), {descendants: true})\n  _radios: QueryList<NxRadioComponent>;\n\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched: () => any = () => {};\n\n  get name(): string {\n    return this._name;\n  }\n\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._stateChanges.next();\n  }\n\n  get value(): any { return this._value; }\n\n  /** Sets the value of the selected radion button in this group (Default: null). */\n  @Input('nxValue')\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() public _parentForm: NgForm,\n              @Optional() public _parentFormGroup: FormGroupDirective) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._updateSelectedRadioFromValue();\n    this._checkSelectedRadioButton();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group */\n  change(value) {\n    this.value = value;\n    this._onChange(value);\n    this.groupValueChange.emit(new NxRadioChange(this._selected, this._value));\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group. */\n  touch() {\n    if (this._onTouched) {\n      this._onTouched();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  private _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'nx-radio',\n  templateUrl: 'radio-button.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ 'radio-button.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRadioComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[attr.required]': 'required',\n    '[class.nx-radio-button--small-label]': 'labelSize === \"small\"',\n    '[class.nx-radio-button--big-label]': 'labelSize === \"big\"',\n    '[class.nx-radio--negative]': 'negative',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null'\n  }\n})\nexport class NxRadioComponent implements ControlValueAccessor, OnInit, OnDestroy {\n\n  private _parentChangeSubscription: Subscription;\n\n  private _id: string = `nx-radio-${nextId++}`;\n  /** Sets the id of the radio component. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  /** @docs-private */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** @docs-private */\n  get labelId(): string {\n    return `${this.id}-label`;\n  }\n\n  private _name: string = null;\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input('name')\n  set name(value: string) {\n    if (this._name !== value) {\n      this._name = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get name(): string {\n    return (this.radioGroup && this.radioGroup.name) ? this.radioGroup.name : this._name;\n  }\n\n  private _labelSize: LabelSize = 'big';\n  /** Sets the label size of the radio button.\n   * The default value is `big`.\n  */\n  @Input()\n  set labelSize(value: LabelSize) {\n    if (this._labelSize !== value) {\n      this._labelSize = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelSize(): LabelSize {\n    return this._labelSize;\n  }\n\n  private _negative:  boolean = false;\n  /**\n   * Whether the negative set of styles should be used.\n   *\n   * If the radio button is placed in a radio group, the negative value\n   * is overwritten by the group's negative value.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this.radioGroup ? this.radioGroup.negative : this._negative;\n  }\n\n  /** An event is dispatched on each value change. */\n  @Output('nxValueChange') valueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _value: any = null;\n  private _checked: boolean = false;\n  private _disabled: boolean = false;\n  private _required: boolean = false;\n\n  get value(): any {\n    return this._value;\n  }\n\n  /** Sets the value of the form control element (Default: null). */\n  @Input('nxValue')\n  set value(value: any) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChangeCallback(value);\n    }\n  }\n\n  /** @docs-private */\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  /** Whether the radio component is selected. */\n  @Input('nxChecked')\n  set checked(value: boolean) {\n    if (this._checked !== value) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** @docs-private */\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup && this.radioGroup.disabled);\n  }\n\n  /** Whether the radio button should be disabled or not. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n\n  /** Sets if at least a radio button should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = value;\n    // needed when the outer component is set to onPush because it is a native property\n    // on the host element\n    this._changeDetectorRef.markForCheck();\n  }\n\n  constructor(@Optional() public radioGroup: NxRadioGroupComponent,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      this.name = this.radioGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.radioGroup._stateChanges.subscribe(()  => {\n        this._changeDetectorRef.markForCheck();\n      });\n\n      if (this.radioGroup.value === this._value) {\n        this._checked = true;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === this._value) {\n      this._checked = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n\n    if (this.radioGroup) {\n      this.radioGroup.touch();\n    }\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n    this._checked = true;\n    this.valueChange.emit(new NxRadioChange(this, this._value));\n    this.onChangeCallback(this.value);\n\n    if (this.radioGroup && this.value !== this.radioGroup.value) {\n      this.radioGroup.change(this.value);\n    }\n  }\n\n  _onInputClick(event: Event) {\n    // make sure click event propagation on the visually hidden input\n    // are stopped to prevent multiple events bubbling up.\n    event.stopPropagation();\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    const form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);\n    return !!(this.radioGroup && this.radioGroup.ngControl && this.radioGroup.ngControl.invalid\n      && (this.radioGroup.ngControl.touched || (form && form.submitted)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxRadioComponent } from './radio-button';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxRadioGroupComponent } from './radio-button';\n\n@NgModule({\n  declarations: [ NxRadioComponent, NxRadioGroupComponent ],\n  exports: [ NxRadioComponent, NxRadioGroupComponent ],\n  imports: [\n    NxIconModule\n  ]\n})\nexport class NxRadioModule { }\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n/** A type that specifies the font size of a copytext. */\nexport type NxCopytextType = 'small' | 'medium' | 'normal' | 'large';\n\nconst DEFAULT_TYPE = 'normal';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'p[nxCopytext]',\n  styleUrls: ['copytext.component.scss'],\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-copy]': 'true',\n    '[class.nx-copy--small]': 'type === \"small\"',\n    '[class.nx-copy--medium]': 'type === \"medium\"',\n    '[class.nx-copy--normal]': 'type === \"normal\"',\n    '[class.nx-copy--large]': 'type === \"large\"',\n    '[class.nx-copy--negative]': 'negative',\n  }\n})\nexport class NxCopytextComponent {\n  private _classNames: string;\n\n  /** @docs-private */\n  type: NxCopytextType = DEFAULT_TYPE;\n\n  /** @docs-private */\n  negative: boolean = false;\n\n  /**\n   * Sets the type and whether the negative set of styling should be used.\n   *\n   * You can combine the values of type NxCopytextType and 'negative'.\n   *\n   * Default type: 'normal'\n   */\n  @Input('nxCopytext')\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n    this._classNames = value;\n    const [type = null] = this._classNames.match(/small|medium|normal|large/) || [DEFAULT_TYPE];\n    this.type = type as NxCopytextType;\n\n    this.negative = !!this._classNames.match(/negative/);\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { NxCopytextComponent } from './copytext.component';\n\n@NgModule({\n  declarations: [ NxCopytextComponent ],\n  exports: [ NxCopytextComponent ]\n})\nexport class NxCopytextModule { }\n","import { Component } from '@angular/core';\nimport { Input } from '@angular/core';\n\n/** Types of headlines */\nexport type HeadlineType = 'page' | 'page-bold-caps' | 'section' | 'subsection-large'\n                    | 'subsection-medium' | 'subsection-small' | 'subsection-xsmall';\n\nconst DEFAULT_TYPE = 'section';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nxHeadline]',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['headline.component.scss'],\n  host: {\n    '[class.nx-heading--page]': 'type === \"page\"',\n    '[class.nx-heading--page-bold-caps]': 'type === \"page-bold-caps\"',\n    '[class.nx-heading--section]': 'type === \"section\"',\n    '[class.nx-heading--subsection-large]': 'type === \"subsection-large\"',\n    '[class.nx-heading--subsection-medium]': 'type === \"subsection-medium\"',\n    '[class.nx-heading--subsection-small]': 'type === \"subsection-small\"',\n    '[class.nx-heading--subsection-xsmall]': 'type === \"subsection-xsmall\"',\n\n    '[class.nx-heading--negative]': 'negative',\n  }\n})\n\nexport class NxHeadlineComponent {\n  private _classNames: string;\n  /** @docs-private */\n  public type: HeadlineType = DEFAULT_TYPE;\n  /** @docs-private */\n  public negative: boolean = false;\n\n  /** Changes the type of the headline which affects the visual appearance.\n   * You can combine a HeadlineType and 'negative'. */\n  @Input('nxHeadline')\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n    const typeRegex = /page-bold-caps|page|section|subsection-large|subsection-medium|subsection-small|subsection-xsmall/;\n    const [type = null] = this._classNames.match(typeRegex) || [DEFAULT_TYPE];\n    this.type = type as any;\n\n    this.negative = !!this._classNames.match(/negative/);\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxHeadlineComponent } from './headline.component';\n\n@NgModule({\n  declarations: [ NxHeadlineComponent ],\n  exports: [ NxHeadlineComponent ]\n})\nexport class NxHeadlineModule { }\n","import { NxIconComponent } from '@allianz/ngx-ndbx/icon';\nimport { AfterContentInit, ChangeDetectionStrategy, Component, ContentChild, ElementRef, Renderer2 } from '@angular/core';\n\nimport { MappedStyles } from '@allianz/ngx-ndbx/core';\n\n\nconst MAPPING = {\n  'black': 'nx-link--black',\n  'negative': 'nx-link--negative',\n  'text': 'nx-link--text',\n  'block': 'nx-link--block',\n  'icon-right': 'nx-link--icon-right'\n};\n\nconst DEFAULT_CLASSES = [ 'nx-link' ];\n\n@Component({\n  selector: 'nx-link',\n  styleUrls: [ './link.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  inputs: ['classNames: nxStyle']\n})\n\nexport class NxLinkComponent extends MappedStyles implements AfterContentInit {\n  private _styles: string;\n\n  /** @docs-private */\n  @ContentChild(NxIconComponent) icon: NxIconComponent;\n\n  /**\n   * Sets the style of the link, thereby altering the visual appearance.\n   *\n   * You can use any combination of 'black', 'icon-right', 'negative', 'text' and 'block' (deprecated).\n   */\n  classNames;\n\n  constructor(_elementRef: ElementRef, protected _renderer: Renderer2) {\n    super(MAPPING, DEFAULT_CLASSES, _elementRef, _renderer);\n  }\n\n  ngAfterContentInit() {\n    // Add a specific link class that the css gets more specific than the nx-icon css\n    const icons = this.elementRef.nativeElement.querySelectorAll('nx-icon');\n    for (let i = 0; i < icons.length; i++) {\n      this._renderer.addClass(icons[i], 'nx-link__icon');\n    }\n  }\n\n  /**\n   * @docs-private\n   * getter used for the modal component as a quickfix\n   * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive\n   * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a\n   * way to reach the elementRef of the component until the modal gets refactored.\n   */\n  get elementRef() {\n    return this._elementRef;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxLinkComponent } from './link.component';\n\n@NgModule({\n  declarations: [ NxLinkComponent ],\n  exports: [ NxLinkComponent ]\n})\nexport class NxLinkModule {\n}\n","/** @docs-private */\nexport abstract class ToggleButton {\n  id;\n  value;\n  checked;\n  name;\n  negative;\n  disabled;\n  tabIndex;\n  checkedChange;\n  selectionChange;\n  toggleButton;\n  abstract toggle(event);\n  abstract setGroupSelection();\n\n}\n","import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n  AfterViewInit,\n  ChangeDetectorRef,\n  OnDestroy,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { takeUntil, tap, startWith, filter } from 'rxjs/operators';\nimport { merge, Subject } from 'rxjs';\n\nimport { ToggleButton } from '../circle-toggle/toggle-button';\nimport { ToggleChangeEvent } from '../circle-toggle/circle-toggle.component';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-circle-toggle-group',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['./circle-toggle-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCircleToggleGroupComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.is-responsive]': 'responsive',\n    '[class.is-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-labelledby]': 'name',\n    '[attr.name]': 'name',\n    '[attr.id]': 'id',\n    '[class.nx-circle-toggle-group]': 'true',\n    'role': 'radiogroup'\n  }\n})\nexport class NxCircleToggleGroupComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\n\n  @ContentChildren(ToggleButton) private _buttons: QueryList<ToggleButton>;\n\n  private _id = `nx-circle-toggle-group-${nextId++}`;\n\n  /**\n   * Id of the circle toggle group.\n   *\n   * If not set, the circle toggle group gets an incremented value by default.\n   */\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _destroyed: Subject<void> = new Subject();\n\n  /** An event emitted when the selection changes. Outputs the value of the currently selected button. */\n  @Output()\n  valueChange: EventEmitter<any> = new EventEmitter();\n\n  private _name: string = `toggle-group-${nextId++}`;\n\n  /** Name that is used for accessibility. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this.updateToggleButtonsNames();\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean;\n\n  /** Whether the circle toggle group is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n    if (this.buttons) {\n      this.buttons.forEach(button => button.disabled = value);\n    }\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  _negative: boolean = false;\n  /** Whether the circle toggle group uses the negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.negative !== newValue) {\n      this._negative = newValue;\n    }\n    if (this.buttons) {\n      this.buttons.forEach(button => button.negative = value);\n    }\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _value;\n  /** The value of the selected circle toggle in the circle toggle group. */\n  @Input()\n  set value(value: string) {\n    this.writeValue(value);\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  private _responsive: boolean = true;\n  /** Whether the circle toggle group has a responsive behavior. */\n  @Input()\n  set responsive(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.responsive) {\n      this._responsive = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get responsive(): boolean {\n    return this._responsive;\n  }\n\n  private onChangeCallback = (value: string) => { };\n  private onTouchedCallback = () => { };\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  writeValue(value: any) {\n    if (this.value !== value) {\n      this._value = value;\n      this.notifySelectedChild(value);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  ngAfterViewInit() {\n\n    this.subscribeToSelectionChanges();\n\n    // react if a content child is deleted, added etc.\n    this.buttons.changes\n      .pipe(\n        startWith(this.buttons),\n        filter(toggles => toggles.length > 0),\n        tap(toggles =>\n          Promise.resolve().then(() => {\n            toggles.forEach(toggle => toggle.toggleButton.resetClasses());\n            this.buttons.first.toggleButton.setFirstButton();\n            this.buttons.last.toggleButton.setLastButton();\n          })\n        ),\n        takeUntil(this._destroyed))\n      .subscribe(() => this.subscribeToSelectionChanges());\n  }\n\n  /** @docs-private */\n  subscribeToSelectionChanges() {\n    const changedOrDestroyed = merge(this.buttons.changes, this._destroyed);\n\n    merge(...this.buttons.map(button => button.selectionChange))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe((change: ToggleChangeEvent) => {\n        this.onChangeCallback(change.value);\n        this.valueChange.emit(change.value);\n      });\n  }\n\n  /**\n   * @docs-private\n   * inform the selected button if the group selection is set programattically at the beginning\n   */\n  notifySelectedChild(newValue: string) {\n    if (this.buttons) {\n      const selected = this.buttons.find((button) => button.value === newValue);\n      if (selected) {\n        selected.setGroupSelection();\n      }\n    }\n  }\n\n  /** @docs-private */\n  updateToggleButtonsNames(): void {\n    if (this.buttons) {\n      this.buttons.forEach(button => button.name = this.name);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  get selectedButton(): ToggleButton {\n    return this.buttons ? this.buttons.find(button => button.checked) : null;\n  }\n\n  /** @docs-private */\n  get buttons() {\n    return this._buttons;\n  }\n}\n\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-mobile-toggle-button',\n  templateUrl: 'mobile-toggle-button.component.html',\n  styleUrls: ['mobile-toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-disabled]': 'disabled',\n    '[class.is-negative]': 'negative',\n    '[class.is-first]': 'isFirst',\n    '[class.is-last]': 'isLast',\n    '[class.is-flipped]': 'checked'\n  }\n})\nexport class NxMobileToggleButtonComponent {\n\n  @Input()\n  checked: boolean = false;\n\n  @Input()\n  negative: boolean = false;\n\n  @Input()\n  disabled: boolean = false;\n\n  @Input()\n  hint: string;\n\n  @Input()\n  label: string;\n\n  /** @docs-private */\n  isFirst: boolean;\n\n  /** @docs-private */\n  isLast: boolean;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  setFirstButton() {\n    this.isFirst = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  setLastButton() {\n    this.isLast = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  resetClasses() {\n    this.isFirst = false;\n    this.isLast = false;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input, Output, ViewChild, Optional, OnInit, OnDestroy, AfterViewInit, HostListener, ChangeDetectorRef, ChangeDetectionStrategy\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\nimport { ToggleButton } from './toggle-button';\nimport { NxCircleToggleGroupComponent } from '../circle-toggle-group/circle-toggle-group.component';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';\n\nexport class ToggleChangeEvent {\n  /** A toggle button */\n  button: ToggleButton;\n\n  /** The value of the toggle button that is sent with the event. */\n  value: string;\n\n  constructor(button, value) {\n    this.button = button;\n    this.value = value;\n  }\n}\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-circle-toggle',\n  templateUrl: 'circle-toggle.component.html',\n  styleUrls: ['circle-toggle.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: ToggleButton,\n      useExisting: forwardRef(() => NxCircleToggleComponent)\n    },\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCircleToggleComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.nx-toggle-circle]': 'true',\n    '[class.in-group]': 'inGroup',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-responsive]': 'responsive'\n  }\n})\nexport class NxCircleToggleComponent extends ToggleButton implements\nOnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  private _id: string = `toggle-button-${nextId++}`;\n\n  /** @docs-private */\n  inGroup: boolean = false;\n\n  /**\n   * Id of the circle toggle.\n   *\n   * If not set, the circle toggle gets an incremented value by default.\n   */\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string = null;\n\n  /** Name that is used for accessibility. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * An event that is emitted when the checked state fo the circle toggle changes.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>();\n\n  /**\n   * An event that is emitted when the checked state of the circle toggle changes.\n   * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).\n   */\n  @Output()\n  selectionChange = new EventEmitter<ToggleChangeEvent>();\n\n  _checked: boolean = false;\n  /** Whether the circle toggle is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.checked !== newValue) {\n      this._checked = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  private _value: string = null;\n\n  /** The value that is used in the model. */\n  @Input()\n  set value(newValue: string) {\n    this._value = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): string {\n    return this._value;\n  }\n\n  private _iconName: string = null;\n  /** Id of the icon that should be displayed. */\n  @Input('icon')\n  set iconName(name: string) {\n    this._iconName = name;\n    this._changeDetectorRef.markForCheck();\n  }\n  get iconName(): string {\n    return this._iconName;\n  }\n\n  private _svg: string = null;\n\n  /** SVG that is displayed if the circle toggle is unchecked. */\n  @Input()\n  set svg(src: string) {\n    this._svg = src;\n    this._changeDetectorRef.markForCheck();\n  }\n  get svg(): string {\n    return this._svg;\n  }\n\n  private _svgChecked: string = null;\n\n  /** SVG that is displayed if the circle toggle is checked. */\n  @Input()\n  set svgChecked(src: string) {\n    this._svgChecked = src;\n    this._changeDetectorRef.markForCheck();\n  }\n  get svgChecked(): string {\n    return this._svgChecked;\n  }\n\n  private _label: string = null;\n\n  /** Label displayed below the circle. */\n  @Input()\n  set label(value: string) {\n    this._label = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get label(): string {\n    return this._label;\n  }\n\n  private _hint: string = null;\n\n  /** Additional hint displayed below the label. */\n  @Input()\n  set hint(value: string) {\n    this._hint = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get hint(): string {\n    return this._hint;\n  }\n\n  private _negative;\n\n  /** Whether the circle toggle uses the negative set of styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  private _responsive;\n\n  /** Whether the circle toggle has a responsive behavior. */\n  @Input()\n  set responsive(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.responsive !== newValue) {\n      this._responsive = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get responsive() {\n    return this._responsive;\n  }\n\n  private _disabled: boolean;\n\n  /** Whether the circle toggle is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.disabled !== newValue) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /** @docs-private */\n  @ViewChild(NxMobileToggleButtonComponent)\n  toggleButton: NxMobileToggleButtonComponent;\n\n  private _hover: boolean = false;\n\n  /** touched is set to true on touch devices. */\n  _touched: boolean = false;\n\n  /** @docs-private */\n  @HostListener('mouseenter') onMouseEnter() {\n    if (!this._touched) {\n      this._hover = true;\n    }\n  }\n\n  /** @docs-private */\n  @HostListener('mouseleave') onMouseLeave() {\n    if (!this._touched) {\n      this._hover = false;\n    }\n  }\n\n  /** @docs-private */\n  @HostListener('touchstart') onTouchStart() {\n    this._touched = true;\n  }\n\n  _removeUniqueSelectionListener: () => void = () => { };\n\n  private onChangeCallback = (checked: boolean) => { };\n  private onTouchedCallback = () => { };\n\n  constructor(/** @docs-private */ @Optional() public toggleGroup: NxCircleToggleGroupComponent,\n    private _checkedDispatcher: UniqueSelectionDispatcher, private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n\n    if (this.toggleGroup) {\n      this.name = this.toggleGroup.name;\n    }\n  }\n\n  ngOnInit() {\n    if (this.toggleGroup) {\n      this.attachListenerForGroup();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.toggleGroup) {\n      Promise.resolve().then(() => {\n        this.inGroup = true;\n        this.negative = this.toggleGroup.negative;\n        this.disabled = this.toggleGroup.disabled;\n        this.responsive = this.toggleGroup.responsive;\n        this.id = this.toggleGroup.id + `-button-${nextId++}`;\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    // function returned by the listener\n    this._removeUniqueSelectionListener();\n  }\n\n  /** @docs-private */\n  attachListenerForGroup() {\n    this._removeUniqueSelectionListener =\n      this._checkedDispatcher.listen((groupId: string, buttonId: string) => {\n        if (this.id !== buttonId && groupId === this.toggleGroup.id) {\n          this.checked = false;\n        }\n      });\n  }\n\n  writeValue(newValue): void {\n    this.checked = newValue;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  toggle(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if ((this.toggleGroup && this.checked) || this.disabled) {\n      return;\n    } else {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this.checkedChange.emit(this.checked);\n      this.selectionChange.emit(new ToggleChangeEvent(this, this.value));\n      if (this.toggleGroup) {\n        this._checkedDispatcher.notify(this.toggleGroup.id, this.id);\n      }\n    }\n  }\n\n  /**\n   * @docs-private\n   *\n   * method called by the group if the internal value of the group is changed programatically,\n   * does not trigger change emission\n   */\n  setGroupSelection() {\n    // propagate changes only if the value in the group is different than the button checked value\n    if (!this.checked) {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this._checkedDispatcher.notify(this.toggleGroup.id, this.id);\n    }\n  }\n\n  /** @docs-private */\n  get svgButton(): boolean {\n    return !!this.svg && !!this.svgChecked;\n  }\n\n  /** @docs-private */\n  get svgUrl(): string {\n    let useFilledSvg = this.checked || (!this.disabled && this._hover);\n    if (this.negative) {\n      useFilledSvg = !useFilledSvg;\n    }\n    return useFilledSvg ? this.svgChecked : this.svg;\n  }\n\n  /** @docs-private */\n  get type() {\n    return this.toggleGroup ? 'radio' : 'checkbox';\n  }\n\n  /** @docs-private */\n  handleEnterKey(event) {\n    if (!this.toggleGroup) {\n      this.toggle(event);\n    }\n  }\n}\n","\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-icon-toggle-button',\n  templateUrl: 'icon-toggle-button.component.html',\n  styleUrls: ['icon-toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-circle-button]': 'true',\n    '[class.is-flipped]': 'checked',\n    '[class.has-checkmark]': '!inGroup',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-negative]': 'negative',\n    '[class.is-touched]': 'touched'\n  }\n})\nexport class NxIconToggleButtonComponent {\n\n  @Input()\n  inGroup: boolean = true;\n\n  @Input()\n  hint: string;\n\n  @Input()\n  label: string;\n\n  @Input()\n  checked: boolean;\n\n  @Input()\n  icon: string;\n\n  @Input('svg')\n  svgUrl: string;\n\n  @Input()\n  disabled: boolean;\n\n  @Input()\n  negative: boolean;\n\n  @Input()\n  touched: boolean;\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport { NxCircleToggleGroupComponent } from './circle-toggle-group/circle-toggle-group.component';\nimport { NxCircleToggleComponent } from './circle-toggle/circle-toggle.component';\nimport { NxIconToggleButtonComponent } from './icon-toggle-button/icon-toggle-button.component';\nimport { NxMobileToggleButtonComponent } from './mobile-toggle-button/mobile-toggle-button.component';\n\n@NgModule({\n  declarations: [\n    NxCircleToggleGroupComponent,\n    NxCircleToggleComponent,\n    NxIconToggleButtonComponent,\n    NxMobileToggleButtonComponent\n  ],\n  exports: [\n    NxCircleToggleGroupComponent,\n    NxIconToggleButtonComponent,\n    NxCircleToggleComponent,\n    NxMobileToggleButtonComponent\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule\n  ]\n})\nexport class NxCircleToggleModule { }\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nconst DEFAULT_TYPE = 'normal';\n\n/** Size of the list */\nexport type NxListSize = 'xsmall' | 'small' | 'normal';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ul[nxList], ol[nxList]',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['list.component.scss'],\n  host: {\n    '[class.nx-list--xsmall]' : 'type === \"xsmall\"',\n    '[class.nx-list--small]' : 'type === \"small\"',\n    '[class.nx-list--normal]' : 'type === \"normal\"',\n    '[class.nx-list--negative]' : 'negative',\n    '[class.nx-list--ordered-circle]' : 'orderedCircle',\n  }\n})\n\nexport class NxListComponent {\n  private _classNames;\n\n  /** @docs-private */\n  type: NxListSize;\n\n  /** @docs-private */\n  negative: boolean = false;\n\n  /** @docs-private */\n  orderedCircle: boolean = false;\n\n  /**\n   * Sets the visual appearance of the list. You can combine different values:\n   *\n   * xsmall | small | normal: The listed input values are expanded to the underlying BEM conform styles based\n   * on modifiers. Defaults to normal.\n   *\n   * negative: Display the list with a negative set of styling.\n   *\n   * ordered-circle: Display the list item numbers in a color filled circle.\n   */\n  @Input('nxList')\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n\n    const [type = null] = this._classNames.match(/xsmall|small|normal/) || [DEFAULT_TYPE];\n    this.type = type as any;\n\n    this.negative = !!this._classNames.match(/negative/);\n    this.orderedCircle = !!this._classNames.match(/ordered-circle/);\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n}\n","import { Component, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'li[nxListIcon]',\n  template: `\n    <span class=\"nx-list__icon\">\n      <nx-icon [name]='name'></nx-icon>\n    </span>\n    <ng-content></ng-content>`\n})\n\nexport class NxListIconComponent {\n  /** @docs-private */\n  @ViewChild('viewRefPrefix', {read: ViewContainerRef}) viewRefPrefix: ViewContainerRef;\n\n  /** Sets the name of the icon to be displayed. */\n  @Input('nxListIcon') name: string;\n}\n","import { NgModule } from '@angular/core';\nimport { NxListComponent } from './list.component';\nimport { NxListIconComponent } from './list-icon.component';\nimport { NxIconModule, NxIconComponent } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxListComponent, NxListIconComponent ],\n  imports: [ NxIconModule ],\n  exports: [ NxListComponent, NxListIconComponent ],\n  bootstrap: [NxIconComponent]\n})\nexport class NxListModule {\n}\n","import {ElementRef, Input, Renderer2, ViewChild} from '@angular/core';\nimport { removeClasses } from '@allianz/ngx-ndbx/utils';\n\nlet nextId = 0;\n\n/** @docs-private */\nexport class NxRadioToggleButtonBaseComponent {\n  /** @docs-private */\n  toggleButtonId: string = 'nx-radio-toggle-button-' + nextId++;\n\n  /** @docs-private */\n  @Input('nxValue')\n  value: any;\n\n  /** @docs-private */\n  @ViewChild('toggleButtonLabelContainer')\n  labelContainer: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('toggleInput')\n  toggleInput: ElementRef;\n\n  constructor(protected renderer: Renderer2) {\n  }\n\n  /** @docs-private */\n  triggerInputClick(event) {\n    event.stopPropagation();\n    this.toggleInput.nativeElement.click();\n  }\n\n  /** @docs-private */\n  setFirstButton() {\n    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--first');\n  }\n\n  /** @docs-private */\n  setLastButton() {\n    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--last');\n  }\n\n  /** @docs-private */\n  resetClasses() {\n    removeClasses(this.renderer, this.labelContainer, 'nx-radio-toggle__label-container--first nx-radio-toggle__label-container--last');\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mapClassNames } from '@allianz/ngx-ndbx/utils';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  forwardRef,\n  Input,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject, merge } from 'rxjs';\nimport { filter, startWith, takeUntil, tap } from 'rxjs/operators';\n\nimport { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';\nimport { NxRadioToggleButtonChange, NxRadioToggleButtonComponent } from './radio-toggle-button.component';\n\nlet nextId = 0;\n\nconst MAPPING = {\n  'negative': 'nx-radio-toggle--negative',\n  'small': 'nx-radio-toggle--small',\n};\n\n@Component({\n  selector: 'nx-radio-toggle',\n  templateUrl: 'radio-toggle.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['radio-toggle.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRadioToggleComponent),\n      multi: true\n    }\n  ]\n})\nexport class NxRadioToggleComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, AfterContentInit {\n\n  private _toggleId: string = (nextId++).toString();\n\n  private _selection: any;\n\n  private _destroyed: Subject<void> = new Subject();\n\n  private _disabled: boolean = false;\n\n  // emits to signal children to run change detection\n  _disableChange = new Subject<void>();\n\n  /** Sets the component to the disabled state.*/\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    const coerced = coerceBooleanProperty(value);\n    if (this._disabled !== coerced) {\n      this._disabled = coerced;\n      this._disableChange.next();\n    }\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @ViewChild('toggleContainer')\n  private toggleContainer: ElementRef;\n\n  private _name: string;\n\n  /** Sets the name used for accessibility. */\n  @Input('nxName')\n  set name(value: string) {\n    if (this._name !== value) {\n      this._name = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  /** @docs-private */\n  @ContentChildren(NxRadioToggleButtonBaseComponent)\n  toggleButtons: QueryList<NxRadioToggleButtonBaseComponent> = new QueryList();\n\n  private onTouchedCallback = () => { };\n\n  private onChangeCallback = (option: any) => { };\n\n  constructor(private renderer: Renderer2, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngAfterViewInit() {\n    this.subscribeToToggleButtonsChange();\n  }\n\n  ngAfterContentInit() {\n    const changedOrDestroyed = merge(this.toggleButtons.changes, this._destroyed);\n\n    merge(...this.toggleButtons.map((button: any) => button.onChecked))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe((change: NxRadioToggleButtonChange) => {\n        this._selection = change.value;\n        this.onChangeCallback(this._selection);\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._disableChange.complete();\n  }\n\n  /** @docs-private */\n  subscribeToToggleButtonsChange(): void {\n    this.toggleButtons.changes\n      .pipe(\n        startWith(this.toggleButtons),\n        filter(toggles => toggles.length > 0),\n        takeUntil(this._destroyed)\n      ).subscribe((toggles) => {\n        toggles.forEach(toggle => {\n          toggle.resetClasses();\n          if (toggle.value === this.selection) {\n            // We need to defer the selection for the edge case that the button with the value of this.selection\n            // didn't exist yet but was added afterwards to prevent changed after checked errors\n            setTimeout(() => toggle.select());\n          }\n        });\n        toggles.first.setFirstButton();\n        toggles.last.setLastButton();\n      });\n  }\n\n  registerOnChange(onChangeCallback: any): void {\n    this.onChangeCallback = onChangeCallback;\n  }\n\n  registerOnTouched(onTouchedCallback: any): void {\n    this.onTouchedCallback = onTouchedCallback;\n  }\n\n  /** Preselects the respective options. */\n  @Input('nxSelection')\n  writeValue(value: string): void {\n    this._selection = value;\n    const correspondingButton =\n      this.toggleButtons.find((button: NxRadioToggleButtonComponent) => button.value === this._selection);\n    if (correspondingButton) {\n      (correspondingButton as NxRadioToggleButtonComponent).select();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  get id(): string {\n    return `nx-radio-toggle-${this._toggleId}`;\n  }\n\n  /** Sets the modifiers for the component. */\n  @Input('nxStyle')\n  set style(value: string) {\n    const modifierClasses = mapClassNames(value, [], MAPPING);\n    modifierClasses.split(' ')\n      .forEach(className => this.renderer.addClass(this.toggleContainer.nativeElement, className));\n  }\n\n  /** @docs-private */\n  set selection(selection: any) {\n    this._selection = selection;\n    this.onChangeCallback(selection);\n  }\n\n  get selection(): any {\n    return this._selection;\n  }\n}\n","import { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Input, Renderer2,\n   OnDestroy, HostListener } from '@angular/core';\n\nimport { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';\nimport { NxRadioToggleComponent } from './radio-toggle.component';\n\n/** @docs-private */\nexport class NxRadioToggleButtonChange {\n  constructor(\n    public source: NxRadioToggleButtonComponent,\n    public value: any\n  ) {}\n}\n\n@Component({\n  selector: 'nx-radio-toggle-button',\n  styleUrls: ['radio-toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'radio-toggle-button.component.html',\n  providers: [\n    {\n      provide: NxRadioToggleButtonBaseComponent, useExisting: forwardRef(() => NxRadioToggleButtonComponent)\n    }\n  ]\n})\nexport class NxRadioToggleButtonComponent extends NxRadioToggleButtonBaseComponent implements OnDestroy {\n\n  /** @docs-private */\n  // emits when the button is checked to notify the group\n  readonly onChecked = new Subject<NxRadioToggleButtonChange>();\n\n  private _destroyed: Subject<void> = new Subject();\n\n  private _disabled: boolean = false;\n  private _selected: boolean = false;\n\n  /** @docs-private */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled || (this.radioToggle && this.radioToggle.disabled);\n  }\n\n  /** Sets the checked state and notify siblings and the parent group about the change */\n  // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!\n  // To select a button without firing the event use the select() function\n  @Input('nxSelected')\n  set selected(value: boolean) {\n    if (this._selected !== value) {\n      this._selected = value;\n      if (this._selected) {\n        this._notifySiblings();\n        this._emitCheckedEvent();\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Inject(forwardRef(() => NxRadioToggleComponent)) private radioToggle: NxRadioToggleComponent,\n    renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _toggleDispatcher: UniqueSelectionDispatcher) {\n    super(renderer);\n\n    this._removeUniqueSelectionListener = this._toggleDispatcher.listen((id: string, radioToggleId: string) => {\n      if (this.radioToggle && this.radioToggle.id === radioToggleId && this.id !== id) {\n        this._selected = false;\n        // need to let change detector know in case that the select() function was called on another button\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    this.radioToggle._disableChange.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** @docs-private */\n  get toggleId(): string {\n    return this.radioToggle.id;\n  }\n\n  /** @docs-private */\n  get id(): string {\n    return this.toggleButtonId;\n  }\n\n  private _notifySiblings() {\n    const toggleId = this.radioToggle ? this.radioToggle.id : this.id;\n    this._toggleDispatcher.notify(this.id, toggleId);\n  }\n\n  private _emitCheckedEvent() {\n    this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));\n  }\n\n  // Does NOT emit the onChecked event. Useful when you need to set initial\n  // state. Used by the parent to set checked states on initialization and during\n  // writeValue() changes.\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._notifySiblings();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  @HostListener('keyup.space')\n  onKeyupSpace(): void {\n    this._selected = false;\n    this._notifySiblings();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxRadioToggleComponent } from './radio-toggle.component';\nimport { FormsModule } from '@angular/forms';\nimport { NxRadioToggleButtonComponent } from './radio-toggle-button.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxRadioToggleComponent, NxRadioToggleButtonComponent ],\n  exports: [ NxRadioToggleComponent, NxRadioToggleButtonComponent ],\n  imports: [ CommonModule, FormsModule, NxIconModule ]\n})\nexport class NxRadioToggleModule { }\n","import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, Renderer2, ViewChild } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nlet nextId = 0;\n\n/**\n  * @deprecated Use `nx-circle-toggle` instead\n  * @deletion-target 8.0.0\n  */\n@Component({\n  selector: 'nx-checkbox-circle',\n  templateUrl: 'checkbox-circle.component.html',\n  styleUrls: ['checkbox-circle.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCheckboxCircleComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.is-checked]': 'checked'\n  }\n})\nexport class NxCheckboxCircleComponent implements ControlValueAccessor {\n\n  private _id: string = (nextId++).toString();\n\n  /**\n   * Id of the checkbox.\n   * If not set, the checkbox gets an incremented value by default.\n   */\n  @Input()\n  public set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n    }\n  }\n  public get id() {\n    return `nx-checkbox-circle-${this._id}`;\n  }\n\n  /** The name of the Checkbox Circle. */\n  @Input()\n  name: string;\n\n  /** An event emitted when the checked value has changed. */\n  @Output()\n  checkedChange = new EventEmitter<boolean>(false);\n\n  /** Whether the checkbox circle is checked. */\n  @Input()\n  checked: boolean;\n\n  /** The name of the icon that is displayed. If not added, no icon will be displayed. */\n  @Input('nxIcon')\n  iconName: string;\n\n  /** If set, the passed SVG will be displayed in the not-checked state. */\n  @Input('nxSvg')\n  svg: string;\n\n  /** If set, the passed SVG will be displayed in the checked state. */\n  @Input('nxSvgChecked')\n  svgChecked: string;\n\n  /** Label to be displayed under circle. */\n  @Input('nxLabel')\n  label: string;\n\n  private onChangeCallback = (checked: boolean) => { };\n\n  private onTouchedCallback = () => { };\n\n  constructor() {\n    console.warn('`nx-checkbox-circle` is deprecated. Use `nx-circle-toggle` instead.');\n  }\n\n  writeValue(value: boolean): void {\n    this.checked = value;\n    this.checkedChange.emit(value);\n  }\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  /** @docs-private */\n  toggle() {\n    this.writeValue(!this.checked);\n    this.onChangeCallback(this.checked);\n  }\n\n  /** @docs-private */\n  get svgButton(): boolean {\n    return !!this.svg && !!this.svgChecked;\n  }\n\n  /** @docs-private */\n  get svgUrl(): string {\n    return this.checked ? this.svgChecked : this.svg;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {NxCheckboxCircleComponent} from './checkbox-circle.component';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  declarations: [ NxCheckboxCircleComponent ],\n  exports: [ NxCheckboxCircleComponent ],\n  imports: [\n    NxIconModule,\n    CommonModule\n  ]\n})\nexport class NxCheckboxCircleModule { }\n","import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n\n/** Options for sizing of the spinner. */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nconst DEFAULT_SIZE = 'small';\n\n@Component({\n  selector: 'nx-spinner',\n  templateUrl: './spinner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./spinner.component.scss'],\n  host: {\n    '[class.nx-spinner--small]': 'size === \"small\"',\n    '[class.nx-spinner--medium]': 'size === \"medium\"',\n    '[class.nx-spinner--large]': 'size === \"large\"',\n    '[class.nx-spinner--negative]': 'negative',\n    '[attr.role]': '\"status\"',\n    '[attr.aria-busy]': '\"true\"',\n    '[attr.aria-live]': '\"assertive\"',\n  }\n})\nexport class NxSpinnerComponent {\n  private _size: SpinnerSize = DEFAULT_SIZE;\n\n  /** Sets the size of the spinner. Default is 'small'. */\n  @Input('nxSize')\n  set size(value: SpinnerSize) {\n    if (value !== this._size) {\n      this._size = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get size(): SpinnerSize {\n    return this._size;\n  }\n\n  private _negative: boolean = false;\n\n  /** Whether the spinner should use a negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    if (value !== this._negative) {\n      this._negative = coerceBooleanProperty(value);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule  } from '@angular/core';\n\nimport { NxSpinnerComponent } from './spinner.component';\n\n\n@NgModule({\n  declarations: [\n    NxSpinnerComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    NxSpinnerComponent\n  ],\n  bootstrap: [],\n  providers: []\n})\nexport class NxSpinnerModule { }\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** @docs-private */\n@Injectable()\nexport class NxModalService {\n\n  private subject = new Subject();\n  close$: Observable<any> = this.subject.asObservable();\n\n  close() {\n    this.subject.next();\n  }\n}\n","import { animate, animation, AnimationReferenceMetadata, style } from '@angular/animations';\n\nexport const fadeIn: AnimationReferenceMetadata = animation([\n    style({opacity: 0}),\n    animate('300ms', style({opacity: 1}))\n  ]);\n\nexport const fadeOut: AnimationReferenceMetadata = animation(\n  animate('300ms', style({opacity: 0}))\n);\n\nexport const scaleUp: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1)', opacity: 1}),\n    animate('250ms', style({transform: 'scale(1.3)', opacity: 0}))\n  ]);\n\nexport const scaleDown: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1.3)', opacity: 0}),\n    animate('250ms', style({transform: 'scale(1)', opacity: 1}))\n  ]);\n","import { OnDestroy, ChangeDetectionStrategy, Directive, ChangeDetectorRef } from '@angular/core';\nimport { Component, Input, OnInit, TemplateRef, Output, EventEmitter } from '@angular/core';\nimport { NxModalService } from './modal.service';\nimport { EventManager } from '@angular/platform-browser';\nimport { fadeIn, fadeOut, scaleDown, scaleUp } from './animations';\nimport { animateChild, query, transition, trigger, useAnimation } from '@angular/animations';\nimport { Subscription } from 'rxjs';\n\n/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */\n@Directive({\n  selector: '[nxModalActions]',\n  host: {\n    '[class.nx-modal__actions]': 'true'\n  }\n})\nexport class NxModalActionsDirective {}\n\n/** Scrollable container for the content of a modal. */\n@Directive({\n  selector: '[nxModalContent]',\n  host: {\n    '[class.nx-modal__content]': 'true'\n  }\n})\nexport class NxModalContentDirective {}\n\n@Component({\n  selector: 'nx-modal',\n  templateUrl: 'modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './modal.component.scss' ],\n  animations: [\n    trigger('fadeInOut', [\n      transition(':enter', [\n        useAnimation(fadeIn),\n        query('@scaleUpDown', [\n          animateChild()\n        ])\n      ]),\n      transition(':leave', [\n        query('@scaleUpDown', [\n          animateChild()\n        ]),\n        useAnimation(fadeOut)\n      ])\n    ]),\n    trigger('scaleUpDown', [\n      transition(':enter', useAnimation(scaleDown)),\n      transition(':leave', useAnimation(scaleUp))\n    ])\n  ],\n  host: {\n    '[@fadeInOut]': '',\n    '[class.nx-modal--fixed-width]': 'size === \"fixed\"'\n  }\n})\n\nexport class NxModalComponent implements OnInit, OnDestroy {\n\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the 'aria-label' of the modal close button needed for accessibility.\n   *\n   * Default value is 'Close dialog'.\n   */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /**\n   * A template reference variable pointing to the template\n   * which contains the content of the modal view.\n   */\n  @Input('nxBody') body: TemplateRef<any>;\n\n  /**\n   * Whether the modal view should close when the user hits the escape key.\n   * Default is true.\n   */\n  @Input('nxHideOnEsc') hideOnEsc: boolean = true;\n\n  /**\n   * Whether the modal view should close when the user clicks on the backdrop.\n   * Default is true.\n   */\n  @Input('nxHideOnClickOutside') hideOnClickOutside: boolean = true;\n\n  /**\n   * Whether the modal view should have a close icon in the upper right corner.\n   * Default is true.\n   */\n  @Input('nxShowCloseIcon') showCloseIcon: boolean = true;\n\n  /**\n   * Controls the width of the dialog.\n   * On `auto` the width is controlled by the content width,\n   * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */\n  @Input('nxSize') size: 'fixed' | 'auto';\n\n  /**\n   * An event emitted when the user clicks on the backdrop or uses the built-in close button.\n   * This event can be applied in conjunction with the custom open state handling\n   * of a modal to close it when requested by the user.\n   */\n  @Output('nxClose') closeEvent = new EventEmitter<void>();\n\n  private closeSubscription: Subscription = Subscription.EMPTY;\n\n  constructor(private modalService: NxModalService, private eventManager: EventManager, private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    this.closeSubscription = this.modalService.close$.subscribe(() => this.closeEvent.emit());\n\n    this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n      if (this.hideOnEsc) {\n        this.modalService.close();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.closeSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickOutsideModal() {\n    if (this.hideOnClickOutside) {\n      this.modalService.close();\n    }\n  }\n\n  /** @docs-private */\n  closeButtonClick() {\n    this.modalService.close();\n  }\n\n  /** @docs-private */\n  cancelClick(evt: KeyboardEvent) {\n    evt.stopPropagation();\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { SubscriptionLike as ISubscription } from 'rxjs';\n\nimport { NxModalService } from './modal.service';\n\n\n@Directive({selector: '[nxOpenModalOnClick]'})\nexport class NxOpenModalOnClickDirective implements OnInit, OnDestroy {\n\n  /** @docs-private */\n  elements: Array<any>;\n\n  private subscription: ISubscription;\n\n  constructor(private templateRef: TemplateRef<any>,\n              private viewContainer: ViewContainerRef,\n              private modalService: NxModalService) {\n  }\n\n  ngOnInit() {\n    this.subscription = this.modalService.close$.subscribe(() => this.viewContainer.clear());\n  }\n\n  ngOnDestroy() {\n    this.elements.forEach(el => {\n      if (el.removeEventListener) {\n        el.removeEventListener('click', this.clickHandler);\n      }\n    });\n\n    this.subscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickHandler = (event: any) => {\n    this.viewContainer.clear();\n    // instantiate the template onto which this directive is applied\n    const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n    // we need to mark the viewRef explicitly if the modal is used inside another\n    // component that is using onPush change detection\n    viewRef.markForCheck();\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /**\n   * One or multiple template reference variables pointing to elements\n   * which should trigger opening the modal on click.\n   *\n   * Value: A single template reference variable or an array of template reference variables.\n   */\n  @Input()\n  set nxOpenModalOnClick(elements) {\n    // also support the case where only one element is passed, check for the length property to be sure elements is an array\n    if (elements.length) {\n      this.elements = elements;\n    } else {\n      this.elements = [ elements ];\n    }\n    // add a click event listener to any element passed as property to this directive\n    this.elements.forEach(el => {\n      if (el.addEventListener) {\n        el.addEventListener('click', this.clickHandler);\n      // workaround until refactoring: if the reference is a component\n      // reference the component has to implement a getter to its own elementRef\n      } else if (el.elementRef) {\n        el.elementRef.nativeElement.addEventListener('click', this.clickHandler);\n      } else {\n        console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);\n      }\n    });\n  }\n\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport {NxModalComponent, NxModalActionsDirective, NxModalContentDirective} from './modal.component';\nimport { CommonModule } from '@angular/common';\nimport { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';\nimport { NxModalService } from './modal.service';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [ CommonModule, A11yModule, NxIconModule ],\n  declarations: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n  exports: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n})\n\nexport class NxModalModule {\n  // define the modal service on root level as an application wide singleton,\n  // assuming that we only display one modal at a time, which seems quite reasonable\n  // this is static and named \"forRoot\" by convention\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NxModalModule,\n      providers: [NxModalService]\n    };\n  }\n}\n","import { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nlet nextId = 0;\n/** Options for placement of the label */\nexport type POSITION = 'left' | 'right';\n/** Options for sizing of the label */\nexport type LABEL_SIZE = 'small' | 'large';\n\n@Component({\n  selector: 'nx-switcher',\n  templateUrl: 'switcher.component.html',\n  styleUrls: ['./switcher.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxSwitcherComponent),\n      multi: true\n    }\n  ],\n  host: {\n    /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id\n    and on label click the input click is not triggered (double id problem) */\n    '[attr.id]': 'null',\n    '[class.is-negative]': 'negative',\n    '[class.is-checked]': 'checked',\n    '[class.is-big]': 'big',\n    '[class.nx-switcher--small-label]': 'labelSize === \"small\"',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-swapped]': 'labelPosition === \"left\"'\n  }\n})\n\nexport class NxSwitcherComponent implements ControlValueAccessor {\n\n  private _id: string = `nx-switcher-${nextId++}`;\n  /** Sets the id of the switcher */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  private _labelPosition: POSITION = 'right';\n  /** Specifies the placement of the label */\n  @Input()\n  set labelPosition(value: POSITION) {\n    this._labelPosition = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelPosition(): POSITION {\n    return this._labelPosition;\n  }\n\n  private _name: string = null;\n  /** Sets the label text of the switcher */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  private _checked: boolean = false;\n  /** Whether the switcher is checked (on) or unchecked (off) */\n  @Input()\n  set checked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  private _big: boolean = false;\n  /** Whether the big switcher is used */\n  @Input('nxBig')\n  set big(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._big = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get big(): boolean {\n    return this._big;\n  }\n\n  private _labelSize: LABEL_SIZE = 'large';\n  /** Sets the size of the label */\n  @Input()\n  set labelSize(value: LABEL_SIZE) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelSize(): LABEL_SIZE {\n    return this._labelSize;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the style for a dark background is used */\n  @Input('nxNegative')\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._negative = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _disabled: boolean = false;\n  /** Whether the switcher is in the disabled state */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._disabled = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** An event is dispatched each time the switcher value is changed */\n  @Output('checkedChange') checkedChange = new EventEmitter<boolean>();\n\n  private onChangeCallback = (_: any) => {};\n  private onTouchedCallback = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** Allows to toggle between the states */\n  toggle() {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this.checkedChange.emit(this.checked);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxSwitcherComponent } from './switcher.component';\nimport { CommonModule } from '@angular/common';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxSwitcherComponent ],\n  exports: [ NxSwitcherComponent ],\n  imports: [ CommonModule, NxIconModule ]\n})\nexport class NxSwitcherModule {}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ConnectedPosition,\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewContainerRef\n} from '@angular/core';\nimport { EventManager } from '@angular/platform-browser';\nimport { fromEvent, Observable, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\nimport { NxPopoverComponent } from './popover.component';\n\nexport declare type PopoverDirection = 'left' | 'top' | 'right' | 'bottom';\nexport declare type PopoverTriggerType = 'click' | 'hover' | 'manual';\nexport declare type PopoverTriggerScrollStrategy = 'close' | 'reposition';\nlet nextId = 0;\n\nconst fallbacks: ConnectionPositionPair[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 16\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom',\n    offsetX: 0,\n    offsetY: -16\n  },\n  {\n    originX: 'center',\n    originY: 'bottom',\n    overlayX: 'center',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 16\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 16\n  },\n  {\n    originX: 'end',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center',\n    offsetX: 16,\n    offsetY: 0\n  },\n  {\n    originX: 'start',\n    originY: 'center',\n    overlayX: 'end',\n    overlayY: 'center',\n    offsetX: -16,\n    offsetY: 0\n  },\n  {\n    originX: 'center',\n    originY: 'top',\n    overlayX: 'center',\n    overlayY: 'bottom',\n    offsetX: 0,\n    offsetY: -16\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n    offsetX: 0,\n    offsetY: -16\n  }\n];\n\n@Directive({\n  selector: '[nxPopoverTriggerFor]',\n  exportAs: 'nxPopoverTrigger',\n  host: {\n    '(click)': 'handleClick()',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'isOpen',\n    '[attr.aria-describedby]': 'isOpen ? id : null'\n  }\n})\nexport class NxPopoverTriggerDirective implements AfterViewInit, OnDestroy, OnInit {\n  private overlayRef: OverlayRef;\n  private portal: TemplatePortal<any>;\n  private _destroyed = new Subject<void>();\n  private _show: boolean = false;\n  private _closeable: boolean = null;\n  private _positionStrategy: PositionStrategy;\n  private _embeddedViewRef: EmbeddedViewRef<any>;\n  private _documentClickObservable: Observable<MouseEvent>;\n\n  /** @docs-private */\n  id = 'nx-popover-' + nextId++;\n\n  /** An event is emitted if the visibility status of the popover changes. */\n  @Output('nxPopoverShowChange')\n  changeShow: EventEmitter<boolean> = new EventEmitter();\n\n  /** Whether to show or hide the popover. */\n  @Input('nxPopoverShow')\n  set show(value: boolean) {\n    value = coerceBooleanProperty(value);\n    if (this._show !== value) {\n      this._show = value;\n      if (this._show) {\n        this.openPopover();\n      } else {\n        this.closePopover();\n      }\n\n      this.changeShow.emit(this._show);\n    }\n  }\n\n  get show() {\n    return this._show;\n  }\n\n  /** Whether to show a close button. By default a close icon is only shown for trigger type click. */\n  @Input('nxPopoverCloseable')\n  set closeable(value: boolean) {\n    this._closeable = coerceBooleanProperty(value);\n\n    if (this.popover) {\n      this.popover.showCloseButton = this.isCloseable();\n    }\n  }\n  get closeable(): boolean {\n    return this._closeable;\n  }\n\n  /** Links the trigger with the popover to open. */\n  @Input('nxPopoverTriggerFor')\n  popover: NxPopoverComponent;\n\n  /** Sets the desired direction to open the popover. E.g., right, left, bottom, top */\n  @Input('nxPopoverDirection')\n  direction: PopoverDirection = 'right';\n\n  /** Whether the popover will be opened automatically. */\n  @Input('nxPopoverInitialVisible')\n  popoverInitialVisible: boolean = false;\n\n  /** An event is emitted when the visibility of the popopver changes. */\n  @Input('nxPopoverVisibleChange')\n  visibleChange: EventEmitter<boolean> = new EventEmitter();\n\n  /** Whether the popover opens in modal state. */\n  @Input('nxPopoverModal')\n  modal: boolean = false;\n\n  // If nxPopoverTrigger equals to 'hover' the popover opens on mouseenter and closes on mouseout.\n  // If nxPopoverTrigger equals to 'click' the popover opens on click and closes on a click of the close icon or pressing ESC key.\n  // If nxPopoverTrigger equals to 'manual' the popover opens only when programatically requested.\n  /** Sets the way to trigger the popover. Options are hover, click, manual */\n  @Input('nxPopoverTrigger')\n  trigger: PopoverTriggerType = 'click';\n\n  /** Sets the scroll strategy. 'close' closes the popover on scroll while 'reposition' scrolls the popover with the origin. */\n  @Input('nxPopoverScrollStrategy')\n  scrollStrategy: PopoverTriggerScrollStrategy = 'close';\n\n\n\n  constructor(private overlay: Overlay,\n              private elementRef: ElementRef,\n              private viewContainerRef: ViewContainerRef,\n              private eventManager: EventManager) {\n    this._documentClickObservable = fromEvent<MouseEvent>(document, 'click');\n  }\n\n  /** @docs-private */\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    if (this.trigger === 'hover') {\n      this.openPopover();\n    }\n  }\n\n  /** @docs-private */\n  @HostListener('mouseleave')\n  @HostListener('touchstart')\n  onMouseExit() {\n    if (this.trigger === 'hover') {\n      this.closePopover();\n    }\n  }\n\n  ngOnInit() {\n    this.popover.showCloseButton = this.isCloseable();\n  }\n\n  ngAfterViewInit(): void {\n    this.popover.id = this.id;\n\n    this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n      this.closePopover();\n    });\n\n    this.popover.closeButtonClick.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this.closePopover();\n    });\n\n    if (this.popoverInitialVisible || this._show) {\n      this.openPopover();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.closePopover();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** @docs-private */\n  get isOpen() {\n    return this.overlayRef && this.createOverlay().hasAttached();\n  }\n\n  /** @docs-private */\n  isCloseable() {\n    return (this.trigger === 'click' && this._closeable === null) || this._closeable;\n  }\n\n  /** Update the popover with the given position strategy. */\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** @docs-private */\n  handleClick() {\n    if (this.trigger === 'click') {\n      if (this.isOpen) {\n        this.closePopover();\n      } else {\n        this.openPopover();\n      }\n    }\n  }\n\n  /** Open the popover instance. */\n  open(): void {\n    this.show = true;\n  }\n\n  /** Close the popover instance. */\n  close(): void {\n    this.show = false;\n  }\n\n  /** Toggle the popover instance. */\n  toggle(): void {\n    this.show = !this.show;\n  }\n\n  private openPopover(): void {\n    if (!this.createOverlay().hasAttached()) {\n      this._embeddedViewRef = this.createOverlay().attach(this.portal);\n\n      if (!this.modal && this.trigger === 'click') {\n        this.waitForClose();\n      }\n    }\n  }\n\n  // detaches the overlay\n  // we are listening to the detachments observable which will then emit the nxClosed event\n  // on the popover component\n  private closePopover(): void {\n    if (this.overlayRef) {\n      this.overlayRef.detach();\n      this._embeddedViewRef = null;\n    }\n  }\n\n  private createOverlay(): OverlayRef {\n    if (!this.overlayRef) {\n      this.portal = new TemplatePortal(this.popover.templateRef, this.viewContainerRef);\n      const overlayState = new OverlayConfig();\n      overlayState.positionStrategy = this.getPosition();\n      this._positionStrategy = overlayState.positionStrategy;\n\n      if (this.scrollStrategy === 'reposition') {\n        overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();\n      } else {\n        overlayState.scrollStrategy = this.overlay.scrollStrategies.close();\n      }\n\n      overlayState.scrollStrategy.enable();\n\n      if (this.modal && this.trigger === 'click') {\n        overlayState.hasBackdrop = true;\n      }\n\n      this.overlayRef = this.overlay.create(overlayState);\n      this.subscribeToPositions(overlayState.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._subscribeToDetach();\n      if (this.modal) {\n        this._subscribeToBackdropClick();\n      }\n    }\n    return this.overlayRef;\n  }\n\n  private subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      const pair = change.connectionPair;\n      this.positionOverlay(pair);\n      this.positionArrow(pair);\n\n      // These position changes arrive too late,\n      // We have to trigger the change detection manually\n      // as it's detached from any render hierarchy\n      // and only updated by the overlay when attached.\n      if (this._embeddedViewRef && !this._embeddedViewRef.destroyed) {\n        this._embeddedViewRef.detectChanges();\n      }\n    });\n  }\n\n  // for modal popovers close the popover on backdrop clicks\n  private _subscribeToBackdropClick() {\n    this.overlayRef.backdropClick().pipe(takeUntil(this._destroyed)).subscribe((event) => {\n      this.closePopover();\n    });\n  }\n\n  // Emit the nxClosed event on the popover component when the overlay detaches\n  private _subscribeToDetach() {\n    this.overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this.popover.emitClosedEvent();\n    });\n  }\n\n  // subscribe to document clicks when trigger='click' to close the popover on clicks on the background\n  private waitForClose() {\n    return this._documentClickObservable\n      .pipe(\n        map(event => event.target),\n        filter(target => !this.elementRef.nativeElement.contains(target)),\n        takeUntil(this.popover.closed))\n      .subscribe(() => {\n        this.closePopover();\n      });\n  }\n\n  private positionOverlay(pair: ConnectionPositionPair) {\n    if (pair.originX === 'end' && pair.overlayX === 'start') {\n      this.popover.direction = 'right';\n    } else if (pair.originY === 'bottom' && pair.overlayY === 'top') {\n      this.popover.direction = 'bottom';\n    } else if (pair.originX === 'start' && pair.overlayX === 'end') {\n      this.popover.direction = 'left';\n    } else if (pair.originY === 'top' && pair.overlayY === 'bottom') {\n      this.popover.direction = 'top';\n    }\n  }\n\n  private positionArrow(pair: ConnectionPositionPair) {\n\n    const parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;\n    const parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;\n    const parentElementLeftOffset = this.overlayRef.overlayElement.parentElement.offsetLeft;\n    const overlayElementLeftOffset = this.overlayRef.overlayElement.offsetLeft;\n\n    // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.\n    const targetPosition = (parentElementPositionX + parentElementWidth) - (parentElementLeftOffset + overlayElementLeftOffset);\n    if (pair.originX === pair.overlayX) {\n      const direction = 'left';\n      const arrowStyle = {};\n\n      arrowStyle[direction] = targetPosition + 'px';\n      this.popover.arrowStyle = arrowStyle;\n    }\n    if ((pair.originY === 'bottom' || pair.originY === 'top') && pair.overlayX === 'center') {\n      this.popover.arrowStyle = { left: targetPosition + 'px' };\n    }\n\n    if ((pair.originX === 'end' || pair.originX === 'start') && pair.overlayY === 'center') {\n      this.popover.arrowStyle = { top: '50%' };\n    }\n  }\n\n  private getPosition(): FlexibleConnectedPositionStrategy {\n    let positions: ConnectedPosition[];\n    let offsetX = 0;\n    let offsetY = 0;\n    if (this.direction === 'top') {\n      positions = [{\n        overlayX: 'center',\n        overlayY: 'bottom',\n        originX: 'center',\n        originY: 'top'\n      }];\n      offsetX = 0;\n      offsetY = -20;\n    } else if (this.direction === 'right') {\n      positions = [{\n        overlayX: 'start',\n        overlayY: 'center',\n        originX: 'end',\n        originY: 'center'\n      }];\n      offsetX = 20;\n      offsetY = 0;\n    } else if (this.direction === 'bottom') {\n      positions = [{\n        overlayX: 'center',\n        overlayY: 'top',\n        originX: 'center',\n        originY: 'bottom'\n      }];\n      offsetX = 0;\n      offsetY = 20;\n    } else if (this.direction === 'left') {\n      positions = [{\n        overlayX: 'end',\n        overlayY: 'center',\n        originX: 'start',\n        originY: 'center'\n      }];\n      offsetX = -20;\n      offsetY = 0;\n    }\n    return this.overlay.position().flexibleConnectedTo(this.elementRef)\n      .withPositions([...positions, ...fallbacks])\n      .withDefaultOffsetX(offsetX)\n      .withDefaultOffsetY(offsetY);\n  }\n}\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Popover content that will be rendered lazily\n * after the popover is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[nxPopoverContent]'\n})\nexport class NxPopoverContentDirective {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {NxPopoverContentDirective} from './popover-content';\n\n@Component({\n  selector: 'nx-popover',\n  templateUrl: './popover.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./popover.component.scss'],\n  exportAs: 'nxPopover',\n})\nexport class NxPopoverComponent implements OnDestroy {\n  /** @docs-private */\n  @ViewChild(TemplateRef)\n  templateRef: TemplateRef<any>;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(NxPopoverContentDirective) _lazyContent: NxPopoverContentDirective;\n\n  /** Event emitted when the popover is closed. */\n  @Output('nxClosed')\n  closed = new EventEmitter<void>();\n\n  /** @docs-private */\n  closeButtonClick = new Subject<void>();\n\n  /** @docs-private */\n  id: string;\n\n  /** @docs-private */\n  direction;\n\n  /** @docs-private */\n  showCloseButton: boolean = false;\n\n  /** @docs-private */\n  arrowStyle = {};\n\n  constructor() {\n  }\n\n  ngOnDestroy() {\n    this.closed.complete();\n  }\n\n  // emit to notify the popover trigger directive that the close button was clicked\n  /** @docs-private */\n  emitButtonClick() {\n    this.closeButtonClick.next();\n  }\n\n  /** @docs-private */\n  emitClosedEvent() {\n    this.closed.emit();\n  }\n\n  /** @docs-private */\n  get classList(): string[] {\n    if (this.direction) {\n      return [`nx-popover--${this.direction}`];\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxPopoverTriggerDirective} from './popover-trigger.directive';\nimport {NxPopoverComponent} from './popover.component';\nimport {NxPopoverContentDirective} from './popover-content';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NxIconModule} from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxPopoverTriggerDirective,\n    NxPopoverComponent,\n    NxPopoverContentDirective\n  ],\n  exports: [\n    NxPopoverTriggerDirective,\n    NxPopoverComponent,\n    NxPopoverContentDirective\n  ]\n})\nexport class NxPopoverModule {\n\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { DELETE, BACKSPACE } from '@angular/cdk/keycodes';\n\n@Component({\n  selector: 'nx-tag',\n  templateUrl: 'tag.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['tag.component.scss'],\n  host: {\n    '(click)': 'tagClickHandler()',\n    '(keydown)': 'removeKeyHandler($event)',\n    '[attr.tabIndex]': '0'\n  }\n})\nexport class NxTagComponent {\n  private _removable: boolean;\n\n  /** Whether the tag is removeable. */\n  @Input()\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get removable() {\n    return this._removable;\n  }\n\n  private _value: string;\n  /** Sets the value of the tag. */\n  @Input()\n  set value(value: string) {\n    if (this._value !== value) {\n      this._value = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get value(): string {\n    return this._value;\n  }\n\n  /** An event is dispatched each time when the tag is clicked. */\n  @Output() readonly clicked: EventEmitter<any> = new EventEmitter<any>();\n  /** An event is dispatched each time when the tag is removed. */\n  @Output() readonly removed: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  // Emit the removed event that the parent can remove the value\n  removeClickHandler(event: MouseEvent) {\n    event.stopPropagation();\n    this.removed.emit(this.value);\n  }\n\n  /** @docs-private */\n  removeKeyHandler(event: KeyboardEvent) {\n    if (this.removable && (event.keyCode === DELETE || event.keyCode === BACKSPACE)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.removed.emit(this.value);\n    }\n  }\n\n  /** @docs-private */\n  tagClickHandler() {\n    this.clicked.emit(this.value);\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'nx-taglist',\n  templateUrl: 'taglist.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './taglist.component.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxTaglistComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.nx-taglist--keyword]': 'isKeywordList',\n    '[attr.aria-labelledby]': 'labelledby || null'\n  }\n})\n\nexport class NxTaglistComponent implements ControlValueAccessor {\n\n  /** An event is dispatched each time when the list of tags changed. */\n  @Output('nxTagsChange') tagsChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  /** An event is dispatched each time when a tag is clicked. */\n  @Output('nxTagClick') tagClickEvent: EventEmitter<any> = new EventEmitter<any>();\n\n  private _tags: Array<any> = [];\n  /** Sets the list of tags. */\n  @Input('nxTags')\n  set tags(value: Array<any>) {\n    this._tags = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tags(): Array<any> {\n    return this._tags;\n  }\n\n  private _allowTagDeletion: boolean = true;\n  /** Whether the tags can be removed from the list. */\n  @Input('nxAllowTagDeletion')\n  set allowTagDeletion(value: boolean) {\n    this._allowTagDeletion = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get allowTagDeletion(): boolean {\n    return this._allowTagDeletion;\n  }\n\n  private _isKeywordList: boolean = false;\n  /** Whether the tags can be styled as keywords. */\n  @Input('nxIsKeywordList')\n  set isKeywordList(value: boolean) {\n    this._isKeywordList = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get isKeywordList(): boolean {\n    return this._isKeywordList;\n  }\n\n  private _labelProperty: string = 'nxTaglistLabel';\n    /** Sets the label property, in case tags represent objects. */\n  @Input('nxLabelProperty')\n  set labelProp(value: string) {\n    if (this._labelProperty !== value) {\n      this._labelProperty = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelProp(): string {\n    return this._labelProperty;\n  }\n\n  private _ariaLabelledBy: string;\n  /** Sets the label property to improve accessibility. */\n  @Input('aria-labelledby')\n  set labelledby(value: string) {\n    if (this._ariaLabelledBy !== value) {\n      this._ariaLabelledBy = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelledby(): string {\n    return this._ariaLabelledBy;\n  }\n\n  private _valueFormatterFn: (value: any) => string = (value) => value;\n  /** Sets the customization function for tag value.  */\n  @Input('nxValueFormatter')\n  set valueFormatter(fn: (value: any) => string) {\n    this._valueFormatterFn = fn;\n    this._changeDetectorRef.markForCheck();\n  }\n  get valueFormatter(): (value: any) => string {\n    return this._valueFormatterFn;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched: () => any = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */\n  delete(index: number, value: any) {\n    if (this.allowTagDeletion) {\n      this.tags = [\n        ...this.tags.slice(0, index),\n        ...this.tags.slice(index + 1)\n      ];\n      this._onChange(this.tags);\n      this.tagsChange.emit(this.tags);\n    }\n  }\n\n  /** Allows to add a tag. Takes tag object as an input */\n  addTag(tag: any) {\n    if (!tag) {\n      return;\n    }\n\n    // make sure tag is either string or has the configured label prop and is not yet in the list\n    if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||\n      (tag[ this.labelProp ] && this.tags.filter((t) => t[ this.labelProp ] === tag[ this.labelProp ]).length < 1)) {\n\n      this.tags = [ ...this.tags, tag ];\n      this._onChange(this.tags);\n      this.tagsChange.emit(this.tags);\n    }\n  }\n\n  /** Allows to clear the tag list. */\n  clearTags() {\n    this.tags = [];\n    this._onChange(this.tags);\n    this.tagsChange.emit(this.tags);\n  }\n\n  /** @docs-private */\n  writeValue(tags: any): void {\n    this.tags = tags;\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** @docs-private */\n  renderTag(tag: any) {\n    const tagStr: string = typeof tag === 'string' ? tag : tag[ this.labelProp ];\n    return this.valueFormatter(tagStr);\n  }\n\n  /** @docs-private */\n  tagClick(index, value: any) {\n    this.tagClickEvent.emit(this.tags[index]);\n  }\n}\n","import { NxTagComponent } from './tag.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NgModule } from '@angular/core';\nimport { NxTaglistComponent } from './taglist.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ NxTaglistComponent, NxTagComponent ],\n  exports: [ NxTaglistComponent, NxTagComponent ],\n  imports: [ CommonModule, NxIconModule ]\n})\nexport class NxTaglistModule {}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'img[nxImg]'\n})\nexport class NxImageDirective {\n  constructor() {\n    console.warn('Directive nxImg which was used together with nxFigure ' +\n    'is now deprecated and not required anymore. Please remove it from your ' +\n    'tag. Check the documentation for more details.');\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n/** Types of figures. */\nexport type FigureType = 'auto' | '1by1' | '1dot8by1' | '1dot2by1' | '1by1dot1' | '2dot6by1' | 'rounded';\n/** @docs-private */\nexport type figureSizes = 'auto' | '1by1' | '1dot8by1' | '1dot2by1' | '1by1dot1' | '2dot6by1';\n\nconst DEFAULT_SIZE = 'auto';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'figure[nxFigure]',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./figure.component.scss'],\n  host: {\n    '[class.nx-image--auto]': 'size === \"auto\" && !rounded',\n    '[class.nx-image--1by1]': 'size === \"1by1\"',\n    '[class.nx-image--1dot8by1]': 'size === \"1dot8by1\"',\n    '[class.nx-image--1dot2by1]': 'size === \"1dot2by1\"',\n    '[class.nx-image--1by1dot1]': 'size === \"1by1dot1\"',\n    '[class.nx-image--2dot6by1]': 'size === \"2dot6by1\"',\n    '[class.nx-image--rounded]': 'rounded'\n  }\n})\nexport class NxFigureComponent {\n  private _classNames: FigureType;\n\n  /** @docs-private */\n  rounded: boolean;\n\n  /** @docs-private */\n  size: figureSizes;\n\n  /**\n   * Sets the type of the visual appearance of the image.\n   * The default value  is 'auto'.\n   */\n  @Input('nxFigure')\n  set classNames(value: FigureType) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n    const sizeRegex = /^(auto|1by1|1dot8by1|1dot2by1|1by1dot1|2dot6by1)$/;\n    const [size = null] = this._classNames.match(sizeRegex) || [DEFAULT_SIZE];\n    this.size = size as any;\n\n    this.rounded = !!this._classNames.match(/rounded/);\n  }\n\n  get classNames(): FigureType {\n    return this._classNames;\n  }\n}\n","import { NxImageDirective } from './image.directive';\nimport { NgModule } from '@angular/core';\nimport { NxFigureComponent } from './figure.component';\n\n@NgModule({\n  declarations: [ NxFigureComponent, NxImageDirective ],\n  exports: [ NxFigureComponent, NxImageDirective ]\n})\nexport class NxImageModule {\n}\n","import {NxRadioCircleComponent} from './radio-circle.component';\nimport {ElementRef, Input, OnChanges, ViewChild} from '@angular/core';\n\nlet nextId = 0;\n\nexport abstract class NxRadioCircleButton implements OnChanges {\n\n  /** @docs-private */\n  id: number = ++nextId;\n\n  /** Sets the label displayed below the circle. */\n  @Input('nxLabel')\n  label: string;\n\n  /** Sets an additional hint displayed below the label. */\n  @Input('nxHint')\n  hint: string;\n\n  /** Sets the value used in the model. */\n  @Input('nxValue')\n  value: any;\n\n  /** @docs-private */\n  @ViewChild('labelElement')\n  labelElement: ElementRef;\n\n  constructor(\n    /** @docs-private */\n    protected radioCircle: NxRadioCircleComponent\n    ) {\n  }\n\n  ngOnChanges(): void {\n    if (!this.label) {\n      console.warn(`nx-radio-circle-icon-button/nx-radio-circle-svg-button: required field 'nxLabel' is not set`);\n    }\n  }\n\n  get checked(): boolean {\n    return this.radioCircle.selectedButton === this || null;\n  }\n\n  /** Whether the item is preselected. */\n  @Input('nxSelected')\n  set checked(checked: boolean) {\n    if (checked) {\n      this.radioCircle.selectedButton = this;\n    } else {\n      if (this.checked) {\n        this.radioCircle.selectedButton = null;\n      }\n    }\n  }\n\n  /** @docs-private */\n  get circleButtonId(): string {\n    return this.radioCircle.radioCircleId + '-' + this.id;\n  }\n\n  /** @docs-private */\n  get radioCircleId(): string {\n    return this.radioCircle.radioCircleId;\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input, OnInit,\n  Output,\n  QueryList,\n  Renderer2\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {NxRadioCircleButton} from './radio-circle-button';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nlet nextId = 0;\n\n/**\n * @deprecated Use `nx-circle-toggle-group` instead\n * @deletion-target 8.0.0\n */\n@Component({\n  selector: 'nx-radio-circle',\n  templateUrl: './radio-circle.html',\n  styleUrls: ['./radio-circle-button.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRadioCircleComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.is-responsive]': 'responsive',\n    '[class.is-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled',\n  }\n})\nexport class NxRadioCircleComponent implements ControlValueAccessor, AfterContentInit {\n\n  private _id = nextId++;\n\n  @ContentChildren(NxRadioCircleButton)\n  private _buttons: QueryList<NxRadioCircleButton>;\n\n  private _selectedButton: NxRadioCircleButton;\n\n  private _responsive: boolean = true;\n\n  /** An event emitted when the selection changes. */\n  @Output('nxValueChange')\n  valueChange: EventEmitter<any> = new EventEmitter();\n\n  /** Sets the name of the radio circle, which is used for accessibility. */\n  @Input('nxName')\n  name: string;\n\n  /** Whether the radio circle is disabled. */\n  @Input('disabled')\n  public disabled = false;\n\n  /**\n   * Whether the toggle behavior is disabled.\n   *\n   * @deprecated Use `nxResponsive` instead\n   * @deletion-target 7.0.0\n   */\n  @Input('nxResponsiveToggle')\n  set responsiveToggle(value: boolean) {\n    console.warn('`nxResponsiveToggle` is deprecated. Use `nxResponsive` instead.');\n    this.responsive = value;\n  }\n\n  /**\n   * Whether the radio circle should have a responsive behavior.\n   *\n   * On false the circles will stay even on mobile viewports.\n   * Default: true.\n   */\n  @Input('nxResponsive')\n  set responsive(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.responsive) {\n      this._responsive = newValue;\n    }\n  }\n\n  get responsive(): boolean {\n    return this._responsive;\n  }\n\n  constructor(private renderer: Renderer2) {\n    console.warn('`nx-radio-circle` is deprecated. Use `nx-circle-toggle-group` instead.');\n  }\n\n  /** Sets the value of the radio circle. */\n  @Input('nxValue')\n  set value(value: any) {\n    this.writeValue(value);\n  }\n\n  get value(): any {\n    return this._selectedButton ? this._selectedButton.value : null;\n  }\n\n  /**\n   * @docs-private\n   * @deprecated Use `responsive` getter\n   * @deletion-target 7.0.0\n   */\n  getResposiveToggle(): any {\n    console.warn('The method `getResponsiveToggle is deprecated. Use the `responsive` getter instead');\n    return this._responsive;\n  }\n\n  private onTouchedCallback = (option: any) => {\n  }\n\n  private onChangeCallback = (option: any) => {\n  }\n\n  /** The id of the radio circle. */\n  get radioCircleId(): string {\n    return `radio-circle-${this._id}`;\n  }\n\n  ngAfterContentInit(): void {\n    this.renderer.addClass(this._buttons.first.labelElement.nativeElement, `nx-radio-circle__label--first`);\n    this.renderer.addClass(this._buttons.last.labelElement.nativeElement, `nx-radio-circle__label--last`);\n  }\n\n  writeValue(value: any): void {\n    if (this._buttons) {\n      this._selectedButton = this._buttons.find((button) => button.value === value);\n    }\n  }\n\n  registerOnChange(callback: any): void {\n    this.onChangeCallback = callback;\n  }\n\n  registerOnTouched(callback: any): void {\n    this.onTouchedCallback = callback;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  set selectedButton(button: NxRadioCircleButton) {\n    if (this.disabled) {\n      return;\n    }\n    this._selectedButton = button;\n    this.onChangeCallback(this.value);\n    this.valueChange.emit(this.value);\n  }\n\n  /** @docs-private */\n  get selectedButton(): NxRadioCircleButton {\n    return this._selectedButton;\n  }\n\n  /** @docs-private */\n  get buttons(): QueryList<NxRadioCircleButton> {\n    return this._buttons;\n  }\n}\n\n","import {Component, forwardRef, Inject, Input} from '@angular/core';\nimport {NxRadioCircleButton} from '../radio-circle-button';\nimport {NxRadioCircleComponent} from '../radio-circle.component';\n\n/**\n * @deprecated Use `nx-circle-toggle` instead\n * @deletion-target 8.0.0\n */\n@Component({\n  selector: 'nx-radio-circle-icon-button',\n  templateUrl: './radio-circle-icon-button.html',\n  styleUrls: ['../radio-circle-button.scss'],\n  providers: [\n    {\n      provide: NxRadioCircleButton, useExisting: forwardRef(() => NxRadioCircleIconButtonComponent)\n    }\n  ],\n  host: {\n    '[class.is-disabled]': 'radioCircle.disabled',\n    '[attr.aria-disabled]': 'radioCircle.disabled'\n  }\n})\nexport class NxRadioCircleIconButtonComponent extends NxRadioCircleButton {\n\n  /** Sets the id of the icon to display. */\n  @Input('nxIcon')\n  icon: string;\n\n  constructor(\n      /** @docs-private */\n      @Inject(forwardRef(() => NxRadioCircleComponent)) public radioCircle: NxRadioCircleComponent\n    ) {\n    super(radioCircle);\n    console.warn('`nx-radio-circle-icon-button` is deprecated. Use `nx-circle-toggle` instead.');\n  }\n}\n","import { AfterViewInit, Component, forwardRef, Inject, Input, HostListener, HostBinding } from '@angular/core';\nimport { NxRadioCircleButton } from '../radio-circle-button';\nimport { NxRadioCircleComponent } from '../radio-circle.component';\n\n/**\n * @deprecated Use `nx-circle-toggle` instead\n * @deletion-target 8.0.0\n */\n@Component({\n  selector: 'nx-radio-circle-svg-button',\n  templateUrl: './radio-circle-svg-button.html',\n  styleUrls: ['../radio-circle-button.scss'],\n  providers: [\n    {\n      provide: NxRadioCircleButton, useExisting: forwardRef(() => NxRadioCircleSvgButtonComponent)\n    }\n  ]\n})\nexport class NxRadioCircleSvgButtonComponent extends NxRadioCircleButton implements AfterViewInit {\n\n  /** Sets the SVG used for the not-checked state. */\n  @Input('nxSvg')\n  svg: string;\n\n  /** Sets the SVG used for the checked state. */\n  @Input('nxSvgChecked')\n  svgChecked: string;\n  private _hover: boolean = false;\n\n  /** @docs-private */\n  @HostListener('mouseenter') onMouseEnter() {\n    this._hover = true;\n  }\n\n  /** @docs-private */\n  @HostListener('mouseleave') onMouseLeave() {\n    this._hover = false;\n  }\n\n  constructor(@Inject(forwardRef(() => NxRadioCircleComponent)) radioCircle: NxRadioCircleComponent) {\n    super(radioCircle);\n    console.warn('`nx-radio-circle-svg-button` is deprecated. Use `nx-circle-toggle` instead.');\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.svg) {\n      console.warn(`nx-radio-circle-svg-button: required field 'nxSvg' is not set`);\n    }\n\n    if (!this.svgChecked) {\n      console.warn(`nx-radio-circle-svg-button: required field 'nxSvgChecked' is not set`);\n    }\n  }\n\n  /** @docs-private */\n  get svgUrl(): string {\n    return (this.checked || this._hover) ? this.svgChecked : this.svg;\n  }\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {NgModule} from '@angular/core';\nimport {NxRadioCircleComponent} from './radio-circle.component';\nimport {NxRadioCircleIconButtonComponent} from './icon-button/radio-circle-icon-button.component';\nimport {NxRadioCircleSvgButtonComponent} from './svg-button/radio-circle-svg-button.component';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  declarations: [ NxRadioCircleComponent, NxRadioCircleIconButtonComponent, NxRadioCircleSvgButtonComponent ],\n  exports: [ NxRadioCircleComponent, NxRadioCircleIconButtonComponent, NxRadioCircleSvgButtonComponent ],\n  imports: [\n    CommonModule,\n    NxIconModule\n  ]\n})\nexport class NxRadioCircleModule { }\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'nx-video',\n  templateUrl: 'video.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './video.component.scss' ],\n})\n\n// note that this currently only supports youtube videos\nexport class NxVideoComponent {\n\n  private _videoId: string = null;\n\n  /** Sets the id of the YouTube video. */\n  @Input('nxVideoId')\n  set videoId(value: string) {\n    if (this._videoId !== value) {\n      this._videoId = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get videoId(): string {\n    return this._videoId;\n  }\n\n  private _altText: string = '';\n\n  /** Sets the value of the alt attribute for the preview image. */\n  @Input('nxAltText')\n  set altText(value: string) {\n    if (this._altText !== value) {\n      this._altText = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get altText(): string {\n    return this._altText;\n  }\n\n  private _playButtonAriaLabel: string = '';\n\n  /** Sets the value of the aria-label attribute on the play button (Default: Play Video). */\n  @Input('nxPlayButtonAriaLabel')\n  set nxPlayButtonAriaLabel(value: string) {\n    if (this._playButtonAriaLabel !== value) {\n      this._playButtonAriaLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get nxPlayButtonAriaLabel(): string {\n    return this._playButtonAriaLabel;\n  }\n\n  private _previewImageSrc: string = null;\n\n  /** Sets the preview image. If this is not provided, an image from YouTube will be used as default. */\n  @Input('nxPreviewImageSrc')\n  set previewImageSrc(value: string) {\n    if (this._previewImageSrc !== value) {\n      this._previewImageSrc = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get previewImageSrc(): string {\n    return this._previewImageSrc;\n  }\n\n  private _showPlayerControls: boolean = true;\n\n  /** Sets player controls. If set to false, player controls are not available. */\n  @Input('nxShowPlayerControls')\n  set showPlayerControls(value: boolean) {\n    this._showPlayerControls = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showPlayerControls(): boolean {\n    return this._showPlayerControls;\n  }\n\n  private _allowFullScreen: boolean = true;\n\n  /** Sets fullscreen option. If set to false, fullscreen option is not available. */\n  @Input('nxAllowFullScreen')\n  set allowFullScreen(value: boolean) {\n    this._allowFullScreen = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get allowFullScreen(): boolean {\n    return this._allowFullScreen;\n  }\n\n  private _interfaceLanguage: string = null;\n\n  /** Sets interface language. Can be used to override the interface language determined by YouTube. */\n  @Input('nxInterfaceLanguage')\n  set interfaceLanguage(value: string) {\n    if (this._interfaceLanguage !== value) {\n      this._interfaceLanguage = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get interfaceLanguage(): string {\n    return this._interfaceLanguage;\n  }\n\n  /** @docs-private */\n  showPlayer = false;\n\n  constructor(private sanitizer: DomSanitizer, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  select(): void {\n    this.showPlayer = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n   /** Returns the safe resource URL of the YouTube video, given video id.  */\n  get videoSrc(): SafeResourceUrl {\n    let url = `https://www.youtube.com/embed/${this.videoId}?rel=0&showinfo=0&autoplay=1`;\n    if (!this.showPlayerControls) {\n      url += '&controls=0';\n    }\n    if (!this.allowFullScreen) {\n      url += '&fs=0';\n    }\n    if (this.interfaceLanguage) {\n      url += `&hl=${this.interfaceLanguage}`;\n    }\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n\n  /** Returns the preview image source URL, given video id. */\n  get imgSrc() {\n    return this.previewImageSrc ? this.previewImageSrc : `https://img.youtube.com/vi/${this.videoId}/sddefault.jpg`;\n  }\n\n  /** Returns the labels for the control buttons. */\n  get playButtonAriaLabel() {\n    const defaultLabel = this.altText ? `${this.altText} - Play Video` : 'Play Video';\n    return this.nxPlayButtonAriaLabel ? this.nxPlayButtonAriaLabel : defaultLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxVideoComponent } from './video.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ NxVideoComponent ],\n  exports: [ NxVideoComponent ],\n  imports: [ CommonModule ]\n})\nexport class NxVideoModule {}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getNxDropdownDynamicMultipleError(): Error {\n  return Error('Cannot change `multiselect` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiselect` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getNxDropdownNonArrayValueError(): Error {\n  return Error('Value must be an array in multiselect mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getNxDropdownNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","import { NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { Input } from '@angular/core';\n\nexport abstract class NxDropdownControl extends NxFormfieldControl<any> {\n  /**\n   * Whether the dropdown should allow multi selection and additional checkboxes are shown.\n   *\n   * Note: Please make sure the value you bind is an array. If not an error is thrown! */\n  @Input('nxIsMultiselect') isMultiSelect: boolean = false;\n\n  /** @docs-private */\n  abstract formatValue?(value): string;\n\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'nx-dropdown-group',\n  templateUrl: 'dropdown-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown-group.scss']\n})\nexport class NxDropdownGroupComponent {\n  /** Label displayed in the group. */\n  @Input('nxLabel') label: string;\n}\n","import { Highlightable } from '@angular/cdk/a11y';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxDropdownComponent } from '../dropdown';\nimport { NxDropdownControl } from '../dropdown.control';\nimport { NxDropdownGroupComponent } from './../group/dropdown-group';\n\n\nexport class NxDropdownItemChange {\n\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public item: NxDropdownItemComponent,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/** the unique id counter */\nlet nextId = 0;\n\n\n@Component({\n  selector: 'nx-dropdown-item',\n  templateUrl: 'dropdown-item.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [\n    'dropdown-item.scss'\n  ],\n  host: {\n    '[id]': 'id',\n    'role': 'option',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[class.nx-hidden]': '_hidden',\n    '[class.nx-dropdown-item--active]': 'active',\n    '[class.nx-selected]': 'selected',\n    '[class.nx-multiselect]': 'multiselect',\n    '(click)': '_onClick($event)'\n  }\n})\nexport class NxDropdownItemComponent implements Highlightable, OnDestroy, AfterViewChecked {\n  _hidden = false;\n\n  private _mostRecentViewValue = '';\n\n  private _id = `nx-dropdown-item-${nextId++}`;\n\n  /**\n   * The value of the dropdown item.\n   * You can't use undefined, null and '' (empty strings)\n   * as they are sentinel values signalling empty data.\n   */\n  @Input('nxValue') value;\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  private _selected: boolean = false;\n\n  /** Whether the item is selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  private _active: boolean;\n\n  /** Whether the item is active. */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * @docs-private\n   * Whether the parent dropdown is in multiselect mode.\n   */\n  get multiselect(): boolean {\n    return this._dropdown && this._dropdown.isMultiSelect;\n  }\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<NxDropdownItemChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The wrapping div in the template. Used by dropdown to use the container height for scrolling.\n   */\n  @ViewChild('container') containerElement;\n\n  constructor(\n    @Inject(NxDropdownControl) private _dropdown: NxDropdownControl,\n    /** @docs-private */\n    @Optional() readonly group: NxDropdownGroupComponent,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef) {\n    (this._dropdown as NxDropdownComponent).filterChanges.pipe(takeUntil(this._destroy)).subscribe((value) => {\n      this._showOrHideByFilter(value);\n    });\n    // reset the hidden state when dropdown closes that on next open the user is seeing the full list again\n    (this._dropdown as NxDropdownComponent)._closedStream.pipe(takeUntil(this._destroy)).subscribe(() => {\n      this._hidden = false;\n    });\n  }\n\n  ngAfterViewChecked() {\n    // Since the parent dropdown component could be using the item's label to display the selected values\n    // and it doesn't have a way of knowing if the item's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  _onClick(event) {\n    /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */\n    event.preventDefault();\n    event.stopPropagation();\n    this._selectViaInteraction();\n  }\n\n  /**\n  * `Selects the option while indicating the selection came from the user. Used to\n  * determine if the select's view -> model callback should be invoked.`\n  */\n  _selectViaInteraction(): void {\n    this._selected = this.multiselect ? !this._selected : true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent(true);\n  }\n\n  /** @docs-private */\n  show() {\n    this._hidden = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  hide() {\n    this._hidden = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _showOrHideByFilter(search) {\n    const constraint = (this._dropdown as NxDropdownComponent).filterFn(search, this.viewValue);\n    this._hidden = constraint ? false : true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get _formattedValue() {\n    return (this._dropdown as NxDropdownComponent).valueFormatter(this.value);\n  }\n\n  /** @docs-private */\n  get viewValue() {\n    return (this._elementRef.nativeElement.textContent || '').trim();\n  }\n\n  /** @docs-private */\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  private _emitSelectionChangeEvent(isUserInput: boolean = false) {\n    this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));\n  }\n\n  /** @docs-private */\n  setActiveStyles(): void {\n    this._active = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  setInactiveStyles(): void {\n    this._active = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  getLabel(): string {\n    return this.value;\n  }\n\n  _isContentEmpty(element) {\n    return element.children.length === 0 && !element.textContent.trim();\n  }\n\n  _onLabelChange() {\n    // trigger change detection when the label content changes for the case that ng-content was empty before.\n    // this is also important when the label comes in deferred, e.g. by a delayed observable,\n    // then first the default label derived from the value is shown\n    // and after the value from the async observable is ready we need to trigger change detection that the derived label\n    // gets hidden again.\n    // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone\n    // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-template and project it into the required destination.\n@Directive({\n  selector: '[nxClosedLabel]'\n})\nexport class NxDropdownClosedLabelDirective {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { NxFormfieldComponent, NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, SHIFT, TAB } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay } from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  isDevMode,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewChild,\n  TemplateRef,\n  ContentChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport { filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\n\nimport { getNxDropdownNonArrayValueError, getNxDropdownNonFunctionValueError } from './dropdown-errors';\nimport { NxDropdownControl } from './dropdown.control';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemChange, NxDropdownItemComponent } from './item/dropdown-item';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n\n/** Change event object that is emitted when the select value has changed. */\nexport class NxDropdownSelectChange<T = any> {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: NxDropdownComponent,\n    /** Current value of the select that emitted the event. */\n    public value: T) { }\n}\n\n// used in calculation of scrolltop to correctly show some space to the top of the panel\nconst itemPadding = 16;\n\n// Max-height: 6 items x 44px + 16px padding before first item\nexport const SELECT_PANEL_MAX_HEIGHT = 280;\n\n@Component({\n  selector: 'nx-dropdown',\n  templateUrl: 'dropdown.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown.scss'],\n  providers: [\n    { provide: NxDropdownControl, useExisting: NxDropdownComponent },\n    { provide: NxFormfieldControl, useExisting: NxDropdownComponent },\n  ],\n  host: {\n    'role': 'button',\n    '[class.nx-dropdown]': 'true',\n    '[class.is-filled]': 'hasValue',\n    '[class.has-focus]': 'focused',\n    '[class.nx-dropdown--negative]': '_negative',\n    '[class.nx-dropdown--disabled]': 'disabled',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-required]': 'required',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-haspopup]': '\"listbox\"',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.tabindex]': 'tabIndex',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': 'openPanel()'\n  }\n})\nexport class NxDropdownComponent extends NxDropdownControl implements ControlValueAccessor,\n  OnInit, AfterContentInit, OnDestroy, DoCheck {\n\n  // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here\n  readonly readonly: boolean = false;\n\n  private _selectionModel: SelectionModel<NxDropdownItemComponent>;\n\n  protected _disabled: boolean = false;\n\n  private _focused: boolean = false;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** Holds the value from nxValue. */\n  private _value: any;\n\n  /** The scroltop of the panelBody. */\n  private _scrollTop: number = 0;\n\n  /** The minimal space between the viewport and the overlay */\n  _overlayViewportMargin: number = 16;\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** Holds the panelWidth after panel was attached. */\n  _panelWidth: number;\n\n  /**\n   * @docs-private\n   * Emits when internal state changes to inform formfield about it.\n   */\n  readonly stateChanges = new Subject<any>();\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** @docs-private */\n  ariaDescribedby: string;\n\n  private _tabIndex: number = 0;\n\n  /** @docs-private */\n  currentFilter: string = '';\n\n\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n\n  /** Label to describe the component. */\n  @Input('nxAriaLabel') _ariaLabel: string = '';\n\n  /** Selected value */\n  @Input('nxValue')\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n      this._onChange(newValue);\n    }\n  }\n\n  /** Whether the dropdown is disabled. */\n  @Input('nxDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether the component is required. This adds an aria-required label to the component. */\n  @Input('nxRequired') required: boolean;\n\n  private _style: string = '';\n  /** Whether the dropdown should render in its negative style or not. */\n  _negative: boolean = false;\n\n  /** If set to 'negative', the component is displayed with the negative set of styles. */\n  @Input('nxStyle')\n  set styles(value: string) {\n\n    if (this._style === value) {\n      return;\n    }\n\n    this._style = value;\n    this._negative = !!this._style.match(/negative/);\n  }\n\n  /** Whether the dropdown should be shown with an additional filter input. */\n  @Input('nxShowFilter') showFilter: boolean = false;\n\n  /** Text displayed as placeholder for the filter. */\n  @Input('nxFilterPlaceholder') filterPlaceholder: string = '';\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => o), map(() => { }));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => !o), map(() => { }));\n\n  /** Event emitted when the user types in the filter input. */\n  @Output('filterInput') readonly filterChanges: Subject<any> = new Subject<any>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output('nxValueChange') readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Event emitted when the selected value has been changed. */\n  @Output() readonly selectionChange: EventEmitter<NxDropdownSelectChange> =\n    new EventEmitter<NxDropdownSelectChange>();\n\n  /** @docs-private */\n  readonly optionSelectionChanges: Observable<NxDropdownItemChange> = defer<Observable<NxDropdownItemChange>>(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [{\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'top'\n  }, {\n    originX: 'start',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center'\n  }, {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  }];\n\n\n  /**\n   * @docs-private\n   * Panel containing the select options.\n   */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('panelBody') panelBody: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('filterInput') filterInput: ElementRef;\n\n  /**\n   * @docs-private\n   * Overlay pane containing the options.\n   */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownItemComponent, { descendants: true }) options;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownGroupComponent) groups;\n\n  @ContentChild(NxDropdownClosedLabelDirective)\n  _customClosedDropdownLabel: NxDropdownClosedLabelDirective;\n\n  @ViewChild('defaultClosedDropdownLabel')\n  private _defaultClosedDropdownLabel: TemplateRef<any>;\n\n  /** @docs-private */\n  get closedDropdownLabel(): TemplateRef<any> {\n    return this._closedDropdownLabel;\n  }\n  private _closedDropdownLabel: TemplateRef<any>;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The currently selected option.\n   */\n  get selected(): NxDropdownItemComponent | NxDropdownItemComponent[] {\n    return this.isMultiSelect ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  private _keyManager: ActiveDescendantKeyManager<NxDropdownItemComponent>;\n\n  /** @docs-private */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n  set panelOpen(value: boolean) {\n    this._panelOpen = value;\n  }\n\n  /**\n   * Function that transforms the value into a string.\n   * This function is used for displaying and filtering the content\n   * ( Default: (value) => value ? value.toString() : null; ).\n   */\n  @Input('nxValueFormatter') valueFormatter = (value) => {\n    return value == null ? '' : value.toString();\n  }\n\n  /** @docs-private */\n  get label(): string {\n    return this.formFieldComponent ? this.formFieldComponent.label : '';\n  }\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: string, o2: string) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  private _filterFn = (search: string, itemValue: string) => {\n    return itemValue.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) >= 0;\n  }\n\n  /**\n   * Function to be used when the user types into the search filter. The first argument is the user input,\n   * the second argument is the dropdown item value. The dropdown items will use this function to set their\n   * visibility state.\n   * A boolean should be returned.\n   */\n  @Input()\n  get filterFn() { return this._filterFn; }\n  set filterFn(fn: (search: string, itemValue: string) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._filterFn = fn;\n  }\n\n  /**\n   * @docs-private\n   * Whether the select is focused.\n   */\n  get focused(): boolean {\n    return this._focused || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => { };\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => { };\n\n  /** @docs-private */\n  get elementRef(): ElementRef {\n    return this._elementRef;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() private formFieldComponent: NxFormfieldComponent,\n    /** @docs-private */\n    @Self() @Optional() public ngControl: NgControl,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    super();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex, 10) || 0;\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<NxDropdownItemComponent>(this.isMultiSelect);\n  }\n\n  ngAfterContentInit() {\n    this._closedDropdownLabel =\n      this._customClosedDropdownLabel && this._customClosedDropdownLabel.templateRef || this._defaultClosedDropdownLabel;\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  /** @docs-private */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<NxDropdownItemComponent>(this.options)\n      .withTypeAhead()\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation('ltr')\n      .skipPredicate(item => item._hidden);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.closePanel();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        // Delay the auto scrolling until all items have settled otherwise the item containers might\n        // not exist yet\n        this._ngZone.onStable\n          .asObservable()\n          .pipe(take(1)).subscribe(() => this._scrollActiveOptionIntoView());\n      } else if (!this._panelOpen && !this.isMultiSelect && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.item, event.isUserInput);\n\n      if (event.isUserInput && !this.isMultiSelect && this._panelOpen) {\n        this.closePanel();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        // defer it for the next cycle to not run in changed after checked errors\n        // the combination of dropdown-item notifying parent and when the parent\n        // tries to fetch the triggerValue from the child throws these errors\n        setTimeout(() => {\n          this._changeDetectorRef.markForCheck();\n          this.stateChanges.next();\n        });\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: NxDropdownItemComponent, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this.isMultiSelect) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.isMultiSelect) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.isMultiSelect && value) {\n      if (!Array.isArray(value)) {\n        throw getNxDropdownNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): NxDropdownItemComponent | undefined {\n    const correspondingOption = this.options.find((option: NxDropdownItemComponent) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n    return correspondingOption;\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.isMultiSelect) {\n      valueToEmit = (this.selected as NxDropdownItemComponent[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as NxDropdownItemComponent).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.isMultiSelect) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Opens the panel of the dropdown. */\n  openPanel() {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n    this._panelOpen = true;\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    this._keyManager.withHorizontalOrientation(null);\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Closes the panel of the dropdown. */\n  closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation('ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.openedChange.emit(false);\n      // defer the focus if the dropdown triggers actions that detach\n      // a template/view from the DOM to prevent changed after checked errors\n      setTimeout(() => this.focus());\n    }\n  }\n\n  // calculate inital scrollTop when the dropdown opens\n  // scrolls the selected item to the middle of the panel if possible\n  private _calculateScrollTop() {\n    // reset the scrolltop to make calculation easier\n    this.panelBody.nativeElement.scrollTop = 0;\n    this._scrollTop = 0;\n    if (!this.empty) {\n      const offset = this._getItemOffset(this._keyManager.activeItem);\n      const panelHeight = this.panelBody.nativeElement.offsetHeight;\n      const panelRect = this.panelBody.nativeElement.getBoundingClientRect();\n      const middleOfPanel = panelRect.top + panelHeight / 2;\n      const activeItemRect = this._keyManager.activeItem.containerElement.nativeElement.getBoundingClientRect();\n      if (offset > middleOfPanel) {\n        // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our\n        // target position for the item and subtract it from the offset (which is now always relative to the viewport)\n        // to middle out the text a bit more add half of the height\n        // (this is still a few pixels off because the container is a bit larger than the font)\n        this._scrollTop = offset - middleOfPanel + (activeItemRect.height - itemPadding) / 2;\n        this.panelBody.nativeElement.scrollTop = this._scrollTop;\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    if (!this.panelOpen || !this._keyManager.activeItem) {\n      return;\n    }\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const itemRect = this._keyManager.activeItem.containerElement.nativeElement.getBoundingClientRect();\n    const labelCount = this._countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n      this.groups);\n\n    this.panelBody.nativeElement.scrollTop = this._getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      itemRect.height,\n      this.panelBody.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  private _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<NxDropdownItemComponent>,\n    optionGroups: QueryList<NxDropdownGroupComponent>): number {\n\n    if (optionGroups.length) {\n      const optionsArray = options.toArray();\n      const groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n  private _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n    let optionOffset = optionIndex * optionHeight + itemPadding;\n\n    if (this.showFilter) {\n      const filterHeight = this.panel.nativeElement.querySelector('.nx-dropdown__filter').getBoundingClientRect().height;\n      optionOffset = optionIndex * optionHeight + filterHeight;\n    }\n\n    if (optionOffset < currentScrollPosition) {\n      return optionOffset;\n    }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n      return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n  }\n\n  private _getItemOffset(item) {\n    const itemRect = item.containerElement.nativeElement.getBoundingClientRect();\n\n    return itemRect.top;\n  }\n\n  /**\n   * @docs-private\n   * Formfield Implementation\n   */\n  setDescribedByIds(ids: string[]): void {\n    this.ariaDescribedby = ids.join(' ');\n  }\n\n  /** @docs-private */\n  setAriaLabel(value: string) {\n    this._ariaLabel = value;\n  }\n\n  _getAriaLabel() {\n    return this._ariaLabel || (this.formFieldComponent ? this.formFieldComponent.label : null);\n  }\n\n  /**\n   * @docs-private\n   * Whether the select has a value.\n   */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  /** @docs-private */\n  get hasValue() {\n    return this._selectionModel.hasValue();\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n  /** End Formfield */\n\n  /** ControlValueAccessor */\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /** End ControlValueAccessor */\n\n  _handleKeydown(event: KeyboardEvent) {\n    this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n  }\n\n  private _handleClosedKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n      keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.openPanel();\n    } else if (!this.isMultiSelect && !this.disabled) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  private _handleOpenKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    // all events other than the listed ones should be ignored or handled in _onFilter()\n    if (!([DOWN_ARROW, UP_ARROW, HOME, END, ENTER, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB].indexOf(keyCode) >= 0)) {\n        return;\n    }\n\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.closePanel();\n    } else if (keyCode === ENTER && manager.activeItem && !allHidden) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === ENTER && allHidden) {\n      event.preventDefault();\n\n      this.closePanel();\n    } else if (!this.showFilter && keyCode === SPACE && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === TAB) {\n      this.closePanel();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem &&\n        manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /** @docs-private */\n  formatValue(value): string {\n    return this.valueFormatter(value);\n  }\n\n  /** Called when the user types in the filter input */\n  _onFilter(event) {\n    event.preventDefault();\n    this.currentFilter = event.target.value;\n    this.filterChanges.next(event.target.value);\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n    if (allHidden) {\n      this._keyManager.setActiveItem(null);\n    } else {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * @docs-private\n   * The value displayed in the trigger.\n   */\n  get triggerValue(): string {\n\n    if (this.empty) {\n      return '';\n    }\n\n    if (this.isMultiSelect) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      return selectedOptions.join(', ');\n    }\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this._changeDetectorRef.markForCheck();\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this.panelBody.nativeElement.focus();\n      if (this._keyManager.activeItem) {\n        this._calculateScrollTop();\n      }\n      this._changeDetectorRef.markForCheck();\n      this.openedChange.emit(true);\n      if (this.showFilter) {\n        this.filterInput.nativeElement.focus();\n      }\n    });\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (this.filterInput && this.showFilter) {\n      this._clearFilter();\n    }\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /** @docs-private */\n  get isFilterEmpty() {\n    return this.currentFilter.length === 0;\n  }\n\n  /** @docs-private */\n  _clearFilter() {\n    this.filterInput.nativeElement.value = '';\n    this.currentFilter = '';\n    this.filterChanges.next('');\n  }\n\n  /** @docs-private determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n}\n","import { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxCheckboxModule } from '@allianz/ngx-ndbx/checkbox';\nimport { NxDropdownComponent } from './dropdown';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemComponent } from './item/dropdown-item';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule,\n    NxCheckboxModule,\n    OverlayModule,\n    A11yModule,\n    NxIconModule,\n    ObserversModule\n  ],\n  declarations: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ],\n  exports: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ]\n})\nexport class NxDropdownModule {\n\n}\n","import { Component, Input, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\n\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Option selected event */\nexport class NxAutocompleteOptionSelected {\n  constructor(\n    /** The option that is selected or deselected. */\n    public source: NxAutocompleteOptionComponent,\n    /** Whether the input was triggered by the user. */\n    public isUserInput = false) { }\n}\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n@Component({\n  selector: 'nx-autocomplete-option',\n  templateUrl: 'autocomplete-option.component.html',\n  styleUrls: ['autocomplete-option.component.scss'],\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.nx-active]': 'active',\n    '[class.nx-disabled]': 'disabled',\n    '[style.display]': '\\'block\\'' // needed for to be able to calculate offset height\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxAutocompleteOptionComponent {\n\n  /** Id of the autocomplete option. By default it is set to an incremented value. */\n  public get id(): string {\n    return this._id;\n  }\n  private _id = `nx-autocomplete-option-${_uniqueIdCounter++}`;\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n  private _selected = false;\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n  private _active = false;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n    }\n  }\n  private _disabled = false;\n\n  /** The value of the autocomplete option. */\n  @Input() value: any;\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<NxAutocompleteOptionSelected>();\n\n\n  constructor(\n    /** @docs-private */ public elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));\n  }\n\n  /** @docs-private */\n  get viewValue(): string {\n    return (this.elementRef.nativeElement.textContent || '').trim();\n  }\n\n  /**\n   * @docs-private\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * @docs-private\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * @docs-private\n   * Gets the label to be used when determining whether the option should be focused.\n   */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /**\n   * @docs-private\n   * Sets focus onto this option.\n   */\n  focus(): void {\n    const element = this.elementRef.nativeElement;\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n}\n","\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ContentChildren,\n  QueryList,\n  ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy\n} from '@angular/core';\n\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\n\nimport { Observable, Subscription } from 'rxjs';\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class NxAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: NxAutocompleteComponent,\n    /** Option that was selected. */\n    public option: NxAutocompleteOptionComponent) { }\n}\n\n@Component({\n  selector: 'nx-autocomplete',\n  templateUrl: 'autocomplete.component.html',\n  styleUrls: ['autocomplete.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxAutocomplete',\n  host: {\n    'class': 'nx-autocomplete'\n  }\n})\nexport class NxAutocompleteComponent implements AfterViewInit, OnDestroy {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<NxAutocompleteOptionComponent>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /**\n   * @docs-private\n   * Element for the panel containing the autocomplete options.\n   */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Items observable. If given, autocomplete takes care of the options and ng-content is discarderd */\n  @Input()\n  set items(val: Array<string> | Observable<Array<string>>) {\n    this._hasItems = true;\n    if (Array.isArray(val)) {\n      this._items = val;\n    } else if (val instanceof Observable) {\n      if (this._itemsSubscription) {\n        this._itemsSubscription.unsubscribe();\n      }\n      this._itemsSubscription = val.subscribe((itms) => {\n        this._items = itms;\n        this._changeDetectorRef.markForCheck();\n        // and check visibility in next cycle, when options are set\n        setTimeout(() => this._setVisibility());\n      });\n    } else if (val === null) {\n      this._items = val;\n    } else {\n      throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');\n    }\n  }\n  get items(): Array<string> | Observable<Array<string>> {\n    return this._items;\n  }\n  private _items: Array<string> = null;\n  private _itemsSubscription: Subscription;\n\n  /**\n   * @docs-private\n   * Is items observable set\n   */\n  public get hasItems(): boolean {\n    return this._hasItems;\n  }\n  private _hasItems = false;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<NxAutocompleteSelectedEvent> =\n      new EventEmitter<NxAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Autocomplete options in view - ie from items */\n  @ViewChildren(NxAutocompleteOptionComponent)\n  private _vOptions: QueryList<NxAutocompleteOptionComponent>;\n\n  /** Autocomplete options in content - ie user provided */\n  @ContentChildren(NxAutocompleteOptionComponent, { descendants: true})\n  private _cOptions: QueryList<NxAutocompleteOptionComponent>;\n\n  /** Autocomplete options */\n  public get options(): QueryList<NxAutocompleteOptionComponent> {\n    return this.hasItems ? this._vOptions : this._cOptions;\n  }\n\n  /**\n   * Takes classes set on the host nx-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `nx-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  // As autocomplete option can hold any value, we might need a converter\n  // to get a string representation, which can be stored in input. Default value ? value.toString() : null.\n  /**\n   * Value to string converter.\n   */\n  @Input('nxValueFormatter')\n  public valueFormatter: (value: any) => string = (value: any) => value ? value.toString() : null\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef) {\n  }\n\n  ngAfterViewInit(): void {\n    this._keyManager = new ActiveDescendantKeyManager<NxAutocompleteOptionComponent>(this.options).withWrap();\n    this._setVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._itemsSubscription) {\n      this._itemsSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!(this.options && this.options.length);\n    this._classList['nx-autocomplete-visible'] = this.showPanel;\n    this._classList['nx-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: NxAutocompleteOptionComponent): void {\n    const event = new NxAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n","import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Observable, Subject, Subscription, defer, of, merge, fromEvent } from 'rxjs';\nimport { delay, filter, switchMap, take, tap, debounceTime, first } from 'rxjs/operators';\n\nimport { NxWordComponent } from '@allianz/ngx-ndbx/natural-language-form';\nimport { NxAutocompleteOptionComponent, NxAutocompleteOptionSelected } from './autocomplete-option.component';\nimport { NxAutocompleteComponent } from './autocomplete.component';\n\n\n\n\n\n\n\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const NX_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxAutocompleteTriggerDirective),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getNxAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +\n               'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[nxAutocomplete], textarea[nxAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'nxAutocompleteTrigger',\n  providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class NxAutocompleteTriggerDirective implements ControlValueAccessor, OnDestroy, OnChanges, AfterViewInit {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Subscription to control value changes */\n  private _controlValueChangesSubscription: Subscription;\n\n  /** Subscription to items observable */\n  private _itemsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** Value changes */\n  private readonly _valueChanges: Subject<any> = new Subject<any>();\n\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('nxAutocomplete') autocomplete: NxAutocompleteComponent;\n\n  /** The items callback. Called with input value, must return Observable of Array of strings */\n  @Input('nxAutocompleteItems')\n  set itemsCb(val: (val: string) => Observable<Array<string>>) {\n    if (typeof val === 'function') {\n      this._itemsCb = val;\n    } else {\n      throw new Error('Wrong value type for nxAutocompleteItems');\n    }\n  }\n  get itemsCb() {\n    return this._itemsCb;\n  }\n  private _itemsCb: (val: string) => Observable<Array<string>> = null;\n\n  /** Debounce in ms before items callback is triggered. Defaults to 400 */\n  @Input('nxAutocompleteDebounce')\n  set debounce(val: number) {\n    this._debounce = coerceNumberProperty(val);\n  }\n  private _debounce: number = 400;\n\n  /** Whether autocomplete functionality is disabled. */\n  @Input('nxAutocompleteDisabled')\n  set autocompleteDisabled(val: boolean) {\n    this._autocompleteDisabled = val;\n    this._bindAutocompleteItems();\n  }\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  private _autocompleteDisabled = false;\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<NxAutocompleteOptionSelected> = defer<Observable<NxAutocompleteOptionSelected>>(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to NxAutocompleteOptionComponent type. */\n  get activeOption(): NxAutocompleteOptionComponent | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return of(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField.elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = (val) => {\n    this._valueChanges.next(val);\n  }\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  private get _formField(): NxFormfieldComponent | NxWordComponent {\n    if (this._nxFormField) {\n      return this._nxFormField;\n    } else if (this._nxWordField) {\n      return this._nxWordField;\n    }\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _nxFormField: NxFormfieldComponent,\n              @Optional() @Host() private _nxWordField: NxWordComponent,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n    if (this._controlValueChangesSubscription) { this._controlValueChangesSubscription.unsubscribe(); }\n    if (this._itemsSubscription) { this._itemsSubscription.unsubscribe(); }\n  }\n\n  ngOnChanges() {\n    this._bindAutocompleteItems();\n  }\n\n  ngAfterViewInit() {\n    this._bindAutocompleteItems();\n  }\n\n  /**\n   * Binds or rebinds the autocomplete items. Prerequisites:\n   * - items callback has to be defined\n   * - autocomplete panel has to be bound\n   */\n  private _bindAutocompleteItems() {\n    if (this._controlValueChangesSubscription) {\n      this._controlValueChangesSubscription.unsubscribe();\n    }\n\n    if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {\n\n      const itemsSubject = new Subject<string[]>();\n\n      this.autocomplete.items = itemsSubject;\n\n      const valueChanges =\n        this._formField &&\n        this._formField._control &&\n        this._formField._control.ngControl &&\n        this._formField._control.ngControl.valueChanges ?\n          this._formField._control.ngControl.valueChanges : this._valueChanges;\n\n      this._controlValueChangesSubscription = valueChanges.pipe(debounceTime(this._debounce))\n        .subscribe((input) => {\n          if (this._itemsSubscription) {\n            this._itemsSubscription.unsubscribe();\n          }\n          this._itemsSubscription = this._itemsCb(input).pipe(first()).subscribe(\n            (result) => {\n              itemsSubject.next(result);\n            },\n            (err) => {\n              // On error reset\n              // TODO: Log error?\n              itemsSubject.next([]);\n            }\n          );\n        });\n    }\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    if (!this.autocompleteDisabled) {\n      this._attachOverlay();\n      this._floatLabel();\n    }\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<NxAutocompleteOptionSelected> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          of()\n    );\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._isFieldEnabled()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    const target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value === '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._isFieldEnabled() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._isFieldEnabled()) {\n      this._previousValue = this._element.nativeElement.value;\n      this.openPanel();\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(): void {\n    if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {\n      this._nxFormField.floatLabel = 'always';\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._nxFormField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n\n    if (this.autocomplete.options.length === 0) {\n      return;\n    }\n    let optionOffset = 0;\n    const optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;\n    if (this.autocomplete._keyManager.activeItem) {\n      optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;\n    }\n\n    const newScrollPosition = _getOptionScrollPosition(\n      optionOffset,\n      optionHeight,\n      this.autocomplete._getScrollTop(),\n      this.autocomplete.panel.nativeElement.offsetHeight\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() =>  this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n\n    const toDisplay = this.autocomplete && this.autocomplete.valueFormatter ?\n      this.autocomplete.valueFormatter(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: NxAutocompleteOptionSelected | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: NxAutocompleteOptionComponent) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getNxAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({minWidth: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({minWidth: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      minWidth: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withViewportMargin(16)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _scrollStrategy() {\n    return this._overlay.scrollStrategies.reposition();\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel min-width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _isFieldEnabled(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Option offset\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset: number, optionHeight: number,\n  currentScrollPosition: number, panelHeight: number): number {\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAutocompleteComponent } from './autocomplete.component';\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\nimport { NxAutocompleteTriggerDirective } from './autocomplete-trigger.directive';\n\n@NgModule({\n  declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n  exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n  imports: [CommonModule, OverlayModule, A11yModule]\n})\nexport class NxAutocompleteModule { }\n","import { NxFormfieldControl, NxFormfieldErrorDirective } from '@allianz/ngx-ndbx/formfield';\nimport { getFontShorthand } from '@allianz/ngx-ndbx/utils';\nimport { Overlay } from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { startWith } from 'rxjs/operators';\nimport { Subject ,  Subscription } from 'rxjs';\n\nimport { NxPopoverTriggerDirective } from '@allianz/ngx-ndbx/popover';\nimport { NxDropdownComponent } from '@allianz/ngx-ndbx/dropdown';\n\n/** Type to determine the minimal width of a word. */\nexport type SIZES = 'regular' | 'short' | 'long';\n\n@Component({\n  selector: 'nx-word',\n  templateUrl: 'word.component.html',\n  styleUrls: [\n    'word.component.scss'\n  ],\n  host: {\n    '[class.size-short]': 'size == \"short\"',\n    '[class.size-regular]': 'size == \"regular\"',\n    '[class.size-long]': 'size == \"long\"',\n    '[class.has-error]': 'hasErrors',\n    '[class.is-focused]': 'isFocused',\n    '[class.is-filled]': 'isFilled',\n    '[class.has-dropdown]': 'hasDropdown',\n\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class NxWordComponent implements AfterContentInit, OnDestroy {\n  private subscription: Subscription = Subscription.EMPTY;\n  private subscriptionValues: Subscription = Subscription.EMPTY;\n\n  /** @docs-private */\n  public hasErrors: boolean = false;\n\n  private measureCanvas: HTMLCanvasElement;\n\n  /** @docs-private */\n  inputChanges = new Subject<any>();\n\n  @ContentChild(NxFormfieldControl) _control: NxFormfieldControl<any>;\n  @ContentChildren(NxFormfieldErrorDirective) _errorChildren: QueryList<NxFormfieldErrorDirective>;\n  @ViewChild(NxPopoverTriggerDirective) _popover: NxPopoverTriggerDirective;\n  @ContentChild(NxDropdownComponent) _dropdown: NxDropdownComponent;\n\n  /** @docs-private */\n  @HostBinding('style.width.px')\n  currentTextWidth: number = 0;\n\n\n  // this will apply different min-widths to our component through our styles\n  /** Provide a hint for a minimal width. The actual size will be determined for inputs for each change. */\n  @Input('nxSize') size: SIZES = 'regular';\n\n  /**\n   * A word doesn't have a set place to show labels.\n   * In order to be accessible, you have to provide a label with this property.\n   * It will be attached to the given input through `aria-label`.\n   */\n  @Input('nxLabel') label: string;\n\n  constructor(\n    /** @docs-private */\n    public elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _renderer: Renderer2,\n    private _overlay: Overlay\n  ) { }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    this.subscription = this._control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this.hasErrors = this._control.errorState;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // if we have a ngcontrol available stick to its valueChanges subject\n    if (this._control.ngControl) {\n      this.subscriptionValues = this._control.ngControl.valueChanges.subscribe(value => {\n        this.updateCurrentTextWidth();\n        this.inputChanges.next();\n      });\n    // in any other case it is a bre input and input changes are signaled through simple state changes\n    } else {\n      this.subscriptionValues = this._control.stateChanges.subscribe(value => {\n        this.updateCurrentTextWidth();\n        this.inputChanges.next();\n      });\n    }\n\n\n    this._control.setAriaLabel(this.label);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n    @docs-private\n    Calculate the width of the full text given by the input,\n    that value is bound to this component so it can grow.\n\n    The involved input is known to have a width of 100% an will fit the additional space given\n    which completes the auto growing behavior.\n  */\n  updateCurrentTextWidth() {\n    // provide the canvas only lazy\n    if (!this.measureCanvas) {\n      this.measureCanvas = this._renderer.createElement('canvas');\n    }\n\n\n    const ctx = this.measureCanvas.getContext('2d');\n    const inputRef = this._control.elementRef;\n    const styles = window.getComputedStyle(inputRef.nativeElement);\n    ctx.font = getFontShorthand(styles);\n\n    const metrics = ctx.measureText(this._control.value);\n    // add 1px (cursor width) to prevent jumping of the text on blur.\n    const newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;\n\n    // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent\n    // Works as promised as long as there is not other tag around the word. Not expected but possible.\n    const parent: HTMLElement = this.elementRef.nativeElement.parentElement;\n    const parentMeasurement = parent.getBoundingClientRect();\n\n    // Limit to own given minimal width\n    this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);\n\n    // Limit to container width\n    this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);\n    this._popover.updatePosition();\n  }\n\n  /** @docs-private */\n  repositionError() {\n    if (this._popover) {\n      this._popover.updatePosition();\n    }\n  }\n\n  // Fail if the required control is missing.\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');\n    }\n  }\n\n  /** @docs-private */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this.elementRef;\n  }\n\n  /** @docs-private */\n  get isFocused(): boolean {\n    return this._control.focused;\n  }\n\n  /** @docs-private */\n  get isFilled(): boolean {\n    return !this._control.empty;\n  }\n\n  /** @docs-private */\n  get hasDropdown(): boolean {\n    return Boolean(this._dropdown);\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  HostListener,\n  Input,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { delay, throttleTime } from 'rxjs/operators';\n\nimport { NxWordComponent } from './word.component';\n\n/** Size of the NLF. */\nexport type NxNaturalLanguageFormSize = 'small' | 'large';\n\nconst DEFAULT_SIZE = 'large';\n\n@Component({\n  selector: 'nx-natural-language-form',\n  templateUrl: 'natural-language-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['natural-language-form.scss'],\n  host: {\n    '[class.is-negative]': 'negative',\n    '[class.nx-natural-language-form--small]' : 'size === \"small\"',\n    '[class.nx-natural-language-form--large]' : 'size === \"large\"',\n  }\n})\n\nexport class NxNaturalLanguageFormComponent implements AfterContentInit, OnDestroy {\n  private _negative = false;\n\n  /** @docs-private */\n  resizeEvent$: Subject<void> = new Subject<void>();\n\n  /** @docs-private */\n  resizeObservable: Observable<void>;\n\n  @ContentChildren(NxWordComponent) _words: QueryList<NxWordComponent>;\n\n  /** @docs-private */\n  updatePopoversSubscription: Subscription = Subscription.EMPTY;\n\n  /** @docs-private */\n  private _size: NxNaturalLanguageFormSize = DEFAULT_SIZE;\n\n  /** Whether the negative set of stylings should be used. */\n  @Input('nxNegative')\n  set negative(value) {\n    this._negative = coerceBooleanProperty(value);\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  /**\n   * Sets the size of the NLF. Default value: large\n   */\n  @Input()\n  set size(value: NxNaturalLanguageFormSize) {\n    this._size = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get size(): NxNaturalLanguageFormSize {\n    return this._size;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  @HostListener('window:orientationchange', ['$event'])\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this.resizeEvent$.next();\n  }\n\n  ngAfterContentInit() {\n    // Collect all words and listen for changes so we can update any open error popover\n    // which would otherwise get wrongly positioned.\n    const subjects = this._words.map((word: NxWordComponent) => word.inputChanges);\n    const source = merge(...subjects);\n\n    this.updatePopoversSubscription = source.subscribe( () => {\n      this.updatePositionPopovers();\n    });\n\n    this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));\n    this.resizeObservable.subscribe(() => this.resizeWords());\n  }\n\n  /** @docs-private */\n  resizeWords() {\n    this._words.forEach((word: NxWordComponent) => {\n      word.updateCurrentTextWidth();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.updatePopoversSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  updatePositionPopovers() {\n    if (this._words) {\n      this._words.forEach((word: NxWordComponent) => {\n        word.repositionError();\n      });\n    }\n  }\n}\n","import { NxPopoverModule } from '@allianz/ngx-ndbx/popover';\nimport { NxInputModule } from '@allianz/ngx-ndbx/input';\nimport { NxWordComponent } from './word.component';\nimport { NxNaturalLanguageFormComponent } from './natural-language-form.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxInputModule,\n    NxPopoverModule\n  ],\n  declarations: [\n    NxNaturalLanguageFormComponent,\n    NxWordComponent\n  ],\n  exports: [\n    NxNaturalLanguageFormComponent,\n    NxWordComponent\n  ]\n})\nexport class NxNaturalLanguageFormModule {}\n","import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** The contextual type of a message. */\nexport type CONTEXT = 'regular' | 'info' | 'error' | 'success' | 'warning';\n\nconst ICONS = {\n  info: 'info-circle',\n  error: 'exclamation-circle',\n  success: 'check-circle',\n  warning: 'exclamation-triangle'\n};\n\n@Component({\n  selector: 'nx-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxMessage',\n  host: {\n    '[class.context-info]': 'context === \"info\"',\n    '[class.context-error]': 'context === \"error\"',\n    '[class.context-success]': 'context === \"success\"',\n    '[class.context-warning]': 'context === \"warning\"',\n    '[class.nx-message--closable]': 'closable'\n\n  }\n})\nexport class NxMessageComponent {\n\n  private _context: CONTEXT = 'regular';\n\n  /**\n   * Sets the context of the message.\n   * The message box will color accordingly. Default: 'regular' */\n  @Input('nxContext')\n  set context(value: CONTEXT) {\n    if (value !== this._context) {\n      this._context = value;\n      this._icon = this.getIconName();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get context(): CONTEXT {\n    return this._context;\n  }\n\n  private _showIcon: boolean = false;\n\n  /**\n   * Whether an icon that belongs to the context of the message should be displayed.\n   * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.\n   * @deletion-target 9.0.0\n   * */\n  @Input()\n  set showIcon(value: boolean) {\n    this._showIcon = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showIcon(): boolean {\n    return this._showIcon;\n  }\n\n  private _closable: boolean = false;\n\n  /** Whether a message should have a close icon in order to be dismissed. */\n  @Input()\n  set closable(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._closable) {\n      this._closable = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closable(): boolean {\n    return this._closable;\n  }\n\n  private _icon: string;\n\n  /** @docs-private */\n  get icon(): string {\n    return this._icon;\n  }\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the label of the close button of the message. */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n\n  /** Event emitted when the close icon of the message has been clicked. */\n  @Output('close') closeEvent = new EventEmitter<void>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  _emitCloseEvent() {\n    this.closeEvent.emit();\n  }\n\n  /** @docs-private */\n  getIconName(): string {\n    if (this._context === 'info') {\n      return ICONS.info;\n    } else if (this._context === 'error') {\n      return ICONS.error;\n    } else if (this._context === 'success') {\n      return ICONS.success;\n    } else if (this._context === 'warning') {\n      return ICONS.warning;\n    }\n    return '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMessageComponent } from './message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxMessageComponent\n  ],\n  exports: [\n    NxMessageComponent\n  ]\n})\nexport class NxMessageModule {\n\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\n\n\n@Component({\n  selector: 'nx-page-search',\n  templateUrl: 'page-search.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ 'page-search.component.scss' ],\n})\nexport class NxPageSearchComponent {\n  /** An event emitted when the user clicks the search button. */\n  @Output('nxButtonClick') buttonClick = new EventEmitter();\n\n  private _buttonLabel: string = null;\n\n  /** Sets the text label of the button. */\n  @Input('nxButtonLabel')\n  set buttonLabel(value: string) {\n    if (this._buttonLabel !== value) {\n      this._buttonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get buttonLabel(): string {\n    return this._buttonLabel;\n  }\n\n  private _hideSearchButton = false;\n\n  /** Whether the search button should be hidden. */\n  @Input('nxHideSearchButton')\n  set hideSearchButton(value: boolean) {\n    this._hideSearchButton = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get hideSearchButton(): boolean {\n    return this._hideSearchButton;\n  }\n\n  private _buttonLayout = '12,12,12,2';\n\n  /** Layout of the search button inside of a NxGrid. Default: 12,12,12,2. */\n  @Input('nxButtonLayout')\n  set buttonLayout(value: string) {\n    if (this._buttonLayout !== value) {\n      this._buttonLayout = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get buttonLayout(): string {\n    return this._buttonLayout;\n  }\n\n  private _contentLayout: string = null;\n\n  /** Layout of the content area inside of a NxGrid. Default: 12,12,12,10 | 12 (if search button is hidden). */\n  @Input('nxContentLayout')\n  set contentLayout(value: string) {\n    if (this._contentLayout !== value) {\n      this._contentLayout = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get contentLayout(): string {\n    if (this._contentLayout) {\n      return this._contentLayout;\n    }\n    return !this.hideSearchButton ? '12,12,12,10' : '12';\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  onButtonClick() {\n    this.buttonClick.emit();\n  }\n}\n","import { NxGridModule } from '@allianz/ngx-ndbx/grid';\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NxAutocompleteModule} from '@allianz/ngx-ndbx/autocomplete';\nimport {NxFormfieldModule} from '@allianz/ngx-ndbx/formfield';\nimport {NxPageSearchComponent} from './page-search.component';\nimport {NxButtonModule} from '@allianz/ngx-ndbx/button';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxAutocompleteModule,\n    NxFormfieldModule,\n    NxButtonModule,\n    NxGridModule\n  ],\n  declarations: [\n    NxPageSearchComponent\n  ],\n  exports: [\n    NxPageSearchComponent\n  ]\n})\nexport class NxPageSearchModule {\n\n}\n","import { NxIconComponent } from '@allianz/ngx-ndbx/icon';\nimport { ENTER, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'nx-rating',\n  templateUrl: './rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./rating.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRatingComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.nx-rating--negative]': 'negative',\n    '[class.nx-rating--disabled]': 'disabled',\n  }\n})\nexport class NxRatingComponent implements ControlValueAccessor {\n\n  private _value: number = 0;\n  /** Sets the selected rating 1 - 5. */\n  @Input('nxValue')\n  set value(newValue: number) {\n    this._value = coerceNumberProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): number {\n    return this._value;\n  }\n\n  private _disabled: boolean = false;\n  /** Whether the rating component should be disabled. */\n  @Input('nxDisabled')\n  set disabled( newValue: boolean) {\n    if (this._disabled === newValue) {\n      return;\n    }\n    this._disabled = coerceBooleanProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the negative colors be used. */\n  @Input('nxNegative')\n  set negative(newValue: boolean) {\n    if (this._negative === newValue) {\n      return;\n    }\n    this._negative = coerceBooleanProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _startLabel: string = null;\n  /** Sets the label painted at the start of the rating component. */\n  @Input('nxStartLabel')\n  set startLabel(newValue: string) {\n    this._startLabel = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get startLabel(): string {\n    return this._startLabel;\n  }\n\n  private _endLabel: string = null;\n  /** Sets the label painted at the end of the rating component. */\n  @Input('nxEndLabel')\n  set endLabel(newValue: string) {\n    this._endLabel = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get endLabel(): string {\n    return this._endLabel;\n  }\n\n  private _ariaLabel: string[] = ['1/5', '2/5', '3/5', '4/5', '5/5'];\n  @Input('nxAriaLabel')\n  /** Sets an array of custom aria-describedby attributes for each of the stars in the component. */\n  set ariaLabel(newAriaLabels: string[]) {\n    this._ariaLabel = newAriaLabels;\n    this._changeDetectorRef.markForCheck();\n  }\n  get ariaLabel(): string[] {\n    return this._ariaLabel;\n  }\n  /** An event is dispatched each time when the rating changes. */\n  @Output('nxValueChange') valueChange = new EventEmitter<number>();\n\n  /** @docs-private */\n  @ViewChildren(NxIconComponent, {read: ElementRef}) icons: QueryList<ElementRef>;\n  private onTouchedCallback = () => {};\n  private onChangeCallback = (option: any) => {};\n\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Whether the given rating is selected. */\n  isSelected(index: number) {\n    return index <= this.value;\n  }\n\n  /** Allows to set the rating. */\n  setSelection(value: number) {\n    if (!this.disabled) {\n      this.value = value;\n      this.valueChange.emit(value);\n      this.onTouchedCallback();\n      this.onChangeCallback(this.value);\n    }\n  }\n\n  /** @docs-private */\n  handleKeyUp(event: KeyboardEvent, rating: number) {\n    const keyCode = event.keyCode;\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (keyCode === ENTER) {\n      this.setSelection(rating);\n    }\n\n    if (keyCode === RIGHT_ARROW) {\n      this.value = Math.min(this.value + 1, 5);\n      const elementRef: ElementRef = this.icons.toArray()[this.value - 1];\n      elementRef.nativeElement.focus();\n    }\n\n    if (keyCode === LEFT_ARROW) {\n      this.value = Math.max(this.value - 1, 1);\n      const elementRef: ElementRef = this.icons.toArray()[this.value - 1];\n      elementRef.nativeElement.focus();\n    }\n  }\n\n  writeValue(value: number): void {\n    this.value = value;\n  }\n\n  registerOnChange(callback: any): void {\n    this.onChangeCallback = callback;\n  }\n\n  registerOnTouched(callback: any): void {\n    this.onTouchedCallback = callback;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  getAriaLabel(rating) {\n    return this.ariaLabel[rating - 1];\n  }\n\n  /** @docs-private */\n  getIconName(rating: number) {\n    return 'star' + ((!this.isSelected(rating)) ? '-o' : '');\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxRatingComponent} from './rating.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxRatingComponent\n  ],\n  exports: [\n    NxRatingComponent\n  ]\n})\nexport class NxRatingModule {\n\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n\n\n@Injectable()\nexport class NxNumberStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for the decrement '-' button */\n  decrementAriaLabel: string = 'Decrement';\n  /** The aria label for the increment '+' button */\n  incrementAriaLabel: string = 'Increment';\n}\n","import { getFontShorthand } from '@allianz/ngx-ndbx/utils';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\n\n/** @docs-private */\n@Directive({\n  selector: 'input[nxAutoResize]'\n})\nexport class NxAutoResizeDirective implements AfterViewInit, OnDestroy {\n\n  @HostBinding('style.width.px') width: number;\n\n  private _resize: boolean = true;\n  @Input('nxAutoResize')\n  set resize(value: boolean) {\n    this._resize = coerceBooleanProperty(value);\n    if (this._resize) {\n      this._addEventListener();\n      this.updateInputWidth();\n    } else {\n      this._removeEventListener();\n    }\n  }\n  get resize(): boolean {\n    return this._resize;\n  }\n\n  constructor(private _element: ElementRef,\n              private _renderer: Renderer2,\n              private _cdr: ChangeDetectorRef) {\n    this.updateInputWidth = this.updateInputWidth.bind(this);\n  }\n\n  ngAfterViewInit() {\n    if (this.resize) {\n      this._addEventListener();\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeEventListener();\n  }\n\n  updateInputWidth() {\n    const measureCanvas = this._renderer.createElement('canvas');\n\n    const ctx = measureCanvas.getContext('2d');\n    const styles = window.getComputedStyle(this._element.nativeElement);\n\n    ctx.font = getFontShorthand(styles);\n\n    const metrics = ctx.measureText(this._element.nativeElement.value);\n\n    const padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);\n    const border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);\n    // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut\n    const newWidth = metrics.width + padding + border + 16;\n\n    // Limit to own given minimal width\n    const parsed = parseFloat(styles.minWidth);\n    this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);\n\n    // needed when the outer component is onPush\n    this._cdr.markForCheck();\n  }\n\n  _addEventListener() {\n    this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);\n    this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);\n  }\n\n  _removeEventListener() {\n    this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);\n    this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);\n  }\n\n  sumStyles(left, right) {\n    left = parseInt(left, 10);\n    right = parseInt(right, 10);\n    left = Number.isNaN(left) ? 0 : left;\n    right = Number.isNaN(right) ? 0 : right;\n    return left + right;\n  }\n}\n","import { Subscription } from 'rxjs';\nimport { NxNumberStepperIntl } from './number-stepper-intl';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mapClassNames, numberOfDecimals, pad } from '@allianz/ngx-ndbx/utils';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n  OnDestroy\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\n\nimport { MappedStyles } from '@allianz/ngx-ndbx/core';\nimport { NxAutoResizeDirective } from './auto-resize.directive';\nimport { Decimal } from 'decimal.js';\n\nconst SIZE_MAPPING = {\n  big: 'nx-stepper--big',\n  normal: ''\n};\nconst STYLE_MAPPING = {\n  regular: '',\n  bold: 'nx-stepper__input--bold',\n  light: 'nx-stepper__input--light'\n};\nconst DEFAULT_CLASSES = ['nx-stepper'];\nconst INPUT_CLASSES = ['nx-stepper__input'];\n\nconst ALLOWED_CHARACTERS = new RegExp(/^-?[0-9]\\d*(\\.\\d+)?$/g);\nconst CUSTOM_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxNumberStepperComponent),\n  multi: true\n};\nconst CUSTOM_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxNumberStepperComponent),\n  multi: true\n};\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'nx-number-stepper',\n  templateUrl: 'number-stepper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['number-stepper.component.scss'],\n  inputs: ['classNames: nxSize'],\n  host: {\n    '[class.is-negative]': 'negative'\n  },\n  providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR]\n})\nexport class NxNumberStepperComponent extends MappedStyles\n  implements OnInit, AfterViewInit, ControlValueAccessor, Validator, OnDestroy {\n  private _step: number = 1;\n  private _min: number = 0;\n  private _max: number = 100;\n  private _value: number = 0;\n  private _label = null;\n  private _resize: boolean = false;\n  private _intlSubscription: Subscription;\n  private _negative: boolean = false;\n  private _leadingZero: boolean = true;\n\n  /**\n   * Defines the size of the number stepper.\n   *\n   * Values: big | normal. Default: normal\n   */\n  classNames: string;\n\n  /** @docs-private */\n  public inputClassNames: string = mapClassNames(\n    'regular',\n    INPUT_CLASSES,\n    STYLE_MAPPING\n  );\n  private _style: string;\n\n  /** @docs-private */\n  public inputId = `nx-number-stepper-${nextUniqueId++}`;\n\n  /** @docs-private */\n  public inputWidth;\n\n  /** @docs-private */\n  public ariaDescribedBy = null;\n\n  /** @docs-private */\n  @ViewChild('numberInput') numberInput: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('customLabel') ngContentWrapper: ElementRef;\n\n  /** @docs-private */\n  @ViewChild(NxAutoResizeDirective) autoResize: NxAutoResizeDirective;\n\n  /** An event emitted on value change. */\n  @Output('nxValueChange') valueChange = new EventEmitter<number>();\n\n  /** Whether the input should be resized. Default: false */\n  @Input('nxResize')\n  set resize(value: boolean) {\n    this._resize = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get resize(): boolean {\n    return this._resize;\n  }\n\n  get label(): string {\n    return this._label;\n  }\n\n  /** Defines the the label shown above the stepper input. */\n  @Input('nxLabel')\n  set label(value: string) {\n    if (this._label !== value) {\n      this._label = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get style(): string {\n    return this._style;\n  }\n\n  /**\n   * Defines the font weight of the input.\n   *\n   * Possible values: regular, bold, light. Default value: regular\n   *\n   * @deprecated The style input is not available anymore, only default font-weight should be used.\n   * @deletion-target 8.0.0\n   */\n  @Input('nxStyle')\n  set style(value: string) {\n    if (this._style === value) {\n      return;\n    }\n    this._style = value;\n    this.inputClassNames = mapClassNames(value, INPUT_CLASSES, STYLE_MAPPING);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sets the step size. Default: 1 */\n  @Input('nxStep')\n  set step(value: number) {\n    // only internal changes no need to call markForCheck\n    this._step = Number(value);\n  }\n\n  get step(): number {\n    return this._step;\n  }\n\n  /** Sets the minimum accepted number. Default: 0 */\n  @Input('nxMin')\n  set min(value: number) {\n    this._min = Number(value);\n  }\n\n  get min(): number {\n    return this._min;\n  }\n\n  /** Sets the maximum accepted number. Default: 100 */\n  @Input('nxMax')\n  set max(value: number) {\n    this._max = Number(value);\n  }\n\n  get max(): number {\n    return this._max;\n  }\n\n  get value(): number {\n    return this._value;\n  }\n\n  /** Sets the value of the number-stepper. */\n  @Input('nxValue')\n  set value(value: number | null) {\n    this._value = value;\n    if (this._value !== null) {\n      this.setInputValue(this._value);\n    } else {\n      this.setInputValue(0);\n    }\n    this.triggerResize();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Whether the negative set of styling should be used. */\n  @Input()\n  set negative(value: boolean) {\n    if (this._negative !== value) {\n      this._negative = coerceBooleanProperty(value);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  /** Whether the number stepper value should have a leading zero.\n   *\n   * Default value is true.\n   */\n  @Input()\n  set leadingZero(value: boolean) {\n    if (this._leadingZero !== value) {\n      this._leadingZero = coerceBooleanProperty(value);\n      this.setInputValue(this.value);\n    }\n  }\n  get leadingZero(): boolean {\n    return this._leadingZero;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    _renderer: Renderer2,\n    _elementRef: ElementRef,\n    public _intl: NxNumberStepperIntl\n  ) {\n    super(SIZE_MAPPING, DEFAULT_CLASSES, _elementRef, _renderer);\n    this._intlSubscription = this._intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this.setInputValue(this._value);\n  }\n\n  ngAfterViewInit() {\n    // defer to prevent checked after change errors\n    if (this.resize) {\n      setTimeout(() => this.triggerResize());\n    }\n    if (this.ngContentWrapper) {\n      this.ariaDescribedBy = this.ngContentWrapper.nativeElement.children.length > 0 ? `label-for-${this.inputId}` : null;\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  setInputValue(value) {\n    if (this.leadingZero) {\n      this.numberInput.nativeElement.value = pad(value.toString(), 2);\n    } else {\n      this.numberInput.nativeElement.value = value.toString();\n    }\n  }\n\n  /* ControlValueAccessor Implementations */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  private onChangeCallback = (_: any) => { };\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => { };\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  onInputChange(event) {\n    if (!this.validateUserInput(event.target.value)) {\n      this._value = null;\n    } else {\n      this._value = Number(event.target.value);\n    }\n    this.valueChange.emit(this._value);\n    this.onChangeCallback(this._value);\n  }\n\n  /** @docs-private */\n  validateUserInput(input: string) {\n    return !!input.match(ALLOWED_CHARACTERS);\n  }\n\n  /** @docs-private */\n  increment() {\n    let newValue;\n    if (this.isBetweenLimits(this._value)) {\n      newValue = this.getNextGreaterValue(this._value);\n    } else {\n      newValue = this.enforceLimits(this._value);\n    }\n    this.value = newValue;\n    this.valueChange.emit(this._value);\n    this.onChangeCallback(this._value);\n  }\n\n  /** @docs-private */\n  triggerResize() {\n    if (this.resize) {\n      this.autoResize.updateInputWidth();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** @docs-private */\n  decrement() {\n    let newValue;\n    if (this.isBetweenLimits(this._value)) {\n      newValue = this.getNextLowerValue(this._value);\n    } else {\n      newValue = this.enforceLimits(this._value);\n    }\n    this.value = newValue;\n    this.valueChange.emit(this._value);\n    this.onChangeCallback(this._value);\n  }\n\n  /** @docs-private */\n  enforceLimits(value) {\n    if (value > this._max) {\n      return this._max;\n    } else if (value < this._min) {\n      return this._min;\n    }\n    return value;\n  }\n\n  /** @docs-private */\n  getNextLowerValue(start) {\n    // if there is an invalid input start is null\n    if (!start) {\n      start = 0;\n    }\n\n    let next;\n    if (this.isValidStep(start)) {\n      next = (new Decimal(start).minus(new Decimal(this._step))).toNumber();\n    } else {\n      next = new Decimal(start).toNearest(this._step, Decimal.ROUND_DOWN).toNumber();\n    }\n    return this.enforceLimits(next);\n  }\n\n  /** @docs-private */\n  getNextGreaterValue(start) {\n    let next;\n    if (!start) {\n      start = 0;\n    }\n    if (this.isValidStep(start)) {\n      next = (new Decimal(start).plus(new Decimal(this._step))).toNumber();\n    } else {\n      next = new Decimal(start).toNearest(this._step, Decimal.ROUND_UP).toNumber();\n    }\n    return this.enforceLimits(next);\n  }\n\n  /** @docs-private */\n  isBetweenLimits(value) {\n    return value <= this._max && value >= this._min;\n  }\n\n  /** @docs-private */\n  isMinimum() {\n    return this._value === this._min;\n  }\n\n  /** @docs-private */\n  isMaximum() {\n    return this._value === this._max;\n  }\n\n  /** @docs-private */\n  isValidStep(value) {\n    if (value === null) {\n      value = new Decimal(0);\n    }\n    const min = new Decimal(this._min);\n    const valueDec = new Decimal(value);\n    const checkValue = (min.minus(valueDec)).mod(new Decimal(this._step)).toNumber();\n\n    if (\n      this.isBetweenLimits(value) && ((this.isMinimum() || this.isMaximum()) ||\n      checkValue === 0)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @docs-private */\n  userInputToNumber(value): number {\n    const current = value === '' ? 0 : value;\n    return parseInt(current, 10);\n  }\n\n  _validateFn() {\n    // the manual user input must match min + n * step, e.g. minimum 1 step 2: 1, 3, 5, 7 etc.\n    if (!this.isValidStep(this._value)) {\n      return { nxNumberStepperStepError: 'Value is not a valid step' };\n    } else if (this._value === null) {\n      return { nxNumberStepperFormatError: 'Not a valid number' };\n    }\n    return null;\n  }\n\n  /** @docs-private */\n  validate(c: FormControl) {\n    return this._validateFn();\n  }\n\n  get _buttonType(): string {\n    return 'secondary' + (this.negative ? ' negative' : '');\n  }\n}\n","import { Directive } from '@angular/core';\n\n/** Directive used to pass a suffix to the number stepper. */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-number-stepper-prefix',\n  host: {\n    'class': 'nx-stepper__prefix'\n  }\n})\nexport class NxNumberStepperPrefixDirective {\n}\n","import { Directive } from '@angular/core';\n\n/** Directive used to pass a suffix to the number stepper. */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-number-stepper-suffix',\n  host: {\n    'class': 'nx-stepper__suffix'\n  }\n})\nexport class NxNumberStepperSuffixDirective {\n}\n","import { NxNumberStepperIntl } from './number-stepper-intl';\nimport { NxAutoResizeDirective } from './auto-resize.directive';\nimport { CommonModule } from '@angular/common';\nimport { NxButtonModule } from '@allianz/ngx-ndbx/button';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxInputModule } from '@allianz/ngx-ndbx/input';\nimport { NgModule } from '@angular/core';\n\nimport { NxNumberStepperComponent } from './number-stepper.component';\nimport { FormsModule } from '@angular/forms';\nimport { NxNumberStepperPrefixDirective } from './number-stepper-prefix.directive';\nimport { NxNumberStepperSuffixDirective } from './number-stepper-suffix.directive';\n\n@NgModule({\n  imports: [\n    NxInputModule,\n    FormsModule,\n    NxIconModule,\n    NxButtonModule,\n    CommonModule\n  ],\n  exports: [\n    NxNumberStepperComponent,\n    NxAutoResizeDirective,\n    NxNumberStepperPrefixDirective,\n    NxNumberStepperSuffixDirective\n  ],\n  declarations: [\n    NxNumberStepperComponent,\n    NxAutoResizeDirective,\n    NxNumberStepperPrefixDirective,\n    NxNumberStepperSuffixDirective\n  ],\n  providers: [NxNumberStepperIntl],\n})\nexport class NxNumberStepperModule { }\n","\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\n\n/**\n * Interface for providing custom labels in a simple pagination.\n * With an implementation you can localize your pagination with the NX_PAGINATION_TEXTS injection token.\n */\nexport interface IPaginationTexts {\n  /** Label that should replace 'previous'. */\n  previous: string;\n\n  /** Label that should replace 'next'. */\n  next: string;\n\n  /** Label that should replace 'first'.\n   *\n   * Optional attribute needed only for the advanced pagination.\n   */\n  first?: string;\n\n  /** Label that should replace 'last'.\n   *\n   * Optional attribute needed only for the advanced pagination.\n   */\n  last?: string;\n\n  /** Label that should replace 'of'. */\n  ofLabel: string;\n\n  /** Label that should replace the aria label. */\n  ariaLabel: string;\n}\n\nexport const DefaultPaginationTexts =  {\n  previous: 'Previous',\n  next: 'Next',\n  first: 'First',\n  last: 'Last',\n  ofLabel: 'of',\n  ariaLabel: 'Please select your page'\n};\n\n\n/** InjectionToken for pagination that can be used to override default locale code. */\nexport const NX_PAGINATION_TEXTS = new InjectionToken<IPaginationTexts>('nx-pagination-texts');\n","import { Injectable } from '@angular/core';\nimport { Page } from './pagination.component';\n\n/** @docs-private */\n@Injectable()\nexport class NxPaginationUtils  {\n  private _pagesToShow = 3;\n  private _elipsisText: string = '...';\n  private _classExpanded: string = 'expanded-view';\n\n  getPages(currentPage: number, totalPages: number): Page[] {\n\n    let pages = [];\n    let start = [], middle = [], end = [];\n\n    // First array -> start\n    start = this.getStartArray(currentPage, totalPages);\n    // Second array -> middle\n    middle =  this.getMiddleArray(currentPage, totalPages);\n    // Third array -> end\n    end = this.getEndArray(currentPage, totalPages);\n\n    pages = [ ...start, ...middle, ...end ];\n\n    return pages;\n  }\n\n  getMiddleArray(currentPage: number, totalPages: number): Array<any> {\n    let pageNumber = currentPage < 6 ? 4 : currentPage - 1;\n    const middle = [];\n\n    while (\n      middle.length < 3 &&\n      pageNumber >= 2 &&\n      pageNumber <= totalPages - 3 &&\n      (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)\n    ) {\n      middle.push(this.createPaginationItem(pageNumber, pageNumber));\n      pageNumber++;\n    }\n    return middle;\n  }\n  getEndArray(currentPage: number, totalPages: number): Array<any> {\n    const end = [];\n    let currentItemToShow: number =\n      totalPages <= 3 ? totalPages + 1 :\n      totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2 ;\n    const showEllipsis = currentPage < totalPages - 4;\n\n    while (currentItemToShow <= totalPages) {\n      const endItem = end.length === 0 && showEllipsis ?\n        this.createPaginationItem(this._elipsisText, currentItemToShow, true) :\n        this.createPaginationItem(currentItemToShow , currentItemToShow, true);\n      end.push(endItem);\n      currentItemToShow++;\n    }\n\n    return end;\n  }\n  getStartArray(currentPage: number, totalPages: number): Array<any> {\n    let counterPages = 0;\n    const start = [];\n    const maxSizeArray = 3;\n\n    while (counterPages < maxSizeArray && counterPages < totalPages) {\n      const startItem = counterPages === 2 && currentPage > 5 ?\n        this.createPaginationItem(this._elipsisText, counterPages, true) :\n        this.createPaginationItem(counterPages + 1 , counterPages + 1, true);\n\n      start.push(startItem);\n      counterPages++;\n    }\n\n    return start;\n  }\n\n\n  private createPaginationItem(label: string | number, value: number, classExpanded?: boolean) {\n    return { label: label, value: value, class: classExpanded ? this._classExpanded : ''  };\n  }\n\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  AfterContentInit,\n} from '@angular/core';\n\nimport { DefaultPaginationTexts, IPaginationTexts, NX_PAGINATION_TEXTS } from './pagination-texts';\nimport { NxPaginationUtils } from './pagination-utils';\n\n/** @docs-private */\nexport interface Page {\n  label: string;\n  value: any;\n  class: string;\n}\n\n@Component({\n  selector: 'nx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './pagination.component.scss' ],\n})\n\nexport class NxPaginationComponent implements OnInit, AfterContentInit {\n  private _page: number;\n  private _count: number;\n  private _perPage: number;\n  private _type: string = 'simple';\n\n  /** @docs-private */\n  paginationTexts: IPaginationTexts;\n\n  /** @docs-private */\n  totalNumberPages: number = 0;\n\n  get page(): number { return this._page; }\n\n  /** Sets the current page. */\n  @Input('nxPage') // the current page\n  set page(value: number) {\n    this._page = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get count(): number { return this._count; }\n\n  /** Number of total items over all pages. */\n  @Input('nxCount') // how many total items there are in all pages\n  set count(value: number) {\n    this._count = value;\n    this.totalNumberPages =  this.calculateTotalPages();\n    this._changeDetectorRef.markForCheck();\n  }\n  get perPage(): number { return this._perPage; }\n\n  /** Sets the number of items you want to show per page. */\n  @Input('nxPerPage') // how many items we want to show per page\n  set perPage(value: number) {\n    this._perPage = value;\n    this.totalNumberPages =  this.calculateTotalPages();\n    this._changeDetectorRef.markForCheck();\n  }\n  get type(): string { return this._type; }\n\n  /**\n   * Determines the type of pagination.\n   *\n   * Values: simple |Â advanced, default: simple.\n   */\n  @Input('nxType')\n  set type(value: string) { // type advanced or simple\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** An event emitted when the previous page button is clicked. */\n  @Output() nxGoPrev = new EventEmitter<void>();\n\n  /** An event emitted when the next page button is clicked */\n  @Output() nxGoNext = new EventEmitter<void>();\n\n  /**\n   * An event emitted when a page number is clicked.\n   * Provides the number of the page as parameter.\n   */\n  @Output() nxGoPage = new EventEmitter<number>();\n\n  constructor(\n      @Optional() @Inject(NX_PAGINATION_TEXTS) paginationTexts: IPaginationTexts,\n      private paginationUtilsService: NxPaginationUtils,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    this.paginationTexts = paginationTexts || DefaultPaginationTexts;\n   }\n\n  ngOnInit() {\n    this.totalNumberPages =  this.calculateTotalPages();\n  }\n\n  ngAfterContentInit() {\n    if (this.type === 'advanced' && (!this.paginationTexts.last || !this.paginationTexts.first)) {\n      console.warn('Please define aria labels for the last and first arrows.');\n    }\n  }\n\n  /** Returns the number of the first page. */\n  getMin(): number {\n    return ((this._perPage * this._page) - this._perPage) + 1;\n  }\n\n  /** Returns the number of the last page. */\n  getMax(): number {\n    let max = this._perPage * this._page;\n    if (max > this._count) {\n      max = this._count;\n    }\n    return max;\n  }\n\n  /** Returns the total number of pages */\n  calculateTotalPages(): number {\n    return Math.ceil(this._count / this._perPage) || 0;\n  }\n\n  /** Directs to the page with number n. */\n  onPage(n: number): void {\n    this.nxGoPage.emit(n);\n  }\n\n  /** Directs to the previous page. */\n  onPrev(): void {\n    if (!this._isPaginationPreviousDisabled()) {\n      this.nxGoPrev.emit();\n    }\n  }\n\n  /** Directs to the next page. */\n  onNext(): void {\n    if (!this._isPaginationNextDisabled()) {\n      this.nxGoNext.emit();\n    }\n  }\n\n  /** Directs to the first page. */\n  onFirst() {\n    if (!this._isPaginationPreviousDisabled()) {\n      this.onPage(1);\n    }\n  }\n\n  /** Directs to the last page. */\n  onLast() {\n    if (!this._isPaginationNextDisabled()) {\n      this.onPage(this.totalNumberPages);\n    }\n  }\n\n  /** Returns if the current page is the last page. */\n  lastPage(): boolean {\n    return this._perPage * this._page >= this._count;\n  }\n\n  /** @docs-private */\n  getPages(): Page[] {\n    return this.paginationUtilsService.getPages(this._page, this.totalNumberPages);\n  }\n\n  /** @docs-private */\n  getPaginationItemClasses(page: Page): Object {\n    const classes = {\n      'is-ellipsis': page.label === '...',\n      'nx-pagination__item--expanded-view': page.class === 'expanded-view'\n    };\n    return classes;\n  }\n\n  /** @docs-private */\n  getPaginationNumberClasses(page: Page): Object {\n    const classes = {\n      'is-active': page.value === this.page,\n      'nx-pagination__ellipsis': page.label === '...',\n      'nx-pagination__link': page.label !== '...'\n    };\n    return classes;\n  }\n\n  /** Returns true, if `nxCount` is greater than 0, else false. */\n  isPaginationVisible(): boolean {\n    return this.count > 0;\n  }\n\n  /** Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false. */\n  isPaginationCompactVisible(): boolean {\n    return this.type.includes('simple') && this.count > 0;\n  }\n\n  /** @docs-private */\n  isPaginationContainerVisible(): boolean {\n    return this.type.includes('advanced');\n  }\n\n  _isPaginationPreviousDisabled(): boolean {\n    return this.page === this.getMin();\n  }\n\n  _isPaginationNextDisabled(): boolean {\n    return this.page === this.totalNumberPages;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxPaginationComponent } from './pagination.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxPaginationUtils } from './pagination-utils';\n\n@NgModule({\n  imports: [\n    CommonModule, NxIconModule\n  ],\n  declarations: [\n    NxPaginationComponent\n  ],\n  exports: [\n    NxPaginationComponent\n  ],\n  providers: [\n    NxPaginationUtils\n  ]\n})\nexport class NxPaginationModule { }\n","import { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject ,  Observable } from 'rxjs';\n\nexport class TableDataSource extends DataSource<any> {\nconstructor(private _datachange: BehaviorSubject<any[]>) {\nsuper();\n}\n/** @docs-private Connect function called by the table to retrieve one stream containing the data to render. */\nconnect(): Observable<Object[]> {\nreturn this._datachange;\n}\n/** @docs-private */\ndisconnect() { }\n}\n","import { mapClassNames } from '@allianz/ngx-ndbx/utils';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnInit, Output, ChangeDetectorRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NxDisplayedColumns } from './displayedColumns';\nimport { TableDataSource } from './tabledata-source';\n\nconst MAPPING = {\n  light: 'nx-table--light',\n  border: 'nx-table--light nx-table--with-border'\n};\nconst DEFAULT_CLASSES = [ 'nx-table ' ];\n\n@Component({\n  selector: 'nx-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './dynamic-table.component.scss' ],\n})\nexport class NxDynamicTableComponent implements OnInit {\n\n  private _tableStyles: string = '';\n  private _dataChange: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  private _dataSource: TableDataSource | null;\n  private _data: any[];\n  private _classNames: string = mapClassNames('', DEFAULT_CLASSES, MAPPING);\n  private _displayedColumns: NxDisplayedColumns[];\n  private _columnKeys: string[];\n\n  /** Sets the data that it will show in the table. */\n  @Input('nxData')\n  set data(value: any[]) {\n    this._data = value\n      .filter(element => element);\n    // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data\n    if (!this._displayedColumns) {\n      const keys = [], cArray = [];\n      // For catch keys of data Objects and assing title, key and type string by default to displayedColumns\n      this._data\n        .forEach(element => {\n          for (const key in element) {\n            if (keys.indexOf(key) === -1) {\n              keys.push(key);\n              cArray.push({ title: key, key: key, type: 'string' });\n            }\n          }\n        });\n      this._columnKeys = keys;\n      this._displayedColumns = cArray;\n      // need to call markForCheck as the setter changes displayedColumns here\n      // sidenote: isn't needed for the data itself as it gets passed to the cdk-table\n      // by the datasource observable\n      this._changeDetectorRef.markForCheck();\n    }\n    this._dataChange.next(this._data);\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  /** Sets the name order and type of columns. */\n  @Input('nxDisplayedColumns')\n  set displayedColumns(value: NxDisplayedColumns[]) {\n    this._displayedColumns = value;\n    this._columnKeys = value.map(column => column.key);\n    this._changeDetectorRef.markForCheck();\n  }\n  get displayedColumns(): NxDisplayedColumns[] {\n    return this._displayedColumns;\n  }\n\n  /** @deprecated The default and light header styling will be removed.\n   * @deletion-target 8.0.0\n  */\n  @Input('nxType')\n  set styles(value: string) {\n    if (this._tableStyles === value) {\n      return;\n    }\n    this._classNames = mapClassNames(value, DEFAULT_CLASSES, MAPPING);\n    this._tableStyles = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** An event is dispatched when a row is clicked. */\n  @Output() nxRowClick = new EventEmitter();\n\n  /** @docs-private */\n  get dataSource(): TableDataSource {\n    return this._dataSource;\n  }\n  /** @docs-private */\n  get classNames(): string {\n    return this._classNames;\n  }\n  /** @docs-private */\n  get columnKeys(): string[] {\n    return this._columnKeys;\n  }\n\n  constructor(private el: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit() {\n    if (!this._data) {\n      this._data = [];\n      this._dataChange.next(this._data);\n    }\n    this._dataSource = new TableDataSource(this._dataChange);\n  }\n\n  /** @docs-private */\n  handleRowClick(row: Object): void {\n    this.nxRowClick.emit(row);\n  }\n\n  /** @docs-private */\n  isNumeric(element: NxDisplayedColumns): boolean {\n    if (element.type === 'numeric') {\n      return true;\n    }\n    return false;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxDynamicTableComponent } from './dynamic-table.component';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\n\n@NgModule({\n  declarations: [ NxDynamicTableComponent ],\n  exports: [ NxDynamicTableComponent ],\n  imports: [ CommonModule, CdkTableModule, ScrollDispatchModule ]\n})\nexport class NxDynamicTableModule { }\n","import { Directive, Input } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { AccordionStyle } from './expansion-panel';\n\nconst DEFAULT_TYPE: AccordionStyle = 'regular';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-accordion',\n  host: {\n    '[class.nx-accordion]': 'true',\n    'role': 'presentation'\n  }\n})\nexport class NxAccordionDirective extends CdkAccordion {\n\n  private _style: AccordionStyle = 'regular';\n\n  /**\n   * Value for the styling that should be chosen.\n   * Default value: 'regular'\n   */\n  @Input('nxStyle')\n  set style(value: AccordionStyle) {\n    value = value ? value : DEFAULT_TYPE;\n\n    const [newValue] = value.match(/regular|light/) || [DEFAULT_TYPE];\n    this._style = newValue as AccordionStyle;\n  }\n  get style(): AccordionStyle {\n    return this._style;\n  }\n\n  private _negative: boolean = null;\n\n  /** Whether the negative set of styles should be used. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n}\n","import { AnimationTriggerMetadata, trigger, state, style, transition, animate } from '@angular/animations';\n\nexport const nxAccordionAnimations: {\n  readonly bodyExpansion: AnimationTriggerMetadata;\n  readonly indicatorRotate: AnimationTriggerMetadata;\n} = {\n  bodyExpansion: trigger('bodyExpansion', [\n    state('closed', style({height: '0px', visibility: 'hidden'})),\n    state('open', style({height: '*', visibility: 'visible'})),\n    transition('open <=> closed', animate('.5s cubic-bezier(0.86, 0, 0.07, 1)'))\n  ]),\n  indicatorRotate: trigger('indicatorRotate', [\n    state('closed', style({transform: 'rotate(0deg)'})),\n    state('open', style({transform: 'rotate(180deg)'})),\n    transition('open <=> closed', animate('.3s ease')),\n  ])\n};\n","\nimport { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[nxExpansionPanelBody]' })\nexport class NxExpansionPanelBodyDirective {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","import { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, startWith, take } from 'rxjs/operators';\n\nimport { NxAccordionDirective } from './accordion';\nimport { nxAccordionAnimations } from './accordion-animations';\nimport { NxExpansionPanelBodyDirective } from './expansion-panel-body';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n\nlet nextId = 0;\n\n/** The styling of the accordion. */\nexport type AccordionStyle = 'regular' | 'light';\nconst DEFAULT_TYPE = 'regular';\n\n@Component({\n  selector: 'nx-expansion-panel',\n  exportAs: 'NxExpansionPanelComponent',\n  templateUrl: 'expansion-panel.html',\n  styleUrls: ['expansion-panel.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [nxAccordionAnimations.bodyExpansion],\n  host: {\n    '[class.nx-expanded]': 'expanded',\n    '[class.nx-expansion-panel--light]': '_accordionStyle === \"light\"',\n    '[class.nx-expansion-panel--regular]': '_accordionStyle === \"regular\"',\n    '[class.nx-expansion-panel--negative]': 'negative'\n  },\n  providers: [\n    // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    { provide: NxAccordionDirective, useValue: undefined },\n  ],\n})\nexport class NxExpansionPanelComponent extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the negative set of styles should be used. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n  private _negative: boolean = null;\n  _accordionStyle: AccordionStyle = DEFAULT_TYPE;\n\n  /**\n   * Value for the styling that should be chosen.\n   * Default value: 'regular'.\n   */\n  @Input('nxStyle')\n  set style(value: AccordionStyle) {\n    value = value ? value : DEFAULT_TYPE;\n\n    const [newValue] = value.match(/regular|light/) || [DEFAULT_TYPE];\n    this._style = newValue as AccordionStyle;\n    this._accordionStyle = newValue as AccordionStyle;\n  }\n\n  get style(): AccordionStyle {\n    return this._style;\n  }\n  private _style: AccordionStyle = null;\n\n  /** @docs-private */\n  @ContentChild(NxExpansionPanelBodyDirective) lazyContent;\n\n  private _portal: TemplatePortal;\n\n  /** @docs-private */\n  get portal() {\n    return this._portal;\n  }\n\n  /** @docs-private */\n  accordion: NxAccordionDirective;\n  _headerId = `nx-expansion-panel-header-${nextId++}`;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  constructor(@Optional() @SkipSelf() accordion: NxAccordionDirective,\n    _changeDetectorRef: ChangeDetectorRef,\n    _expansionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef\n  ) {\n    super(accordion, _changeDetectorRef, _expansionDispatcher);\n    this.accordion = accordion;\n  }\n\n  ngAfterContentInit() {\n    if (this.lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this.lazyContent._template, this._viewContainerRef);\n      });\n    }\n\n    // Inherit appearance given by the accordion (if any).\n    if (Boolean(this.accordion)) {\n\n      if (this.style === null && this.accordion.style !== null) {\n        this.style = this.accordion.style;\n      }\n\n      if (this.negative === null && this.accordion.negative !== null) {\n        this.negative = this.accordion.negative;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  /** @docs-private */\n  getOpenState() {\n    return this.expanded ? 'open' : 'closed';\n  }\n}\n","import { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, Host, OnDestroy } from '@angular/core';\nimport { merge, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { nxAccordionAnimations } from './accordion-animations';\nimport { NxExpansionPanelComponent } from './expansion-panel';\n\n\n@Component({\n  selector: 'nx-expansion-panel-header',\n  templateUrl: 'expansion-panel-header.html',\n  styleUrls: ['expansion-panel-header.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [nxAccordionAnimations.indicatorRotate],\n  host: {\n    '[class.nx-expanded]': 'isExpanded()',\n    'class': 'nx-expansion-panel__header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': 'isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '(keydown)': 'keydown($event)',\n    '(click)': 'toggle()'\n  }\n})\nexport class NxExpansionPanelHeaderComponent implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    /** @docs-private */ @Host() public panel: NxExpansionPanelComponent,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** @docs-private */\n  getOpenState(): string {\n    return this.panel.getOpenState();\n  }\n\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /**\n   * Toggle the expansion panel.\n   */\n  toggle() {\n    this.panel.toggle();\n  }\n\n  /** @docs-private */\n  keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this.toggle();\n        break;\n      default:\n        return;\n    }\n  }\n}\n\n\n/**\n * This directive is to be used inside of the NxExpansionPanelHeader component.\n */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-expansion-panel-description',\n  host : {\n    class: 'nx-expansion-panel__header-description'\n  }\n})\nexport class NxExpansionPanelDescriptionDirective {}\n\n/**\n * This directive is to be used inside of the NxExpansionPanelHeader component.\n */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-expansion-panel-title',\n  host : {\n    class: 'nx-expansion-panel__header-title'\n  }\n})\nexport class NxExpansionPanelTitleDirective {}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAccordionDirective } from './accordion';\nimport { NxExpansionPanelComponent } from './expansion-panel';\nimport { NxExpansionPanelBodyDirective } from './expansion-panel-body';\nimport {\n  NxExpansionPanelDescriptionDirective,\n  NxExpansionPanelHeaderComponent,\n  NxExpansionPanelTitleDirective,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    NxIconModule\n  ],\n  exports: [\n    NxAccordionDirective,\n    NxExpansionPanelComponent,\n    NxExpansionPanelHeaderComponent,\n    NxExpansionPanelDescriptionDirective,\n    NxExpansionPanelTitleDirective,\n    NxExpansionPanelBodyDirective\n  ],\n  declarations: [\n    NxAccordionDirective,\n    NxExpansionPanelComponent,\n    NxExpansionPanelHeaderComponent,\n    NxExpansionPanelDescriptionDirective,\n    NxExpansionPanelTitleDirective,\n    NxExpansionPanelBodyDirective\n  ],\n  providers: [],\n})\nexport class NxAccordionModule { }\n","/** @docs-private */\nexport abstract class NxTabGroupBase {\n\n}\n","import { NxTabGroupBase } from './tab-group-base';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  Optional,\n  Inject,\n  Host\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'nx-tab',\n  exportAs: 'nxTab',\n  templateUrl: 'tab.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTabComponent implements OnInit, OnChanges, OnDestroy {\n  private _label: string;\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** Sets the label of the tab shown in the tablist. */\n  @Input()\n  get label(): string {\n    return this._label;\n  }\n  set label(value: string) {\n    if (this._label !== value) {\n      this._label = value;\n    }\n  }\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Template inside the NxTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(NxTabGroupBase) @Optional() @Host() private _tabGroup: NxTabGroupBase) {\n    if (!this._tabGroup) {\n      throw Error(`The nx-tab element has to be wrapped in a nx-tab-group to work.\n      Please provide a nx-tab-group element and place your tabs inside it.`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('label')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnInit() {\n    this._contentPortal = new TemplatePortal(this._implicitContent, this._viewContainerRef);\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectionStrategy, Component, Input, ViewChild } from '@angular/core';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-tab-body',\n  templateUrl: 'tab-body.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./tab-body.scss']\n})\nexport class NxTabBodyComponent {\n\n  @Input() content: TemplatePortal;\n  portal: TemplatePortal;\n\n  private _active: boolean = false;\n\n  @Input()\n  set active(value: boolean) {\n    this._active = coerceBooleanProperty(value);\n    if (this._active) {\n      this.attach();\n    } else {\n      this.detach();\n    }\n  }\n  get active(): boolean {\n    return this._active;\n  }\n\n  @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n  attach() {\n    if (!this.portalOutlet.hasAttached()) {\n      this.portalOutlet.attach(this.content);\n    }\n  }\n  detach() {\n    if (this.portalOutlet.hasAttached()) {\n      this.portalOutlet.detach();\n    }\n  }\n}\n","import { NxTabGroupBase } from './tab-group-base';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  OnInit\n} from '@angular/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { NxAccordionDirective } from '@allianz/ngx-ndbx/accordion';\nimport { NxExpansionPanelComponent } from '@allianz/ngx-ndbx/accordion';\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabHeaderComponent } from './tab-header';\n\n\nexport class NxTabChangeEvent {\n  /** The index of the selected or focused tab. */\n  index: number;\n\n  /** The component instance of the selected or focused tab. */\n  tab: NxTabComponent;\n}\n\nlet nextId: number = 0;\nconst MOBILE_BREAKPOINT = 480;\n\n@Component({\n  selector: 'nx-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['./tab-group.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-negative]': 'negative'\n  },\n  providers: [{provide: NxTabGroupBase, useExisting: NxTabGroupComponent}]\n})\nexport class NxTabGroupComponent implements NxTabGroupBase, OnInit, OnDestroy, AfterContentInit, AfterContentChecked {\n  private _selectedIndex: number | null = null;\n  private _groupId: number;\n  private _negative: boolean = false;\n  private _indexToSelect: number | null = 0;\n  private _autoselect: boolean = true;\n  private _mobileAccordion: boolean = true;\n  _showAccordion: boolean = false;\n\n  /** @docs-private */\n  @ContentChildren(NxTabComponent) tabs: QueryList<NxTabComponent>;\n\n  /** @docs-private */\n  @ViewChildren(NxTabBodyComponent) tabBodyChildren: QueryList<NxTabBodyComponent>;\n\n  /** @docs-private */\n  @ViewChild('tabHeader') tabHeader: NxTabHeaderComponent;\n\n  /** @docs-private */\n  @ViewChildren(NxExpansionPanelComponent) panels: QueryList<NxExpansionPanelComponent>;\n\n  /** @docs-private */\n  @ViewChild(NxAccordionDirective) accordion: NxAccordionDirective;\n\n  /** Sets the selected tab. */\n  @Input()\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n\n  /** Whether the negative set of styling should be used. */\n  @Input()\n  get negative(): boolean {\n    return this._negative;\n  }\n  set negative(value: boolean) {\n    if (value !== this._negative) {\n      this._negative = coerceBooleanProperty(value);\n    }\n  }\n\n  /** Whether the tab should be immediately selected on focus. */\n  @Input()\n  get autoselect(): boolean {\n    return this._autoselect;\n  }\n  set autoselect(value: boolean) {\n    this._autoselect = coerceBooleanProperty(value);\n  }\n\n  /** Whether the tabs should to accordion on mobile viewports. */\n  @Input()\n  get mobileAccordion(): boolean {\n    return this._mobileAccordion;\n  }\n  set mobileAccordion(value: boolean) {\n    this._mobileAccordion = coerceBooleanProperty(value);\n  }\n\n  /** An event emitted when the selected tab has changed. */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** An event emitted when the selected tab has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n  /**\n   * An event emitted when focus has changed within a tab group.\n   *\n   * **Note:** is not supported in mobile view.\n   */\n  @Output() readonly focusChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n   /** Subscription to tabs being added/removed. */\n   private _tabsSubscription = Subscription.EMPTY;\n\n   /** Subscription to changes in the tab labels. */\n   private _tabLabelSubscription = Subscription.EMPTY;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\n    this._groupId = nextId++;\n  }\n\n  ngOnInit() {\n    this._switchAppearance(window.innerWidth);\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this.tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this.tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n    * After the content is checked, this component knows what tabs have been defined\n    * and what the selected index should be.\n    */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex !== indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n   /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this.tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** @docs-private */\n  focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): NxTabChangeEvent {\n    const event = new NxTabChangeEvent;\n    event.index = index;\n    if (this.tabs && this.tabs.length) {\n      event.tab = this.tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /** @docs-private */\n  handleClick(index: number) {\n    this.selectedIndex = this.tabHeader.focusIndex = index;\n  }\n\n  /**\n   * @docs-private\n   * Returns the tabindex for a tab label\n   */\n  getTabIndex(tab: NxTabComponent, idx: number): number | null {\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `nx-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `nx-tab-content-${this._groupId}-${i}`;\n  }\n\n  /** @docs-private */\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this._switchAppearance(event.target.innerWidth);\n  }\n\n  private _switchAppearance(viewPortWidth) {\n    if (!this._mobileAccordion) {\n      return;\n    }\n    if (viewPortWidth <= MOBILE_BREAKPOINT && !this._showAccordion) {\n      this._showMobileVersion();\n    } else if (viewPortWidth > MOBILE_BREAKPOINT && this._showAccordion) {\n      this._showDesktopVersion();\n    }\n  }\n\n  private _showMobileVersion() {\n    this._showAccordion = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _showDesktopVersion() {\n    this._showAccordion = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Emulate the tab change event when an accordion panel is opened in\n   * mobile viewports.\n   */\n  _panelOpened(index: number) {\n    this.selectedIndex = index;\n  }\n}\n","import { FocusableOption } from '@angular/cdk/a11y';\nimport { Directive, ElementRef } from '@angular/core';\n\n/** @docs-private */\n@Directive({ selector: '[nxTabLabel]' })\nexport class NxTabLabelDirective implements FocusableOption {\n  constructor(public elementRef: ElementRef) { }\n\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  QueryList,\n} from '@angular/core';\n\nimport { NxTabLabelDirective } from './tab-label';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['./tab-header.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NxTabHeaderComponent implements OnInit, AfterContentInit {\n\n  private _keyManager: FocusKeyManager<NxTabLabelDirective>;\n\n  private _selectedIndex: number = 0;\n\n  @Input()\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._selectedIndex = value;\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex : 0;\n  }\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  private _autoselect: boolean = true;\n\n  @Input()\n  get autoselect(): boolean {\n    return this._autoselect;\n  }\n  set autoselect(value: boolean) {\n    this._autoselect = value;\n  }\n\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  @ContentChildren(NxTabLabelDirective) labels: QueryList<NxTabLabelDirective>;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit() { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<NxTabLabelDirective>(this.labels).withHorizontalOrientation('ltr').withWrap();\n    this._keyManager.updateActiveItemIndex(0);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _isValidIndex(idx: number) {\n    if (!this.labels) { return true; }\n\n    return !!this.labels.toArray()[idx];\n  }\n\n  /**\n   * Handles keyboard inputs on the labels\n   * If autoselect is enabled the tab gets changed immediately\n   * If autoselect is disabled only the focus changes but the user still has to select the item\n   * by himself\n   */\n  handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n\n    if (this.autoselect) {\n      this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);\n    } else if (event.keyCode !== ENTER && event.keyCode !== SPACE) {\n      this.indexFocused.emit(this._keyManager.activeItemIndex);\n    }\n  }\n}\n","import { Component, Input, Directive, ChangeDetectionStrategy, Optional, SkipSelf, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'nx-tab-nav-bar',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['./tab-nav-bar.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-negative]': 'negative',\n    'role': 'navigation',\n  }\n})\nexport class NxTabNavBarComponent {\n\n  private _negative: boolean = false;\n\n  /** Whether the tab nav bar has negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n}\n\n@Directive({\n  selector: '[nxTabLink]',\n  host: {\n    '[class.nx-tab-link]': 'true',\n    '[class.is-active]': 'active',\n    '[attr.aria-current]': 'active',\n  }\n})\nexport class NxTabLinkDirective {\n\n  private _active: boolean = false;\n\n  /** Whether the tab link is active and has the active styling. */\n  @Input()\n  get active(): boolean {\n    return this._active;\n  }\n  set active(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._active) {\n      this._active = value;\n    }\n  }\n\n  constructor(\n    @Optional() @SkipSelf() private _tabNavBar: NxTabNavBarComponent) {\n    if (!this._tabNavBar) {\n      throw Error(`The nx-tab-link element has to be wrapped in a nx-tab-nav-bar to work.`);\n    }\n  }\n}\n","import { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAccordionModule } from '@allianz/ngx-ndbx/accordion';\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabGroupComponent } from './tab-group';\nimport { NxTabHeaderComponent } from './tab-header';\nimport { NxTabLabelDirective } from './tab-label';\nimport { NxTabNavBarComponent, NxTabLinkDirective } from './tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    NxAccordionModule\n  ],\n  exports: [\n    NxTabComponent,\n    NxTabGroupComponent,\n    NxTabLabelDirective,\n    NxTabHeaderComponent,\n    NxTabBodyComponent,\n    NxTabNavBarComponent,\n    NxTabLinkDirective\n  ],\n  declarations: [\n    NxTabComponent,\n    NxTabGroupComponent,\n    NxTabLabelDirective,\n    NxTabHeaderComponent,\n    NxTabBodyComponent,\n    NxTabNavBarComponent,\n    NxTabLinkDirective\n  ],\n  providers: [],\n})\nexport class NxTabsModule { }\n","import { ElementRef, Renderer2, Input } from '@angular/core';\n\nimport { appendClasses, mapClassNames, removeClasses } from '@allianz/ngx-ndbx/utils';\n\nexport type MappingObject = {\n  [key: string]: string;\n};\n\nexport class MappedStyles {\n  private _classNames: string;\n  private _classNamesSanitized: string;\n\n  constructor(\n    private mapping: MappingObject,\n    private baseClasses = [],\n    protected _elementRef: ElementRef,\n    protected _renderer: Renderer2) {\n      this.classNames = '';\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n    removeClasses(this._renderer, this._elementRef, this._classNamesSanitized);\n    this._classNamesSanitized = mapClassNames(value, this.baseClasses, this.mapping);\n    this._classNames = value;\n    appendClasses(this._renderer, this._elementRef, this._classNamesSanitized);\n  }\n}\n","import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Attribute} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  template: '<ng-content></ng-content>',\n  styleUrls: ['card.scss'],\n  selector: 'nx-card',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nx-card',\n    '[class.is-selectable]': 'selectable',\n    '[class.is-selected]': 'selected',\n    '[class.is-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled',\n    '(click)': '_toggleSelected()',\n    '(keydown.enter)': '_toggleSelected()',\n    '[attr.tabindex]': '_getTabindex()'\n  }\n})\nexport class NxCardComponent {\n  _tabindex: string;\n\n  /** Whether this card is selectable or not.  */\n  @Input()\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  private _selectable: boolean;\n\n  /** Whether this card is selected or not.  */\n  @Input()\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  private _selected: boolean;\n\n  /** Whether the card is disabled.  */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Event emitted when the selected value has changed.  */\n  @Output() selectedChange = new EventEmitter<boolean>();\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Attribute('tabindex') tabindex: string) {\n    this._tabindex = tabindex;\n  }\n\n  _toggleSelected(): void {\n    if (this.selectable && !this.disabled) {\n      this.selected = !this.selected;\n      this.selectedChange.emit(this.selected);\n    }\n  }\n\n  _getTabindex(): string {\n    if (this.disabled) {\n      return '-1';\n    }\n\n    if (this.selectable) {\n      return this._tabindex || '0';\n    }\n\n    return this._tabindex || '';\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxCardComponent} from './card.component';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  declarations: [ NxCardComponent ],\n  exports: [ NxCardComponent ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class NxCardModule { }\n","export const BREAKPOINT_MOBILE = '(max-width: 703px)';\nexport const BREAKPOINT_TABLET = '(min-width: 704px) and (max-width: 992px)';\nexport const BREAKPOINT_DESKTOP = '(min-width: 993px)';\n"]}