{"version":3,"sources":["ng://@allianz/ngx-ndbx/code-input/code-input-intl.ts","ng://@allianz/ngx-ndbx/code-input/code-input.component.ts","ng://@allianz/ngx-ndbx/code-input/code-input.module.ts"],"names":["NxCodeInputIntl","this","changes","Subject","inputFieldAriaLabel","Injectable","TAG_NAME_INPUT","NxCodeInputComponent","_changeDetectorRef","_el","_control","_intl","_codeLength","_type","_tabindex","_keyCode","Array","_focused","propagateChange","_","propagateTouch","valueAccessor","Object","defineProperty","prototype","value","setInputLength","markForCheck","_convertTo","codeLength","_convertLetterSize","convertTo","toUpperCase","toLowerCase","_keydownAction","event","previousInputField","target","previousElementSibling","nextInputField","nextElementSibling","keyCode","SPACE","BACKSPACE","tagName","focus","select","LEFT_ARROW","preventDefault","RIGHT_ARROW","_selectText","_selectNextInput","join","nextSibling","_pasteClipboard","copiedText","clipboardData","undefined","getData","replace","split","index","count","i","nativeElement","children","length","srcElement","item","_onBlur","_this","setTimeout","_setFocusState","writeValue","valueAsArray","slice","_trackByKeyCode","_inputGap","registerOnChange","fn","registerOnTouched","Component","args","selector","template","host","[class.nx-code-input]","[class.has-error]","[attr.tabindex]","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","ElementRef","NgControl","decorators","type","Self","Optional","Input","NxCodeInputModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NxCodeInputIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for the input field */\n  inputFieldAriaLabel: string = 'Enter Key';\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ChangeDetectorRef,\n  ElementRef,\n  Self,\n  Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\nimport { BACKSPACE, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\n\nconst DEFAULT_INPUT_LENGTH = 6;\nconst TAG_NAME_INPUT = 'INPUT';\nconst AUTO_UPPERCASE = 'upper';\nconst AUTO_LOWERCASE = 'lower';\nconst INPUT_FIELD_GAP = 'nx-code-input--gap';\nexport type NxConversionTypes = 'lower' | 'upper';\n\n@Component({\n  selector: 'nx-code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: [\n    'code-input.scss'\n  ],\n  host: {\n    '[class.nx-code-input]': 'true',\n    '[class.has-error]': '_control ? _control.invalid && _control.touched : false',\n    '[attr.tabindex]': 'tabindex'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCodeInputComponent implements ControlValueAccessor {\n  /** The length of the code input. Default: 6. */\n  @Input('length')\n  set codeLength(value: number) {\n    this._codeLength = value;\n    this.setInputLength();\n    this._changeDetectorRef.markForCheck();\n  }\n  get codeLength() {\n    return this._codeLength;\n  }\n  private _codeLength: number = DEFAULT_INPUT_LENGTH;\n\n  /** The type of HTML input */\n  @Input()\n  set type(value: string) {\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get type() {\n    return this._type;\n  }\n  private _type: string = 'text';\n\n  /* Sets the the tabindex if code input */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n  private _tabindex: number = 0;\n\n  /** Whether the form should auto capitalize or lowercase. (Optional) */\n  @Input('nxConvertTo')\n  set convertTo(value: NxConversionTypes) {\n    this._convertTo = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get convertTo() {\n    return this._convertTo;\n  }\n  private _convertTo?: NxConversionTypes;\n\n  /** The user input in array form */\n  _keyCode: string[] = new Array(DEFAULT_INPUT_LENGTH);\n  private _focused: boolean = false;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _el: ElementRef,\n    @Self() @Optional() public _control: NgControl,\n    public _intl: NxCodeInputIntl) {\n    if (this._control) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this._control.valueAccessor = this;\n    }\n  }\n\n  /** Sets the length of the input fields. */\n  setInputLength(): void {\n    if (this.codeLength) {\n      this._keyCode = new Array(this.codeLength);\n    } else {\n      this._keyCode = new Array(DEFAULT_INPUT_LENGTH);\n    }\n  }\n\n  /** Converts to upper or lowercase when enabled. */\n  _convertLetterSize(value: any): string {\n    if (value === 'Ã') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      if (this.convertTo === AUTO_UPPERCASE) {\n        return value.toUpperCase();\n      } else if (this.convertTo === AUTO_LOWERCASE) {\n        return value.toLowerCase();\n      }\n\n      return value;\n    }\n  }\n\n  /** Reacts to keydown event. */\n  _keydownAction(event): void | false {\n    const previousInputField = event.target.previousElementSibling;\n    const nextInputField = event.target.nextElementSibling;\n\n    switch (event.keyCode) {\n      case SPACE:\n        return false;\n\n      case BACKSPACE:\n        if (event.target.value === '') {\n          if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n            previousInputField.focus();\n            previousInputField.select();\n          }\n        }\n        break;\n\n      case LEFT_ARROW:\n        if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n          event.preventDefault();\n          previousInputField.focus();\n          previousInputField.select();\n        }\n        break;\n\n      case RIGHT_ARROW:\n        if (nextInputField && nextInputField.tagName === TAG_NAME_INPUT) {\n          nextInputField.focus();\n          nextInputField.select();\n        }\n        event.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /** Selects the value on click of an input field. */\n  _selectText(event): void {\n    event.target.select();\n  }\n\n  /** Automatically focuses and selects the next input on key input. */\n  _selectNextInput(event): void {\n    event.target.value = this._convertLetterSize(event.target.value);\n    this.propagateChange(this._keyCode.join(''));\n\n    if (event.target.value) {\n      const nextInputField = event.target.nextSibling;\n\n      if (nextInputField !== null && nextInputField.tagName === TAG_NAME_INPUT) {\n        nextInputField.focus();\n        if (nextInputField.value !== '') {\n          nextInputField.select();\n        }\n      }\n    }\n  }\n\n  /** Paste event to distribute content in input fields. */\n  _pasteClipboard(event): void {\n    let copiedText = '';\n    if (event.clipboardData === undefined) {\n      copiedText = (<any>window).clipboardData.getData('text').replace(/ /g, '').split('');\n    } else {\n      copiedText = event.clipboardData.getData('text').replace(/ /g, '').split('');\n    }\n\n    let index = 0;\n    let count = 0;\n\n    for (let i = 0; i < this._el.nativeElement.children.length; i++) {\n      if (event.srcElement === this._el.nativeElement.children.item(i)) {\n        index = i;\n      }\n    }\n\n    for (let i = index; i < this.codeLength; i++) {\n      this._keyCode[i] = this._convertLetterSize(copiedText[count]);\n      count++;\n    }\n\n    this.propagateChange(this._keyCode.join(''));\n\n    if (index + copiedText.length < this.codeLength) {\n      this._el.nativeElement.children.item(index + copiedText.length).focus();\n      event.preventDefault();\n    } else if (index + copiedText.length >= this.codeLength) {\n      event.preventDefault();\n    }\n  }\n\n  /** Triggers when an input field is blurred. */\n  _onBlur(): void {\n    this._focused = false;\n    setTimeout(() => {\n      if (!this._focused) {\n        this.propagateTouch(this._keyCode.join(''));\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Sets _focused state and makes valid. */\n  _setFocusState(): void {\n    this._focused = true;\n  }\n\n  /** Sets initial value, used by ControlValueAccessor. */\n  writeValue(value: string): void {\n    if (value) {\n      const valueAsArray = value.split('').slice(0, this.codeLength);\n\n      for (let i = 0; i < this.codeLength; i++) {\n        this._keyCode[i] = valueAsArray[i];\n      }\n    } else {\n      this.setInputLength();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _trackByKeyCode(index: number, item: string): number {\n    return index;\n  }\n\n  /** Adds a gap to input fields when appropriate. */\n  _inputGap(index): string {\n    switch (this.codeLength) {\n      case 4:\n      case 6:\n      case 8:\n        if (index === this.codeLength / 2) {\n          return INPUT_FIELD_GAP;\n        }\n\n        break;\n      default:\n        return;\n    }\n  }\n\n  /** @docs-private */\n  propagateChange = (_: any) => {\n  }\n\n  /** @docs-private */\n  propagateTouch = (_: any) => {\n  }\n\n  registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.propagateTouch = fn;\n  }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\n\nimport {NxCodeInputComponent} from './code-input.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    NxCodeInputComponent,\n  ],\n  exports: [\n    NxCodeInputComponent,\n  ],\n  providers: [NxCodeInputIntl],\n})\nexport class NxCodeInputModule {\n}\n"]}