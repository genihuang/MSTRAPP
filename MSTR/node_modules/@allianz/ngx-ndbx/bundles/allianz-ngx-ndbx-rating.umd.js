(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/keycodes'), require('@angular/core'), require('@angular/forms'), require('@angular/cdk/coercion'), require('@allianz/ngx-ndbx/icon'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/rating', ['exports', '@angular/cdk/keycodes', '@angular/core', '@angular/forms', '@angular/cdk/coercion', '@allianz/ngx-ndbx/icon', '@angular/common'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].rating = {}),global.ng.cdk.keycodes,global.ng.core,global.ng.forms,global.ng.cdk.coercion,global.allianz['ngx-ndbx'].icon,global.ng.common));
}(this, (function (exports,keycodes,core,forms,coercion,icon,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxRatingComponent = /** @class */ (function () {
        function NxRatingComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this._value = 0;
            this._disabled = false;
            this._negative = false;
            this._startLabel = null;
            this._endLabel = null;
            this._ariaLabel = ['1/5', '2/5', '3/5', '4/5', '5/5'];
            /**
             * An event is dispatched each time when the rating changes.
             */
            this.valueChange = new core.EventEmitter();
            this.onTouchedCallback = ( /**
             * @return {?}
             */function () { });
            this.onChangeCallback = ( /**
             * @param {?} option
             * @return {?}
             */function (option) { });
        }
        Object.defineProperty(NxRatingComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            /** Sets the selected rating 1 - 5. */
            set: /**
             * Sets the selected rating 1 - 5.
             * @param {?} newValue
             * @return {?}
             */ function (newValue) {
                this._value = coercion.coerceNumberProperty(newValue);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRatingComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            /** Whether the rating component should be disabled. */
            set: /**
             * Whether the rating component should be disabled.
             * @param {?} newValue
             * @return {?}
             */ function (newValue) {
                if (this._disabled === newValue) {
                    return;
                }
                this._disabled = coercion.coerceBooleanProperty(newValue);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRatingComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */ function () {
                return this._negative;
            },
            /** Whether the negative colors be used. */
            set: /**
             * Whether the negative colors be used.
             * @param {?} newValue
             * @return {?}
             */ function (newValue) {
                if (this._negative === newValue) {
                    return;
                }
                this._negative = coercion.coerceBooleanProperty(newValue);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRatingComponent.prototype, "startLabel", {
            get: /**
             * @return {?}
             */ function () {
                return this._startLabel;
            },
            /** Sets the label painted at the start of the rating component. */
            set: /**
             * Sets the label painted at the start of the rating component.
             * @param {?} newValue
             * @return {?}
             */ function (newValue) {
                this._startLabel = newValue;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRatingComponent.prototype, "endLabel", {
            get: /**
             * @return {?}
             */ function () {
                return this._endLabel;
            },
            /** Sets the label painted at the end of the rating component. */
            set: /**
             * Sets the label painted at the end of the rating component.
             * @param {?} newValue
             * @return {?}
             */ function (newValue) {
                this._endLabel = newValue;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRatingComponent.prototype, "ariaLabel", {
            get: /**
             * @return {?}
             */ function () {
                return this._ariaLabel;
            },
            set: /**
             * @param {?} newAriaLabels
             * @return {?}
             */ function (newAriaLabels) {
                this._ariaLabel = newAriaLabels;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        /** Whether the given rating is selected. */
        /**
         * Whether the given rating is selected.
         * @param {?} index
         * @return {?}
         */
        NxRatingComponent.prototype.isSelected = /**
         * Whether the given rating is selected.
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return index <= this.value;
            };
        /** Allows to set the rating. */
        /**
         * Allows to set the rating.
         * @param {?} value
         * @return {?}
         */
        NxRatingComponent.prototype.setSelection = /**
         * Allows to set the rating.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!this.disabled) {
                    this.value = value;
                    this.valueChange.emit(value);
                    this.onTouchedCallback();
                    this.onChangeCallback(this.value);
                }
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @param {?} rating
         * @return {?}
         */
        NxRatingComponent.prototype.handleKeyUp = /**
         * \@docs-private
         * @param {?} event
         * @param {?} rating
         * @return {?}
         */
            function (event, rating) {
                /** @type {?} */
                var keyCode = event.keyCode;
                event.preventDefault();
                event.stopPropagation();
                if (keyCode === keycodes.ENTER) {
                    this.setSelection(rating);
                }
                if (keyCode === keycodes.RIGHT_ARROW) {
                    this.value = Math.min(this.value + 1, 5);
                    /** @type {?} */
                    var elementRef = this.icons.toArray()[this.value - 1];
                    elementRef.nativeElement.focus();
                }
                if (keyCode === keycodes.LEFT_ARROW) {
                    this.value = Math.max(this.value - 1, 1);
                    /** @type {?} */
                    var elementRef = this.icons.toArray()[this.value - 1];
                    elementRef.nativeElement.focus();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NxRatingComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} callback
         * @return {?}
         */
        NxRatingComponent.prototype.registerOnChange = /**
         * @param {?} callback
         * @return {?}
         */
            function (callback) {
                this.onChangeCallback = callback;
            };
        /**
         * @param {?} callback
         * @return {?}
         */
        NxRatingComponent.prototype.registerOnTouched = /**
         * @param {?} callback
         * @return {?}
         */
            function (callback) {
                this.onTouchedCallback = callback;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NxRatingComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} rating
         * @return {?}
         */
        NxRatingComponent.prototype.getAriaLabel = /**
         * \@docs-private
         * @param {?} rating
         * @return {?}
         */
            function (rating) {
                return this.ariaLabel[rating - 1];
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} rating
         * @return {?}
         */
        NxRatingComponent.prototype.getIconName = /**
         * \@docs-private
         * @param {?} rating
         * @return {?}
         */
            function (rating) {
                return 'star' + ((!this.isSelected(rating)) ? '-o' : '');
            };
        NxRatingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-rating',
                        template: "  <div class=\"nx-rating__container\" role=\"radiogroup\">\n    <nx-icon *ngFor=\"let rating of [1,2,3,4,5]\"\n      (click)=\"setSelection(rating)\"\n      (keyup)=\"handleKeyUp($event, rating)\"\n      role=\"radio\"\n      [attr.aria-label]=\"getAriaLabel(rating)\"\n      [attr.aria-checked]=\"isSelected(rating)\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      class=\"nx-rating__icon\"\n      [name]=\"getIconName(rating)\"\n      size=\"m\">\n    </nx-icon>\n  </div>\n  <div class=\"nx-rating__label\" *ngIf=\"startLabel || endLabel\">\n    <span class=\"nx-rating__label--start\">{{startLabel}}</span>\n    <span class=\"nx-rating__label--end\">{{endLabel}}</span>\n  </div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return NxRatingComponent; })),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.nx-rating--negative]': 'negative',
                            '[class.nx-rating--disabled]': 'disabled',
                        },
                        styles: [":host{display:inline-block}:host(.nx-rating--negative){color:#fff}:host(.nx-rating--disabled){cursor:not-allowed;color:#c2c2c2;outline:0}:host(.nx-rating--disabled) .nx-rating__label{color:#c2c2c2}:host(.nx-rating--disabled) .nx-rating__icon{cursor:not-allowed}.nx-rating__container{display:flex}.nx-rating__label{display:flex;font-size:16px}.nx-rating__label--end{margin-left:auto}.nx-rating__icon{font-size:40px;width:auto;height:40px;background:0 0;border:none;margin-right:16px;cursor:pointer;outline:0}.nx-rating__icon:last-child{margin-right:0}:host-context([data-whatinput=keyboard]) .nx-rating__icon:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
                    }] }
        ];
        /** @nocollapse */
        NxRatingComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        NxRatingComponent.propDecorators = {
            value: [{ type: core.Input, args: ['nxValue',] }],
            disabled: [{ type: core.Input, args: ['nxDisabled',] }],
            negative: [{ type: core.Input, args: ['nxNegative',] }],
            startLabel: [{ type: core.Input, args: ['nxStartLabel',] }],
            endLabel: [{ type: core.Input, args: ['nxEndLabel',] }],
            ariaLabel: [{ type: core.Input, args: ['nxAriaLabel',] }],
            valueChange: [{ type: core.Output, args: ['nxValueChange',] }],
            icons: [{ type: core.ViewChildren, args: [icon.NxIconComponent, { read: core.ElementRef },] }]
        };
        return NxRatingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxRatingModule = /** @class */ (function () {
        function NxRatingModule() {
        }
        NxRatingModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            icon.NxIconModule
                        ],
                        declarations: [
                            NxRatingComponent
                        ],
                        exports: [
                            NxRatingComponent
                        ]
                    },] }
        ];
        return NxRatingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxRatingModule = NxRatingModule;
    exports.NxRatingComponent = NxRatingComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-rating.umd.js.map