{"version":3,"sources":["ng://@allianz/ngx-ndbx/mask/mask.directive.ts","ng://@allianz/ngx-ndbx/mask/mask.module.ts"],"names":["NX_MASK_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NxMaskDirective","multi","NX_MASK_VALIDATORS","NG_VALIDATORS","_elementRef","this","_separators","_dropSpecialCharacters","_position","_validateMask","_onChangeCallback","_","_onTouchedCallback","_validatorOnChange","Object","defineProperty","prototype","_mask","value","updateValue","getMaskedString","nativeElement","values","newValue","coerceBooleanProperty","getUnmaskedValue","separators","reduce","unmasked","separator","split","join","_onKeydown","event","keyCode","location","input","currentValue","selectionStart","selectionEnd","nextCharacterInMask","isSeparator","positionChange","_isKeyCodeAllowed","mask","_calculateCursorShift","BACKSPACE","DELETE","backspaceShift","lastCharacter","substring","length","preventDefault","setSelectionRange","position","shift","characterWasEntered","_keyCodeIsNumber","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","_keyCodeIsLetter","A","Z","maskedValue","_isStringAllowed","test","_onInputChange","_onPaste","pastedData","clipboardData","getData","maskedString","dropSpecialCharacters","inputValue","maskStartIndex","formattedValue","maskIndex","inputIndex","carot","indexOf","writeValue","registerOnChange","onChange","registerOnTouched","onTouched","registerOnValidatorChange","fn","_validateFn","inputLength","maskLength","nxMaskLengthError","actual","validate","validateMask","Directive","args","selector","host","(input)","(keydown)","(paste)","(blur)","exportAs","providers","NX_INPUT_VALUE_ACCESSOR","ElementRef","Input","NxMaskModule","NgModule","imports","CommonModule","NxFormfieldModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, ElementRef, forwardRef } from '@angular/core';\n\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  Validator\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NX_INPUT_VALUE_ACCESSOR } from '@allianz/ngx-ndbx/input';\nimport { BACKSPACE, DELETE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, A, Z } from '@angular/cdk/keycodes';\n\ntype MASK_TYPE = '0' | 'A' | 'S';\n\nexport const NX_MASK_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxMaskDirective),\n  multi: true\n};\n\nexport const NX_MASK_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxMaskDirective),\n  multi: true\n};\n\n@Directive({\n  selector: 'input[nxMask]',\n  host: {\n    '(input)': '_onInputChange($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(paste)': '_onPaste($event)',\n    '(blur)': '_onTouchedCallback()'\n  },\n  exportAs: 'nxMaskDirective',\n  providers: [\n    NX_MASK_VALUE_ACCESSOR,\n    { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxMaskDirective },\n    NX_MASK_VALIDATORS\n  ]\n})\nexport class NxMaskDirective implements ControlValueAccessor, Validator {\n\n  private _mask: string;\n  private _separators = ['/', '(', ')', '.', ':', '-', ' ', '+', ','];\n  private _dropSpecialCharacters: boolean = false;\n  private _position: number = null;\n  private _validateMask: boolean = true;\n\n  private _onChangeCallback = (_: any) => { };\n  private _onTouchedCallback = () => { };\n  private _validatorOnChange = () => { };\n\n  /** Sets the mask.  */\n  @Input('nxMask')\n  set mask(value: string) {\n    if (!value) {\n      value = '';\n    }\n    if (value !== this._mask) {\n      this._mask = value;\n      this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n      this._validatorOnChange();\n    }\n  }\n  get mask(): string {\n    return this._mask;\n  }\n\n  /**\n   * Sets the keys that are recognized as separators.\n   * Default separators: / ( ) . : - + , and space.\n   */\n  @Input()\n  set separators(values: string[]) {\n    this._separators = values;\n    this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n    this._validatorOnChange();\n  }\n  get separators(): string[] {\n    return this._separators;\n  }\n\n  /** Whether the separators should be dropped in the control value accessor. */\n  @Input()\n  set dropSpecialCharacters(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._dropSpecialCharacters) {\n      this._dropSpecialCharacters = newValue;\n      this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n    }\n  }\n  get dropSpecialCharacters(): boolean {\n    return this._dropSpecialCharacters;\n  }\n\n  /** Whether the mask validation should be applied on the input. Default: true. */\n  @Input()\n  set validateMask(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._validateMask) {\n      this._validateMask = newValue;\n      this._validatorOnChange();\n    }\n  }\n  get validateMask(): boolean {\n    return this._validateMask;\n  }\n\n  constructor(\n    private _elementRef: ElementRef\n  ) { }\n\n  /** Returns the unmasked value. */\n  getUnmaskedValue(): string {\n    const unmaskedValue = this.separators.reduce(function(unmasked, separator) {\n      return unmasked.split(separator).join('');\n    }, this._elementRef.nativeElement.value);\n\n    return unmaskedValue;\n  }\n\n  /**\n   * this._position can be set to a new value in this function;\n   * it is used to set the cursor position after checking the masked input in _onInputChange().\n   */\n  _onKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const location = event.location;\n\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    const currentValue = this._elementRef.nativeElement.value;\n\n    // row of characters is selected: set cursor position to end of new entered character\n    if (input.selectionStart !== input.selectionEnd) {\n      let nextCharacterInMask = input.selectionStart;\n      while (this.isSeparator(this._mask[nextCharacterInMask])) {\n        nextCharacterInMask++;\n      }\n      const positionChange = this._isKeyCodeAllowed(keyCode, location, this.mask[nextCharacterInMask] as MASK_TYPE)\n                      ? this._calculateCursorShift(input.selectionStart)\n                      : 0;\n      this._position = input.selectionStart + positionChange;\n    } else if (keyCode === BACKSPACE || keyCode === DELETE) {\n      // if backspace pressed, cursor has to move one character to start\n      const backspaceShift = keyCode === BACKSPACE ? 1 : 0;\n      const lastCharacter = currentValue.substring(input.selectionStart - backspaceShift, input.selectionEnd - backspaceShift + 1);\n      const selectionAtLastCharacter = (input.selectionStart === currentValue.length - 1 + backspaceShift);\n\n      // if last character is deleted: only delete last character, do not trigger input event again\n      // (here the separator would be added again)\n      if (selectionAtLastCharacter) {\n        this.updateValue(currentValue.substring(0, currentValue.length - 1));\n        event.preventDefault();\n      // do not delete a separator, only set cursor position\n      } else if (this.isSeparator(lastCharacter)) {\n        input.setSelectionRange(input.selectionStart - backspaceShift, input.selectionEnd - backspaceShift);\n        event.preventDefault();\n      // for any other character: decrease cursor position by one.\n      // the input is modified and will be validated in _onInputChange().\n      } else {\n        this._position = input.selectionStart - backspaceShift;\n      }\n    } else {\n      this._position = input.selectionStart;\n      let nextCharacterInMask = input.selectionStart;\n      while (this.isSeparator(this._mask[nextCharacterInMask])) {\n        nextCharacterInMask++;\n      }\n\n      if (this._isKeyCodeAllowed(keyCode, location, this._mask[nextCharacterInMask] as MASK_TYPE)) {\n        // if mask is already filled up, do not allow any inputs\n        if (currentValue.length === this.mask.length) {\n          input.setSelectionRange(nextCharacterInMask, nextCharacterInMask);\n          event.preventDefault();\n        } else {\n          this._position = nextCharacterInMask + 1;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the cursor position after a letter is entered at `selectionStart` position in the mask.\n   * There are two cases to consider ('|' => cursor position where the character is entered, mask: 00:00:00):\n   * - before the separators there is space for entering the letter: '12:3|4:5' => '12:30:|45'\n   * - the letter has to be shifted and is entered after the separators: '12:34|:5' => '12:34:0|5'\n   */\n  private _calculateCursorShift(position: number): number {\n    let shift = 0;\n    // tracks if the entered letter was already placed in the current mask\n    // and therefor was considered in the cursor calculation.\n    let characterWasEntered = false;\n\n    if (!this.isSeparator(this.mask[position + shift])) {\n      shift++;\n      characterWasEntered = true;\n    }\n\n    while (this.isSeparator(this.mask[position + shift])) {\n      shift++;\n    }\n\n    if (!characterWasEntered) {\n      shift++;\n    }\n\n    return shift;\n  }\n\n  private _keyCodeIsNumber(value: number, location: number): boolean {\n    return ((value >= ZERO && value <= NINE)\n           || (location === 3 && value >= NUMPAD_ZERO && value <= NUMPAD_NINE));\n  }\n\n  private _keyCodeIsLetter(value: number): boolean {\n    return (value >= A && value <= Z);\n  }\n\n  private _isKeyCodeAllowed(value: number, location: number, maskedValue: MASK_TYPE) {\n    if ((maskedValue === '0' && this._keyCodeIsNumber(value, location))\n        || (maskedValue === 'A' && (this._keyCodeIsNumber(value, location) || this._keyCodeIsLetter(value)))\n        || (maskedValue === 'S' && this._keyCodeIsLetter(value))) {\n\n      return true;\n    }\n    return false;\n  }\n\n  private _isStringAllowed(value: string, maskedValue: MASK_TYPE) {\n    if ((maskedValue === '0' && /^[0-9]{1}$/.test(value))\n          || (maskedValue === 'A' && /^[a-zA-Z0-9]{1}$/.test(value))\n          || (maskedValue === 'S' && /^[a-zA-Z]{1}$/.test(value))) {\n\n      return true;\n    }\n    return false;\n  }\n\n  _onInputChange(event: KeyboardEvent) {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    this.updateValue(this.getMaskedString(input.value));\n    if (this._position !== null) {\n      input.setSelectionRange(this._position, this._position);\n      this._position = null;\n    }\n  }\n\n  _onPaste(event: ClipboardEvent) {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    const pastedData = (event.clipboardData || (<any> window).clipboardData).getData('text');\n    const maskedString = this.getMaskedString(pastedData, input.selectionStart);\n    this._position = input.selectionStart + maskedString.length;\n  }\n\n  private updateValue(value: string) {\n    this._elementRef.nativeElement.value = value;\n    if (!this.dropSpecialCharacters) {\n      this._onChangeCallback(value);\n    } else {\n      this._onChangeCallback(this.getUnmaskedValue());\n    }\n  }\n\n  private getMaskedString(inputValue: string, maskStartIndex: number = 0): string {\n    let formattedValue = '';\n    let maskIndex = maskStartIndex;\n    let inputIndex = 0;\n    let carot = 0;\n\n    // insert if next in mask is separator\n    while (this.isSeparator(this.mask[maskIndex])) {\n      formattedValue += this.mask[maskIndex];\n      maskIndex++;\n    }\n\n    while (inputIndex < inputValue.length) {\n      // test if letters are valid\n      if (this._isStringAllowed(inputValue[inputIndex], this.mask[maskIndex] as MASK_TYPE)) {\n        formattedValue += inputValue[inputIndex];\n        inputIndex++;\n        maskIndex++;\n      } else {\n        inputIndex++;\n      }\n\n      // insert if next in mask is separator\n      while (this.isSeparator(this.mask[maskIndex])) {\n        formattedValue += this.mask[maskIndex];\n\n        // shift for _position\n        if (maskIndex === this._position + carot) {\n          carot++;\n        }\n\n        maskIndex++;\n      }\n    }\n\n    if (carot > 0) {\n      this._position = this._position + carot;\n    }\n\n    return formattedValue;\n  }\n\n  private isSeparator(value: string): boolean {\n    return (this._separators.indexOf(value) !== -1);\n  }\n\n  // control value accessor\n  writeValue(value: any): void {\n    if (!value) {\n      value = '';\n    }\n    this.updateValue(this.getMaskedString(value));\n  }\n\n  registerOnChange(onChange: any): void {\n    this._onChangeCallback = onChange;\n  }\n\n  registerOnTouched(onTouched: any): void {\n    this._onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  _validateFn() {\n    const inputLength = this._elementRef.nativeElement.value.length;\n    const maskLength = this._mask.length;\n    if (inputLength !== maskLength) {\n      return { nxMaskLengthError: {'length': maskLength, 'actual': inputLength} };\n    }\n    return null;\n  }\n\n  /** @docs-private */\n  validate() {\n    return this.validateMask ? this._validateFn() : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxMaskDirective } from './mask.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule\n  ],\n  declarations: [\n    NxMaskDirective\n  ],\n  exports: [\n    NxFormfieldModule,\n    NxMaskDirective\n  ]\n})\nexport class NxMaskModule { }\n"]}