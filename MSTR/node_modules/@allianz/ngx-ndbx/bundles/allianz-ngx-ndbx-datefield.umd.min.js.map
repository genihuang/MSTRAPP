{"version":3,"sources":["ng://@allianz/ngx-ndbx/datefield/adapter/native-date-formats.ts","node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/datefield/adapter/date-adapter.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-token.ts","ng://@allianz/ngx-ndbx/datefield/adapter/native-date-adapter.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-formats.ts","ng://@allianz/ngx-ndbx/datefield/adapter/index.ts","ng://@allianz/ngx-ndbx/datefield/datefield-errors.ts","ng://@allianz/ngx-ndbx/datefield/datefield.directive.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-errors.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-intl.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/calendar-body.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/month-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/multi-year-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/year-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/calendar.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker.component.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-toggle.ts","ng://@allianz/ngx-ndbx/datefield/datefield.module.ts"],"names":["NX_NATIVE_DATE_FORMATS","parse","dateInput","display","year","month","day","monthYearLabel","dateA11yLabel","monthYearA11yLabel","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","NxDateAdapter","locale","_localeChanges","Subject","defineProperty","deserialize","value","isDateInstance","isValid","invalid","sameDate","first","second","firstValid","secondValid","compareDate","getYear","getMonth","getDate","setLocale","next","getLocale","clampDate","date","min","max","NX_DATE_LOCALE","InjectionToken","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","valueFunction","valuesArray","NxNativeDateAdapter","_super","matDateLocale","platform","_this","useUtcForDisplay","TRIDENT","_clampDate","EDGE","__extends","__","constructor","create","tslib_1.__extends","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","getDayOfWeekNames","dtf_3","weekday","getYearName","dtf","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","clone","createDate","Error","result","today","format","displayFormat","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","getTime","NaN","slice","str","replace","UTC","getHours","getMinutes","getSeconds","getMilliseconds","Injectable","Optional","type","Inject","args","Platform","NX_DATE_FORMATS","NX_DATE_LOCALE_PROVIDER","provide","useExisting","LOCALE_ID","NativeDateModule","NgModule","imports","PlatformModule","providers","useClass","NxNativeDateModule","useValue","Éµ0$1","createMissingDateImplError","provider","NX_DATEFIELD_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","NxDatefieldDirective","multi","NX_DATEFIELD_VALIDATORS","NG_VALIDATORS","NxDatepickerInputEvent","target","targetElement","_elementRef","_dateAdapter","_dateFormats","_formField","currentFormattedDate","_strict","dateChange","EventEmitter","_valueChange","_disabledChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","nxDatefieldParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","nxDatefieldMin","actual","_maxValidator","nxDatefieldMax","_filterValidator","_dateFilter","nxDatefieldFilter","_validator","Validators","compose","localeChanges","subscribe","registerDatepicker","_datepicker","registerInput","_value","oldDate","_displayFormat","emit","_min","_max","coerceBooleanProperty","_onInput","_parseFormat","_disabled","newValue","blur","ngAfterContentInit","selectedChanged","selected","ngOnDestroy","unsubscribe","complete","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","_onKeydown","event","altKey","keyCode","DOWN_ARROW","open","preventDefault","strict","_onChange","_focus","focus","Directive","selector","NX_INPUT_VALUE_ACCESSOR","host","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","exportAs","ElementRef","decorators","NxFormfieldComponent","Input","Output","NxDatepickerIntl","changes","calendarHeader","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","NxCalendarCell","displayValue","ariaLabel","enabled","NxCalendarBodyComponent","_ngZone","numCols","allowDisabledSelection","activeCell","previousItems","followingItems","selectedValueChange","_cellClicked","cell","rows","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","take","querySelector","Component","template","class","role","attr.aria-readonly","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","NxMonthViewComponent","_changeDetectorRef","_dir","selectedChange","_userSelection","activeDateChange","_numCols","firstDayOfWeek","narrowWeekdays","weekdays","map","_weekdays","concat","_activeDate","oldActiveDate","validDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","activeDate","selectedMonth","selectedDate","_handleCalendarBodyKeydown","isRtl","_isRtl","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","dateFilter","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_createWeekCells","markForCheck","_nxCalendarBody","daysInMonth","dateNames","_weeks","push","_shouldEnableDate","d1","d2","_getLastDaysOfPreviousMonth","firstDayOfMonth","firstDayOfPreviousItems","_getRowOfDays","_getFirstDaysOfFollowingMonth","followingDays","firstDayOfNextMonth","followingDaysCount","offsetItems","offsetRow","remainingDays","firstDayInRow","daysCount","nextRow","addDays","ChangeDetectorRef","Directionality","ViewChild","yearsPerPage","NxMultiYearViewComponent","yearSelected","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","_createCellForYear","_yearSelected","_getActiveCell","yearName","_shouldEnableYear","undefined","NxYearViewComponent","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","NxCalendarComponent","_intl","changeDetectorRef","startView","_intlChanges","_startAt","_clampedActiveDate","_currentView","multi-year","startAt","ngOnChanges","change","firstChange","view","monthView","yearView","multiYearView","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_changeViewClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","datepickerUid","NX_DATEPICKER_SCROLL_STRATEGY","NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER","deps","Overlay","useFactory","DATEPICKER_DEFAULT_OPTIONS","NxDatepickerContentComponent","elementRef","NxDatepickerComponent","_overlay","_viewContainerRef","_scrollStrategy","_document","openedStream","closedStream","_opened","id","_validSelected","_focusedElementBeforeOpen","_inputSubscription","_datepickerInput","close","_popupRef","dispose","_popupComponentRef","select","oldValue","selectYear","selectMonth","input","registerToggle","toggle","_toggleButton","activeElement","_openAsPopup","hasAttached","detach","_calendarPortal","isAttached","completeClose","setTimeout","tabindex","ComponentPortal","_createPopup","attach","instance","datepicker","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","direction","scrollStrategy","panelClass","merge","backdropClick","detachments","keydownEvents","filter","ESCAPE","position","connectedTo","originX","originY","overlayX","overlayY","withFallbackPosition","ViewContainerRef","DOCUMENT","NxDatepickerToggleIconComponent","NxDatepickerToggleComponent","_defaultOptions","_stateChanges","_tabindex","toggleIconTabindex","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[class.nx-datepicker-toggle-active]","[class.nx-datepicker-toggle--disabled]","ContentChild","NxDatefieldModule","CommonModule","OverlayModule","A11yModule","NxIconModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NxDateFormats} from './date-formats';\n\n\nexport const NX_NATIVE_DATE_FORMATS: NxDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Observable ,  Subject } from 'rxjs';\nimport { NgModule } from '@angular/core';\n\n/** @docs-private */\nexport abstract class NxDateAdapter<D> {\n  protected locale = 'de-DE';\n  protected _localeChanges = new Subject<string>();\n  abstract toIso8601(date: D): string;\n  abstract format(date: D, displayFormat: any): string;\n  abstract parse(value: any, format: string|string[], strict: boolean): D | null;\n  abstract isValid(date: D): boolean;\n  abstract clone(date: D): D;\n  abstract isDateInstance(obj: any): boolean;\n  abstract invalid(): D;\n\n  abstract getYear(date: D): number;\n  abstract getMonth(date: D): number;\n  abstract getDate(date: D): number;\n\n  get localeChanges(): Observable<string> { return this._localeChanges; }\n\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      const firstValid = this.isValid(first);\n      const secondValid = this.isValid(second);\n\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid === secondValid;\n    }\n    return first === second;\n  }\n\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  setLocale(locale: string) {\n    this.locale = locale;\n    this._localeChanges.next(this.locale);\n  }\n\n  getLocale(): string {\n    return this.locale;\n  }\n\n  abstract getYearName(date: D): string;\n  abstract createDate(year: number, month: number, date: number): D;\n  abstract getNumDaysInMonth(date: D): number;\n  abstract getDateNames(): string[];\n  abstract getDayOfWeek(date: D): number;\n  abstract getFirstDayOfWeek(): number;\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n  abstract today(): D;\n  abstract addCalendarMonths(date: D, months: number): D;\n  abstract addCalendarYears(date: D, years: number): D;\n  abstract addCalendarDays(date: D, days: number): D;\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\n","import {InjectionToken, LOCALE_ID} from '@angular/core';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const NX_DATE_LOCALE = new InjectionToken<string>('nx-date-locale');\n\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\n\nimport { NxDateAdapter } from './date-adapter';\nimport { NX_DATE_LOCALE } from './date-token';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl !== 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/**\n * @docs-private\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\n@Injectable()\nexport class NxNativeDateAdapter extends NxDateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(NX_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    const result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() !== month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value === 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NxNativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        const date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/** @docs-private */\nexport type NxDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any\n  }\n};\n\nexport const NX_DATE_FORMATS = new InjectionToken<NxDateFormats>('nx-date-formats');\n","import { NX_NATIVE_DATE_FORMATS } from './native-date-formats';\nimport { NxNativeDateAdapter } from './native-date-adapter';\nimport { NX_DATE_FORMATS } from './date-formats';\nimport { NgModule } from '@angular/core';\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport { NxDateAdapter } from './date-adapter';\nimport { NX_DATE_LOCALE } from './date-token';\n\nimport { PlatformModule } from '@angular/cdk/platform';\n\nexport const NX_DATE_LOCALE_PROVIDER = {provide: NX_DATE_LOCALE, useExisting: LOCALE_ID};\n\nexport * from './date-token';\nexport * from './date-adapter';\nexport * from './date-formats';\n\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: NxDateAdapter, useClass: NxNativeDateAdapter},\n    NX_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: NX_DATE_FORMATS, useValue: NX_NATIVE_DATE_FORMATS}],\n})\nexport class NxNativeDateModule {}\n\n","export function createMissingDateImplError(provider: string) {\n  return Error(\n      `NxDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';\nimport { NX_INPUT_VALUE_ACCESSOR } from '@allianz/ngx-ndbx/input';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from './adapter/index';\nimport { createMissingDateImplError } from './datefield-errors';\nimport { NxDatepickerComponent } from './datepicker/datepicker.component';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// tslint:disable:member-ordering\nexport const NX_DATEFIELD_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxDatefieldDirective),\n  multi: true\n};\n\n\nexport const NX_DATEFIELD_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxDatefieldDirective),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.\n */\nexport class NxDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: NxDatefieldDirective<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/**\n * Directive used to provide date processing functionality to an input.\n */\n@Directive({\n  selector: 'input[nxDatefield]',\n  providers: [\n    NX_DATEFIELD_VALUE_ACCESSOR,\n    NX_DATEFIELD_VALIDATORS,\n    // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},\n    { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective }\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'nxDatefield',\n})\nexport class NxDatefieldDirective<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n\n  /** @docs-private */\n  public currentFormattedDate = null;\n\n  /** The datepicker that this input is associated with. */\n  @Input('nxDatepicker')\n  set datepicker(value: NxDatepickerComponent<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: NxDatepickerComponent<D>;\n\n  private registerDatepicker(value: NxDatepickerComponent<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker.registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */\n  @Input('nxDatefieldFilter')\n  set datefieldFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n\n  _dateFilter: (date: D | null) => boolean;\n\n  /** Provide or read the current date. It's type <D> depends on the chosen date implementation */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._displayFormat || this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** Sets the minimum valid date. */\n  @Input('nxMin')\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** Sets the maximum valid date. */\n  @Input('nxMax')\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** If supported by the date implementation enable strict parsing (applies to Moment's parse function here) */\n  @Input('nxStrict')\n  get strict() { return this._strict; }\n  set strict(value: any) {\n    this._strict = coerceBooleanProperty(value);\n    // parse given text value again\n    this._onInput(this._elementRef.nativeElement.value);\n  }\n  private _strict: boolean = true;\n\n\n  /** Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS  */\n  @Input('nxParseFormat')\n  get parseFormat() { return this._parseFormat; }\n  set parseFormat(value: string | string[]) {\n    this._parseFormat = value;\n    // parse given text value again\n    this._onInput(this._elementRef.nativeElement.value);\n  }\n  private _parseFormat: string | string[];\n\n  /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */\n  @Input('nxDisplayFormat')\n  get displayFormat() { return this._displayFormat; }\n  set displayFormat(value: string) {\n    this._displayFormat = value;\n    this.format();\n  }\n  private _displayFormat: string;\n\n/** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<NxDatepickerInputEvent<D>> =\n      new EventEmitter<NxDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<NxDatepickerInputEvent<D>> =\n      new EventEmitter<NxDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'nxDatefieldParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'nxDatefieldMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'nxDatefieldMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /**\n   * @docs-private\n   * This will force the current value to be parse again by the given DateAdapter.\n   * That's a convenience method so you can trigger it manually.\n   */\n  public format() {\n    this.value = this.value;\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'nxDatefieldFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: NxDateAdapter<D>,\n      @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n      @Optional() private _formField: NxFormfieldComponent) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NX_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @docs-private\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * @docs-private\n   *\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    // formfield not yet accessible as we don't have them in a secondary entry point to import yet.\n    // return this._elementRef;\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._parseFormat || this._dateFormats.parse.dateInput, this.strict);\n\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n\n    if (date) {\n      this.currentFormattedDate = this._dateAdapter.format(\n        date,\n        this._displayFormat || this._dateFormats.display.dateInput\n      );\n    } else {\n      this.currentFormattedDate = null;\n    }\n\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `NxDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","import { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class NxDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (visible in UI). */\n  /** @deprecated Use `switchToMultiYearViewLabel` instead\n  */\n  calendarHeader: string = 'Choose a date';\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class NxCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel?: string,\n              public enabled?: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nx-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.scss'],\n  host: {\n    'class': 'nx-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'nxCalendarBody',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxCalendarBodyComponent {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: NxCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /** The items to display in the first row in the offset space. */\n  @Input() previousItems: NxCalendarCell[] = [];\n\n  /** The items to display in the last row in the offset space. */\n  @Input() followingItems: NxCalendarCell[][] = [[]];\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: NxCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  /** The number of blank cells to put at the end of the last filled row. */\n  get _lastRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[this.rows.length - 1].length ?\n        this.numCols - this.rows[this.rows.length - 1].length : 0;\n  }\n\n  /** The index of the last row. */\n  get _lastRowIndex(): number {\n    return this.rows && this.rows.length ?\n        this.rows.length - 1 : 0;\n  }\n\n  /**\n   * The following full rows to display and fill up the calendar.\n   */\n  get _followingRows(): NxCalendarCell[][] {\n    if (this.followingItems && this.followingItems.length) {\n      // if first row is not a full row => display them in offset space\n      if (this.followingItems[0].length < this.numCols) {\n        return this.followingItems.slice(1, this.followingItems.length);\n      }\n      return this.followingItems;\n    }\n\n    return [];\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber === this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NxDateAdapter, NxDateFormats } from '../adapter/index';\nimport { NX_DATE_FORMATS } from './../adapter/date-formats';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst DAYS_PER_WEEK = 7;\nconst TOTAL_DAYS_TO_DISPLAY = 6 * DAYS_PER_WEEK;\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'nxMonthView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['month-view.scss']\n})\nexport class NxMonthViewComponent<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent) _nxCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: NxCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  /** Number of days that should be displayed in one row. */\n  _numCols: number = 7;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    const weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate !== date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -this._numCols);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._numCols);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /** Creates NxCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell === DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new NxCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /**\n   * The last days of the previous month that should be displayed\n   * in the first row of the calendar.\n   */\n  _getLastDaysOfPreviousMonth(): NxCalendarCell[] {\n    const firstDayOfMonth: D = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate),\n      1\n    );\n\n    const firstDayOfPreviousItems =\n      this._dateAdapter.addCalendarDays(firstDayOfMonth, - this._firstWeekOffset);\n\n    return this._getRowOfDays(firstDayOfPreviousItems, this._firstWeekOffset);\n  }\n\n  /**\n   * The first days of the following month that should be displayed\n   * after the days of the current month. After filling up the last\n   * row of the current month, additional rows are added, so that a\n   * total of 42 days (6 rows/weeks) is displayed.\n   */\n  _getFirstDaysOfFollowingMonth(): NxCalendarCell[][] {\n    const followingDays: NxCalendarCell[][] = [];\n\n    const firstDayOfNextMonth: D = this._dateAdapter.addCalendarMonths(\n      this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate),\n        1),\n      1\n    );\n\n    // there should be displayed a total of 7 * 6 items\n    const followingDaysCount =\n      TOTAL_DAYS_TO_DISPLAY - this._firstWeekOffset - this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const offsetItems = followingDaysCount % 7;\n\n    // add a non-full row to following rows.\n    // These items will fill up the last incomplete row of the current month.\n    if (offsetItems > 0) {\n      const offsetRow = this._getRowOfDays(firstDayOfNextMonth, offsetItems);\n      followingDays.push(offsetRow);\n    }\n\n    let remainingDays = followingDaysCount - offsetItems;\n    let firstDayInRow = this._dateAdapter.addCalendarDays(firstDayOfNextMonth, offsetItems);\n\n    // fill remaining rows if needed\n    while (remainingDays > 0) {\n      followingDays.push(\n        this._getRowOfDays(firstDayInRow, this._numCols)\n      );\n\n      firstDayInRow = this._dateAdapter.addCalendarDays(firstDayInRow, this._numCols);\n      remainingDays -= this._numCols;\n    }\n\n    return followingDays;\n  }\n\n  /**\n   * Returns a row with days, beginning with the date of `firstDayInRow`-parameter.\n   * The returned row contains `daysCount` elements.\n   */\n  _getRowOfDays(firstDayInRow: D, daysCount: number): NxCalendarCell[] {\n    const nextRow: NxCalendarCell[] = [];\n    const dateNames = this._dateAdapter.getDateNames();\n    for (let addDays = 0; addDays < daysCount; addDays++) {\n      const day = this._dateAdapter.getDate(\n        this._dateAdapter.addCalendarDays(firstDayInRow, addDays)\n      );\n      nextRow.push(new NxCalendarCell(day, dateNames[day - 1]));\n    }\n    return nextRow;\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NxDateAdapter } from '../adapter/index';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const yearsPerPage = 20;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'nxMultiYearView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['multi-year-view.scss']\n})\nexport class NxMultiYearViewComponent<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent) _nxCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: NxCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length === yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    const month = this._dateAdapter.getMonth(this.activeDate);\n    const daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an NxCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    const yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new NxCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) === year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from '../adapter/index';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'nxYearView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['year-view.scss']\n})\nexport class NxYearViewComponent<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent) _nxCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: NxCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  _numCols: number = 3;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._numCols);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, this._numCols);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    const monthNames = this._dateAdapter.getMonthNames('short');\n    this._months = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an NxCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new NxCalendarCell(\n        month, monthName, ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) === month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from './../adapter/index';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NxDatepickerIntl } from './datepicker-intl';\nimport { NxMonthViewComponent } from './month-view';\nimport { NxMultiYearViewComponent } from './multi-year-view';\nimport { NxYearViewComponent } from './year-view';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst yearsPerPage = 20;\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.scss'],\n  host: {\n    'class': 'nx-calendar',\n  },\n  exportAs: 'nxCalendar',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCalendarComponent<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(NxMonthViewComponent) monthView: NxMonthViewComponent<D>;\n  /** Reference to the current year view component. */\n  @ViewChild(NxYearViewComponent) yearView: NxYearViewComponent<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(NxMultiYearViewComponent) multiYearView: NxMultiYearViewComponent<D>;\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView === 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel);\n    }\n    if (this._currentView === 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % yearsPerPage, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % yearsPerPage, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView === 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: NxDatepickerIntl,\n              @Optional() private _dateAdapter: NxDateAdapter<D>,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _changeViewClicked(): void {\n    this._currentView = this._currentView === 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView === 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView === 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView === 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView === 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView === 'month') {\n      return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView === 'year') {\n      return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ===\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { NxDatepickerIntl } from './datepicker-intl';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject, Subscription, merge} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {NxCalendarComponent} from './calendar';\nimport { NxDateAdapter } from '../adapter/date-adapter';\nimport { NxDatefieldDirective } from './../datefield.directive';\nimport { NxDatepickerToggleComponent } from './datepicker-toggle';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const NX_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('nx-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: NX_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nexport interface DatepickerDefaultOptions {\n  /** Sets the focus on toggle behavior. (optional) */\n  toggleIconTabindex?: number;\n}\n\nexport const DATEPICKER_DEFAULT_OPTIONS =\n  new InjectionToken<DatepickerDefaultOptions>('DATEPICKER_DEFAULT_OPTIONS');\n\n/**\n * @docs-private\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n */\n@Component({\n  selector: 'nx-datepicker-content',\n  templateUrl: 'datepicker-content.component.html',\n  styleUrls: ['datepicker-content.component.scss'],\n  host: {\n    'class': 'nx-datepicker-content'\n  },\n  exportAs: 'nxDatepickerContent',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxDatepickerContentComponent<D> implements AfterContentInit {\n  datepicker: NxDatepickerComponent<D>;\n\n  @ViewChild(NxCalendarComponent) _calendar: NxCalendarComponent<D>;\n\n  constructor(\n    public _intl: NxDatepickerIntl,\n    public elementRef: ElementRef, private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this.elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();\n      });\n    });\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"nxDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'nx-datepicker',\n  template: '',\n  exportAs: 'nxDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxDatepickerComponent<D> implements OnDestroy {\n  /** The date to open the calendar initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** @docs-private */\n  selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /**\n   * @docs-private\n   * The id for the datepicker calendar.\n   */\n  id: string = `nx-datepicker-${datepickerUid++}`;\n\n  /**\n   * @docs-private\n   * The currently selected date.\n   */\n  get selected(): D | null { return this._validSelected; }\n  set selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /**\n   * @docs-private\n   * The minimum selectable date.\n   */\n  get minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /**\n   * @docs-private\n   * The maximum selectable date.\n   */\n  get maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  /** @docs-private */\n  get dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<NxDatepickerContentComponent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<NxDatepickerContentComponent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: NxDatefieldDirective<D>;\n\n  _toggleButton: NxDatepickerToggleComponent<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(NX_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /**\n   * @docs-private\n   * Selects the given date\n   */\n  select(date: D): void {\n    const oldValue = this.selected;\n    this.selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this.selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * @docs-private\n   * Emits the selected year in multiyear view\n   */\n  selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /**\n   * @docs-private\n   * Emits selected month in year view\n   */\n  selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * @docs-private\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  registerInput(input: NxDatefieldDirective<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A NxDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this.selected = value);\n  }\n\n  /**\n   * @docs-private\n   * Register an input toggle with this datepicker.\n   */\n  registerToggle(toggle: NxDatepickerToggleComponent<D>) {\n    if (this._toggleButton) {\n      throw Error('A NxDatepicker can only be associated with a single toggle button.');\n    }\n    this._toggleButton = toggle;\n  }\n\n  /**\n   * @docs-private\n   * Open the calendar.\n   */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an NxDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this._openAsPopup();\n\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /**\n   * @docs-private\n   * Close the calendar.\n   */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n\n    // if the datepicker toggle button is not focusable, focus the associated input.\n    if (this._toggleButton.tabindex < 0) {\n      this._datepickerInput._focus();\n    }\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<NxDatepickerContentComponent<D>>(NxDatepickerContentComponent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'nx-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'nx-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport { merge ,  of as observableOf ,  Subscription } from 'rxjs';\n\nimport { NxDatepickerIntl } from './datepicker-intl';\nimport { NxDatepickerComponent, DATEPICKER_DEFAULT_OPTIONS, DatepickerDefaultOptions } from './datepicker.component';\n\n\n\n/** Can be used to override the icon of a `nxDatepickerToggle`. */\n@Directive({\n  selector: '[nxDatepickerToggleIcon]'\n})\n// tslint:disable-next-line:directive-class-suffix\nexport class NxDatepickerToggleIconComponent {}\n\n\n@Component({\n  selector: 'nx-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.scss'],\n  host: {\n    'class': 'nx-datepicker-toggle',\n    '[class.nx-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.nx-datepicker-toggle--disabled]': 'disabled'\n  },\n  exportAs: 'nxDatepickerToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxDatepickerToggleComponent<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  private _disabled: boolean;\n  private _tabindex: number = 0;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(NxDatepickerToggleIconComponent) _customIcon: NxDatepickerToggleIconComponent;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for')\n  set datepicker(value: NxDatepickerComponent<D>) {\n    this.registerDatepicker(value);\n  }\n  get datepicker(): NxDatepickerComponent<D> {\n    return this._datepicker;\n  }\n  _datepicker: NxDatepickerComponent<D>;\n\n  private registerDatepicker(value: NxDatepickerComponent<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker.registerToggle(this);\n    }\n  }\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Sets the tabindex for the toggle button. Default: 0. */\n  @Input()\n  set tabindex(value: number) {\n    if (this._tabindex !== value) {\n      this._tabindex = value;\n    }\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n\n  constructor(public _intl: NxDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DATEPICKER_DEFAULT_OPTIONS) private _defaultOptions: DatepickerDefaultOptions) {\n      if (this._defaultOptions && this._defaultOptions.toggleIconTabindex) {\n        this._tabindex = this._defaultOptions.toggleIconTabindex;\n      }\n    }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NX_DATE_LOCALE_PROVIDER } from './adapter/index';\nimport { NxDatefieldDirective } from './datefield.directive';\nimport { NxCalendarComponent } from './datepicker/calendar';\nimport { NxCalendarBodyComponent } from './datepicker/calendar-body';\nimport { NxDatepickerIntl } from './datepicker/datepicker-intl';\nimport { NxDatepickerToggleComponent, NxDatepickerToggleIconComponent } from './datepicker/datepicker-toggle';\nimport {\n  NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  NxDatepickerComponent,\n  NxDatepickerContentComponent,\n} from './datepicker/datepicker.component';\nimport { NxMonthViewComponent } from './datepicker/month-view';\nimport { NxMultiYearViewComponent } from './datepicker/multi-year-view';\nimport { NxYearViewComponent } from './datepicker/year-view';\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    A11yModule,\n    NxIconModule\n  ],\n  providers: [\n    // Provide our NX_DATE_LOCALE to determine the current language\n    NX_DATE_LOCALE_PROVIDER,\n    NxDatepickerIntl,\n    NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER\n  ],\n  declarations: [\n    NxDatefieldDirective,\n    NxDatepickerComponent,\n    NxDatepickerToggleIconComponent,\n    NxDatepickerToggleComponent,\n    NxDatepickerContentComponent,\n    NxCalendarComponent,\n    NxCalendarBodyComponent,\n    NxMonthViewComponent,\n    NxMultiYearViewComponent,\n    NxYearViewComponent\n  ],\n  exports: [\n    NxDatefieldDirective,\n    NxDatepickerComponent,\n    NxDatepickerToggleIconComponent,\n    NxDatepickerToggleComponent,\n    NxCalendarComponent,\n    NxCalendarBodyComponent,\n    NxMonthViewComponent,\n    NxMultiYearViewComponent,\n    NxYearViewComponent\n  ],\n  entryComponents: [\n    NxDatepickerContentComponent\n  ]\n})\nexport class NxDatefieldModule { }\n"]}