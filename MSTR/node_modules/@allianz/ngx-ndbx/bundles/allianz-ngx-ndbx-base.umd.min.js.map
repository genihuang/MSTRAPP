{"version":3,"sources":["ng://@allianz/ngx-ndbx/base/error/error.component.ts","ng://@allianz/ngx-ndbx/base/error/error.module.ts","ng://@allianz/ngx-ndbx/base/label/label.component.ts","ng://@allianz/ngx-ndbx/base/label/label.module.ts"],"names":["ERROR_DEFAULT_OPTIONS","InjectionToken","NxErrorComponent","_changeDetectorRef","_defaultOptions","this","_showIcon","_appearance","appearance","Object","defineProperty","prototype","value","coerceBooleanProperty","markForCheck","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.role]","ChangeDetectorRef","Optional","type","Inject","Input","NxErrorModule","NgModule","imports","CommonModule","NxIconModule","NxMessageModule","declarations","exports","nextId","LABEL_DEFAULT_OPTIONS","NxLabelComponent","_stateChanges","Subject","_disabled","_negative","_id","_size","size","next","[attr.disabled]","[attr.aria-labelledby]","[class.nx-label--negative]","[class.nx-label--large]","[class.nx-label--small]","[attr.id]","NxLabelModule"],"mappings":"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","sourcesContent":["import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, InjectionToken, Inject, Optional} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/* Types of error notification styles */\nexport type ErrorStyleType = 'message' | 'text';\n\n/**\n * Represents the default options for the error notification that can be configured\n * using the `ERROR_DEFAULT_OPTIONS` injection token.\n */\nexport interface ErrorDefaultOptions {\n  /** Defines the style type of the error notification. */\n  appearance?: ErrorStyleType;\n}\n\nexport const ERROR_DEFAULT_OPTIONS = new InjectionToken<ErrorDefaultOptions>('ERROR_DEFAULT_OPTIONS');\n\n@Component({\n  selector: 'nx-error',\n  templateUrl: './error.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./error.component.scss'],\n  host: {\n    '[attr.role]': '\"alert\"'\n  },\n})\nexport class NxErrorComponent {\n  private _showIcon: boolean = true;\n  private _appearance: ErrorStyleType = 'message';\n\n  /** Whether an icon should be displayed. */\n  @Input()\n  set showIcon(value: boolean) {\n    this._showIcon = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showIcon(): boolean {\n    return this._showIcon;\n  }\n\n  /**\n   * Whether the error should have message or text styling.\n   *\n   * Default is 'message'.\n   */\n  @Input()\n  set appearance(value: ErrorStyleType) {\n    if (value !== this.appearance) {\n      this._appearance = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get appearance(): ErrorStyleType {\n    return this._appearance;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(ERROR_DEFAULT_OPTIONS) private _defaultOptions: ErrorDefaultOptions) {\n      if (this._defaultOptions && this._defaultOptions.appearance) {\n        this.appearance = this._defaultOptions.appearance;\n      }\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {NxErrorComponent} from './error.component';\nimport {CommonModule} from '@angular/common';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMessageModule } from '@allianz/ngx-ndbx/message';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule,\n    NxMessageModule\n  ],\n  declarations: [\n    NxErrorComponent\n  ],\n  exports: [\n    NxErrorComponent\n  ]\n})\nexport class NxErrorModule {\n\n}\n","import { ChangeDetectionStrategy, Component, Input, Optional, Inject, InjectionToken } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\n\nlet nextId = 0;\n\nexport interface LabelDefaultOptions {\n  /** Sets the default appearance. (optional) */\n  size?: LABEL_SIZE_TYPE;\n}\n\n/** Options for sizing of the label. */\nexport type LABEL_SIZE_TYPE = 'small' | 'large';\nconst DEFAULT_SIZE = 'large';\n\nexport const LABEL_DEFAULT_OPTIONS =\n  new InjectionToken<LabelDefaultOptions>('LABEL_DEFAULT_OPTIONS');\n@Component({\n  selector: 'nx-label',\n  templateUrl: './label.component.html',\n  styleUrls: ['label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-labelledby]': 'id || null',\n    '[class.nx-label--negative]': 'negative',\n    '[class.nx-label--large]': 'size === \"large\"',\n    '[class.nx-label--small]': 'size === \"small\"',\n    '[attr.id]': 'id',\n  },\n})\n\n\nexport class NxLabelComponent {\n  readonly _stateChanges = new Subject<void>();\n  private _disabled: boolean = false;\n  private _negative: boolean = false;\n  private _size: LABEL_SIZE_TYPE;\n\n  /** Sets the label to disabled */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** Sets the label to disabled */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._stateChanges.next();\n  }\n\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _id: string = `nx-label-${nextId++}`;\n  /** Sets the Id of the label */\n  @Input()\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n    }\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * **NDBX Expert option**\n   * Sets the appearance of the label */\n  @Input()\n  set size(value: LABEL_SIZE_TYPE) {\n    this._size = value;\n    this._stateChanges.next();\n  }\n\n  get size(): LABEL_SIZE_TYPE {\n    return this._size;\n  }\n\n  constructor(@Optional() @Inject(LABEL_DEFAULT_OPTIONS) private _defaultOptions: LabelDefaultOptions\n  ) {\n    this._size = (this._defaultOptions && this._defaultOptions.size) ? this._defaultOptions.size : DEFAULT_SIZE;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxLabelComponent} from './label.component';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NxLabelComponent\n  ],\n  exports: [\n    NxLabelComponent\n  ]\n})\nexport class NxLabelModule {\n\n}\n"]}