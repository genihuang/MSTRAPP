(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@allianz/ngx-ndbx/utils'), require('@angular/forms'), require('rxjs/operators'), require('rxjs'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('@angular/core'), require('@allianz/ngx-ndbx/icon')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/radio-toggle', ['exports', '@angular/common', '@allianz/ngx-ndbx/utils', '@angular/forms', 'rxjs/operators', 'rxjs', '@angular/cdk/coercion', '@angular/cdk/collections', '@angular/core', '@allianz/ngx-ndbx/icon'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx']['radio-toggle'] = {}),global.ng.common,global.allianz['ngx-ndbx'].utils,global.ng.forms,global.rxjs.operators,global.rxjs,global.ng.cdk.coercion,global.ng.cdk.collections,global.ng.core,global.allianz['ngx-ndbx'].icon));
}(this, (function (exports,common,utils,forms,operators,rxjs,coercion,collections,core,icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nextId = 0;
    /**
     * \@docs-private
     */
    var NxRadioToggleButtonBaseComponent = /** @class */ (function () {
        function NxRadioToggleButtonBaseComponent(renderer) {
            this.renderer = renderer;
            /**
             * \@docs-private
             */
            this.toggleButtonId = 'nx-radio-toggle-button-' + nextId++;
        }
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxRadioToggleButtonBaseComponent.prototype.triggerInputClick = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.stopPropagation();
                this.toggleInput.nativeElement.click();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxRadioToggleButtonBaseComponent.prototype.setFirstButton = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--first');
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxRadioToggleButtonBaseComponent.prototype.setLastButton = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--last');
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxRadioToggleButtonBaseComponent.prototype.resetClasses = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                utils.removeClasses(this.renderer, this.labelContainer, 'nx-radio-toggle__label-container--first nx-radio-toggle__label-container--last');
            };
        NxRadioToggleButtonBaseComponent.propDecorators = {
            value: [{ type: core.Input, args: ['nxValue',] }],
            labelContainer: [{ type: core.ViewChild, args: ['toggleButtonLabelContainer',] }],
            toggleInput: [{ type: core.ViewChild, args: ['toggleInput',] }]
        };
        return NxRadioToggleButtonBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nextId$1 = 0;
    /** @type {?} */
    var MAPPING = {
        'negative': 'nx-radio-toggle--negative',
        'small': 'nx-radio-toggle--small',
    };
    var NxRadioToggleComponent = /** @class */ (function () {
        function NxRadioToggleComponent(renderer, _changeDetectorRef) {
            this.renderer = renderer;
            this._changeDetectorRef = _changeDetectorRef;
            this._toggleId = (nextId$1++).toString();
            this._destroyed = new rxjs.Subject();
            this._disabled = false;
            // emits to signal children to run change detection
            this._disableChange = new rxjs.Subject();
            /**
             * \@docs-private
             */
            this.toggleButtons = new core.QueryList();
            this.onTouchedCallback = ( /**
             * @return {?}
             */function () { });
            this.onChangeCallback = ( /**
             * @param {?} option
             * @return {?}
             */function (option) { });
        }
        Object.defineProperty(NxRadioToggleComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            /** Sets the component to the disabled state.*/
            set: /**
             * Sets the component to the disabled state.
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var coerced = coercion.coerceBooleanProperty(value);
                if (this._disabled !== coerced) {
                    this._disabled = coerced;
                    this._disableChange.next();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRadioToggleComponent.prototype, "name", {
            get: /**
             * @return {?}
             */ function () {
                return this._name;
            },
            /** Sets the name used for accessibility. */
            set: /**
             * Sets the name used for accessibility.
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._name !== value) {
                    this._name = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxRadioToggleComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.subscribeToToggleButtonsChange();
            };
        /**
         * @return {?}
         */
        NxRadioToggleComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var changedOrDestroyed = rxjs.merge(this.toggleButtons.changes, this._destroyed);
                rxjs.merge.apply(void 0, __spread(this.toggleButtons.map(( /**
                 * @param {?} button
                 * @return {?}
                 */function (button) { return button.onChecked; })))).pipe(operators.takeUntil(changedOrDestroyed))
                    .subscribe(( /**
             * @param {?} change
             * @return {?}
             */function (change) {
                    _this._selection = change.value;
                    _this.onChangeCallback(_this._selection);
                }));
            };
        /**
         * @return {?}
         */
        NxRadioToggleComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._destroyed.next();
                this._destroyed.complete();
                this._disableChange.complete();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxRadioToggleComponent.prototype.subscribeToToggleButtonsChange = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                var _this = this;
                this.toggleButtons.changes
                    .pipe(operators.startWith(this.toggleButtons), operators.filter(( /**
             * @param {?} toggles
             * @return {?}
             */function (toggles) { return toggles.length > 0; })), operators.takeUntil(this._destroyed)).subscribe(( /**
                 * @param {?} toggles
                 * @return {?}
                 */function (toggles) {
                    toggles.forEach(( /**
                     * @param {?} toggle
                     * @return {?}
                     */function (toggle) {
                        toggle.resetClasses();
                        if (toggle.value === _this.selection) {
                            // We need to defer the selection for the edge case that the button with the value of this.selection
                            // didn't exist yet but was added afterwards to prevent changed after checked errors
                            setTimeout(( /**
                             * @return {?}
                             */function () { return toggle.select(); }));
                        }
                    }));
                    toggles.first.setFirstButton();
                    toggles.last.setLastButton();
                }));
            };
        /**
         * @param {?} onChangeCallback
         * @return {?}
         */
        NxRadioToggleComponent.prototype.registerOnChange = /**
         * @param {?} onChangeCallback
         * @return {?}
         */
            function (onChangeCallback) {
                this.onChangeCallback = onChangeCallback;
            };
        /**
         * @param {?} onTouchedCallback
         * @return {?}
         */
        NxRadioToggleComponent.prototype.registerOnTouched = /**
         * @param {?} onTouchedCallback
         * @return {?}
         */
            function (onTouchedCallback) {
                this.onTouchedCallback = onTouchedCallback;
            };
        /** Preselects the respective options. */
        /**
         * Preselects the respective options.
         * @param {?} value
         * @return {?}
         */
        NxRadioToggleComponent.prototype.writeValue = /**
         * Preselects the respective options.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                this._selection = value;
                /** @type {?} */
                var correspondingButton = this.toggleButtons.find(( /**
                 * @param {?} button
                 * @return {?}
                 */function (button) { return button.value === _this._selection; }));
                if (correspondingButton) {
                    (( /** @type {?} */(correspondingButton))).select();
                }
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NxRadioToggleComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        Object.defineProperty(NxRadioToggleComponent.prototype, "id", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return "nx-radio-toggle-" + this._toggleId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRadioToggleComponent.prototype, "style", {
            /** Sets the modifiers for the component. */
            set: /**
             * Sets the modifiers for the component.
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                /** @type {?} */
                var modifierClasses = utils.mapClassNames(value, [], MAPPING);
                modifierClasses.split(' ')
                    .forEach(( /**
             * @param {?} className
             * @return {?}
             */function (className) { return _this.renderer.addClass(_this.toggleContainer.nativeElement, className); }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRadioToggleComponent.prototype, "selection", {
            get: /**
             * @return {?}
             */ function () {
                return this._selection;
            },
            /** @docs-private */
            set: /**
             * \@docs-private
             * @param {?} selection
             * @return {?}
             */ function (selection) {
                this._selection = selection;
                this.onChangeCallback(selection);
            },
            enumerable: true,
            configurable: true
        });
        NxRadioToggleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-radio-toggle',
                        template: "<div #toggleContainer class=\"nx-radio-toggle\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n   <ng-content></ng-content>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return NxRadioToggleComponent; })),
                                multi: true
                            }
                        ],
                        styles: [".nx-radio-toggle{display:flex;height:100%}.nx-radio-toggle:focus+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#006192}.nx-radio-toggle:hover+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#075994}@media (max-width:703px){.nx-radio-toggle{flex-direction:column;text-align:center;width:100%;justify-content:center;align-items:center}}"]
                    }] }
        ];
        /** @nocollapse */
        NxRadioToggleComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ChangeDetectorRef }
            ];
        };
        NxRadioToggleComponent.propDecorators = {
            disabled: [{ type: core.Input, args: ['nxDisabled',] }],
            toggleContainer: [{ type: core.ViewChild, args: ['toggleContainer',] }],
            name: [{ type: core.Input, args: ['nxName',] }],
            toggleButtons: [{ type: core.ContentChildren, args: [NxRadioToggleButtonBaseComponent,] }],
            writeValue: [{ type: core.Input, args: ['nxSelection',] }],
            style: [{ type: core.Input, args: ['nxStyle',] }]
        };
        return NxRadioToggleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docs-private
     */
    var /**
     * \@docs-private
     */ NxRadioToggleButtonChange = /** @class */ (function () {
        function NxRadioToggleButtonChange(source, value) {
            this.source = source;
            this.value = value;
        }
        return NxRadioToggleButtonChange;
    }());
    var NxRadioToggleButtonComponent = /** @class */ (function (_super) {
        __extends(NxRadioToggleButtonComponent, _super);
        function NxRadioToggleButtonComponent(radioToggle, renderer, _changeDetectorRef, _toggleDispatcher) {
            var _this = _super.call(this, renderer) || this;
            _this.radioToggle = radioToggle;
            _this._changeDetectorRef = _changeDetectorRef;
            _this._toggleDispatcher = _toggleDispatcher;
            /**
             * \@docs-private
             */
            // emits when the button is checked to notify the group
            _this.onChecked = new rxjs.Subject();
            _this._destroyed = new rxjs.Subject();
            _this._disabled = false;
            _this._selected = false;
            /**
             * Unregister function for _expansionDispatcher.
             */
            _this._removeUniqueSelectionListener = ( /**
             * @return {?}
             */function () { });
            _this._removeUniqueSelectionListener = _this._toggleDispatcher.listen(( /**
             * @param {?} id
             * @param {?} radioToggleId
             * @return {?}
             */function (id, radioToggleId) {
                if (_this.radioToggle && _this.radioToggle.id === radioToggleId && _this.id !== id) {
                    _this._selected = false;
                    // need to let change detector know in case that the select() function was called on another button
                    _this._changeDetectorRef.markForCheck();
                }
            }));
            _this.radioToggle._disableChange.pipe(operators.takeUntil(_this._destroyed)).subscribe(( /**
             * @return {?}
             */function () {
                _this._changeDetectorRef.markForCheck();
            }));
            return _this;
        }
        Object.defineProperty(NxRadioToggleButtonComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled || (this.radioToggle && this.radioToggle.disabled);
            },
            /** @docs-private */
            set: /**
             * \@docs-private
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRadioToggleButtonComponent.prototype, "selected", {
            get: /**
             * @return {?}
             */ function () {
                return this._selected;
            },
            /** Sets the checked state and notify siblings and the parent group about the change */
            // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
            // To select a button without firing the event use the select() function
            set: /**
             * Sets the checked state and notify siblings and the parent group about the change
             * @param {?} value
             * @return {?}
             */ 
            // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
            // To select a button without firing the event use the select() function
            function (value) {
                if (this._selected !== value) {
                    this._selected = value;
                    if (this._selected) {
                        this._notifySiblings();
                        this._emitCheckedEvent();
                    }
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxRadioToggleButtonComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._removeUniqueSelectionListener();
                this._destroyed.next();
                this._destroyed.complete();
            };
        Object.defineProperty(NxRadioToggleButtonComponent.prototype, "toggleId", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return this.radioToggle.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxRadioToggleButtonComponent.prototype, "id", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return this.toggleButtonId;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        NxRadioToggleButtonComponent.prototype._notifySiblings = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var toggleId = this.radioToggle ? this.radioToggle.id : this.id;
                this._toggleDispatcher.notify(this.id, toggleId);
            };
        /**
         * @private
         * @return {?}
         */
        NxRadioToggleButtonComponent.prototype._emitCheckedEvent = /**
         * @private
         * @return {?}
         */
            function () {
                this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));
            };
        // Does NOT emit the onChecked event. Useful when you need to set initial
        // state. Used by the parent to set checked states on initialization and during
        // writeValue() changes.
        // Does NOT emit the onChecked event. Useful when you need to set initial
        // state. Used by the parent to set checked states on initialization and during
        // writeValue() changes.
        /**
         * @return {?}
         */
        NxRadioToggleButtonComponent.prototype.select =
            // Does NOT emit the onChecked event. Useful when you need to set initial
            // state. Used by the parent to set checked states on initialization and during
            // writeValue() changes.
            /**
             * @return {?}
             */
            function () {
                if (!this._selected) {
                    this._selected = true;
                    this._notifySiblings();
                }
                this._changeDetectorRef.markForCheck();
            };
        /**
         * @return {?}
         */
        NxRadioToggleButtonComponent.prototype.onKeyupSpace = /**
         * @return {?}
         */
            function () {
                this._selected = false;
                this._notifySiblings();
            };
        NxRadioToggleButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-radio-toggle-button',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "<input [attr.id]=\"toggleButtonId\"\n    #toggleInput\n    [attr.name]=\"toggleId\"\n    [checked]=\"selected\"\n    class=\"nx-radio-toggle__input\"\n    type=\"radio\"\n    (click)=\"selected = true\"\n    [disabled]=\"disabled\">\n<div (click)=\"triggerInputClick($event)\" #toggleButtonLabelContainer class=\"nx-radio-toggle__label-container\">\n  <label [attr.for]=\"toggleButtonId\" class=\"nx-radio-toggle__label\">\n      <nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n      <ng-content></ng-content>\n  </label>\n</div>\n\n\n",
                        providers: [
                            {
                                provide: NxRadioToggleButtonBaseComponent, useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return NxRadioToggleButtonComponent; }))
                            }
                        ],
                        styles: [":host{display:flex;position:relative;flex-direction:row}.nx-radio-toggle__input{opacity:0;position:absolute}.nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#003781;border-color:#003781;color:#fff}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#b2d7e8;border-color:#b2d7e8;color:#fff;cursor:not-allowed}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:not-allowed}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#007ab3;border-color:#007ab3;color:#fff;cursor:default}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:default}@media screen and (-ms-high-contrast:active){.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#ff0;cursor:default;border-color:inherit}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{background-color:#000}}.nx-toggle-button__mobile-check{display:none;font-size:24px;margin-right:8px;height:24px}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:14px;min-height:16px;padding:6px;text-transform:none;line-height:16px}.nx-radio-toggle{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:4px 0 0 4px;border-width:2px 0 2px 2px}@media (max-width:703px){:host{width:100%}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-toggle-button__mobile-check{display:inline-block}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{line-height:24px;padding:11px 31px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px 2px 1px;border-radius:4px 4px 0 0}}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:0 4px 4px 0;border-width:2px}@media (max-width:703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:1px 2px 2px;border-radius:0 0 4px 4px}}.nx-radio-toggle__label-container{padding:10px 30px;border:2px solid #007ab3;border-radius:0;border-width:2px 0 2px 2px;color:#007ab3;cursor:pointer;flex-grow:1;font-size:16px;font-weight:600;line-height:24px;text-align:center;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s;display:flex;align-items:center;height:100%;min-height:24px}@media (max-width:703px){.nx-radio-toggle__label-container{border-width:1px 2px;justify-content:center;padding:11px 31px}}.nx-radio-toggle__label-container:hover{background-color:#075994;border-color:#075994;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#c2c2c2;border-color:#c2c2c2;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#d9d9d9}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container{border-color:#fff;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container:hover{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}.nx-radio-toggle__label{display:flex;align-items:center;cursor:pointer}:host-context([data-whatinput=keyboard]) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;z-index:1}"]
                    }] }
        ];
        /** @nocollapse */
        NxRadioToggleButtonComponent.ctorParameters = function () {
            return [
                { type: NxRadioToggleComponent, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NxRadioToggleComponent; })),] }] },
                { type: core.Renderer2 },
                { type: core.ChangeDetectorRef },
                { type: collections.UniqueSelectionDispatcher }
            ];
        };
        NxRadioToggleButtonComponent.propDecorators = {
            disabled: [{ type: core.Input, args: ['nxDisabled',] }],
            selected: [{ type: core.Input, args: ['nxSelected',] }],
            onKeyupSpace: [{ type: core.HostListener, args: ['keyup.space',] }]
        };
        return NxRadioToggleButtonComponent;
    }(NxRadioToggleButtonBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxRadioToggleModule = /** @class */ (function () {
        function NxRadioToggleModule() {
        }
        NxRadioToggleModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NxRadioToggleComponent, NxRadioToggleButtonComponent],
                        exports: [NxRadioToggleComponent, NxRadioToggleButtonComponent],
                        imports: [common.CommonModule, forms.FormsModule, icon.NxIconModule]
                    },] }
        ];
        return NxRadioToggleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxRadioToggleModule = NxRadioToggleModule;
    exports.NxRadioToggleComponent = NxRadioToggleComponent;
    exports.ɵa = NxRadioToggleButtonBaseComponent;
    exports.ɵb = NxRadioToggleButtonComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-radio-toggle.umd.js.map