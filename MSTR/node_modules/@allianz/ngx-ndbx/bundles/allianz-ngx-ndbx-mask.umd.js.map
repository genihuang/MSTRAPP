{"version":3,"file":"allianz-ngx-ndbx-mask.umd.js.map","sources":["ng://@allianz/ngx-ndbx/mask/mask.directive.ts","ng://@allianz/ngx-ndbx/mask/mask.module.ts"],"sourcesContent":["import { Directive, Input, ElementRef, forwardRef } from '@angular/core';\n\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  Validator\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NX_INPUT_VALUE_ACCESSOR } from '@allianz/ngx-ndbx/input';\nimport { BACKSPACE, DELETE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, A, Z } from '@angular/cdk/keycodes';\n\ntype MASK_TYPE = '0' | 'A' | 'S';\n\nexport const NX_MASK_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxMaskDirective),\n  multi: true\n};\n\nexport const NX_MASK_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxMaskDirective),\n  multi: true\n};\n\n@Directive({\n  selector: 'input[nxMask]',\n  host: {\n    '(input)': '_onInputChange($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(paste)': '_onPaste($event)',\n    '(blur)': '_onTouchedCallback()'\n  },\n  exportAs: 'nxMaskDirective',\n  providers: [\n    NX_MASK_VALUE_ACCESSOR,\n    { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxMaskDirective },\n    NX_MASK_VALIDATORS\n  ]\n})\nexport class NxMaskDirective implements ControlValueAccessor, Validator {\n\n  private _mask: string;\n  private _separators = ['/', '(', ')', '.', ':', '-', ' ', '+', ','];\n  private _dropSpecialCharacters: boolean = false;\n  private _position: number = null;\n  private _validateMask: boolean = true;\n\n  private _onChangeCallback = (_: any) => { };\n  private _onTouchedCallback = () => { };\n  private _validatorOnChange = () => { };\n\n  /** Sets the mask.  */\n  @Input('nxMask')\n  set mask(value: string) {\n    if (!value) {\n      value = '';\n    }\n    if (value !== this._mask) {\n      this._mask = value;\n      this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n      this._validatorOnChange();\n    }\n  }\n  get mask(): string {\n    return this._mask;\n  }\n\n  /**\n   * Sets the keys that are recognized as separators.\n   * Default separators: / ( ) . : - + , and space.\n   */\n  @Input()\n  set separators(values: string[]) {\n    this._separators = values;\n    this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n    this._validatorOnChange();\n  }\n  get separators(): string[] {\n    return this._separators;\n  }\n\n  /** Whether the separators should be dropped in the control value accessor. */\n  @Input()\n  set dropSpecialCharacters(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._dropSpecialCharacters) {\n      this._dropSpecialCharacters = newValue;\n      this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n    }\n  }\n  get dropSpecialCharacters(): boolean {\n    return this._dropSpecialCharacters;\n  }\n\n  /** Whether the mask validation should be applied on the input. Default: true. */\n  @Input()\n  set validateMask(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._validateMask) {\n      this._validateMask = newValue;\n      this._validatorOnChange();\n    }\n  }\n  get validateMask(): boolean {\n    return this._validateMask;\n  }\n\n  constructor(\n    private _elementRef: ElementRef\n  ) { }\n\n  /** Returns the unmasked value. */\n  getUnmaskedValue(): string {\n    const unmaskedValue = this.separators.reduce(function(unmasked, separator) {\n      return unmasked.split(separator).join('');\n    }, this._elementRef.nativeElement.value);\n\n    return unmaskedValue;\n  }\n\n  /**\n   * this._position can be set to a new value in this function;\n   * it is used to set the cursor position after checking the masked input in _onInputChange().\n   */\n  _onKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const location = event.location;\n\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    const currentValue = this._elementRef.nativeElement.value;\n\n    // row of characters is selected: set cursor position to end of new entered character\n    if (input.selectionStart !== input.selectionEnd) {\n      let nextCharacterInMask = input.selectionStart;\n      while (this.isSeparator(this._mask[nextCharacterInMask])) {\n        nextCharacterInMask++;\n      }\n      const positionChange = this._isKeyCodeAllowed(keyCode, location, this.mask[nextCharacterInMask] as MASK_TYPE)\n                      ? this._calculateCursorShift(input.selectionStart)\n                      : 0;\n      this._position = input.selectionStart + positionChange;\n    } else if (keyCode === BACKSPACE || keyCode === DELETE) {\n      // if backspace pressed, cursor has to move one character to start\n      const backspaceShift = keyCode === BACKSPACE ? 1 : 0;\n      const lastCharacter = currentValue.substring(input.selectionStart - backspaceShift, input.selectionEnd - backspaceShift + 1);\n      const selectionAtLastCharacter = (input.selectionStart === currentValue.length - 1 + backspaceShift);\n\n      // if last character is deleted: only delete last character, do not trigger input event again\n      // (here the separator would be added again)\n      if (selectionAtLastCharacter) {\n        this.updateValue(currentValue.substring(0, currentValue.length - 1));\n        event.preventDefault();\n      // do not delete a separator, only set cursor position\n      } else if (this.isSeparator(lastCharacter)) {\n        input.setSelectionRange(input.selectionStart - backspaceShift, input.selectionEnd - backspaceShift);\n        event.preventDefault();\n      // for any other character: decrease cursor position by one.\n      // the input is modified and will be validated in _onInputChange().\n      } else {\n        this._position = input.selectionStart - backspaceShift;\n      }\n    } else {\n      this._position = input.selectionStart;\n      let nextCharacterInMask = input.selectionStart;\n      while (this.isSeparator(this._mask[nextCharacterInMask])) {\n        nextCharacterInMask++;\n      }\n\n      if (this._isKeyCodeAllowed(keyCode, location, this._mask[nextCharacterInMask] as MASK_TYPE)) {\n        // if mask is already filled up, do not allow any inputs\n        if (currentValue.length === this.mask.length) {\n          input.setSelectionRange(nextCharacterInMask, nextCharacterInMask);\n          event.preventDefault();\n        } else {\n          this._position = nextCharacterInMask + 1;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the cursor position after a letter is entered at `selectionStart` position in the mask.\n   * There are two cases to consider ('|' => cursor position where the character is entered, mask: 00:00:00):\n   * - before the separators there is space for entering the letter: '12:3|4:5' => '12:30:|45'\n   * - the letter has to be shifted and is entered after the separators: '12:34|:5' => '12:34:0|5'\n   */\n  private _calculateCursorShift(position: number): number {\n    let shift = 0;\n    // tracks if the entered letter was already placed in the current mask\n    // and therefor was considered in the cursor calculation.\n    let characterWasEntered = false;\n\n    if (!this.isSeparator(this.mask[position + shift])) {\n      shift++;\n      characterWasEntered = true;\n    }\n\n    while (this.isSeparator(this.mask[position + shift])) {\n      shift++;\n    }\n\n    if (!characterWasEntered) {\n      shift++;\n    }\n\n    return shift;\n  }\n\n  private _keyCodeIsNumber(value: number, location: number): boolean {\n    return ((value >= ZERO && value <= NINE)\n           || (location === 3 && value >= NUMPAD_ZERO && value <= NUMPAD_NINE));\n  }\n\n  private _keyCodeIsLetter(value: number): boolean {\n    return (value >= A && value <= Z);\n  }\n\n  private _isKeyCodeAllowed(value: number, location: number, maskedValue: MASK_TYPE) {\n    if ((maskedValue === '0' && this._keyCodeIsNumber(value, location))\n        || (maskedValue === 'A' && (this._keyCodeIsNumber(value, location) || this._keyCodeIsLetter(value)))\n        || (maskedValue === 'S' && this._keyCodeIsLetter(value))) {\n\n      return true;\n    }\n    return false;\n  }\n\n  private _isStringAllowed(value: string, maskedValue: MASK_TYPE) {\n    if ((maskedValue === '0' && /^[0-9]{1}$/.test(value))\n          || (maskedValue === 'A' && /^[a-zA-Z0-9]{1}$/.test(value))\n          || (maskedValue === 'S' && /^[a-zA-Z]{1}$/.test(value))) {\n\n      return true;\n    }\n    return false;\n  }\n\n  _onInputChange(event: KeyboardEvent) {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    this.updateValue(this.getMaskedString(input.value));\n    if (this._position !== null) {\n      input.setSelectionRange(this._position, this._position);\n      this._position = null;\n    }\n  }\n\n  _onPaste(event: ClipboardEvent) {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    const pastedData = (event.clipboardData || (<any> window).clipboardData).getData('text');\n    const maskedString = this.getMaskedString(pastedData, input.selectionStart);\n    this._position = input.selectionStart + maskedString.length;\n  }\n\n  private updateValue(value: string) {\n    this._elementRef.nativeElement.value = value;\n    if (!this.dropSpecialCharacters) {\n      this._onChangeCallback(value);\n    } else {\n      this._onChangeCallback(this.getUnmaskedValue());\n    }\n  }\n\n  private getMaskedString(inputValue: string, maskStartIndex: number = 0): string {\n    let formattedValue = '';\n    let maskIndex = maskStartIndex;\n    let inputIndex = 0;\n    let carot = 0;\n\n    // insert if next in mask is separator\n    while (this.isSeparator(this.mask[maskIndex])) {\n      formattedValue += this.mask[maskIndex];\n      maskIndex++;\n    }\n\n    while (inputIndex < inputValue.length) {\n      // test if letters are valid\n      if (this._isStringAllowed(inputValue[inputIndex], this.mask[maskIndex] as MASK_TYPE)) {\n        formattedValue += inputValue[inputIndex];\n        inputIndex++;\n        maskIndex++;\n      } else {\n        inputIndex++;\n      }\n\n      // insert if next in mask is separator\n      while (this.isSeparator(this.mask[maskIndex])) {\n        formattedValue += this.mask[maskIndex];\n\n        // shift for _position\n        if (maskIndex === this._position + carot) {\n          carot++;\n        }\n\n        maskIndex++;\n      }\n    }\n\n    if (carot > 0) {\n      this._position = this._position + carot;\n    }\n\n    return formattedValue;\n  }\n\n  private isSeparator(value: string): boolean {\n    return (this._separators.indexOf(value) !== -1);\n  }\n\n  // control value accessor\n  writeValue(value: any): void {\n    if (!value) {\n      value = '';\n    }\n    this.updateValue(this.getMaskedString(value));\n  }\n\n  registerOnChange(onChange: any): void {\n    this._onChangeCallback = onChange;\n  }\n\n  registerOnTouched(onTouched: any): void {\n    this._onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  _validateFn() {\n    const inputLength = this._elementRef.nativeElement.value.length;\n    const maskLength = this._mask.length;\n    if (inputLength !== maskLength) {\n      return { nxMaskLengthError: {'length': maskLength, 'actual': inputLength} };\n    }\n    return null;\n  }\n\n  /** @docs-private */\n  validate() {\n    return this.validateMask ? this._validateFn() : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxMaskDirective } from './mask.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule\n  ],\n  declarations: [\n    NxMaskDirective\n  ],\n  exports: [\n    NxFormfieldModule,\n    NxMaskDirective\n  ]\n})\nexport class NxMaskModule { }\n"],"names":["NG_VALUE_ACCESSOR","forwardRef","NG_VALIDATORS","coerceBooleanProperty","input","BACKSPACE","DELETE","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","A","Z","Directive","NX_INPUT_VALUE_ACCESSOR","ElementRef","Input","NgModule","CommonModule","NxFormfieldModule"],"mappings":"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"}
