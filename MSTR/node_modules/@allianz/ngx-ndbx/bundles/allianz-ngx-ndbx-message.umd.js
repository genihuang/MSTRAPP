(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@allianz/ngx-ndbx/icon'), require('@angular/core'), require('@angular/cdk/coercion')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/message', ['exports', '@angular/common', '@allianz/ngx-ndbx/icon', '@angular/core', '@angular/cdk/coercion'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].message = {}),global.ng.common,global.allianz['ngx-ndbx'].icon,global.ng.core,global.ng.cdk.coercion));
}(this, (function (exports,common,icon,core,coercion) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ICONS = {
        info: 'info-circle',
        error: 'exclamation-circle',
        success: 'check-circle',
        warning: 'exclamation-triangle'
    };
    var NxMessageComponent = /** @class */ (function () {
        function NxMessageComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this._context = 'regular';
            this._showIcon = false;
            this._closable = false;
            this._closeButtonLabel = 'Close dialog';
            /**
             * Event emitted when the close icon of the message has been clicked.
             */
            this.closeEvent = new core.EventEmitter();
        }
        Object.defineProperty(NxMessageComponent.prototype, "context", {
            get: /**
             * @return {?}
             */ function () {
                return this._context;
            },
            /**
             * Sets the context of the message.
             * The message box will color accordingly. Default: 'regular' */
            set: /**
             * Sets the context of the message.
             * The message box will color accordingly. Default: 'regular'
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value !== this._context) {
                    this._context = value;
                    this._icon = this.getIconName();
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxMessageComponent.prototype, "showIcon", {
            get: /**
             * @return {?}
             */ function () {
                return this._showIcon;
            },
            /**
             * Whether an icon that belongs to the context of the message should be displayed.
             * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.
             * @deletion-target 9.0.0
             * */
            set: /**
             * Whether an icon that belongs to the context of the message should be displayed.
             * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.
             * \@deletion-target 9.0.0
             *
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._showIcon = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxMessageComponent.prototype, "closable", {
            get: /**
             * @return {?}
             */ function () {
                return this._closable;
            },
            /** Whether a message should have a close icon in order to be dismissed. */
            set: /**
             * Whether a message should have a close icon in order to be dismissed.
             * @param {?} value
             * @return {?}
             */ function (value) {
                /** @type {?} */
                var newValue = coercion.coerceBooleanProperty(value);
                if (newValue !== this._closable) {
                    this._closable = newValue;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxMessageComponent.prototype, "icon", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                return this._icon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxMessageComponent.prototype, "closeButtonLabel", {
            get: /**
             * @return {?}
             */ function () {
                return this._closeButtonLabel;
            },
            /** Sets the label of the close button of the message. */
            set: /**
             * Sets the label of the close button of the message.
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value !== this._closeButtonLabel) {
                    this._closeButtonLabel = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxMessageComponent.prototype._emitCloseEvent = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                this.closeEvent.emit();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxMessageComponent.prototype.getIconName = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                if (this._context === 'info') {
                    return ICONS.info;
                }
                else if (this._context === 'error') {
                    return ICONS.error;
                }
                else if (this._context === 'success') {
                    return ICONS.success;
                }
                else if (this._context === 'warning') {
                    return ICONS.warning;
                }
                return '';
            };
        NxMessageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-message',
                        template: "<nx-icon *ngIf=\"showIcon && context !== 'regular'\"\n         class=\"nx-message__icon\"\n         [name]=\"icon\"\n         size=\"s\">\n</nx-icon>\n<button\n  *ngIf=\"closable\"\n  (click)=\"_emitCloseEvent()\"\n  [attr.aria-label]=\"closeButtonLabel\"\n  tabindex=\"0\"\n  class=\"nx-message__close-icon\">\n    <nx-icon\n      name=\"close\"\n      size=\"s\"\n      aria-hidden=\"true\">\n    </nx-icon>\n</button>\n\n\n<div class=\"nx-message__content-wrapper\">\n  <div class=\"nx-message__content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        exportAs: 'nxMessage',
                        host: {
                            '[class.context-info]': 'context === "info"',
                            '[class.context-error]': 'context === "error"',
                            '[class.context-success]': 'context === "success"',
                            '[class.context-warning]': 'context === "warning"',
                            '[class.nx-message--closable]': 'closable'
                        },
                        styles: [":host{width:100%;color:#414141;display:flex;align-items:flex-start;position:relative;background-color:#fff;border:1px solid;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:23px;margin:12px 0;font-size:16px;line-height:24px}.nx-message__content-wrapper{max-width:100%}:host,:host(.context-regular){border-color:#414141}:host(.context-info){border-color:#496ebd}:host(.context-info) .nx-message__icon{color:#496ebd}:host(.context-error){border-color:#dc3149}:host(.context-error) .nx-message__icon{color:#dc3149}:host(.context-success){border-color:#1e8927}:host(.context-success) .nx-message__icon{color:#1e8927}:host(.context-warning){border-color:#efbe25}:host(.context-warning) .nx-message__icon{color:#efbe25}.nx-message__icon{margin-right:16px}@media (max-width:703px){:host{padding:31px;display:block}:host(.context-error) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-info) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-success) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-warning) .nx-message__icon~.nx-message__content-wrapper .nx-message__content{display:inline;margin-left:31px}.nx-message__icon{position:absolute}}:host(.nx-message--closable){padding-right:39px}@media (max-width:703px){:host(.nx-message--closable){padding-right:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:0;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{font-size:16px;color:nx-colors(grey-tones,grey-tone-1)}:host-context([data-whatinput=keyboard]) .nx-message__close-icon:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
                    }] }
        ];
        /** @nocollapse */
        NxMessageComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        NxMessageComponent.propDecorators = {
            context: [{ type: core.Input, args: ['nxContext',] }],
            showIcon: [{ type: core.Input }],
            closable: [{ type: core.Input }],
            closeButtonLabel: [{ type: core.Input }],
            closeEvent: [{ type: core.Output, args: ['close',] }]
        };
        return NxMessageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxMessageModule = /** @class */ (function () {
        function NxMessageModule() {
        }
        NxMessageModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            icon.NxIconModule
                        ],
                        declarations: [
                            NxMessageComponent
                        ],
                        exports: [
                            NxMessageComponent
                        ]
                    },] }
        ];
        return NxMessageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxMessageModule = NxMessageModule;
    exports.NxMessageComponent = NxMessageComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-message.umd.js.map