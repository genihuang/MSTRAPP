(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/cdk/coercion'), require('@angular/core'), require('@allianz/ngx-ndbx/icon')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/action', ['exports', '@angular/common', '@angular/cdk/coercion', '@angular/core', '@allianz/ngx-ndbx/icon'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].action = {}),global.ng.common,global.ng.cdk.coercion,global.ng.core,global.allianz['ngx-ndbx'].icon));
}(this, (function (exports,common,coercion,core,icon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxActionComponent = /** @class */ (function () {
        function NxActionComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this._selected = false;
            this._expandable = false;
            this._expanded = false;
        }
        Object.defineProperty(NxActionComponent.prototype, "selected", {
            get: /**
             * @return {?}
             */ function () {
                return this._selected;
            },
            /** Whether this action is selected or not.  */
            set: /**
             * Whether this action is selected or not.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selected = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxActionComponent.prototype, "expandable", {
            get: /**
             * @return {?}
             */ function () {
                return this._expandable;
            },
            /** Whether this action is expandable or not. Will add a caret icon. */
            set: /**
             * Whether this action is expandable or not. Will add a caret icon.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._expandable = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxActionComponent.prototype, "expanded", {
            get: /**
             * @return {?}
             */ function () {
                return this._expanded;
            },
            /** Whether this action is expanded or not.
              Only works in combination with the `expandable` option set to `true`.
             */
            set: /**
             * Whether this action is expanded or not.
             * Only works in combination with the `expandable` option set to `true`.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._expanded = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        NxActionComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: '[nxAction]',
                        template: "<div class=\"nx-action__wrapper\">\n  <ng-container *ngIf=\"expandable\">\n    <nx-icon class=\"nx-action__expand-icon\" name=\"chevron-right\"></nx-icon>\n  </ng-container>\n  <ng-content select=\"[nxActionIcon]\"></ng-content>\n  <span class=\"nx-action__label\">\n    <ng-content></ng-content>\n  </span>\n</div>\n",
                        host: {
                            '[class.is-expanded]': 'expanded',
                            '[class.is-selected]': 'selected',
                            '[class.is-expandable]': 'expandable',
                            'class': 'nx-action'
                        },
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [":host(.nx-action){display:block;background-color:#f5f5f5;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;box-shadow:none;border:none;margin:0;cursor:pointer;line-height:24px;font-size:16px;font-weight:400;padding:8px 16px 8px 0;width:100%;color:#414141;text-decoration:none}:host(.nx-action):hover{background-color:#ececec}:host(.nx-action).is-expanded{font-weight:700}:host(.nx-action).is-expanded .nx-action__expand-icon{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}:host(.nx-action).is-expandable .nx-action__wrapper::before{flex:0 1 32px;max-width:8px;min-width:4px}:host(.nx-action).is-selected{background-color:#007ab3;color:#fff;font-weight:700}:host(.nx-action)[nxTreeNodePadding] .nx-action__wrapper::before{flex-shrink:0}:host(.nx-action)::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]):focus{box-shadow:inset 0 0 0 4px #009de6;border-radius:8px}:host-context([data-whatinput=keyboard]):focus.is-selected{box-shadow:inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff}.nx-action__expand-icon{display:flex;justify-content:center;transition:.2s;-webkit-transform:rotateZ(0);transform:rotateZ(0);width:16px;height:24px;margin-right:8px;flex:0 0 auto;font-size:22px}.nx-action__wrapper{display:flex;align-items:center;position:relative;overflow:hidden}.nx-action__wrapper::before{content:'';display:block;flex:0 1 32px;min-width:16px;height:1em}::ng-deep .nx-action__icon{margin-right:16px;height:24px;font-weight:400;flex:0 0 auto;position:relative;top:-1px}.nx-action__label{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;flex:1 1 50%;text-align:left;line-height:1;padding:4px 0}"]
                    }] }
        ];
        /** @nocollapse */
        NxActionComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        NxActionComponent.propDecorators = {
            selected: [{ type: core.Input }],
            expandable: [{ type: core.Input }],
            expanded: [{ type: core.Input }]
        };
        return NxActionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxActionIconDirective = /** @class */ (function () {
        function NxActionIconDirective() {
        }
        NxActionIconDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxActionIcon]',
                        host: {
                            'class': 'nx-action__icon'
                        }
                    },] }
        ];
        return NxActionIconDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxActionModule = /** @class */ (function () {
        function NxActionModule() {
        }
        NxActionModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [icon.NxIconModule, common.CommonModule],
                        declarations: [NxActionComponent, NxActionIconDirective],
                        exports: [NxActionComponent, NxActionIconDirective]
                    },] }
        ];
        return NxActionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxActionModule = NxActionModule;
    exports.NxActionComponent = NxActionComponent;
    exports.NxActionIconDirective = NxActionIconDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-action.umd.js.map