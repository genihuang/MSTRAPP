(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@allianz/ngx-ndbx/icon'), require('@angular/core'), require('@allianz/ngx-ndbx/core')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/link', ['exports', '@allianz/ngx-ndbx/icon', '@angular/core', '@allianz/ngx-ndbx/core'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].link = {}),global.allianz['ngx-ndbx'].icon,global.ng.core,global.allianz['ngx-ndbx'].core));
}(this, (function (exports,icon,core,core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPPING = {
        'black': 'nx-link--black',
        'negative': 'nx-link--negative',
        'text': 'nx-link--text',
        'block': 'nx-link--block',
        'icon-right': 'nx-link--icon-right'
    };
    /** @type {?} */
    var DEFAULT_CLASSES = ['nx-link'];
    var NxLinkComponent = /** @class */ (function (_super) {
        __extends(NxLinkComponent, _super);
        function NxLinkComponent(_elementRef, _renderer) {
            var _this = _super.call(this, MAPPING, DEFAULT_CLASSES, _elementRef, _renderer) || this;
            _this._renderer = _renderer;
            return _this;
        }
        /**
         * @return {?}
         */
        NxLinkComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                // Add a specific link class that the css gets more specific than the nx-icon css
                /** @type {?} */
                var icons = this.elementRef.nativeElement.querySelectorAll('nx-icon');
                for (var i = 0; i < icons.length; i++) {
                    this._renderer.addClass(icons[i], 'nx-link__icon');
                }
            };
        Object.defineProperty(NxLinkComponent.prototype, "elementRef", {
            /**
             * @docs-private
             * getter used for the modal component as a quickfix
             * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
             * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
             * way to reach the elementRef of the component until the modal gets refactored.
             */
            get: /**
             * \@docs-private
             * getter used for the modal component as a quickfix
             * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
             * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
             * way to reach the elementRef of the component until the modal gets refactored.
             * @return {?}
             */ function () {
                return this._elementRef;
            },
            enumerable: true,
            configurable: true
        });
        NxLinkComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-link',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: '<ng-content></ng-content>',
                        inputs: ['classNames: nxStyle'],
                        styles: [":host{display:inline-block;color:#006192;cursor:pointer;font-size:16px;font-weight:600;letter-spacing:1px;position:relative;text-decoration:none;transition:color .2s,box-shadow .2s;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;line-height:24px}:host:hover{color:#008ed6}:host::ng-deep a:active{color:#003781}:host::ng-deep a{display:flex}:host-context([data-whatinput=keyboard])::ng-deep a:focus{border-radius:4px;outline:0;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-link--negative){color:#fff}:host(.nx-link--negative):hover{color:#c2c2c2}:host(.nx-link--negative)::ng-deep a:active{color:#999}:host(.nx-link--negative)::ng-deep a[aria-disabled],:host(.nx-link--negative)::ng-deep a[disabled]{color:rgba(255,255,255,.4)}:host(.nx-link--black){color:#414141}:host(.nx-link--black):hover{color:#999}:host(.nx-link--black)::ng-deep a:active{color:#5b5b5b}:host(.nx-link--black)::ng-deep a[aria-disabled],:host(.nx-link--black)::ng-deep a[disabled]{color:#c2c2c2}.nx-link--text{font-weight:700;text-transform:none;letter-spacing:normal;border-radius:4px}:host::ng-deep .c-icon,:host::ng-deep nx-icon.nx-link__icon{line-height:24px;font-size:24px;margin:0 8px 0 0}:host::ng-deep .c-icon::before,:host::ng-deep nx-icon.nx-link__icon::before{line-height:inherit;font-size:inherit;width:24px;height:24px}:host(.nx-link--icon-right)::ng-deep .c-icon,:host(.nx-link--icon-right)::ng-deep nx-icon.nx-link__icon{order:2;margin:0 0 0 8px}:host::ng-deep a[aria-disabled],:host::ng-deep a[disabled]{cursor:not-allowed;color:rgba(0,97,146,.4)}:host::ng-deep a[aria-disabled]:active,:host::ng-deep a[disabled]:active{color:#006192}:host::ng-deep a[aria-disabled]:focus,:host::ng-deep a[disabled]:focus{outline:0;box-shadow:none}"]
                    }] }
        ];
        /** @nocollapse */
        NxLinkComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        NxLinkComponent.propDecorators = {
            icon: [{ type: core.ContentChild, args: [icon.NxIconComponent,] }]
        };
        return NxLinkComponent;
    }(core$1.MappedStyles));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxLinkModule = /** @class */ (function () {
        function NxLinkModule() {
        }
        NxLinkModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NxLinkComponent],
                        exports: [NxLinkComponent]
                    },] }
        ];
        return NxLinkModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxLinkModule = NxLinkModule;
    exports.NxLinkComponent = NxLinkComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-link.umd.js.map