{"version":3,"file":"allianz-ngx-ndbx-code-input.umd.js.map","sources":["ng://@allianz/ngx-ndbx/code-input/code-input-intl.ts","ng://@allianz/ngx-ndbx/code-input/code-input.component.ts","ng://@allianz/ngx-ndbx/code-input/code-input.module.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NxCodeInputIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for the input field */\n  inputFieldAriaLabel: string = 'Enter Key';\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ChangeDetectorRef,\n  ElementRef,\n  Self,\n  Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\nimport { BACKSPACE, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\n\nconst DEFAULT_INPUT_LENGTH = 6;\nconst TAG_NAME_INPUT = 'INPUT';\nconst AUTO_UPPERCASE = 'upper';\nconst AUTO_LOWERCASE = 'lower';\nconst INPUT_FIELD_GAP = 'nx-code-input--gap';\nexport type NxConversionTypes = 'lower' | 'upper';\n\n@Component({\n  selector: 'nx-code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: [\n    'code-input.scss'\n  ],\n  host: {\n    '[class.nx-code-input]': 'true',\n    '[class.has-error]': '_control ? _control.invalid && _control.touched : false',\n    '[attr.tabindex]': 'tabindex'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCodeInputComponent implements ControlValueAccessor {\n  /** The length of the code input. Default: 6. */\n  @Input('length')\n  set codeLength(value: number) {\n    this._codeLength = value;\n    this.setInputLength();\n    this._changeDetectorRef.markForCheck();\n  }\n  get codeLength() {\n    return this._codeLength;\n  }\n  private _codeLength: number = DEFAULT_INPUT_LENGTH;\n\n  /** The type of HTML input */\n  @Input()\n  set type(value: string) {\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get type() {\n    return this._type;\n  }\n  private _type: string = 'text';\n\n  /* Sets the the tabindex if code input */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n  private _tabindex: number = 0;\n\n  /** Whether the form should auto capitalize or lowercase. (Optional) */\n  @Input('nxConvertTo')\n  set convertTo(value: NxConversionTypes) {\n    this._convertTo = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get convertTo() {\n    return this._convertTo;\n  }\n  private _convertTo?: NxConversionTypes;\n\n  /** The user input in array form */\n  _keyCode: string[] = new Array(DEFAULT_INPUT_LENGTH);\n  private _focused: boolean = false;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _el: ElementRef,\n    @Self() @Optional() public _control: NgControl,\n    public _intl: NxCodeInputIntl) {\n    if (this._control) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this._control.valueAccessor = this;\n    }\n  }\n\n  /** Sets the length of the input fields. */\n  setInputLength(): void {\n    if (this.codeLength) {\n      this._keyCode = new Array(this.codeLength);\n    } else {\n      this._keyCode = new Array(DEFAULT_INPUT_LENGTH);\n    }\n  }\n\n  /** Converts to upper or lowercase when enabled. */\n  _convertLetterSize(value: any): string {\n    if (value === 'Ã') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      if (this.convertTo === AUTO_UPPERCASE) {\n        return value.toUpperCase();\n      } else if (this.convertTo === AUTO_LOWERCASE) {\n        return value.toLowerCase();\n      }\n\n      return value;\n    }\n  }\n\n  /** Reacts to keydown event. */\n  _keydownAction(event): void | false {\n    const previousInputField = event.target.previousElementSibling;\n    const nextInputField = event.target.nextElementSibling;\n\n    switch (event.keyCode) {\n      case SPACE:\n        return false;\n\n      case BACKSPACE:\n        if (event.target.value === '') {\n          if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n            previousInputField.focus();\n            previousInputField.select();\n          }\n        }\n        break;\n\n      case LEFT_ARROW:\n        if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n          event.preventDefault();\n          previousInputField.focus();\n          previousInputField.select();\n        }\n        break;\n\n      case RIGHT_ARROW:\n        if (nextInputField && nextInputField.tagName === TAG_NAME_INPUT) {\n          nextInputField.focus();\n          nextInputField.select();\n        }\n        event.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /** Selects the value on click of an input field. */\n  _selectText(event): void {\n    event.target.select();\n  }\n\n  /** Automatically focuses and selects the next input on key input. */\n  _selectNextInput(event): void {\n    event.target.value = this._convertLetterSize(event.target.value);\n    this.propagateChange(this._keyCode.join(''));\n\n    if (event.target.value) {\n      const nextInputField = event.target.nextSibling;\n\n      if (nextInputField !== null && nextInputField.tagName === TAG_NAME_INPUT) {\n        nextInputField.focus();\n        if (nextInputField.value !== '') {\n          nextInputField.select();\n        }\n      }\n    }\n  }\n\n  /** Paste event to distribute content in input fields. */\n  _pasteClipboard(event): void {\n    let copiedText = '';\n    if (event.clipboardData === undefined) {\n      copiedText = (<any>window).clipboardData.getData('text').replace(/ /g, '').split('');\n    } else {\n      copiedText = event.clipboardData.getData('text').replace(/ /g, '').split('');\n    }\n\n    let index = 0;\n    let count = 0;\n\n    for (let i = 0; i < this._el.nativeElement.children.length; i++) {\n      if (event.srcElement === this._el.nativeElement.children.item(i)) {\n        index = i;\n      }\n    }\n\n    for (let i = index; i < this.codeLength; i++) {\n      this._keyCode[i] = this._convertLetterSize(copiedText[count]);\n      count++;\n    }\n\n    this.propagateChange(this._keyCode.join(''));\n\n    if (index + copiedText.length < this.codeLength) {\n      this._el.nativeElement.children.item(index + copiedText.length).focus();\n      event.preventDefault();\n    } else if (index + copiedText.length >= this.codeLength) {\n      event.preventDefault();\n    }\n  }\n\n  /** Triggers when an input field is blurred. */\n  _onBlur(): void {\n    this._focused = false;\n    setTimeout(() => {\n      if (!this._focused) {\n        this.propagateTouch(this._keyCode.join(''));\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Sets _focused state and makes valid. */\n  _setFocusState(): void {\n    this._focused = true;\n  }\n\n  /** Sets initial value, used by ControlValueAccessor. */\n  writeValue(value: string): void {\n    if (value) {\n      const valueAsArray = value.split('').slice(0, this.codeLength);\n\n      for (let i = 0; i < this.codeLength; i++) {\n        this._keyCode[i] = valueAsArray[i];\n      }\n    } else {\n      this.setInputLength();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _trackByKeyCode(index: number, item: string): number {\n    return index;\n  }\n\n  /** Adds a gap to input fields when appropriate. */\n  _inputGap(index): string {\n    switch (this.codeLength) {\n      case 4:\n      case 6:\n      case 8:\n        if (index === this.codeLength / 2) {\n          return INPUT_FIELD_GAP;\n        }\n\n        break;\n      default:\n        return;\n    }\n  }\n\n  /** @docs-private */\n  propagateChange = (_: any) => {\n  }\n\n  /** @docs-private */\n  propagateTouch = (_: any) => {\n  }\n\n  registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.propagateTouch = fn;\n  }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\n\nimport {NxCodeInputComponent} from './code-input.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    NxCodeInputComponent,\n  ],\n  exports: [\n    NxCodeInputComponent,\n  ],\n  providers: [NxCodeInputIntl],\n})\nexport class NxCodeInputModule {\n}\n"],"names":["Subject","Injectable","SPACE","BACKSPACE","LEFT_ARROW","RIGHT_ARROW","Component","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgControl","Self","Optional","Input","NgModule","CommonModule","FormsModule","ReactiveFormsModule"],"mappings":"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"}
