(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@allianz/ngx-ndbx/grid'), require('@angular/common'), require('@allianz/ngx-ndbx/utils'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('@angular/core'), require('@angular/forms'), require('decimal.js'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/slider', ['exports', '@allianz/ngx-ndbx/grid', '@angular/common', '@allianz/ngx-ndbx/utils', '@angular/cdk/coercion', '@angular/cdk/keycodes', '@angular/core', '@angular/forms', 'decimal.js', 'rxjs'], factory) :
    (factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].slider = {}),global.allianz['ngx-ndbx'].grid,global.ng.common,global.allianz['ngx-ndbx'].utils,global.ng.cdk.coercion,global.ng.cdk.keycodes,global.ng.core,global.ng.forms,global.decimal_js,global.rxjs));
}(this, (function (exports,grid,common,utils,coercion,keycodes,core,forms,decimal_js,rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var EventType = {
        TOUCH: 0, MOUSE: 1,
    };
    EventType[EventType.TOUCH] = 'TOUCH';
    EventType[EventType.MOUSE] = 'MOUSE';
    /** @type {?} */
    var nextId = 0;
    /** @type {?} */
    var DEFAULT_MIN = 0;
    /** @type {?} */
    var DEFAULT_MAX = 100;
    /** @type {?} */
    var DEFAULT_STEP = 1;
    var NxSliderComponent = /** @class */ (function () {
        function NxSliderComponent(elementRef, _changeDetectorRef) {
            this.elementRef = elementRef;
            this._changeDetectorRef = _changeDetectorRef;
            this._id = "nx-slider-" + nextId++;
            this._tabIndex = 0;
            this._min = DEFAULT_MIN;
            this._max = DEFAULT_MAX;
            this._disabled = false;
            this._inverted = false;
            this._thumbLabel = true;
            this._negative = false;
            /**
             * An event is dispatched on each value change.
             */
            this.valueChange = new core.EventEmitter();
            this.isActive = false;
            this.dragSubscriptions = [];
            this.position = null;
            this._value = 0;
            this._step = DEFAULT_STEP;
            this._onChange = ( /**
             * @return {?}
             */function () { });
            this._onTouched = ( /**
             * @return {?}
             */function () { });
            /**
             * Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ).
             */
            this.valueFormatter = ( /**
             * @param {?} value
             * @return {?}
             */function (value) { return value; });
            /**
             * Sets the customization function for the label on the min-side of the slider (Default:(value) => value).
             */
            this.labelMinFormatter = ( /**
             * @param {?} value
             * @return {?}
             */function (value) { return value; });
            /**
             * Sets the customization function for the label on the max-side of the slider (Default:(value) => value).
             */
            this.labelMaxFormatter = ( /**
             * @param {?} value
             * @return {?}
             */function (value) { return value; });
        }
        Object.defineProperty(NxSliderComponent.prototype, "id", {
            get: /**
             * @return {?}
             */ function () {
                return this._id;
            },
            /** Sets the id of the slider. */
            set: /**
             * Sets the id of the slider.
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._id !== value) {
                    this._id = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "tabindex", {
            get: /**
             * @return {?}
             */ function () {
                return this._tabIndex;
            },
            /** Sets the tabindex of the slider. */
            set: /**
             * Sets the tabindex of the slider.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._tabIndex = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "min", {
            get: /**
             * @return {?}
             */ function () {
                return this._min;
            },
            /** Sets the minimum value (Default: 0). */
            set: /**
             * Sets the minimum value (Default: 0).
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._min = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "max", {
            get: /**
             * @return {?}
             */ function () {
                return this._max;
            },
            /** Sets the maximum value (Default: 100). */
            set: /**
             * Sets the maximum value (Default: 100).
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._max = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "step", {
            /** Sets the step size by which the value of the slider can be increased or decreased (Default: 1). */
            get: /**
             * Sets the step size by which the value of the slider can be increased or decreased (Default: 1).
             * @return {?}
             */ function () { return this._step; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._step = coercion.coerceNumberProperty(value, this._step);
                if (this._step % 1 !== 0) {
                    this._roundToDecimal = this._step.toString().split('.').pop().length;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "label", {
            get: /**
             * @return {?}
             */ function () {
                return this._label;
            },
            /** Sets the label which is displayed on top of the slider. */
            set: /**
             * Sets the label which is displayed on top of the slider.
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._label !== value) {
                    this._label = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            /** Whether the input to the control of the slider should be disabled. */
            set: /**
             * Whether the input to the control of the slider should be disabled.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "inverted", {
            get: /**
             * @return {?}
             */ function () {
                return this._inverted;
            },
            /** Whether the max value is to the right (false) or left (true).*/
            set: /**
             * Whether the max value is to the right (false) or left (true).
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._inverted = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "thumbLabel", {
            get: /**
             * @return {?}
             */ function () {
                return this._thumbLabel;
            },
            /** Whether to display the thumb label on top of the slider.*/
            set: /**
             * Whether to display the thumb label on top of the slider.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._thumbLabel = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */ function () {
                return this._negative;
            },
            /** Whether the negative set of styles is applied (Default: 'false').*/
            set: /**
             * Whether the negative set of styles is applied (Default: 'false').
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._negative = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            /** Sets the current value of the slider. */
            set: /**
             * Sets the current value of the slider.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.writeValue(Number(value));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxSliderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.reset();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NxSliderComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this._value) {
                    this._value = value;
                    this.valueChange.emit(value);
                    this._changeDetectorRef.markForCheck();
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxSliderComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxSliderComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} disabled
         * @return {?}
         */
        NxSliderComponent.prototype.setDisabledState = /**
         * @param {?} disabled
         * @return {?}
         */
            function (disabled) {
                this.disabled = disabled;
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.isMinimum = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this._value === this.min;
            };
        /** @docs-private
         * A valid step is either:
         * - the minimum because thats our anchor for all value evaluation and steps
         * - (_value - min) % step === 0
         */
        /**
         * \@docs-private
         * A valid step is either:
         * - the minimum because thats our anchor for all value evaluation and steps
         * - (_value - min) % step === 0
         * @return {?}
         */
        NxSliderComponent.prototype.isValidStep = /**
         * \@docs-private
         * A valid step is either:
         * - the minimum because thats our anchor for all value evaluation and steps
         * - (_value - min) % step === 0
         * @return {?}
         */
            function () {
                /** @type {?} */
                var safeValue = new decimal_js.Decimal(this._value).minus(this.min);
                /** @type {?} */
                var modulo = safeValue.mod(this.step);
                return this.isMinimum() || modulo.cmp(0) === 0;
            };
        /** @docs-private
         * We have to look at two cases:
         * - current value is a valid multitude of the step size
         *   then we can safely add or subtract the step
         * - the value is not a valid multitude. this could be the max value or the value bound
         *   via nxValue
         *   then we look for the next closest value upwards or downwards
         *   decimal.js provides a nice utility function for this.
         */
        /**
         * \@docs-private
         * We have to look at two cases:
         * - current value is a valid multitude of the step size
         *   then we can safely add or subtract the step
         * - the value is not a valid multitude. this could be the max value or the value bound
         *   via nxValue
         *   then we look for the next closest value upwards or downwards
         *   decimal.js provides a nice utility function for this.
         * @param {?} valueDiff
         * @return {?}
         */
        NxSliderComponent.prototype.changeValue = /**
         * \@docs-private
         * We have to look at two cases:
         * - current value is a valid multitude of the step size
         *   then we can safely add or subtract the step
         * - the value is not a valid multitude. this could be the max value or the value bound
         *   via nxValue
         *   then we look for the next closest value upwards or downwards
         *   decimal.js provides a nice utility function for this.
         * @param {?} valueDiff
         * @return {?}
         */
            function (valueDiff) {
                /** @type {?} */
                var newValue = new decimal_js.Decimal(this._value);
                if (this.isValidStep()) {
                    newValue = newValue.plus(valueDiff);
                }
                else {
                    // subtract the minimum to find the closest multitude then add the minimum again to get the valid slider step
                    /** @type {?} */
                    var minAdjustedValue = new decimal_js.Decimal(this._value).minus(this.min);
                    newValue = valueDiff < 0 ? minAdjustedValue.toNearest(this.step, decimal_js.Decimal.ROUND_DOWN)
                        : minAdjustedValue.toNearest(this.step, decimal_js.Decimal.ROUND_UP);
                    newValue = newValue.plus(this.min);
                }
                // cast the Decimal object to a JS number before it gets returned
                /** @type {?} */
                var toNumber = newValue.toNumber();
                toNumber = utils.clamp(toNumber, this.min, this.max);
                this._onChange(toNumber);
                this.value = toNumber;
            };
        Object.defineProperty(NxSliderComponent.prototype, "percentageValue", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */ function () {
                /** @type {?} */
                var percentageValue = ((this.value || 0) - this.min) / (this.max - this.min) * 100;
                if (this.inverted) {
                    percentageValue = 100 - percentageValue;
                }
                return utils.clamp(percentageValue, 0, 100);
            },
            enumerable: true,
            configurable: true
        });
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.sliderClick = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (this.disabled) {
                    return;
                }
                this._focusHandleElement();
                event.stopPropagation();
                this.position = this.getPositionFromEvent(event);
                this.frameId = requestAnimationFrame(( /**
                 * @return {?}
                 */function () {
                    _this.valueByPosition();
                }));
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.focus = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return;
                }
                this._focusHandleElement();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.blur = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return;
                }
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.handleKeypress = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.disabled) {
                    return;
                }
                if (event.which < keycodes.LEFT_ARROW || event.which > keycodes.DOWN_ARROW) {
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
                switch (event.which) {
                    case this.inverted ? keycodes.RIGHT_ARROW : keycodes.LEFT_ARROW:
                    case keycodes.DOWN_ARROW:
                        return this.changeValue(-this.step);
                    case keycodes.UP_ARROW:
                    case this.inverted ? keycodes.LEFT_ARROW : keycodes.RIGHT_ARROW:
                        return this.changeValue(this.step);
                }
            };
        /** @docs-private
         * this is called on mousedown or touchstart
         */
        /**
         * \@docs-private
         * this is called on mousedown or touchstart
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.dragStart = /**
         * \@docs-private
         * this is called on mousedown or touchstart
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.disabled) {
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
                this.isActive = true;
                /** @type {?} */
                var isTouchEvent = this.detectEventType(event) === EventType.TOUCH;
                if (isTouchEvent) {
                    this.dragSubscriptions = [
                        rxjs.fromEvent(document, 'touchmove').subscribe(this.handleDragMove.bind(this)),
                        rxjs.fromEvent(document, 'touchend').subscribe(this.handleDragStop.bind(this)),
                        rxjs.fromEvent(document, 'touchcancel').subscribe(this.handleDragStop.bind(this))
                    ];
                }
                else {
                    this.dragSubscriptions = [
                        rxjs.fromEvent(document, 'mousemove').subscribe(this.handleDragMove.bind(this)),
                        rxjs.fromEvent(document, 'mouseup').subscribe(this.handleDragStop.bind(this))
                    ];
                }
                this.position = this.getPositionFromEvent(event);
                this.runChangeObserver();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxSliderComponent.prototype.formatValue = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return this.valueFormatter(value);
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelLeft = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this.inverted ? this.formatLabelMax() : this.formatLabelMin();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelRight = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this.inverted ? this.formatLabelMin() : this.formatLabelMax();
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.valueByPosition = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var rect = this.elementRef.nativeElement.getBoundingClientRect();
                /** @type {?} */
                var x = Math.max(rect.left, Math.min(rect.right, this.position.x));
                // position of slider relative to slider width
                /** @type {?} */
                var percent = (x - rect.left) / rect.width;
                if (this.inverted) {
                    percent = 1 - percent;
                }
                /** @type {?} */
                var exactValue = this.min + percent * (this.max - this.min);
                /**
                 * edge case handling because of float precision errors
                 * you couldn't reach the maximum
                 * @type {?}
                 */
                var closestValue;
                if (percent === 1) {
                    closestValue = this.max;
                }
                else if (percent === 0) {
                    closestValue = this.min;
                }
                else {
                    closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
                }
                if (this._roundToDecimal) {
                    closestValue = this.roundToDecimal(closestValue);
                }
                closestValue = utils.clamp(closestValue, this.min, this.max);
                this._onChange(closestValue);
                this.value = closestValue;
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxSliderComponent.prototype.roundToDecimal = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return parseFloat(value.toFixed(this._roundToDecimal));
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelMin = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this.labelMinFormatter(this.min);
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelMax = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                return this.labelMaxFormatter(this.max);
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.handleDragMove = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.position = this.getPositionFromEvent(event);
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.handleDragStop = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.reset();
                this.valueByPosition();
            };
        /**
         * @private
         * @return {?}
         */
        NxSliderComponent.prototype.runChangeObserver = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.frameId = requestAnimationFrame(( /**
                 * @return {?}
                 */function () {
                    _this.valueByPosition();
                    if (_this.isActive) {
                        _this.runChangeObserver();
                    }
                }));
            };
        /**
         * @private
         * @return {?}
         */
        NxSliderComponent.prototype.reset = /**
         * @private
         * @return {?}
         */
            function () {
                var e_1, _a;
                this.isActive = false;
                try {
                    for (var _b = __values(this.dragSubscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var subscription = _c.value;
                        subscription.unsubscribe();
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                this.dragSubscriptions = [];
                cancelAnimationFrame(this.frameId);
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.detectEventType = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                return event.type.includes('touch') ? EventType.TOUCH : EventType.MOUSE;
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.getPositionFromEvent = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var eventType = this.detectEventType(event);
                /** @type {?} */
                var cursor = eventType === EventType.TOUCH ? (( /** @type {?} */(event))).touches.item(0) : event;
                return {
                    x: cursor.clientX,
                    y: cursor.clientY
                };
            };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype._focusHandleElement = /**
         * \@docs-private
         * @return {?}
         */
            function () {
                this.handleElement.nativeElement.focus();
            };
        NxSliderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-slider',
                        template: "<label class=\"nx-slider__label\" [id]=\"id + '-label'\" [attr.for]=\"id + '-handle'\" (click)=\"_focusHandleElement()\">{{label}}</label>\n\n<div\n  class=\"nx-slider__wrapper\"\n  (click)=\"sliderClick($event)\"\n>\n\n  <span class=\"nx-slider__background\">\n    <span class=\"nx-slider__filler\" [style.width.%]=\"percentageValue\"></span>\n\n    <a class=\"nx-slider__handle\"\n        [id]=\"id + '-handle'\"\n        [attr.tabindex]=\"tabindex\"\n        [attr.aria-labelledby]=\"id + '-label'\"\n        role=\"slider\"\n        [attr.aria-valuemin]=\"formatLabelMin()\"\n        [attr.aria-valuemax]=\"formatLabelMax()\"\n        [attr.aria-valuetext]=\"formatValue(value)\"\n        [attr.aria-valuenow]=\"formatValue(value)\"\n        (mousedown)=\"dragStart($event)\"\n        (touchstart)=\"dragStart($event)\"\n        #handle\n      >\n\n      <span *ngIf=\"thumbLabel\" class=\"nx-slider__value\">{{formatValue(value)}}\n        <div class=\"nx-slider__arrow\">\n        </div>\n      </span>\n    </a>\n\n  </span>\n</div>\n\n<div class=\"nx-slider__label-container\">\n    <span class=\"nx-slider__value-label\">{{formatLabelLeft()}}</span>\n    <span class=\"nx-slider__value-label\">{{formatLabelRight()}}</span>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return NxSliderComponent; })),
                                multi: true
                            }],
                        host: {
                            '[attr.aria-disabled]': 'disabled ? true : null',
                            '(keydown)': 'handleKeypress($event)',
                            '[class.nx-slider--disabled]': 'disabled',
                            '[class.nx-slider--negative]': 'negative'
                        },
                        styles: [":host{display:block}.nx-slider__label{font-size:20px;line-height:24px;letter-spacing:.2px;color:#414141;font-weight:300}.nx-slider__wrapper{width:100%;padding:66px 0 26px}.nx-slider__background{position:relative;background-color:#d9d9d9;display:block;height:4px;border-radius:2px;white-space:nowrap;cursor:pointer}.nx-slider__filler{display:inline-block;height:4px;border-radius:2px;background-color:#007ab3;float:left}.nx-slider__handle{display:inline-block;position:relative;width:24px;height:24px;background-color:#fff;border-radius:50%;box-shadow:0 2px 4px rgba(65,65,65,.5);border:1px solid #f5f5f5;box-sizing:border-box;margin-left:-12px;top:-10px;z-index:2;cursor:-webkit-grab;cursor:grab}.nx-slider__handle:focus{outline:0}:host-context([data-whatinput=keyboard]) .nx-slider__handle:focus{border-color:#7fbcd9;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}.nx-slider__value{background-color:#fff;border:1px solid #f5f5f5;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);color:#006192;cursor:-webkit-grab;cursor:grab;line-height:16px;height:24px;width:48px;text-align:center;right:8px;font-weight:600;font-size:12px;letter-spacing:.5px;padding:3px 8px;position:relative;top:-40px;display:table;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.nx-slider__arrow{width:6px;height:6px;background:#fff;border-right:1px solid #f5f5f5;border-bottom:1px solid #f5f5f5;left:50%;-webkit-transform:translate(-50%,1px) rotate(45deg);transform:translate(-50%,1px) rotate(45deg);position:absolute;box-shadow:-2px -2px 1px 1px #fff,2px 2px 4px rgba(65,65,65,.5)}@media screen and (-ms-high-contrast:active){.nx-slider__handle:focus{box-shadow:0 2px 4px,inset 0 0 0 4px}}.nx-slider__label-container{display:flex;width:100%;justify-content:space-between;color:#414141;font-size:14px;line-height:16px;letter-spacing:.2px}.nx-slider__max-value-label{text-align:right}:host(.nx-slider--disabled){cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__background,:host(.nx-slider--disabled) .nx-slider__filler,:host(.nx-slider--disabled) .nx-slider__handle,:host(.nx-slider--disabled) .nx-slider__value,:host(.nx-slider--disabled) .nx-slider__value-label{pointer-events:none;cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__filler{background-color:#7fbcd9}:host(.nx-slider--disabled) .nx-slider__value{color:#7fbcd9}:host(.nx-slider--disabled) .nx-slider__label-container{color:#d9d9d9}:host(.nx-slider--negative) .nx-slider__label,:host(.nx-slider--negative) .nx-slider__value-label{color:#fff}:host(.nx-slider--negative) .nx-slider__filler{background-color:#fff}:host(.nx-slider--negative) .nx-slider__background{background-color:rgba(255,255,255,.35)}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__label,:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__value-label{color:#d9d9d9}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__filler{background-color:#d9d9d9}"]
                    }] }
        ];
        /** @nocollapse */
        NxSliderComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.ChangeDetectorRef }
            ];
        };
        NxSliderComponent.propDecorators = {
            handleElement: [{ type: core.ViewChild, args: ['handle',] }],
            id: [{ type: core.Input, args: ['id',] }],
            tabindex: [{ type: core.Input }],
            min: [{ type: core.Input, args: ['nxMin',] }],
            max: [{ type: core.Input, args: ['nxMax',] }],
            step: [{ type: core.Input, args: ['nxStep',] }],
            label: [{ type: core.Input, args: ['nxLabel',] }],
            disabled: [{ type: core.Input }],
            inverted: [{ type: core.Input, args: ['nxInverted',] }],
            thumbLabel: [{ type: core.Input }],
            negative: [{ type: core.Input, args: ['negative',] }],
            valueChange: [{ type: core.Output, args: ['nxValueChange',] }],
            valueFormatter: [{ type: core.Input, args: ['nxValueFormatter',] }],
            labelMinFormatter: [{ type: core.Input, args: ['nxLabelMinFormatter',] }],
            labelMaxFormatter: [{ type: core.Input, args: ['nxLabelMaxFormatter',] }],
            value: [{ type: core.Input, args: ['nxValue',] }]
        };
        return NxSliderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxSliderModule = /** @class */ (function () {
        function NxSliderModule() {
        }
        NxSliderModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, grid.NxGridModule],
                        declarations: [NxSliderComponent],
                        exports: [NxSliderComponent]
                    },] }
        ];
        return NxSliderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NxSliderModule = NxSliderModule;
    exports.NxSliderComponent = NxSliderComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=allianz-ngx-ndbx-slider.umd.js.map