/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
/** @type {?} */
const DEFAULT_TYPE = 'normal';
export class NxListComponent {
    constructor() {
        /**
         * \@docs-private
         */
        this.negative = false;
        /**
         * \@docs-private
         */
        this.orderedCircle = false;
    }
    /**
     * Sets the visual appearance of the list. You can combine different values:
     *
     * xsmall | small | normal: The listed input values are expanded to the underlying BEM conform styles based
     * on modifiers. Defaults to normal.
     *
     * negative: Display the list with a negative set of styling.
     *
     * ordered-circle: Display the list item numbers in a color filled circle.
     * @param {?} value
     * @return {?}
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        const [type = null] = this._classNames.match(/xsmall|small|normal/) || [DEFAULT_TYPE];
        this.type = (/** @type {?} */ (type));
        this.negative = !!this._classNames.match(/negative/);
        this.orderedCircle = !!this._classNames.match(/ordered-circle/);
    }
    /**
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
}
NxListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ul[nxList], ol[nxList]',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.nx-list--xsmall]': 'type === "xsmall"',
                    '[class.nx-list--small]': 'type === "small"',
                    '[class.nx-list--normal]': 'type === "normal"',
                    '[class.nx-list--negative]': 'negative',
                    '[class.nx-list--ordered-circle]': 'orderedCircle',
                },
                styles: [":host{color:#414141;list-style:none;margin-bottom:32px;padding:0;counter-reset:list}:host(.nx-list--normal){font-size:18px;line-height:24px;letter-spacing:.2px}:host(.nx-list--small){font-size:16px;line-height:24px}:host(.nx-list--xsmall){font-size:14px;line-height:20px;letter-spacing:.2px}:host(.nx-list--xsmall):not(ol)::ng-deep li:not([nxlisticon])::before{top:6px}:host(.nx-list--xsmall) ::ng-deep .nx-list__icon{top:-2px}:host(ol.nx-list--xsmall.nx-list--ordered-circle) ::ng-deep li:not([nxlisticon])::before{top:-2px}:host(ol.nx-list--xsmall.nx-list--ordered-circle) ::ng-deep li:not([nxlisticon])::after{top:-2px}:host(.nx-list--negative){color:#fff}:host(.nx-list--negative) ::ng-deep .nx-list__icon{color:#fff}:host ::ng-deep .nx-list__icon{position:absolute;left:0;top:0;font-size:24px;color:#5a5360}:host ::ng-deep li{margin-bottom:16px;padding-left:36px;position:relative}:host(ul) ::ng-deep>li:not([nxlisticon]):before{background-color:#5a5360;border-radius:50%;content:\"\";display:inline-block;height:8px;width:8px;margin-right:16px;position:absolute;left:8px;top:8px}:host(ol) ::ng-deep>li:not([nxlisticon]):before{counter-increment:list;content:counter(list);position:absolute;font-size:inherit;font-weight:700;display:inline-block;width:24px;text-align:center;left:3px}:host ::ng-deep li>::ng-deep ol,:host ::ng-deep li>::ng-deep ul{margin-bottom:16px;margin-top:16px}:host(ol.nx-list--ordered-circle) ::ng-deep>li:not([nxlisticon]):before{width:24px;font-size:16px;line-height:24px;color:#fff;font-weight:400;left:0;z-index:2}:host(ol.nx-list--ordered-circle) ::ng-deep>li:not([nxlisticon]):after{border-radius:50%;width:24px;height:24px;background-color:#5a5360;left:0;top:0;content:'';position:absolute}:host(ol.nx-list--ordered-circle.nx-list--negative)::ng-deep>li:not([nxlisticon]):after{background-color:#fff}:host(ol.nx-list--ordered-circle.nx-list--negative)::ng-deep>li:not([nxlisticon]):before{color:#5a5360}:host(ul.nx-list--negative) ::ng-deep>li:not([nxlisticon]):before{background-color:#fff}"]
            }] }
];
NxListComponent.propDecorators = {
    classNames: [{ type: Input, args: ['nxList',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxListComponent.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxListComponent.prototype.type;
    /**
     * \@docs-private
     * @type {?}
     */
    NxListComponent.prototype.negative;
    /**
     * \@docs-private
     * @type {?}
     */
    NxListComponent.prototype.orderedCircle;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImxpc3QvbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztNQUVwRSxZQUFZLEdBQUcsUUFBUTtBQW9CN0IsTUFBTSxPQUFPLGVBQWU7SUFmNUI7Ozs7UUFzQkUsYUFBUSxHQUFZLEtBQUssQ0FBQzs7OztRQUcxQixrQkFBYSxHQUFZLEtBQUssQ0FBQztJQThCakMsQ0FBQzs7Ozs7Ozs7Ozs7OztJQWxCQyxJQUNJLFVBQVUsQ0FBQyxLQUFhO1FBQzFCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7WUFDOUIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Y0FFbkIsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNyRixJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFBLElBQUksRUFBTyxDQUFDO1FBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbEUsQ0FBQzs7OztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7WUF0REYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFFL0MsSUFBSSxFQUFFO29CQUNKLHlCQUF5QixFQUFHLG1CQUFtQjtvQkFDL0Msd0JBQXdCLEVBQUcsa0JBQWtCO29CQUM3Qyx5QkFBeUIsRUFBRyxtQkFBbUI7b0JBQy9DLDJCQUEyQixFQUFHLFVBQVU7b0JBQ3hDLGlDQUFpQyxFQUFHLGVBQWU7aUJBQ3BEOzthQUNGOzs7eUJBd0JFLEtBQUssU0FBQyxRQUFROzs7Ozs7O0lBckJmLHNDQUFvQjs7Ozs7SUFHcEIsK0JBQWlCOzs7OztJQUdqQixtQ0FBMEI7Ozs7O0lBRzFCLHdDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IERFRkFVTFRfVFlQRSA9ICdub3JtYWwnO1xuXG4vKiogU2l6ZSBvZiB0aGUgbGlzdCAqL1xuZXhwb3J0IHR5cGUgTnhMaXN0U2l6ZSA9ICd4c21hbGwnIHwgJ3NtYWxsJyB8ICdub3JtYWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3VsW254TGlzdF0sIG9sW254TGlzdF0nLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJ2xpc3QuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubngtbGlzdC0teHNtYWxsXScgOiAndHlwZSA9PT0gXCJ4c21hbGxcIicsXG4gICAgJ1tjbGFzcy5ueC1saXN0LS1zbWFsbF0nIDogJ3R5cGUgPT09IFwic21hbGxcIicsXG4gICAgJ1tjbGFzcy5ueC1saXN0LS1ub3JtYWxdJyA6ICd0eXBlID09PSBcIm5vcm1hbFwiJyxcbiAgICAnW2NsYXNzLm54LWxpc3QtLW5lZ2F0aXZlXScgOiAnbmVnYXRpdmUnLFxuICAgICdbY2xhc3MubngtbGlzdC0tb3JkZXJlZC1jaXJjbGVdJyA6ICdvcmRlcmVkQ2lyY2xlJyxcbiAgfVxufSlcblxuZXhwb3J0IGNsYXNzIE54TGlzdENvbXBvbmVudCB7XG4gIHByaXZhdGUgX2NsYXNzTmFtZXM7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdHlwZTogTnhMaXN0U2l6ZTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBuZWdhdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIG9yZGVyZWRDaXJjbGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmlzdWFsIGFwcGVhcmFuY2Ugb2YgdGhlIGxpc3QuIFlvdSBjYW4gY29tYmluZSBkaWZmZXJlbnQgdmFsdWVzOlxuICAgKlxuICAgKiB4c21hbGwgfCBzbWFsbCB8IG5vcm1hbDogVGhlIGxpc3RlZCBpbnB1dCB2YWx1ZXMgYXJlIGV4cGFuZGVkIHRvIHRoZSB1bmRlcmx5aW5nIEJFTSBjb25mb3JtIHN0eWxlcyBiYXNlZFxuICAgKiBvbiBtb2RpZmllcnMuIERlZmF1bHRzIHRvIG5vcm1hbC5cbiAgICpcbiAgICogbmVnYXRpdmU6IERpc3BsYXkgdGhlIGxpc3Qgd2l0aCBhIG5lZ2F0aXZlIHNldCBvZiBzdHlsaW5nLlxuICAgKlxuICAgKiBvcmRlcmVkLWNpcmNsZTogRGlzcGxheSB0aGUgbGlzdCBpdGVtIG51bWJlcnMgaW4gYSBjb2xvciBmaWxsZWQgY2lyY2xlLlxuICAgKi9cbiAgQElucHV0KCdueExpc3QnKVxuICBzZXQgY2xhc3NOYW1lcyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX2NsYXNzTmFtZXMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY2xhc3NOYW1lcyA9IHZhbHVlO1xuXG4gICAgY29uc3QgW3R5cGUgPSBudWxsXSA9IHRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL3hzbWFsbHxzbWFsbHxub3JtYWwvKSB8fCBbREVGQVVMVF9UWVBFXTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlIGFzIGFueTtcblxuICAgIHRoaXMubmVnYXRpdmUgPSAhIXRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL25lZ2F0aXZlLyk7XG4gICAgdGhpcy5vcmRlcmVkQ2lyY2xlID0gISF0aGlzLl9jbGFzc05hbWVzLm1hdGNoKC9vcmRlcmVkLWNpcmNsZS8pO1xuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY2xhc3NOYW1lcztcbiAgfVxufVxuIl19