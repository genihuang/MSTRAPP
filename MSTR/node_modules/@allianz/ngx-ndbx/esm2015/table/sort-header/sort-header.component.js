/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Optional, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NxSortDirective } from './sort.directive';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { NxSortHeaderIntl } from './sort-header-intl';
export class NxSortHeaderComponent {
    /**
     * @param {?} _sort
     * @param {?} _intl
     * @param {?} _changeDetectorRef
     */
    constructor(_sort, _intl, _changeDetectorRef) {
        this._sort = _sort;
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._intlSubscription = this._intl.changes.subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
    }
    /**
     * Sets the key of this sort header.
     * @param {?} value
     * @return {?}
     */
    set key(value) {
        if (this._key !== value) {
            this._key = value;
        }
    }
    /**
     * @return {?}
     */
    get key() {
        return this._key;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._parentChangeSubscription = this._sort._stateChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this._changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._parentChangeSubscription) {
            this._parentChangeSubscription.unsubscribe();
        }
        this._intlSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    _handleClick() {
        this._sort.sort(this._key);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _onKeydown($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this._sort.sort(this._key);
            // prevent page from scrolling down
            if ($event.keyCode === SPACE) {
                $event.preventDefault();
            }
        }
    }
    /**
     * @return {?}
     */
    _isSortedAscending() {
        return (this._sort.active === this._key && this._sort.direction === 'asc');
    }
    /**
     * @return {?}
     */
    _isSortedDescending() {
        return (this._sort.active === this._key && this._sort.direction === 'desc');
    }
    /**
     * @return {?}
     */
    _getAriaLabel() {
        if (this._sort.active === this._key && this._sort.direction === 'asc') {
            return `${this._key} ${this._intl.sortDescendingAriaLabel}`;
        }
        return `${this._key} ${this._intl.sortAscendingAriaLabel}`;
    }
}
NxSortHeaderComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'th[nxSortHeaderCell]',
                exportAs: 'nxSortHeaderComponent',
                template: "<div class=\"nx-sort-header__focus-container\">\n  <div class=\"nx-sort-header__icons-container\">\n    <nx-icon name=\"chevron-up-small\" class=\"nx-sort-header__icon-up\"\n            [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\">\n    </nx-icon>\n    <nx-icon name=\"chevron-down-small\" class=\"nx-sort-header__icon-down\"\n            [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\">\n    </nx-icon>\n  </div>\n  <ng-content></ng-content>\n</div>\n",
                host: {
                    '(click)': '_handleClick()',
                    '(keydown)': '_onKeydown($event)',
                    '[tabindex]': '0',
                    'role': 'button',
                    '[attr.aria-label]': '_getAriaLabel()'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{cursor:pointer}.nx-sort-header__icons-container{display:inline-block;margin-right:8px;vertical-align:bottom;width:24px;position:relative;height:24px}.nx-sort-header__icons-container nx-icon{font-size:20px;position:absolute;font-weight:600;width:24px}.nx-sort-header__icons-container .nx-sort-header__icon-up{top:-3px}.nx-sort-header__icons-container .nx-sort-header__icon-down{top:5px}.nx-sort-header__icons-container .nx-sort-header__hidden-icon{visibility:hidden}:host-context([data-whatinput=keyboard]):focus .nx-sort-header__focus-container{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}:host:focus{outline:0}"]
            }] }
];
/** @nocollapse */
NxSortHeaderComponent.ctorParameters = () => [
    { type: NxSortDirective, decorators: [{ type: Optional }] },
    { type: NxSortHeaderIntl },
    { type: ChangeDetectorRef }
];
NxSortHeaderComponent.propDecorators = {
    key: [{ type: Input, args: ['nxSortHeaderCell',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._parentChangeSubscription;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._intlSubscription;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._key;
    /** @type {?} */
    NxSortHeaderComponent.prototype._sort;
    /** @type {?} */
    NxSortHeaderComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJzb3J0LWhlYWRlci9zb3J0LWhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBVSxpQkFBaUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMxSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQWtCdEQsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7O0lBaUJoQyxZQUErQixLQUFzQixFQUM1QyxLQUF1QixFQUN0QixrQkFBcUM7UUFGaEIsVUFBSyxHQUFMLEtBQUssQ0FBaUI7UUFDNUMsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUU3QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxFQUFDLENBQUM7SUFDdEcsQ0FBQzs7Ozs7O0lBZkQsSUFDSSxHQUFHLENBQUMsS0FBYTtRQUNuQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDOzs7O0lBU0QsUUFBUTtRQUNOLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDdkUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNsQyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDOUM7UUFDRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsTUFBTTtRQUNmLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFM0IsbUNBQW1DO1lBQ25DLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7Z0JBQzVCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN6QjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsS0FBSyxLQUFLLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7O0lBRUQsbUJBQW1CO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0lBQzlFLENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1gsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtZQUNyRSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLENBQUM7U0FDN0Q7UUFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDN0QsQ0FBQzs7O1lBaEZGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsOGVBQXlDO2dCQUV6QyxJQUFJLEVBQUU7b0JBQ0osU0FBUyxFQUFFLGdCQUFnQjtvQkFDM0IsV0FBVyxFQUFFLG9CQUFvQjtvQkFDakMsWUFBWSxFQUFFLEdBQUc7b0JBQ2pCLE1BQU0sRUFBRSxRQUFRO29CQUNoQixtQkFBbUIsRUFBRSxpQkFBaUI7aUJBQ3ZDO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7OztZQXBCUSxlQUFlLHVCQXNDVCxRQUFRO1lBbkNkLGdCQUFnQjtZQUo2QyxpQkFBaUI7OztrQkE2QnBGLEtBQUssU0FBQyxrQkFBa0I7Ozs7Ozs7SUFMekIsMERBQWdEOzs7OztJQUNoRCxrREFBd0M7Ozs7O0lBQ3hDLHFDQUFxQjs7SUFhVCxzQ0FBeUM7O0lBQ25ELHNDQUE4Qjs7Ozs7SUFDOUIsbURBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3B0aW9uYWwsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBPbkluaXQsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE54U29ydERpcmVjdGl2ZSB9IGZyb20gJy4vc29ydC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBFTlRFUiwgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgTnhTb3J0SGVhZGVySW50bCB9IGZyb20gJy4vc29ydC1oZWFkZXItaW50bCc7XG5cblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICd0aFtueFNvcnRIZWFkZXJDZWxsXScsXG4gIGV4cG9ydEFzOiAnbnhTb3J0SGVhZGVyQ29tcG9uZW50JyxcbiAgdGVtcGxhdGVVcmw6ICdzb3J0LWhlYWRlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydzb3J0LWhlYWRlci5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJyhjbGljayknOiAnX2hhbmRsZUNsaWNrKCknLFxuICAgICcoa2V5ZG93biknOiAnX29uS2V5ZG93bigkZXZlbnQpJyxcbiAgICAnW3RhYmluZGV4XSc6ICcwJyxcbiAgICAncm9sZSc6ICdidXR0b24nLFxuICAgICdbYXR0ci5hcmlhLWxhYmVsXSc6ICdfZ2V0QXJpYUxhYmVsKCknXG4gIH0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE54U29ydEhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIF9wYXJlbnRDaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBfaW50bFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIF9rZXk6IHN0cmluZztcblxuICAvKiogU2V0cyB0aGUga2V5IG9mIHRoaXMgc29ydCBoZWFkZXIuICovXG4gIEBJbnB1dCgnbnhTb3J0SGVhZGVyQ2VsbCcpXG4gIHNldCBrZXkodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9rZXkgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgZ2V0IGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9rZXk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwdWJsaWMgX3NvcnQ6IE54U29ydERpcmVjdGl2ZSxcbiAgICBwdWJsaWMgX2ludGw6IE54U29ydEhlYWRlckludGwsXG4gICAgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmXG4gICkge1xuICAgIHRoaXMuX2ludGxTdWJzY3JpcHRpb24gPSB0aGlzLl9pbnRsLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX3BhcmVudENoYW5nZVN1YnNjcmlwdGlvbiA9IHRoaXMuX3NvcnQuX3N0YXRlQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5fcGFyZW50Q2hhbmdlU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLl9wYXJlbnRDaGFuZ2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgdGhpcy5faW50bFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgX2hhbmRsZUNsaWNrKCkge1xuICAgIHRoaXMuX3NvcnQuc29ydCh0aGlzLl9rZXkpO1xuICB9XG5cbiAgX29uS2V5ZG93bigkZXZlbnQpIHtcbiAgICBpZiAoJGV2ZW50ICYmICgkZXZlbnQua2V5Q29kZSA9PT0gRU5URVIgfHwgJGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSkge1xuICAgICAgdGhpcy5fc29ydC5zb3J0KHRoaXMuX2tleSk7XG5cbiAgICAgIC8vIHByZXZlbnQgcGFnZSBmcm9tIHNjcm9sbGluZyBkb3duXG4gICAgICBpZiAoJGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSB7XG4gICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9pc1NvcnRlZEFzY2VuZGluZygpIHtcbiAgICByZXR1cm4gKHRoaXMuX3NvcnQuYWN0aXZlID09PSB0aGlzLl9rZXkgJiYgdGhpcy5fc29ydC5kaXJlY3Rpb24gPT09ICdhc2MnKTtcbiAgfVxuXG4gIF9pc1NvcnRlZERlc2NlbmRpbmcoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9zb3J0LmFjdGl2ZSA9PT0gdGhpcy5fa2V5ICYmIHRoaXMuX3NvcnQuZGlyZWN0aW9uID09PSAnZGVzYycpO1xuICB9XG5cbiAgX2dldEFyaWFMYWJlbCgpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLl9zb3J0LmFjdGl2ZSA9PT0gdGhpcy5fa2V5ICYmIHRoaXMuX3NvcnQuZGlyZWN0aW9uID09PSAnYXNjJykge1xuICAgICAgcmV0dXJuIGAke3RoaXMuX2tleX0gJHt0aGlzLl9pbnRsLnNvcnREZXNjZW5kaW5nQXJpYUxhYmVsfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHt0aGlzLl9rZXl9ICR7dGhpcy5faW50bC5zb3J0QXNjZW5kaW5nQXJpYUxhYmVsfWA7XG4gIH1cbn1cbiJdfQ==