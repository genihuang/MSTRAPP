/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, ChangeDetectorRef } from '@angular/core';
import { NxExpandableTableRowComponent } from './expandable-table-row.component';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * This is an expandable table cell.
 * Only works in conjunction with the `[nxExpandableTableRow]` component.
 */
export class NxExpandableTableCellComponent {
    /**
     * @param {?} _row
     * @param {?} _changeDetectorRef
     */
    constructor(_row, _changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._destroyed = new Subject();
        this._open = false;
        _row.expanded.pipe(takeUntil(this._destroyed))
            .subscribe((/**
         * @param {?} open
         * @return {?}
         */
        open => {
            this._open = open;
            this._changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxExpandableTableCellComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'td[nxExpandableTableCell]',
                template: "<div [@openClose]=\"_open ? 'open' : 'closed'\" class=\"nx-expandable-table-cell__content\">\n  <div class=\"nx-expandable-table-cell__wrapper\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                host: {
                    'class': 'nx-expandable-table-cell'
                },
                animations: [
                    trigger('openClose', [
                        state('open', style({
                            height: '*'
                        })),
                        state('closed, void', style({
                            height: '0'
                        })),
                        transition('closed <=> open, void => closed', [
                            animate('225ms cubic-bezier(0.4,0.0,0.2,1)')
                        ])
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NxExpandableTableCellComponent.ctorParameters = () => [
    { type: NxExpandableTableRowComponent },
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableCellComponent.prototype._destroyed;
    /** @type {?} */
    NxExpandableTableCellComponent.prototype._open;
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableCellComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS1jZWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3RhYmxlLyIsInNvdXJjZXMiOlsiZXhwYW5kYWJsZS9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDakYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBNEIzQyxNQUFNLE9BQU8sOEJBQThCOzs7OztJQUt6QyxZQUNJLElBQW1DLEVBQzNCLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBTnpDLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRW5DLFVBQUssR0FBWSxLQUFLLENBQUM7UUFNckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUMzQyxTQUFTOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7O1lBekNGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsZ05BQXFEO2dCQUNyRCxJQUFJLEVBQUU7b0JBQ0osT0FBTyxFQUFFLDBCQUEwQjtpQkFDcEM7Z0JBQ0QsVUFBVSxFQUFFO29CQUNWLE9BQU8sQ0FBQyxXQUFXLEVBQUU7d0JBQ25CLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDOzRCQUNsQixNQUFNLEVBQUUsR0FBRzt5QkFDWixDQUFDLENBQUM7d0JBQ0gsS0FBSyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUM7NEJBQzFCLE1BQU0sRUFBRSxHQUFHO3lCQUNaLENBQUMsQ0FBQzt3QkFDSCxVQUFVLENBQUMsaUNBQWlDLEVBQUU7NEJBQzVDLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQzt5QkFDN0MsQ0FBQztxQkFDSCxDQUFDO2lCQUNIO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O1lBN0JRLDZCQUE2QjtZQURPLGlCQUFpQjs7Ozs7OztJQWdDNUQsb0RBQW1DOztJQUVuQywrQ0FBdUI7Ozs7O0lBSW5CLDREQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogVGhpcyBpcyBhbiBleHBhbmRhYmxlIHRhYmxlIGNlbGwuXG4gKiBPbmx5IHdvcmtzIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGBbbnhFeHBhbmRhYmxlVGFibGVSb3ddYCBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndGRbbnhFeHBhbmRhYmxlVGFibGVDZWxsXScsXG4gIHRlbXBsYXRlVXJsOiAnLi9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgJ2NsYXNzJzogJ254LWV4cGFuZGFibGUtdGFibGUtY2VsbCdcbiAgfSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ29wZW5DbG9zZScsIFtcbiAgICAgIHN0YXRlKCdvcGVuJywgc3R5bGUoe1xuICAgICAgICBoZWlnaHQ6ICcqJ1xuICAgICAgfSkpLFxuICAgICAgc3RhdGUoJ2Nsb3NlZCwgdm9pZCcsIHN0eWxlKHtcbiAgICAgICAgaGVpZ2h0OiAnMCdcbiAgICAgIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ2Nsb3NlZCA8PT4gb3Blbiwgdm9pZCA9PiBjbG9zZWQnLCBbXG4gICAgICAgIGFuaW1hdGUoJzIyNW1zIGN1YmljLWJlemllcigwLjQsMC4wLDAuMiwxKScpXG4gICAgICBdKVxuICAgIF0pXG4gIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE54RXhwYW5kYWJsZVRhYmxlQ2VsbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX2Rlc3Ryb3llZCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgX29wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIF9yb3c6IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50LFxuICAgICAgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG5cbiAgICBfcm93LmV4cGFuZGVkLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpXG4gICAgICAuc3Vic2NyaWJlKG9wZW4gPT4ge1xuICAgICAgICB0aGlzLl9vcGVuID0gb3BlbjtcbiAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2Rlc3Ryb3llZC5uZXh0KCk7XG4gICAgdGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==