/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/**
 * This is an expandable table row.
 * It can collapse its height to hide the content.
 * Requires the table cells to have the `[nxExpandableTableCell]` component.
 */
export class NxExpandableTableRowComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this.expanded = new BehaviorSubject(false);
    }
    /**
     * Toggles the expansion of this row.
     * @return {?}
     */
    toggle() {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    }
    /**
     * Expands this row.
     * @return {?}
     */
    expand() {
        if (!this.expanded.value) {
            this.expanded.next(true);
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Closes this row.
     * @return {?}
     */
    close() {
        if (this.expanded.value) {
            this.expanded.next(false);
            this._changeDetectorRef.markForCheck();
        }
    }
}
NxExpandableTableRowComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'tr[nxExpandableTableRow]',
                host: {
                    'class': 'nx-expandable-table-row'
                },
                template: `<ng-content></ng-content>`,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NxExpandableTableRowComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    NxExpandableTableRowComponent.prototype.expanded;
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableRowComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS1yb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJleHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFpQnZDLE1BQU0sT0FBTyw2QkFBNkI7Ozs7SUFHeEMsWUFBb0Isa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFGekQsYUFBUSxHQUE2QixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVKLENBQUM7Ozs7O0lBSzdELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7Ozs7O0lBS0QsTUFBTTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDOzs7OztJQUtELEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUN4QztJQUNILENBQUM7OztZQTNDRixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLElBQUksRUFBRTtvQkFDTCxPQUFPLEVBQUUseUJBQXlCO2lCQUNsQztnQkFDRCxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQWpCNEMsaUJBQWlCOzs7O0lBbUI1RCxpREFBZ0U7Ozs7O0lBRXBELDJEQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE54RXhwYW5kYWJsZSB9IGZyb20gJy4vdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXhwYW5kYWJsZSB0YWJsZSByb3cuXG4gKiBJdCBjYW4gY29sbGFwc2UgaXRzIGhlaWdodCB0byBoaWRlIHRoZSBjb250ZW50LlxuICogUmVxdWlyZXMgdGhlIHRhYmxlIGNlbGxzIHRvIGhhdmUgdGhlIGBbbnhFeHBhbmRhYmxlVGFibGVDZWxsXWAgY29tcG9uZW50LlxuICovXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3RyW254RXhwYW5kYWJsZVRhYmxlUm93XScsXG4gIGhvc3Q6IHtcbiAgICdjbGFzcyc6ICdueC1leHBhbmRhYmxlLXRhYmxlLXJvdydcbiAgfSxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQgaW1wbGVtZW50cyBOeEV4cGFuZGFibGUge1xuICBleHBhbmRlZDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBleHBhbnNpb24gb2YgdGhpcyByb3cuXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuZXhwYW5kZWQudmFsdWUpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5leHBhbmQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyB0aGlzIHJvdy5cbiAgICovXG4gIGV4cGFuZCgpIHtcbiAgICBpZiAoIXRoaXMuZXhwYW5kZWQudmFsdWUpIHtcbiAgICAgIHRoaXMuZXhwYW5kZWQubmV4dCh0cnVlKTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhpcyByb3cuXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAodGhpcy5leHBhbmRlZC52YWx1ZSkge1xuICAgICAgdGhpcy5leHBhbmRlZC5uZXh0KGZhbHNlKTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxufVxuIl19