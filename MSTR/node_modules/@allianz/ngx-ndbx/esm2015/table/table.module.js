/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxTableCellComponent } from './table-cell.component';
import { NxHeaderCellDirective } from './header-cell.directive';
import { NxTableComponent } from './table.component';
import { NxTableRowComponent } from './table-row.component';
import { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';
import { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';
import { NxToggleButtonComponent } from './expandable/toggle-button.component';
import { NxExpandableTableDirective } from './expandable/expandable-table.directive';
import { NxSortHeaderComponent } from './sort-header/sort-header.component';
import { NxSortDirective } from './sort-header/sort.directive';
import { NxSortHeaderIntl } from './sort-header/sort-header-intl';
/** @type {?} */
const EXPORTED_DECLARED_ELEMENTS = [
    NxHeaderCellDirective,
    NxTableComponent,
    NxTableCellComponent,
    NxTableComponent,
    NxTableRowComponent,
    NxToggleButtonComponent,
    NxExpandableTableDirective,
    NxExpandableTableRowComponent,
    NxExpandableTableCellComponent,
    NxSortHeaderComponent,
    NxSortDirective
];
export class NxTableModule {
}
NxTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: EXPORTED_DECLARED_ELEMENTS,
                exports: EXPORTED_DECLARED_ELEMENTS,
                imports: [
                    CommonModule,
                    NxIconModule
                ],
                providers: [NxSortHeaderIntl],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJ0YWJsZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM5RixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUM1RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O01BRTVELDBCQUEwQixHQUFHO0lBQ2pDLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLDBCQUEwQjtJQUMxQiw2QkFBNkI7SUFDN0IsOEJBQThCO0lBQzlCLHFCQUFxQjtJQUNyQixlQUFlO0NBQ2hCO0FBVUQsTUFBTSxPQUFPLGFBQWE7OztZQVR6QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLDBCQUEwQjtnQkFDeEMsT0FBTyxFQUFFLDBCQUEwQjtnQkFDbkMsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osWUFBWTtpQkFDYjtnQkFDRCxTQUFTLEVBQUUsQ0FBRSxnQkFBZ0IsQ0FBRTthQUNoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhJY29uTW9kdWxlIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvaWNvbic7XG5pbXBvcnQgeyBOeFRhYmxlQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vdGFibGUtY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnhIZWFkZXJDZWxsRGlyZWN0aXZlIH0gZnJvbSAnLi9oZWFkZXItY2VsbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnhUYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IE54VGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuL3RhYmxlLXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnhFeHBhbmRhYmxlVGFibGVDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuL2V4cGFuZGFibGUvZXhwYW5kYWJsZS10YWJsZS1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IE54VG9nZ2xlQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlL3RvZ2dsZS1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlRGlyZWN0aXZlIH0gZnJvbSAnLi9leHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54U29ydEhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vc29ydC1oZWFkZXIvc29ydC1oZWFkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE54U29ydERpcmVjdGl2ZSB9IGZyb20gJy4vc29ydC1oZWFkZXIvc29ydC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnhTb3J0SGVhZGVySW50bCB9IGZyb20gJy4vc29ydC1oZWFkZXIvc29ydC1oZWFkZXItaW50bCc7XG5cbmNvbnN0IEVYUE9SVEVEX0RFQ0xBUkVEX0VMRU1FTlRTID0gW1xuICBOeEhlYWRlckNlbGxEaXJlY3RpdmUsXG4gIE54VGFibGVDb21wb25lbnQsXG4gIE54VGFibGVDZWxsQ29tcG9uZW50LFxuICBOeFRhYmxlQ29tcG9uZW50LFxuICBOeFRhYmxlUm93Q29tcG9uZW50LFxuICBOeFRvZ2dsZUJ1dHRvbkNvbXBvbmVudCxcbiAgTnhFeHBhbmRhYmxlVGFibGVEaXJlY3RpdmUsXG4gIE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50LFxuICBOeEV4cGFuZGFibGVUYWJsZUNlbGxDb21wb25lbnQsXG4gIE54U29ydEhlYWRlckNvbXBvbmVudCxcbiAgTnhTb3J0RGlyZWN0aXZlXG5dO1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBFWFBPUlRFRF9ERUNMQVJFRF9FTEVNRU5UUyxcbiAgZXhwb3J0czogRVhQT1JURURfREVDTEFSRURfRUxFTUVOVFMsXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgTnhJY29uTW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogWyBOeFNvcnRIZWFkZXJJbnRsIF0sXG59KVxuZXhwb3J0IGNsYXNzIE54VGFibGVNb2R1bGUgeyB9XG4iXX0=