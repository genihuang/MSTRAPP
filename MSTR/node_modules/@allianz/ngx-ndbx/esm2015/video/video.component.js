/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
// note that this currently only supports youtube videos
export class NxVideoComponent {
    /**
     * @param {?} sanitizer
     * @param {?} _changeDetectorRef
     */
    constructor(sanitizer, _changeDetectorRef) {
        this.sanitizer = sanitizer;
        this._changeDetectorRef = _changeDetectorRef;
        this._videoId = null;
        this._altText = '';
        this._playButtonAriaLabel = '';
        this._previewImageSrc = null;
        this._showPlayerControls = true;
        this._allowFullScreen = true;
        this._interfaceLanguage = null;
        /**
         * \@docs-private
         */
        this.showPlayer = false;
    }
    /**
     * Sets the id of the YouTube video.
     * @param {?} value
     * @return {?}
     */
    set videoId(value) {
        if (this._videoId !== value) {
            this._videoId = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get videoId() {
        return this._videoId;
    }
    /**
     * Sets the value of the alt attribute for the preview image.
     * @param {?} value
     * @return {?}
     */
    set altText(value) {
        if (this._altText !== value) {
            this._altText = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get altText() {
        return this._altText;
    }
    /**
     * Sets the value of the aria-label attribute on the play button (Default: Play Video).
     * @param {?} value
     * @return {?}
     */
    set nxPlayButtonAriaLabel(value) {
        if (this._playButtonAriaLabel !== value) {
            this._playButtonAriaLabel = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get nxPlayButtonAriaLabel() {
        return this._playButtonAriaLabel;
    }
    /**
     * Sets the preview image. If this is not provided, an image from YouTube will be used as default.
     * @param {?} value
     * @return {?}
     */
    set previewImageSrc(value) {
        if (this._previewImageSrc !== value) {
            this._previewImageSrc = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get previewImageSrc() {
        return this._previewImageSrc;
    }
    /**
     * Sets player controls. If set to false, player controls are not available.
     * @param {?} value
     * @return {?}
     */
    set showPlayerControls(value) {
        this._showPlayerControls = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get showPlayerControls() {
        return this._showPlayerControls;
    }
    /**
     * Sets fullscreen option. If set to false, fullscreen option is not available.
     * @param {?} value
     * @return {?}
     */
    set allowFullScreen(value) {
        this._allowFullScreen = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get allowFullScreen() {
        return this._allowFullScreen;
    }
    /**
     * Sets interface language. Can be used to override the interface language determined by YouTube.
     * @param {?} value
     * @return {?}
     */
    set interfaceLanguage(value) {
        if (this._interfaceLanguage !== value) {
            this._interfaceLanguage = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get interfaceLanguage() {
        return this._interfaceLanguage;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    select() {
        this.showPlayer = true;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Returns the safe resource URL of the YouTube video, given video id.
     * @return {?}
     */
    get videoSrc() {
        /** @type {?} */
        let url = `https://www.youtube.com/embed/${this.videoId}?rel=0&showinfo=0&autoplay=1`;
        if (!this.showPlayerControls) {
            url += '&controls=0';
        }
        if (!this.allowFullScreen) {
            url += '&fs=0';
        }
        if (this.interfaceLanguage) {
            url += `&hl=${this.interfaceLanguage}`;
        }
        return this.sanitizer.bypassSecurityTrustResourceUrl(url);
    }
    /**
     * Returns the preview image source URL, given video id.
     * @return {?}
     */
    get imgSrc() {
        return this.previewImageSrc ? this.previewImageSrc : `https://img.youtube.com/vi/${this.videoId}/sddefault.jpg`;
    }
    /**
     * Returns the labels for the control buttons.
     * @return {?}
     */
    get playButtonAriaLabel() {
        /** @type {?} */
        const defaultLabel = this.altText ? `${this.altText} - Play Video` : 'Play Video';
        return this.nxPlayButtonAriaLabel ? this.nxPlayButtonAriaLabel : defaultLabel;
    }
}
NxVideoComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-video',
                template: "<div class=\"nx-video\">\n  <div class=\"nx-video__iframe\">\n\n    <div *ngIf=\"!showPlayer\">\n\n      <button class=\"nx-video__play-button\"\n              (click)=\"select()\"\n              [attr.aria-label]=\"playButtonAriaLabel\"\n              (keydown.enter)=\"select()\">\n      </button>\n      <img [src]=\"imgSrc\" class=\"nx-video__thumbnail\"\n           [alt]=\"altText\"\n           (click)=\"select()\"\n           (keydown.enter)=\"select()\">\n\n    </div>\n    <div *ngIf=\"videoId && showPlayer\">\n      <iframe title=\"video\" class=\"nx-video__iframe\" [attr.allowfullscreen]=\"allowFullScreen\" [src]=\"videoSrc\"></iframe>\n    </div>\n\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".nx-video{position:relative;padding-bottom:56.25%;overflow:hidden;width:100%;height:auto}.nx-video__iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.nx-video__thumbnail{position:absolute;cursor:pointer;width:100%;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);opacity:.7}.nx-video__play-button{border:none;background:url(play-button.svg) center no-repeat;cursor:pointer;position:absolute;width:88px;height:56px;z-index:1}.nx-video__play-button::-moz-focus-inner{border:0}.nx-video__play-button,.nx-video__play-button:before{top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}"]
            }] }
];
/** @nocollapse */
NxVideoComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ChangeDetectorRef }
];
NxVideoComponent.propDecorators = {
    videoId: [{ type: Input, args: ['nxVideoId',] }],
    altText: [{ type: Input, args: ['nxAltText',] }],
    nxPlayButtonAriaLabel: [{ type: Input, args: ['nxPlayButtonAriaLabel',] }],
    previewImageSrc: [{ type: Input, args: ['nxPreviewImageSrc',] }],
    showPlayerControls: [{ type: Input, args: ['nxShowPlayerControls',] }],
    allowFullScreen: [{ type: Input, args: ['nxAllowFullScreen',] }],
    interfaceLanguage: [{ type: Input, args: ['nxInterfaceLanguage',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._videoId;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._altText;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._playButtonAriaLabel;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._previewImageSrc;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._showPlayerControls;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._allowFullScreen;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._interfaceLanguage;
    /**
     * \@docs-private
     * @type {?}
     */
    NxVideoComponent.prototype.showPlayer;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    NxVideoComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,