/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { NxModalService } from './modal.service';
export class NxOpenModalOnClickDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} modalService
     */
    constructor(templateRef, viewContainer, modalService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.modalService = modalService;
        /**
         * \@docs-private
         */
        this.clickHandler = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.viewContainer.clear();
            // instantiate the template onto which this directive is applied
            /** @type {?} */
            const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
            // we need to mark the viewRef explicitly if the modal is used inside another
            // component that is using onPush change detection
            viewRef.markForCheck();
            event.preventDefault();
            event.stopPropagation();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.modalService.close$.subscribe((/**
         * @return {?}
         */
        () => this.viewContainer.clear()));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            if (el.removeEventListener) {
                el.removeEventListener('click', this.clickHandler);
            }
        }));
        this.subscription.unsubscribe();
    }
    /**
     * One or multiple template reference variables pointing to elements
     * which should trigger opening the modal on click.
     *
     * Value: A single template reference variable or an array of template reference variables.
     * @param {?} elements
     * @return {?}
     */
    set nxOpenModalOnClick(elements) {
        // also support the case where only one element is passed, check for the length property to be sure elements is an array
        if (elements.length) {
            this.elements = elements;
        }
        else {
            this.elements = [elements];
        }
        // add a click event listener to any element passed as property to this directive
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            if (el.addEventListener) {
                el.addEventListener('click', this.clickHandler);
                // workaround until refactoring: if the reference is a component
                // reference the component has to implement a getter to its own elementRef
            }
            else if (el.elementRef) {
                el.elementRef.nativeElement.addEventListener('click', this.clickHandler);
            }
            else {
                console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);
            }
        }));
    }
}
NxOpenModalOnClickDirective.decorators = [
    { type: Directive, args: [{ selector: '[nxOpenModalOnClick]' },] }
];
/** @nocollapse */
NxOpenModalOnClickDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: NxModalService }
];
NxOpenModalOnClickDirective.propDecorators = {
    nxOpenModalOnClick: [{ type: Input }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.elements;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.subscription;
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.clickHandler;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3Blbi1vbi1jbGljay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbIm1vZGFsL21vZGFsLW9wZW4tb24tY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25HLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUlqRCxNQUFNLE9BQU8sMkJBQTJCOzs7Ozs7SUFPdEMsWUFBb0IsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsWUFBNEI7UUFGNUIsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7Ozs7UUFrQmhELGlCQUFZOzs7O1FBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDOzs7a0JBRXJCLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDdkUsNkVBQTZFO1lBQzdFLGtEQUFrRDtZQUNsRCxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdkIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMxQixDQUFDLEVBQUE7SUExQkQsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEVBQUMsQ0FBQztJQUMzRixDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTzs7OztRQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3pCLElBQUksRUFBRSxDQUFDLG1CQUFtQixFQUFFO2dCQUMxQixFQUFFLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNwRDtRQUNILENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7Ozs7Ozs7SUFvQkQsSUFDSSxrQkFBa0IsQ0FBQyxRQUFRO1FBQzdCLHdIQUF3SDtRQUN4SCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDMUI7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBRSxRQUFRLENBQUUsQ0FBQztTQUM5QjtRQUNELGlGQUFpRjtRQUNqRixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU87Ozs7UUFBQyxFQUFFLENBQUMsRUFBRTtZQUN6QixJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDdkIsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ2xELGdFQUFnRTtnQkFDaEUsMEVBQTBFO2FBQ3pFO2lCQUFNLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRTtnQkFDeEIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMxRTtpQkFBTTtnQkFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLHVFQUF1RSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQzNGO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFqRUYsU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLHNCQUFzQixFQUFDOzs7O1lBTkMsV0FBVztZQUFFLGdCQUFnQjtZQUdsRSxjQUFjOzs7aUNBZ0RwQixLQUFLOzs7Ozs7O0lBekNOLCtDQUFxQjs7Ozs7SUFFckIsbURBQW9DOzs7OztJQXNCcEMsbURBU0M7Ozs7O0lBN0JXLGtEQUFxQzs7Ozs7SUFDckMsb0RBQXVDOzs7OztJQUN2QyxtREFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkxpa2UgYXMgSVN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOeE1vZGFsU2VydmljZSB9IGZyb20gJy4vbW9kYWwuc2VydmljZSc7XG5cblxuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbbnhPcGVuTW9kYWxPbkNsaWNrXSd9KVxuZXhwb3J0IGNsYXNzIE54T3Blbk1vZGFsT25DbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBlbGVtZW50czogQXJyYXk8YW55PjtcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogSVN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgICAgICAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBOeE1vZGFsU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLm1vZGFsU2VydmljZS5jbG9zZSQuc3Vic2NyaWJlKCgpID0+IHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBjbGlja0hhbmRsZXIgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgIC8vIGluc3RhbnRpYXRlIHRoZSB0ZW1wbGF0ZSBvbnRvIHdoaWNoIHRoaXMgZGlyZWN0aXZlIGlzIGFwcGxpZWRcbiAgICBjb25zdCB2aWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAvLyB3ZSBuZWVkIHRvIG1hcmsgdGhlIHZpZXdSZWYgZXhwbGljaXRseSBpZiB0aGUgbW9kYWwgaXMgdXNlZCBpbnNpZGUgYW5vdGhlclxuICAgIC8vIGNvbXBvbmVudCB0aGF0IGlzIHVzaW5nIG9uUHVzaCBjaGFuZ2UgZGV0ZWN0aW9uXG4gICAgdmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9uZSBvciBtdWx0aXBsZSB0ZW1wbGF0ZSByZWZlcmVuY2UgdmFyaWFibGVzIHBvaW50aW5nIHRvIGVsZW1lbnRzXG4gICAqIHdoaWNoIHNob3VsZCB0cmlnZ2VyIG9wZW5pbmcgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgKlxuICAgKiBWYWx1ZTogQSBzaW5nbGUgdGVtcGxhdGUgcmVmZXJlbmNlIHZhcmlhYmxlIG9yIGFuIGFycmF5IG9mIHRlbXBsYXRlIHJlZmVyZW5jZSB2YXJpYWJsZXMuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgbnhPcGVuTW9kYWxPbkNsaWNrKGVsZW1lbnRzKSB7XG4gICAgLy8gYWxzbyBzdXBwb3J0IHRoZSBjYXNlIHdoZXJlIG9ubHkgb25lIGVsZW1lbnQgaXMgcGFzc2VkLCBjaGVjayBmb3IgdGhlIGxlbmd0aCBwcm9wZXJ0eSB0byBiZSBzdXJlIGVsZW1lbnRzIGlzIGFuIGFycmF5XG4gICAgaWYgKGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzID0gWyBlbGVtZW50cyBdO1xuICAgIH1cbiAgICAvLyBhZGQgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byBhbnkgZWxlbWVudCBwYXNzZWQgYXMgcHJvcGVydHkgdG8gdGhpcyBkaXJlY3RpdmVcbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICAvLyB3b3JrYXJvdW5kIHVudGlsIHJlZmFjdG9yaW5nOiBpZiB0aGUgcmVmZXJlbmNlIGlzIGEgY29tcG9uZW50XG4gICAgICAvLyByZWZlcmVuY2UgdGhlIGNvbXBvbmVudCBoYXMgdG8gaW1wbGVtZW50IGEgZ2V0dGVyIHRvIGl0cyBvd24gZWxlbWVudFJlZlxuICAgICAgfSBlbHNlIGlmIChlbC5lbGVtZW50UmVmKSB7XG4gICAgICAgIGVsLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgbnhPcGVuTW9kYWxPbkNsaWNrOiBHaXZlbiBFbGVtZW50IGRvZXNuJ3QgYXBwZWFyIHRvIGJlIGFuIEVsZW1lbnRSZWYuYCwgZWwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==