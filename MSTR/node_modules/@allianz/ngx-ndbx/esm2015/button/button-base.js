/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_SIZE = 'medium';
/** @type {?} */
const DEFAULT_TYPE = 'primary';
/** @type {?} */
export const NX_BUTTON_HOST_BINDINGS = {
    '[class.nx-button--primary]': 'type === "primary"',
    '[class.nx-button--secondary]': 'type === "secondary"',
    '[class.nx-button--tertiary]': 'type === "tertiary"',
    '[class.nx-button--cta]': 'type === "cta"',
    '[class.nx-button--emphasis]': 'type === "emphasis"',
    '[class.nx-button--large]': 'size === "large"',
    '[class.nx-button--medium]': 'size === "medium"',
    '[class.nx-button--small-medium]': 'size === "small-medium"',
    '[class.nx-button--small]': 'size === "small"',
    '[class.nx-button--block]': 'block',
    '[class.nx-button--negative]': 'negative',
};
/**
 * \@docs-private
 */
export class NxButtonBase {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _elementRef
     */
    constructor(_changeDetectorRef, _elementRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        /**
         * \@docs-private
         */
        this.type = DEFAULT_TYPE;
        /**
         * \@docs-private
         */
        this.size = DEFAULT_SIZE;
        /**
         * \@docs-private
         */
        this.negative = false;
        /**
         * \@docs-private
         */
        this.block = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        const [type = null] = this._classNames.match(/primary|secondary|tertiary|cta|emphasis/) || [DEFAULT_TYPE];
        this.type = (/** @type {?} */ (type));
        const [size = null] = this._classNames.match(/small-medium|small|medium|large/) || [DEFAULT_SIZE];
        this.size = (/** @type {?} */ (size));
        this.negative = /negative/.test(this._classNames);
        this.block = /block/.test(this._classNames);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
    /**
     * \@docs-private
     * getter used for the modal component as a quickfix
     * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
     * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
     * way to reach the elementRef of the component until the modal gets refactored.
     * @return {?}
     */
    get elementRef() {
        return this._elementRef;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.type;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.size;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.negative;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.block;
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImJ1dHRvbi9idXR0b24tYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztNQVdNLFlBQVksR0FBRyxRQUFROztNQUN2QixZQUFZLEdBQUcsU0FBUzs7QUFFOUIsTUFBTSxPQUFPLHVCQUF1QixHQUFHO0lBQ25DLDRCQUE0QixFQUFHLG9CQUFvQjtJQUNuRCw4QkFBOEIsRUFBRyxzQkFBc0I7SUFDdkQsNkJBQTZCLEVBQUcscUJBQXFCO0lBQ3JELHdCQUF3QixFQUFHLGdCQUFnQjtJQUMzQyw2QkFBNkIsRUFBRyxxQkFBcUI7SUFFckQsMEJBQTBCLEVBQUcsa0JBQWtCO0lBQy9DLDJCQUEyQixFQUFHLG1CQUFtQjtJQUNqRCxpQ0FBaUMsRUFBRyx5QkFBeUI7SUFDN0QsMEJBQTBCLEVBQUcsa0JBQWtCO0lBRS9DLDBCQUEwQixFQUFHLE9BQU87SUFDcEMsNkJBQTZCLEVBQUcsVUFBVTtDQUMzQzs7OztBQUdILE1BQU0sT0FBTyxZQUFZOzs7OztJQWV2QixZQUFvQixrQkFBcUMsRUFBVSxXQUF1QjtRQUF0RSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQVk7Ozs7UUFYMUYsU0FBSSxHQUFpQixZQUFZLENBQUM7Ozs7UUFHbEMsU0FBSSxHQUFpQixZQUFZLENBQUM7Ozs7UUFHbEMsYUFBUSxHQUFZLEtBQUssQ0FBQzs7OztRQUcxQixVQUFLLEdBQVksS0FBSyxDQUFDO0lBRXVFLENBQUM7Ozs7O0lBRS9GLElBQVcsVUFBVSxDQUFDLEtBQWE7UUFDakMsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtZQUM5QixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztjQUVuQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3pHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQUEsSUFBSSxFQUFnQixDQUFDO2NBRTNCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDakcsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBQSxJQUFJLEVBQWdCLENBQUM7UUFFakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7Ozs7Ozs7SUFTRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztDQUNGOzs7Ozs7SUFqREMsbUNBQTRCOzs7OztJQUc1Qiw0QkFBa0M7Ozs7O0lBR2xDLDRCQUFrQzs7Ozs7SUFHbEMsZ0NBQTBCOzs7OztJQUcxQiw2QkFBdUI7Ozs7O0lBRVgsMENBQTZDOzs7OztJQUFFLG1DQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEVsZW1lbnRSZWYsXG4gIENoYW5nZURldGVjdG9yUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogVHlwZSBvZiBhIGJ1dHRvbi4gKi9cbmV4cG9ydCB0eXBlIE54QnV0dG9uVHlwZSA9ICdwcmltYXJ5JyB8wqAnc2Vjb25kYXJ5JyB8ICd0ZXJ0aWFyeScgfCAnY3RhJyB8ICdlbXBoYXNpcyc7XG5cbi8qKiBTaXplIG9mIGEgYnV0dG9uLiAqL1xuZXhwb3J0IHR5cGUgTnhCdXR0b25TaXplID0gJ3NtYWxsJyB8ICdzbWFsbC1tZWRpdW0nIHwgJ21lZGl1bScgfCAnbGFyZ2UnIDtcblxuY29uc3QgREVGQVVMVF9TSVpFID0gJ21lZGl1bSc7XG5jb25zdCBERUZBVUxUX1RZUEUgPSAncHJpbWFyeSc7XG5cbmV4cG9ydCBjb25zdCBOWF9CVVRUT05fSE9TVF9CSU5ESU5HUyA9IHtcbiAgICAnW2NsYXNzLm54LWJ1dHRvbi0tcHJpbWFyeV0nIDogJ3R5cGUgPT09IFwicHJpbWFyeVwiJyxcbiAgICAnW2NsYXNzLm54LWJ1dHRvbi0tc2Vjb25kYXJ5XScgOiAndHlwZSA9PT0gXCJzZWNvbmRhcnlcIicsXG4gICAgJ1tjbGFzcy5ueC1idXR0b24tLXRlcnRpYXJ5XScgOiAndHlwZSA9PT0gXCJ0ZXJ0aWFyeVwiJyxcbiAgICAnW2NsYXNzLm54LWJ1dHRvbi0tY3RhXScgOiAndHlwZSA9PT0gXCJjdGFcIicsXG4gICAgJ1tjbGFzcy5ueC1idXR0b24tLWVtcGhhc2lzXScgOiAndHlwZSA9PT0gXCJlbXBoYXNpc1wiJyxcblxuICAgICdbY2xhc3MubngtYnV0dG9uLS1sYXJnZV0nIDogJ3NpemUgPT09IFwibGFyZ2VcIicsXG4gICAgJ1tjbGFzcy5ueC1idXR0b24tLW1lZGl1bV0nIDogJ3NpemUgPT09IFwibWVkaXVtXCInLFxuICAgICdbY2xhc3MubngtYnV0dG9uLS1zbWFsbC1tZWRpdW1dJyA6ICdzaXplID09PSBcInNtYWxsLW1lZGl1bVwiJyxcbiAgICAnW2NsYXNzLm54LWJ1dHRvbi0tc21hbGxdJyA6ICdzaXplID09PSBcInNtYWxsXCInLFxuXG4gICAgJ1tjbGFzcy5ueC1idXR0b24tLWJsb2NrXScgOiAnYmxvY2snLFxuICAgICdbY2xhc3MubngtYnV0dG9uLS1uZWdhdGl2ZV0nIDogJ25lZ2F0aXZlJyxcbiAgfTtcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBjbGFzcyBOeEJ1dHRvbkJhc2Uge1xuICBwcml2YXRlIF9jbGFzc05hbWVzOiBzdHJpbmc7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdHlwZTogTnhCdXR0b25UeXBlID0gREVGQVVMVF9UWVBFO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHNpemU6IE54QnV0dG9uU2l6ZSA9IERFRkFVTFRfU0laRTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBuZWdhdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGJsb2NrOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBwdWJsaWMgc2V0IGNsYXNzTmFtZXModmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9jbGFzc05hbWVzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NsYXNzTmFtZXMgPSB2YWx1ZTtcblxuICAgIGNvbnN0IFt0eXBlID0gbnVsbF0gPSB0aGlzLl9jbGFzc05hbWVzLm1hdGNoKC9wcmltYXJ5fHNlY29uZGFyeXx0ZXJ0aWFyeXxjdGF8ZW1waGFzaXMvKSB8fCBbREVGQVVMVF9UWVBFXTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlIGFzIE54QnV0dG9uVHlwZTtcblxuICAgIGNvbnN0IFtzaXplID0gbnVsbF0gPSB0aGlzLl9jbGFzc05hbWVzLm1hdGNoKC9zbWFsbC1tZWRpdW18c21hbGx8bWVkaXVtfGxhcmdlLykgfHwgW0RFRkFVTFRfU0laRV07XG4gICAgdGhpcy5zaXplID0gc2l6ZSBhcyBOeEJ1dHRvblNpemU7XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gL25lZ2F0aXZlLy50ZXN0KHRoaXMuX2NsYXNzTmFtZXMpO1xuICAgIHRoaXMuYmxvY2sgPSAvYmxvY2svLnRlc3QodGhpcy5fY2xhc3NOYW1lcyk7XG5cbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2xhc3NOYW1lcygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jbGFzc05hbWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkb2NzLXByaXZhdGVcbiAgICogZ2V0dGVyIHVzZWQgZm9yIHRoZSBtb2RhbCBjb21wb25lbnQgYXMgYSBxdWlja2ZpeFxuICAgKiBzaW5jZSBidXR0b24gZ290IGNoYW5nZWQgZnJvbSBkaXJlY3RpdmUgdG8gY29tcG9uZW50IHRoZSByZWZlcmVuY2UgdXNlZCBieSB0aGUgbmdPcGVuTW9kZWxPbkNsaWNrIGRpcmVjdGl2ZVxuICAgKiBmb3IgbnhCdXR0b25zIGlzIGEgcmVmZXJlbmNlIHRvIGNvbXBvbmVudCBpbnN0YW5jZSBpbnN0ZWFkIG9mIGFuIGVsZW1lbnQgcmVmZXJlbmNlLiBBcyBhIHdvcmthcm91bmQgd2UgbmVlZCBhXG4gICAqIHdheSB0byByZWFjaCB0aGUgZWxlbWVudFJlZiBvZiB0aGUgY29tcG9uZW50IHVudGlsIHRoZSBtb2RhbCBnZXRzIHJlZmFjdG9yZWQuXG4gICAqL1xuICBnZXQgZWxlbWVudFJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFJlZjtcbiAgfVxufVxuIl19