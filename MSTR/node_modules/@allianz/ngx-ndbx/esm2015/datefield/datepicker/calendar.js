/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, } from '@angular/core';
import { NX_DATE_FORMATS, NxDateAdapter } from './../adapter/index';
import { createMissingDateImplError } from './datepicker-errors';
import { NxDatepickerIntl } from './datepicker-intl';
import { NxMonthViewComponent } from './month-view';
import { NxMultiYearViewComponent } from './multi-year-view';
import { NxYearViewComponent } from './year-view';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @type {?}
 */
const yearsPerPage = 20;
/**
 * A calendar that is used as part of the datepicker.
 * \@docs-private
 * @template D
 */
export class NxCalendarComponent {
    /**
     * @param {?} _intl
     * @param {?} _dateAdapter
     * @param {?} _dateFormats
     * @param {?} changeDetectorRef
     */
    constructor(_intl, _dateAdapter, _dateFormats, changeDetectorRef) {
        this._intl = _intl;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        /**
         * Whether the calendar should be started in month or year view.
         */
        this.startView = 'month';
        /**
         * Emits when the currently selected date changes.
         */
        this.selectedChange = new EventEmitter();
        /**
         * Emits the year chosen in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits the month chosen in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /**
         * Emits when any date is selected.
         */
        this._userSelection = new EventEmitter();
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this._intlChanges = _intl.changes.subscribe((/**
         * @return {?}
         */
        () => changeDetectorRef.markForCheck()));
    }
    /**
     * A date representing the period (month or year) to start the calendar in.
     * @return {?}
     */
    get startAt() { return this._startAt; }
    /**
     * @param {?} value
     * @return {?}
     */
    set startAt(value) {
        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() { return this._selected; }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get minDate() { return this._minDate; }
    /**
     * @param {?} value
     * @return {?}
     */
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get maxDate() { return this._maxDate; }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * The current active date. This determines which time period is shown and which date is
     * highlighted when using keyboard navigation.
     * @return {?}
     */
    get _activeDate() { return this._clampedActiveDate; }
    /**
     * @param {?} value
     * @return {?}
     */
    set _activeDate(value) {
        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
    }
    /**
     * The label for the current calendar view.
     * @return {?}
     */
    get _periodButtonText() {
        if (this._currentView === 'month') {
            return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel);
        }
        if (this._currentView === 'year') {
            return this._dateAdapter.getYearName(this._activeDate);
        }
        /** @type {?} */
        const activeYear = this._dateAdapter.getYear(this._activeDate);
        /** @type {?} */
        const firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % yearsPerPage, 0, 1));
        /** @type {?} */
        const lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % yearsPerPage, 0, 1));
        return `${firstYearInView} \u2013 ${lastYearInView}`;
    }
    /**
     * @return {?}
     */
    get _periodButtonLabel() {
        return this._currentView === 'month' ?
            this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
    }
    /**
     * The label for the the previous button.
     * @return {?}
     */
    get _prevButtonLabel() {
        return {
            'month': this._intl.prevMonthLabel,
            'year': this._intl.prevYearLabel,
            'multi-year': this._intl.prevMultiYearLabel
        }[this._currentView];
    }
    /**
     * The label for the the next button.
     * @return {?}
     */
    get _nextButtonLabel() {
        return {
            'month': this._intl.nextMonthLabel,
            'year': this._intl.nextYearLabel,
            'multi-year': this._intl.nextMultiYearLabel
        }[this._currentView];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._activeDate = this.startAt || this._dateAdapter.today();
        this._currentView = this.startView;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const change = changes.minDate || changes.maxDate || changes.dateFilter;
        if (change && !change.firstChange) {
            /** @type {?} */
            const view = this.monthView || this.yearView || this.multiYearView;
            if (view) {
                view._init();
            }
        }
    }
    /**
     * Handles date selection in the month view.
     * @param {?} date
     * @return {?}
     */
    _dateSelected(date) {
        if (!this._dateAdapter.sameDate(date, this.selected)) {
            this.selectedChange.emit(date);
        }
    }
    /**
     * Handles year selection in the multiyear view.
     * @param {?} normalizedYear
     * @return {?}
     */
    _yearSelectedInMultiYearView(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    /**
     * Handles month selection in the year view.
     * @param {?} normalizedMonth
     * @return {?}
     */
    _monthSelectedInYearView(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    /**
     * @return {?}
     */
    _userSelected() {
        this._userSelection.emit();
    }
    /**
     * Handles year/month selection in the multi-year/year views.
     * @param {?} date
     * @param {?} view
     * @return {?}
     */
    _goToDateInView(date, view) {
        this._activeDate = date;
        this._currentView = view;
    }
    /**
     * Handles user clicks on the period label.
     * @return {?}
     */
    _changeViewClicked() {
        this._currentView = this._currentView === 'month' ? 'multi-year' : 'month';
    }
    /**
     * Handles user clicks on the previous button.
     * @return {?}
     */
    _previousClicked() {
        this._activeDate = this._currentView === 'month' ?
            this._dateAdapter.addCalendarMonths(this._activeDate, -1) :
            this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? -1 : -yearsPerPage);
    }
    /**
     * Handles user clicks on the next button.
     * @return {?}
     */
    _nextClicked() {
        this._activeDate = this._currentView === 'month' ?
            this._dateAdapter.addCalendarMonths(this._activeDate, 1) :
            this._dateAdapter.addCalendarYears(this._activeDate, this._currentView === 'year' ? 1 : yearsPerPage);
    }
    /**
     * Whether the previous period button is enabled.
     * @return {?}
     */
    _previousEnabled() {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
    }
    /**
     * Whether the next period button is enabled.
     * @return {?}
     */
    _nextEnabled() {
        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
    }
    /**
     * Whether the two dates represent the same view in the current view mode (month or year).
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    _isSameView(date1, date2) {
        if (this._currentView === 'month') {
            return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) &&
                this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2);
        }
        if (this._currentView === 'year') {
            return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ===
            Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
    }
}
NxCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-calendar',
                template: "<div class=\"nx-calendar-header\">\n  <div class=\"nx-calendar-controls\">\n\n    <button class=\"nx-calendar-previous-button\"\n            [disabled]=\"!_previousEnabled()\" (click)=\"_previousClicked()\"\n            [attr.aria-label]=\"_prevButtonLabel\">\n            <nx-icon name=\"chevron-left\"></nx-icon>\n    </button>\n\n    <span class=\"nx-calendar-period-label\">\n      {{_periodButtonText}}\n    </span>\n\n    <button class=\"nx-calendar-next-button\"\n            [disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\"\n            [attr.aria-label]=\"_nextButtonLabel\">\n            <nx-icon name=\"chevron-right\"></nx-icon>\n    </button>\n  </div>\n\n  <div class=\"nx-calendar-view-controls\">\n    <button\n        class=\"nx-calendar-change-view-button\"\n        (click)=\"_changeViewClicked()\" [attr.aria-label]=\"_periodButtonLabel\">\n      {{_periodButtonLabel}}\n    </button>\n  </div>\n</div>\n\n<div class=\"nx-calendar-content\" [ngSwitch]=\"_currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  <nx-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"_activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (selectedChange)=\"_dateSelected($event)\"\n      (_userSelection)=\"_userSelected()\">\n  </nx-month-view>\n\n  <nx-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"_activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (monthSelected)=\"_monthSelectedInYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'month')\">\n  </nx-year-view>\n\n  <nx-multi-year-view\n      *ngSwitchCase=\"'multi-year'\"\n      [(activeDate)]=\"_activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'year')\">\n  </nx-multi-year-view>\n</div>\n",
                host: {
                    'class': 'nx-calendar',
                },
                exportAs: 'nxCalendar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".nx-calendar-content{width:280px;margin:16px auto 0}.nx-calendar-next-button,.nx-calendar-previous-button{background-color:transparent;border:none;cursor:pointer;padding:0;line-height:24px;font-size:24px;color:#006192}.nx-calendar-next-button:focus,.nx-calendar-previous-button:focus{outline:0}.nx-calendar-controls{display:flex;justify-content:center;height:24px}.nx-calendar-period-label{width:216px;font-size:20px;line-height:24px;font-weight:600;color:#414141;text-align:center;letter-spacing:.2px}.nx-calendar-view-controls{text-align:center;height:24px}.nx-calendar-change-view-button{border:none;background-color:transparent;cursor:pointer;margin:8px 0 0;color:#006192;font-size:16px;line-height:16px;font-weight:700;height:16px}.nx-calendar-change-view-button:focus{outline:0}:host-context([data-whatinput=keyboard]) .nx-calendar-change-view-button:focus,:host-context([data-whatinput=keyboard]) .nx-calendar-next-button:focus,:host-context([data-whatinput=keyboard]) .nx-calendar-previous-button:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}button::-moz-focus-inner{border:0}"]
            }] }
];
/** @nocollapse */
NxCalendarComponent.ctorParameters = () => [
    { type: NxDatepickerIntl },
    { type: NxDateAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NX_DATE_FORMATS,] }] },
    { type: ChangeDetectorRef }
];
NxCalendarComponent.propDecorators = {
    startAt: [{ type: Input }],
    startView: [{ type: Input }],
    selected: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    dateFilter: [{ type: Input }],
    selectedChange: [{ type: Output }],
    yearSelected: [{ type: Output }],
    monthSelected: [{ type: Output }],
    _userSelection: [{ type: Output }],
    monthView: [{ type: ViewChild, args: [NxMonthViewComponent,] }],
    yearView: [{ type: ViewChild, args: [NxYearViewComponent,] }],
    multiYearView: [{ type: ViewChild, args: [NxMultiYearViewComponent,] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._intlChanges;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._startAt;
    /**
     * Whether the calendar should be started in month or year view.
     * @type {?}
     */
    NxCalendarComponent.prototype.startView;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._maxDate;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    NxCalendarComponent.prototype.dateFilter;
    /**
     * Emits when the currently selected date changes.
     * @type {?}
     */
    NxCalendarComponent.prototype.selectedChange;
    /**
     * Emits the year chosen in multiyear view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    NxCalendarComponent.prototype.yearSelected;
    /**
     * Emits the month chosen in year view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    NxCalendarComponent.prototype.monthSelected;
    /**
     * Emits when any date is selected.
     * @type {?}
     */
    NxCalendarComponent.prototype._userSelection;
    /**
     * Reference to the current month view component.
     * @type {?}
     */
    NxCalendarComponent.prototype.monthView;
    /**
     * Reference to the current year view component.
     * @type {?}
     */
    NxCalendarComponent.prototype.yearView;
    /**
     * Reference to the current multi-year view component.
     * @type {?}
     */
    NxCalendarComponent.prototype.multiYearView;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._clampedActiveDate;
    /**
     * Whether the calendar is in month view.
     * @type {?}
     */
    NxCalendarComponent.prototype._currentView;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    NxCalendarComponent.prototype._dateFormats;
}
//# sourceMappingURL=data:application/json;base64,