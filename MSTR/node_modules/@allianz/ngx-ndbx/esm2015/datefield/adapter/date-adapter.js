/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * \@docs-private
 * @abstract
 * @template D
 */
export class NxDateAdapter {
    constructor() {
        this.locale = 'de-DE';
        this._localeChanges = new Subject();
    }
    /**
     * @return {?}
     */
    get localeChanges() { return this._localeChanges; }
    /**
     * @param {?} value
     * @return {?}
     */
    deserialize(value) {
        if (value == null || this.isDateInstance(value) && this.isValid(value)) {
            return value;
        }
        return this.invalid();
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameDate(first, second) {
        if (first && second) {
            /** @type {?} */
            const firstValid = this.isValid(first);
            /** @type {?} */
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second);
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    compareDate(first, second) {
        return this.getYear(first) - this.getYear(second) ||
            this.getMonth(first) - this.getMonth(second) ||
            this.getDate(first) - this.getDate(second);
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    setLocale(locale) {
        this.locale = locale;
        this._localeChanges.next(this.locale);
    }
    /**
     * @return {?}
     */
    getLocale() {
        return this.locale;
    }
    /**
     * @param {?} date
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    clampDate(date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
            return min;
        }
        if (max && this.compareDate(date, max) > 0) {
            return max;
        }
        return date;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NxDateAdapter.prototype.locale;
    /**
     * @type {?}
     * @protected
     */
    NxDateAdapter.prototype._localeChanges;
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.toIso8601 = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    NxDateAdapter.prototype.format = function (date, displayFormat) { };
    /**
     * @abstract
     * @param {?} value
     * @param {?} format
     * @param {?} strict
     * @return {?}
     */
    NxDateAdapter.prototype.parse = function (value, format, strict) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.isValid = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.clone = function (date) { };
    /**
     * @abstract
     * @param {?} obj
     * @return {?}
     */
    NxDateAdapter.prototype.isDateInstance = function (obj) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.invalid = function () { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getYear = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getMonth = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getDate = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getYearName = function (date) { };
    /**
     * @abstract
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.createDate = function (year, month, date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getNumDaysInMonth = function (date) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.getDateNames = function () { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getDayOfWeek = function (date) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.getFirstDayOfWeek = function () { };
    /**
     * @abstract
     * @param {?} style
     * @return {?}
     */
    NxDateAdapter.prototype.getMonthNames = function (style) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.today = function () { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarMonths = function (date, months) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarYears = function (date, years) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarDays = function (date, days) { };
    /**
     * @abstract
     * @param {?} style
     * @return {?}
     */
    NxDateAdapter.prototype.getDayOfWeekNames = function (style) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvZGF0ZWZpZWxkLyIsInNvdXJjZXMiOlsiYWRhcHRlci9kYXRlLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFJN0MsTUFBTSxPQUFnQixhQUFhO0lBQW5DO1FBQ1ksV0FBTSxHQUFHLE9BQU8sQ0FBQztRQUNqQixtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7SUF3RW5ELENBQUM7Ozs7SUEzREMsSUFBSSxhQUFhLEtBQXlCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBRXZFLFdBQVcsQ0FBQyxLQUFVO1FBQ3BCLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEUsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUVELFFBQVEsQ0FBQyxLQUFlLEVBQUUsTUFBZ0I7UUFDeEMsSUFBSSxLQUFLLElBQUksTUFBTSxFQUFFOztrQkFDYixVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7O2tCQUNoQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFFeEMsSUFBSSxVQUFVLElBQUksV0FBVyxFQUFFO2dCQUM3QixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDekM7WUFDRCxPQUFPLFVBQVUsS0FBSyxXQUFXLENBQUM7U0FDbkM7UUFDRCxPQUFPLEtBQUssS0FBSyxNQUFNLENBQUM7SUFDMUIsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQVEsRUFBRSxNQUFTO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxNQUFjO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7Ozs7O0lBZUQsU0FBUyxDQUFDLElBQU8sRUFBRSxHQUFjLEVBQUUsR0FBYztRQUMvQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxQyxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7Ozs7OztJQXpFQywrQkFBMkI7Ozs7O0lBQzNCLHVDQUFpRDs7Ozs7O0lBQ2pELHdEQUFvQzs7Ozs7OztJQUNwQyxvRUFBcUQ7Ozs7Ozs7O0lBQ3JELHFFQUErRTs7Ozs7O0lBQy9FLHNEQUFtQzs7Ozs7O0lBQ25DLG9EQUEyQjs7Ozs7O0lBQzNCLDREQUEyQzs7Ozs7SUFDM0Msa0RBQXNCOzs7Ozs7SUFFdEIsc0RBQWtDOzs7Ozs7SUFDbEMsdURBQW1DOzs7Ozs7SUFDbkMsc0RBQWtDOzs7Ozs7SUF1Q2xDLDBEQUFzQzs7Ozs7Ozs7SUFDdEMsc0VBQWtFOzs7Ozs7SUFDbEUsZ0VBQTRDOzs7OztJQUM1Qyx1REFBa0M7Ozs7OztJQUNsQywyREFBdUM7Ozs7O0lBQ3ZDLDREQUFxQzs7Ozs7O0lBQ3JDLDZEQUFxRTs7Ozs7SUFDckUsZ0RBQW9COzs7Ozs7O0lBQ3BCLHdFQUF1RDs7Ozs7OztJQUN2RCxzRUFBcUQ7Ozs7Ozs7SUFDckQsb0VBQW1EOzs7Ozs7SUFDbkQsaUVBQXlFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSAsICBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE54RGF0ZUFkYXB0ZXI8RD4ge1xuICBwcm90ZWN0ZWQgbG9jYWxlID0gJ2RlLURFJztcbiAgcHJvdGVjdGVkIF9sb2NhbGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuICBhYnN0cmFjdCB0b0lzbzg2MDEoZGF0ZTogRCk6IHN0cmluZztcbiAgYWJzdHJhY3QgZm9ybWF0KGRhdGU6IEQsIGRpc3BsYXlGb3JtYXQ6IGFueSk6IHN0cmluZztcbiAgYWJzdHJhY3QgcGFyc2UodmFsdWU6IGFueSwgZm9ybWF0OiBzdHJpbmd8c3RyaW5nW10sIHN0cmljdDogYm9vbGVhbik6IEQgfCBudWxsO1xuICBhYnN0cmFjdCBpc1ZhbGlkKGRhdGU6IEQpOiBib29sZWFuO1xuICBhYnN0cmFjdCBjbG9uZShkYXRlOiBEKTogRDtcbiAgYWJzdHJhY3QgaXNEYXRlSW5zdGFuY2Uob2JqOiBhbnkpOiBib29sZWFuO1xuICBhYnN0cmFjdCBpbnZhbGlkKCk6IEQ7XG5cbiAgYWJzdHJhY3QgZ2V0WWVhcihkYXRlOiBEKTogbnVtYmVyO1xuICBhYnN0cmFjdCBnZXRNb250aChkYXRlOiBEKTogbnVtYmVyO1xuICBhYnN0cmFjdCBnZXREYXRlKGRhdGU6IEQpOiBudW1iZXI7XG5cbiAgZ2V0IGxvY2FsZUNoYW5nZXMoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX2xvY2FsZUNoYW5nZXM7IH1cblxuICBkZXNlcmlhbGl6ZSh2YWx1ZTogYW55KTogRCB8IG51bGwge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHRoaXMuaXNEYXRlSW5zdGFuY2UodmFsdWUpICYmIHRoaXMuaXNWYWxpZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCgpO1xuICB9XG5cbiAgc2FtZURhdGUoZmlyc3Q6IEQgfCBudWxsLCBzZWNvbmQ6IEQgfCBudWxsKTogYm9vbGVhbiB7XG4gICAgaWYgKGZpcnN0ICYmIHNlY29uZCkge1xuICAgICAgY29uc3QgZmlyc3RWYWxpZCA9IHRoaXMuaXNWYWxpZChmaXJzdCk7XG4gICAgICBjb25zdCBzZWNvbmRWYWxpZCA9IHRoaXMuaXNWYWxpZChzZWNvbmQpO1xuXG4gICAgICBpZiAoZmlyc3RWYWxpZCAmJiBzZWNvbmRWYWxpZCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuY29tcGFyZURhdGUoZmlyc3QsIHNlY29uZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlyc3RWYWxpZCA9PT0gc2Vjb25kVmFsaWQ7XG4gICAgfVxuICAgIHJldHVybiBmaXJzdCA9PT0gc2Vjb25kO1xuICB9XG5cbiAgY29tcGFyZURhdGUoZmlyc3Q6IEQsIHNlY29uZDogRCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0WWVhcihmaXJzdCkgLSB0aGlzLmdldFllYXIoc2Vjb25kKSB8fFxuICAgICAgICB0aGlzLmdldE1vbnRoKGZpcnN0KSAtIHRoaXMuZ2V0TW9udGgoc2Vjb25kKSB8fFxuICAgICAgICB0aGlzLmdldERhdGUoZmlyc3QpIC0gdGhpcy5nZXREYXRlKHNlY29uZCk7XG4gIH1cblxuICBzZXRMb2NhbGUobG9jYWxlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcbiAgICB0aGlzLl9sb2NhbGVDaGFuZ2VzLm5leHQodGhpcy5sb2NhbGUpO1xuICB9XG5cbiAgZ2V0TG9jYWxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlO1xuICB9XG5cbiAgYWJzdHJhY3QgZ2V0WWVhck5hbWUoZGF0ZTogRCk6IHN0cmluZztcbiAgYWJzdHJhY3QgY3JlYXRlRGF0ZSh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIsIGRhdGU6IG51bWJlcik6IEQ7XG4gIGFic3RyYWN0IGdldE51bURheXNJbk1vbnRoKGRhdGU6IEQpOiBudW1iZXI7XG4gIGFic3RyYWN0IGdldERhdGVOYW1lcygpOiBzdHJpbmdbXTtcbiAgYWJzdHJhY3QgZ2V0RGF5T2ZXZWVrKGRhdGU6IEQpOiBudW1iZXI7XG4gIGFic3RyYWN0IGdldEZpcnN0RGF5T2ZXZWVrKCk6IG51bWJlcjtcbiAgYWJzdHJhY3QgZ2V0TW9udGhOYW1lcyhzdHlsZTogJ2xvbmcnIHwgJ3Nob3J0JyB8ICduYXJyb3cnKTogc3RyaW5nW107XG4gIGFic3RyYWN0IHRvZGF5KCk6IEQ7XG4gIGFic3RyYWN0IGFkZENhbGVuZGFyTW9udGhzKGRhdGU6IEQsIG1vbnRoczogbnVtYmVyKTogRDtcbiAgYWJzdHJhY3QgYWRkQ2FsZW5kYXJZZWFycyhkYXRlOiBELCB5ZWFyczogbnVtYmVyKTogRDtcbiAgYWJzdHJhY3QgYWRkQ2FsZW5kYXJEYXlzKGRhdGU6IEQsIGRheXM6IG51bWJlcik6IEQ7XG4gIGFic3RyYWN0IGdldERheU9mV2Vla05hbWVzKHN0eWxlOiAnbG9uZycgfCAnc2hvcnQnIHwgJ25hcnJvdycpOiBzdHJpbmdbXTtcblxuICBjbGFtcERhdGUoZGF0ZTogRCwgbWluPzogRCB8IG51bGwsIG1heD86IEQgfCBudWxsKTogRCB7XG4gICAgaWYgKG1pbiAmJiB0aGlzLmNvbXBhcmVEYXRlKGRhdGUsIG1pbikgPCAwKSB7XG4gICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBpZiAobWF4ICYmIHRoaXMuY29tcGFyZURhdGUoZGF0ZSwgbWF4KSA+IDApIHtcbiAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5cbiJdfQ==