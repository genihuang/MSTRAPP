/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Input, Renderer2, HostListener } from '@angular/core';
import { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';
import { NxRadioToggleComponent } from './radio-toggle.component';
/**
 * \@docs-private
 */
export class NxRadioToggleButtonChange {
    /**
     * @param {?} source
     * @param {?} value
     */
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
if (false) {
    /** @type {?} */
    NxRadioToggleButtonChange.prototype.source;
    /** @type {?} */
    NxRadioToggleButtonChange.prototype.value;
}
export class NxRadioToggleButtonComponent extends NxRadioToggleButtonBaseComponent {
    /**
     * @param {?} radioToggle
     * @param {?} renderer
     * @param {?} _changeDetectorRef
     * @param {?} _toggleDispatcher
     */
    constructor(radioToggle, renderer, _changeDetectorRef, _toggleDispatcher) {
        super(renderer);
        this.radioToggle = radioToggle;
        this._changeDetectorRef = _changeDetectorRef;
        this._toggleDispatcher = _toggleDispatcher;
        /**
         * \@docs-private
         */
        // emits when the button is checked to notify the group
        this.onChecked = new Subject();
        this._destroyed = new Subject();
        this._disabled = false;
        this._selected = false;
        /**
         * Unregister function for _expansionDispatcher.
         */
        this._removeUniqueSelectionListener = (/**
         * @return {?}
         */
        () => { });
        this._removeUniqueSelectionListener = this._toggleDispatcher.listen((/**
         * @param {?} id
         * @param {?} radioToggleId
         * @return {?}
         */
        (id, radioToggleId) => {
            if (this.radioToggle && this.radioToggle.id === radioToggleId && this.id !== id) {
                this._selected = false;
                // need to let change detector know in case that the select() function was called on another button
                this._changeDetectorRef.markForCheck();
            }
        }));
        this.radioToggle._disableChange.pipe(takeUntil(this._destroyed)).subscribe((/**
         * @return {?}
         */
        () => {
            this._changeDetectorRef.markForCheck();
        }));
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled || (this.radioToggle && this.radioToggle.disabled);
    }
    /**
     * Sets the checked state and notify siblings and the parent group about the change
     * @param {?} value
     * @return {?}
     */
    // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
    // To select a button without firing the event use the select() function
    set selected(value) {
        if (this._selected !== value) {
            this._selected = value;
            if (this._selected) {
                this._notifySiblings();
                this._emitCheckedEvent();
            }
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._removeUniqueSelectionListener();
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get toggleId() {
        return this.radioToggle.id;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get id() {
        return this.toggleButtonId;
    }
    /**
     * @private
     * @return {?}
     */
    _notifySiblings() {
        /** @type {?} */
        const toggleId = this.radioToggle ? this.radioToggle.id : this.id;
        this._toggleDispatcher.notify(this.id, toggleId);
    }
    /**
     * @private
     * @return {?}
     */
    _emitCheckedEvent() {
        this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));
    }
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    /**
     * @return {?}
     */
    select() {
        if (!this._selected) {
            this._selected = true;
            this._notifySiblings();
        }
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    onKeyupSpace() {
        this._selected = false;
        this._notifySiblings();
    }
}
NxRadioToggleButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-radio-toggle-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "<input [attr.id]=\"toggleButtonId\"\n    #toggleInput\n    [attr.name]=\"toggleId\"\n    [checked]=\"selected\"\n    class=\"nx-radio-toggle__input\"\n    type=\"radio\"\n    (click)=\"selected = true\"\n    [disabled]=\"disabled\">\n<div (click)=\"triggerInputClick($event)\" #toggleButtonLabelContainer class=\"nx-radio-toggle__label-container\">\n  <label [attr.for]=\"toggleButtonId\" class=\"nx-radio-toggle__label\">\n      <nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n      <ng-content></ng-content>\n  </label>\n</div>\n\n\n",
                providers: [
                    {
                        provide: NxRadioToggleButtonBaseComponent, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxRadioToggleButtonComponent))
                    }
                ],
                styles: [":host{display:flex;position:relative;flex-direction:row}.nx-radio-toggle__input{opacity:0;position:absolute}.nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#003781;border-color:#003781;color:#fff}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#b2d7e8;border-color:#b2d7e8;color:#fff;cursor:not-allowed}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:not-allowed}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#007ab3;border-color:#007ab3;color:#fff;cursor:default}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:default}@media screen and (-ms-high-contrast:active){.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#ff0;cursor:default;border-color:inherit}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{background-color:#000}}.nx-toggle-button__mobile-check{display:none;font-size:24px;margin-right:8px;height:24px}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:14px;min-height:16px;padding:6px;text-transform:none;line-height:16px}.nx-radio-toggle{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:4px 0 0 4px;border-width:2px 0 2px 2px}@media (max-width:703px){:host{width:100%}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-toggle-button__mobile-check{display:inline-block}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{line-height:24px;padding:11px 31px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px 2px 1px;border-radius:4px 4px 0 0}}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:0 4px 4px 0;border-width:2px}@media (max-width:703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:1px 2px 2px;border-radius:0 0 4px 4px}}.nx-radio-toggle__label-container{padding:10px 30px;border:2px solid #007ab3;border-radius:0;border-width:2px 0 2px 2px;color:#007ab3;cursor:pointer;flex-grow:1;font-size:16px;font-weight:600;line-height:24px;text-align:center;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s;display:flex;align-items:center;height:100%;min-height:24px}@media (max-width:703px){.nx-radio-toggle__label-container{border-width:1px 2px;justify-content:center;padding:11px 31px}}.nx-radio-toggle__label-container:hover{background-color:#075994;border-color:#075994;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#c2c2c2;border-color:#c2c2c2;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#d9d9d9}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container{border-color:#fff;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container:hover{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}.nx-radio-toggle__label{display:flex;align-items:center;cursor:pointer}:host-context([data-whatinput=keyboard]) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;z-index:1}"]
            }] }
];
/** @nocollapse */
NxRadioToggleButtonComponent.ctorParameters = () => [
    { type: NxRadioToggleComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NxRadioToggleComponent)),] }] },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: UniqueSelectionDispatcher }
];
NxRadioToggleButtonComponent.propDecorators = {
    disabled: [{ type: Input, args: ['nxDisabled',] }],
    selected: [{ type: Input, args: ['nxSelected',] }],
    onKeyupSpace: [{ type: HostListener, args: ['keyup.space',] }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxRadioToggleButtonComponent.prototype.onChecked;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._selected;
    /**
     * Unregister function for _expansionDispatcher.
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._removeUniqueSelectionListener;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype.radioToggle;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._toggleDispatcher;
}
//# sourceMappingURL=data:application/json;base64,