/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NxProgressStepperDirective } from './../progress-stepper.component';
export class NxSingleStepperComponent extends NxProgressStepperDirective {
    constructor() {
        super(...arguments);
        this._rightLabel = 'Next step:';
    }
    /**
     * Sets the label on the right showing the next step.
     * @return {?}
     */
    get rightLabel() { return this._rightLabel; }
    /**
     * @param {?} v
     * @return {?}
     */
    set rightLabel(v) { this._rightLabel = v; }
    /**
     * \@docs-private
     * @return {?}
     */
    get progress() {
        return (this.selectedIndex + 1) / this.count;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get currentLabel() {
        /** @type {?} */
        const step = this.currentStep;
        /** @type {?} */
        const label = step.stepLabel || step.label;
        return `
    ${this.currentStepLabel} ${this.selectedIndex + 1}/${this.count}: ${label}
    `;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get nextLabel() {
        /** @type {?} */
        const step = this.nextStep;
        if (step) {
            /** @type {?} */
            const label = step.stepLabel || step.label;
            return `
        ${this.rightLabel} ${label}
      `;
        }
        return null;
    }
}
NxSingleStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-single-stepper',
                template: "<div class=\"nx-single-step-container\">\n  <span *ngIf=\"title\" class=\"nx-single-step__title\">{{title}}</span>\n\n    <nx-progressbar [value]=\"progress\"></nx-progressbar>\n\n    <div class=\"nx-single-step__infos\">\n      <div class=\"nx-single-step__current\">\n        {{currentLabel}}\n      </div>\n      <div class=\"nx-single-step__next\">\n        {{nextLabel}}\n      </div>\n    </div>\n\n    <div class=\"nx-progress-stepper__current\">\n        {{currentLabel}}\n    </div>\n</div>\n\n<div *ngFor=\"let step of _steps; let i = index\"\n      class=\"nx-progress-stepper__content\" role=\"tabpanel\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-label]=\"currentLabel\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>",
                providers: [{ provide: NxProgressStepperDirective, useExisting: NxSingleStepperComponent }],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}.nx-progress-stepper__content{overflow:hidden}.nx-progress-stepper__content[aria-expanded=false]{height:0}.nx-progress-stepper__current{display:none}@media (max-width:703px){.nx-progress-stepper__current{display:block;text-align:center}}", ":host{display:block}.nx-single-step-container{margin-bottom:48px}.nx-single-step__infos{display:flex;font-weight:300;line-height:24px;font-size:16px;margin-top:8px}.nx-single-step__current{color:#414141}.nx-single-step__title,nx-progressbar{margin-bottom:8px;display:block}@media (max-width:703px){.nx-single-step__infos,nx-progressbar{display:none}}.nx-single-step__title{font-size:20px;font-weight:300;margin-bottom:24px}@media (min-width:320px){.nx-single-step__title{display:block}}.nx-single-step__next{margin-left:auto}@media (max-width:703px){.nx-single-step__next{display:none}}"]
            }] }
];
NxSingleStepperComponent.propDecorators = {
    rightLabel: [{ type: Input, args: ['nextLabel',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSingleStepperComponent.prototype._rightLabel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLXN0ZXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvcHJvZ3Jlc3Mtc3RlcHBlci8iLCJzb3VyY2VzIjpbInNpbmdsZS9zaW5nbGUtc3RlcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBVTdFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSwwQkFBMEI7SUFSeEU7O1FBY1UsZ0JBQVcsR0FBVyxZQUFZLENBQUM7SUFpQzdDLENBQUM7Ozs7O0lBckNDLElBQ0ksVUFBVSxLQUFhLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBQ3JELElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBSzNDLElBQUksUUFBUTtRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDL0MsQ0FBQzs7Ozs7SUFHRCxJQUFJLFlBQVk7O2NBQ1IsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXOztjQUN2QixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSztRQUUxQyxPQUFPO01BQ0wsSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztLQUN4RSxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFHRCxJQUFJLFNBQVM7O2NBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRO1FBRTFCLElBQUksSUFBSSxFQUFFOztrQkFDRixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSztZQUUxQyxPQUFPO1VBQ0gsSUFBSSxDQUFDLFVBQVUsSUFBSSxLQUFLO09BQzNCLENBQUM7U0FDSDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBNUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QixxMEJBQTJDO2dCQUUzQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUMsQ0FBQztnQkFDekYsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEOzs7eUJBR0UsS0FBSyxTQUFDLFdBQVc7Ozs7Ozs7SUFJbEIsK0NBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnhQcm9ncmVzc1N0ZXBwZXJEaXJlY3RpdmUgfSBmcm9tICcuLy4uL3Byb2dyZXNzLXN0ZXBwZXIuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtc2luZ2xlLXN0ZXBwZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc2luZ2xlLXN0ZXAuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi4vcHJvZ3Jlc3Mtc3RlcHBlci5jb21wb25lbnQuc2NzcycsICcuL3NpbmdsZS1zdGVwLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOeFByb2dyZXNzU3RlcHBlckRpcmVjdGl2ZSwgdXNlRXhpc3Rpbmc6IE54U2luZ2xlU3RlcHBlckNvbXBvbmVudH1dLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTnhTaW5nbGVTdGVwcGVyQ29tcG9uZW50IGV4dGVuZHMgTnhQcm9ncmVzc1N0ZXBwZXJEaXJlY3RpdmUge1xuICAvKiogU2V0cyB0aGUgbGFiZWwgb24gdGhlIHJpZ2h0IHNob3dpbmcgdGhlIG5leHQgc3RlcC4gKi9cbiAgQElucHV0KCduZXh0TGFiZWwnKVxuICBnZXQgcmlnaHRMYWJlbCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fcmlnaHRMYWJlbDsgfVxuICBzZXQgcmlnaHRMYWJlbCh2KSB7IHRoaXMuX3JpZ2h0TGFiZWwgPSB2OyB9XG5cbiAgcHJpdmF0ZSBfcmlnaHRMYWJlbDogc3RyaW5nID0gJ05leHQgc3RlcDonO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGdldCBwcm9ncmVzcygpIHtcbiAgICByZXR1cm4gKHRoaXMuc2VsZWN0ZWRJbmRleCArIDEpIC8gdGhpcy5jb3VudDtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGdldCBjdXJyZW50TGFiZWwoKSB7XG4gICAgY29uc3Qgc3RlcCA9IHRoaXMuY3VycmVudFN0ZXA7XG4gICAgY29uc3QgbGFiZWwgPSBzdGVwLnN0ZXBMYWJlbCB8fCBzdGVwLmxhYmVsO1xuXG4gICAgcmV0dXJuIGBcbiAgICAke3RoaXMuY3VycmVudFN0ZXBMYWJlbH0gJHt0aGlzLnNlbGVjdGVkSW5kZXggKyAxfS8ke3RoaXMuY291bnR9OiAke2xhYmVsfVxuICAgIGA7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXQgbmV4dExhYmVsKCkge1xuICAgIGNvbnN0IHN0ZXAgPSB0aGlzLm5leHRTdGVwO1xuXG4gICAgaWYgKHN0ZXApIHtcbiAgICAgIGNvbnN0IGxhYmVsID0gc3RlcC5zdGVwTGFiZWwgfHwgc3RlcC5sYWJlbDtcblxuICAgICAgcmV0dXJuIGBcbiAgICAgICAgJHt0aGlzLnJpZ2h0TGFiZWx9ICR7bGFiZWx9XG4gICAgICBgO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxufVxuIl19