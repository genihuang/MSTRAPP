/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, forwardRef, Inject } from '@angular/core';
import { NxStepComponent, NxProgressStepperDirective } from './../progress-stepper.component';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
/**
 * \@docs-private
 */
export class NxMultiStepItemComponent extends NxStepComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} stepper
     * @param {?} _errorStateMatcher
     */
    constructor(_changeDetectorRef, stepper, _errorStateMatcher) {
        super(stepper, _errorStateMatcher);
        this._changeDetectorRef = _changeDetectorRef;
        this._completed = false;
    }
    /**
     * Sets the index of the selected step.
     * @return {?}
     */
    get index() { return this._index; }
    /**
     * @param {?} value
     * @return {?}
     */
    set index(value) { this._index = coerceNumberProperty(value); }
    /**
     * Sets the selected step.
     * @return {?}
     */
    get selected() { return this._selected; }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) { this._selected = coerceBooleanProperty(value); }
    /**
     * Sets the active step.
     * @return {?}
     */
    get active() { return this._active; }
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) { this._active = coerceBooleanProperty(value); }
    /**
     * Sets the last step.
     * @return {?}
     */
    get last() { return this._last; }
    /**
     * @param {?} value
     * @return {?}
     */
    set last(value) { this._last = coerceBooleanProperty(value); }
    /**
     * Sets the first step.
     * @return {?}
     */
    get first() { return this._first; }
    /**
     * @param {?} value
     * @return {?}
     */
    set first(value) { this._first = coerceBooleanProperty(value); }
    /**
     * Whether the step is completed or not.
     * @param {?} value
     * @return {?}
     */
    set stepCompleted(value) {
        this._completed = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get stepCompleted() { return this._completed; }
}
NxMultiStepItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-multi-step-item',
                template: "<div class=\"label\">\n    {{label}}\n  </div>\n\n<div\n  [ngSwitch]=\"state\"\n  class=\"dot\"\n  [class.dot--filled]='stepCompleted'>\n  <nx-icon *ngIf=\"stepCompleted\" name=\"check\"></nx-icon>\n  <div *ngIf=\"selected && !stepCompleted\" class=\"small-dot\"></div>\n\n</div>\n<div\n  *ngIf=\"!last\"\n  class=\"before-line\"\n  [class.before-line--active]='active'>\n</div>\n<div\n  *ngIf=\"!last\"\n  class=\"line\"\n  [class.line--active]='active'>\n</div>\n<div\n  *ngIf=\"!last\"\n  class=\"after-line\"\n  [class.after-line--active]='active'>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{flex:1 0 auto;display:flex;align-items:center;position:relative;font-size:16px;padding-bottom:32px;cursor:pointer}.label{position:absolute;top:calc(8px + 16px);-webkit-transform:translateX(-50%) translateX(8px);transform:translateX(-50%) translateX(8px);min-width:156px;text-align:center;line-height:24px;font-size:16px;color:#414141}.dot{width:16px;height:16px;border:2px solid #007ab3;border-radius:50%;color:#fff;background-color:#fff;flex:0 0 auto}.dot nx-icon{font-size:16px;position:absolute;top:0;left:0}.small-dot{top:4px;left:4px;position:absolute;width:8px;height:8px;border-radius:50%;background-color:#007ab3}.dot--filled{background-color:#007ab3;color:#fff}.line{flex:1 1 100%;min-width:32px;height:0;border-top:4px dotted #c2c2c2}.line--active{border-top-color:#007ab3;border-top-style:solid;border-image-source:none;transition:border-style .1s ease-in}.after-line,.before-line{width:4px;height:4px;z-index:-1}.after-line--active,.before-line--active{z-index:0;background:#007ab3}"]
            }] }
];
/** @nocollapse */
NxMultiStepItemComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NxProgressStepperDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NxProgressStepperDirective)),] }] },
    { type: ErrorStateMatcher }
];
NxMultiStepItemComponent.propDecorators = {
    state: [{ type: Input }],
    label: [{ type: Input }],
    index: [{ type: Input }],
    selected: [{ type: Input }],
    active: [{ type: Input }],
    last: [{ type: Input }],
    first: [{ type: Input }],
    stepCompleted: [{ type: Input }]
};
if (false) {
    /**
     * The state of the step.
     * @type {?}
     */
    NxMultiStepItemComponent.prototype.state;
    /**
     * The label of the step.
     * @type {?}
     */
    NxMultiStepItemComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._index;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._last;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._first;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._completed;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc3RlcC1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3Byb2dyZXNzLXN0ZXBwZXIvIiwic291cmNlcyI6WyJtdWx0aS9tdWx0aS1zdGVwLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBRSxlQUFlLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7OztBQVM1RCxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsZUFBZTs7Ozs7O0lBOEMzRCxZQUFvQixrQkFBcUMsRUFDRCxPQUFtQyxFQUN4RixrQkFBcUM7UUFDdEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBSGpCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFGakQsZUFBVSxHQUFZLEtBQUssQ0FBQztJQU1wQyxDQUFDOzs7OztJQTFDRCxJQUNJLEtBQUssS0FBYSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzs7OztJQUMzQyxJQUFJLEtBQUssQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBSXZFLElBQ0ksUUFBUSxLQUFjLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBQ2xELElBQUksUUFBUSxDQUFDLEtBQWMsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFJL0UsSUFDSSxNQUFNLEtBQWMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDOUMsSUFBSSxNQUFNLENBQUMsS0FBYyxJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7OztJQUkzRSxJQUNJLElBQUksS0FBYyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7OztJQUMxQyxJQUFJLElBQUksQ0FBQyxLQUFjLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBSXZFLElBQ0ksS0FBSyxLQUFjLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Ozs7O0lBQzVDLElBQUksS0FBSyxDQUFDLEtBQWMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7O0lBSXpFLElBQ0ksYUFBYSxDQUFDLEtBQWM7UUFDOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEMsQ0FBQzs7OztJQUNGLElBQUksYUFBYSxLQUFjLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7OztZQWpEekQsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLDhqQkFBK0M7Z0JBQy9DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUVoRDs7OztZQVZtRCxpQkFBaUI7WUFDM0MsMEJBQTBCLHVCQXlEL0MsTUFBTSxTQUFDLFVBQVU7OztvQkFBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsRUFBQztZQXhEL0MsaUJBQWlCOzs7b0JBV3ZCLEtBQUs7b0JBR0wsS0FBSztvQkFHTCxLQUFLO3VCQU1MLEtBQUs7cUJBTUwsS0FBSzttQkFNTCxLQUFLO29CQU1MLEtBQUs7NEJBTUwsS0FBSzs7Ozs7OztJQXBDTix5Q0FBdUI7Ozs7O0lBR3ZCLHlDQUF1Qjs7Ozs7SUFNdkIsMENBQXVCOzs7OztJQU12Qiw2Q0FBMkI7Ozs7O0lBTTNCLDJDQUF5Qjs7Ozs7SUFNekIseUNBQXVCOzs7OztJQU12QiwwQ0FBd0I7Ozs7O0lBU3hCLDhDQUFvQzs7Ozs7SUFFeEIsc0RBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5LCBjb2VyY2VOdW1iZXJQcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIGZvcndhcmRSZWYsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhTdGVwQ29tcG9uZW50LCBOeFByb2dyZXNzU3RlcHBlckRpcmVjdGl2ZSB9IGZyb20gJy4vLi4vcHJvZ3Jlc3Mtc3RlcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXJyb3JTdGF0ZU1hdGNoZXIgfSBmcm9tICdAYWxsaWFuei9uZ3gtbmRieC91dGlscyc7XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1tdWx0aS1zdGVwLWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vbXVsdGktc3RlcC1pdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWycuL211bHRpLXN0ZXAtaXRlbS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE54TXVsdGlTdGVwSXRlbUNvbXBvbmVudCBleHRlbmRzIE54U3RlcENvbXBvbmVudCB7XG4gIC8qKiBUaGUgc3RhdGUgb2YgdGhlIHN0ZXAuICovXG4gIEBJbnB1dCgpIHN0YXRlOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBsYWJlbCBvZiB0aGUgc3RlcC4gKi9cbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcblxuICAvKiogU2V0cyB0aGUgaW5kZXggb2YgdGhlIHNlbGVjdGVkIHN0ZXAuICovXG4gIEBJbnB1dCgpXG4gIGdldCBpbmRleCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5faW5kZXg7IH1cbiAgc2V0IGluZGV4KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5faW5kZXggPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7IH1cbiAgcHJpdmF0ZSBfaW5kZXg6IG51bWJlcjtcblxuICAvKiogU2V0cyB0aGUgc2VsZWN0ZWQgc3RlcC4gKi9cbiAgQElucHV0KClcbiAgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7IH1cbiAgc2V0IHNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX3NlbGVjdGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTsgfVxuICBwcml2YXRlIF9zZWxlY3RlZDogYm9vbGVhbjtcblxuICAvKiogU2V0cyB0aGUgYWN0aXZlIHN0ZXAuICovXG4gIEBJbnB1dCgpXG4gIGdldCBhY3RpdmUoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9hY3RpdmU7IH1cbiAgc2V0IGFjdGl2ZSh2YWx1ZTogYm9vbGVhbikgeyB0aGlzLl9hY3RpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpOyB9XG4gIHByaXZhdGUgX2FjdGl2ZTogYm9vbGVhbjtcblxuICAvKiogU2V0cyB0aGUgbGFzdCBzdGVwLiAqL1xuICBASW5wdXQoKVxuICBnZXQgbGFzdCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2xhc3Q7IH1cbiAgc2V0IGxhc3QodmFsdWU6IGJvb2xlYW4pIHsgdGhpcy5fbGFzdCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7IH1cbiAgcHJpdmF0ZSBfbGFzdDogYm9vbGVhbjtcblxuICAvKiogU2V0cyB0aGUgZmlyc3Qgc3RlcC4gKi9cbiAgQElucHV0KClcbiAgZ2V0IGZpcnN0KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fZmlyc3Q7IH1cbiAgc2V0IGZpcnN0KHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX2ZpcnN0ID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTsgfVxuICBwcml2YXRlIF9maXJzdDogYm9vbGVhbjtcblxuICAvKiogV2hldGhlciB0aGUgc3RlcCBpcyBjb21wbGV0ZWQgb3Igbm90LiAqL1xuICBASW5wdXQoKVxuICBzZXQgc3RlcENvbXBsZXRlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2NvbXBsZXRlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICB9XG4gIGdldCBzdGVwQ29tcGxldGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fY29tcGxldGVkOyB9XG4gIHByaXZhdGUgX2NvbXBsZXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTnhQcm9ncmVzc1N0ZXBwZXJEaXJlY3RpdmUpKSBzdGVwcGVyOiBOeFByb2dyZXNzU3RlcHBlckRpcmVjdGl2ZSxcbiAgICAgX2Vycm9yU3RhdGVNYXRjaGVyOiBFcnJvclN0YXRlTWF0Y2hlcikge1xuICAgIHN1cGVyKHN0ZXBwZXIsIF9lcnJvclN0YXRlTWF0Y2hlcik7XG4gIH1cblxufVxuIl19