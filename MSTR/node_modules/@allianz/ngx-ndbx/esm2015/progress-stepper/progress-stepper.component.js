/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CdkStep, CdkStepper } from '@angular/cdk/stepper';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject, Input, QueryList, SkipSelf } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
// tslint:disable:use-input-property-decorator
// We need to reference steps in stepper and stepper in steps. To prevent circular depenedency errors
// Provide both components in a single file. Otherwise we would have to introduce interface/abstract classes
// shared between both implementations.
export class NxStepComponent extends CdkStep {
    /**
     * @param {?} stepper
     * @param {?} _errorStateMatcher
     */
    constructor(stepper, _errorStateMatcher) {
        super(stepper);
        this._errorStateMatcher = _errorStateMatcher;
    }
    /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    isErrorState(control, form) {
        /** @type {?} */
        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);
        // Checks for the validity of a step form that is not submitted or touched,
        // e.g when the user directly clicks the "next" button or directly on the step
        /** @type {?} */
        const customErrorState = !!(control && control.invalid && this.interacted);
        return originalErrorState || customErrorState;
    }
}
NxStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-step',
                template: "<ng-template><ng-content></ng-content></ng-template>\n",
                exportAs: 'nxStep',
                providers: [{ provide: ErrorStateMatcher, useExisting: NxStepComponent }],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NxStepComponent.ctorParameters = () => [
    { type: NxProgressStepperDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NxProgressStepperDirective)),] }] },
    { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._errorStateMatcher;
}
export class NxProgressStepperDirective extends CdkStepper {
    constructor() {
        super(...arguments);
        this._stepHeader = new QueryList();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes
            .pipe(takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this._stateChanged();
        }));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get hasPrevious() {
        return (this.selectedIndex - 1) >= 0;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get hasNext() {
        return (this.selectedIndex + 1) < this.count;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get count() {
        return this._steps ? this._steps.length : 0;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get currentStep() {
        if (this.count === 0 || this.selectedIndex === -1) {
            return null;
        }
        /** @type {?} */
        const steps = this._steps.toArray();
        return steps[this.selectedIndex];
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get nextStep() {
        if (this.selectedIndex + 1 >= this._steps.length) {
            return null;
        }
        else {
            return this._steps.toArray()[this.selectedIndex + 1];
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get steps() {
        return this._steps;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get currentLabel() {
        /** @type {?} */
        const step = this.currentStep;
        /** @type {?} */
        const label = step.stepLabel || step.label;
        return `
    ${this.currentStepLabel} ${this.selectedIndex + 1}/${this.count}: ${label}
    `;
    }
}
NxProgressStepperDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxProgressStepper]',
                exportAs: 'nxProgressStepper',
            },] }
];
NxProgressStepperDirective.propDecorators = {
    _steps: [{ type: ContentChildren, args: [NxStepComponent,] }],
    currentStepLabel: [{ type: Input }],
    title: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NxProgressStepperDirective.prototype._steps;
    /** @type {?} */
    NxProgressStepperDirective.prototype._stepHeader;
    /**
     * Sets the label on the left side showing the current step label. Used for mobile viewports.
     * @type {?}
     */
    NxProgressStepperDirective.prototype.currentStepLabel;
    /**
     * Sets the title to be rendered above the progress bar.
     * @type {?}
     */
    NxProgressStepperDirective.prototype.title;
}
//# sourceMappingURL=data:application/json;base64,