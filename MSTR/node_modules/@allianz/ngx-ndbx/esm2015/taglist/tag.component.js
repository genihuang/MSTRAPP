/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { DELETE, BACKSPACE } from '@angular/cdk/keycodes';
export class NxTagComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * An event is dispatched each time when the tag is clicked.
         */
        this.clicked = new EventEmitter();
        /**
         * An event is dispatched each time when the tag is removed.
         */
        this.removed = new EventEmitter();
    }
    /**
     * Whether the tag is removeable.
     * @param {?} value
     * @return {?}
     */
    set removable(value) {
        this._removable = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get removable() {
        return this._removable;
    }
    /**
     * Sets the value of the tag.
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    // Emit the removed event that the parent can remove the value
    removeClickHandler(event) {
        event.stopPropagation();
        this.removed.emit(this.value);
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    removeKeyHandler(event) {
        if (this.removable && (event.keyCode === DELETE || event.keyCode === BACKSPACE)) {
            event.preventDefault();
            event.stopPropagation();
            this.removed.emit(this.value);
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    tagClickHandler() {
        this.clicked.emit(this.value);
    }
}
NxTagComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-tag',
                template: "{{ value }}\n<span role=\"link\" aria-label=\"close\" class=\"nx-tag__close\" *ngIf=\"removable\"\n    (click)=\"removeClickHandler($event)\">\n    <nx-icon class=\"nx-tag__close-icon\" name=\"close\"></nx-icon>\n</span>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '(click)': 'tagClickHandler()',
                    '(keydown)': 'removeKeyHandler($event)',
                    '[attr.tabIndex]': '0'
                },
                styles: [":host{height:auto;max-width:100%;font-size:14px;color:#767676;padding:6px 14px;line-height:16px;letter-spacing:1px;font-weight:600;display:flex;align-items:center;border:2px solid #d9d9d9;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:background-color .2s,box-shadow .2s;cursor:pointer}:host:hover{border-color:#c2c2c2;color:#5b5b5b;background-color:#ececec}:host:focus{outline:transparent solid 2px}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}.nx-tag__close-icon{outline:0;width:16px;height:16px;display:block;font-size:16px;line-height:14px}.nx-tag__close{margin-left:8px}:host-context(.nx-taglist--keyword){padding:14px 22px}"]
            }] }
];
/** @nocollapse */
NxTagComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxTagComponent.propDecorators = {
    removable: [{ type: Input }],
    value: [{ type: Input }],
    clicked: [{ type: Output }],
    removed: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTagComponent.prototype._removable;
    /**
     * @type {?}
     * @private
     */
    NxTagComponent.prototype._value;
    /**
     * An event is dispatched each time when the tag is clicked.
     * @type {?}
     */
    NxTagComponent.prototype.clicked;
    /**
     * An event is dispatched each time when the tag is removed.
     * @type {?}
     */
    NxTagComponent.prototype.removed;
    /**
     * @type {?}
     * @private
     */
    NxTagComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsidGFnbGlzdC90YWcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFhMUQsTUFBTSxPQUFPLGNBQWM7Ozs7SUErQnpCLFlBQW9CLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1COzs7O1FBSnRDLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7OztRQUVyRCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFWixDQUFDOzs7Ozs7SUEzQjdELElBQ0ksU0FBUyxDQUFDLEtBQWM7UUFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQzs7OztJQUNELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDOzs7Ozs7SUFJRCxJQUNJLEtBQUssQ0FBQyxLQUFhO1FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7WUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7Ozs7O0lBV0Qsa0JBQWtCLENBQUMsS0FBaUI7UUFDbEMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFHRCxnQkFBZ0IsQ0FBQyxLQUFvQjtRQUNuQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxFQUFFO1lBQy9FLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQzs7Ozs7SUFHRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7OztZQS9ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLHdPQUFpQztnQkFDakMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBRS9DLElBQUksRUFBRTtvQkFDSixTQUFTLEVBQUUsbUJBQW1CO29CQUM5QixXQUFXLEVBQUUsMEJBQTBCO29CQUN2QyxpQkFBaUIsRUFBRSxHQUFHO2lCQUN2Qjs7YUFDRjs7OztZQWJ5RSxpQkFBaUI7Ozt3QkFrQnhGLEtBQUs7b0JBV0wsS0FBSztzQkFZTCxNQUFNO3NCQUVOLE1BQU07Ozs7Ozs7SUE1QlAsb0NBQTRCOzs7OztJQVk1QixnQ0FBdUI7Ozs7O0lBY3ZCLGlDQUF3RTs7Ozs7SUFFeEUsaUNBQXdFOzs7OztJQUU1RCw0Q0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgREVMRVRFLCBCQUNLU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC10YWcnLFxuICB0ZW1wbGF0ZVVybDogJ3RhZy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsndGFnLmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnKGNsaWNrKSc6ICd0YWdDbGlja0hhbmRsZXIoKScsXG4gICAgJyhrZXlkb3duKSc6ICdyZW1vdmVLZXlIYW5kbGVyKCRldmVudCknLFxuICAgICdbYXR0ci50YWJJbmRleF0nOiAnMCdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeFRhZ0NvbXBvbmVudCB7XG4gIHByaXZhdGUgX3JlbW92YWJsZTogYm9vbGVhbjtcblxuICAvKiogV2hldGhlciB0aGUgdGFnIGlzIHJlbW92ZWFibGUuICovXG4gIEBJbnB1dCgpXG4gIHNldCByZW1vdmFibGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9yZW1vdmFibGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG4gIGdldCByZW1vdmFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbW92YWJsZTtcbiAgfVxuXG4gIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmc7XG4gIC8qKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgdGFnLiAqL1xuICBASW5wdXQoKVxuICBzZXQgdmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl92YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqIEFuIGV2ZW50IGlzIGRpc3BhdGNoZWQgZWFjaCB0aW1lIHdoZW4gdGhlIHRhZyBpcyBjbGlja2VkLiAqL1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgY2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgLyoqIEFuIGV2ZW50IGlzIGRpc3BhdGNoZWQgZWFjaCB0aW1lIHdoZW4gdGhlIHRhZyBpcyByZW1vdmVkLiAqL1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgcmVtb3ZlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgLy8gRW1pdCB0aGUgcmVtb3ZlZCBldmVudCB0aGF0IHRoZSBwYXJlbnQgY2FuIHJlbW92ZSB0aGUgdmFsdWVcbiAgcmVtb3ZlQ2xpY2tIYW5kbGVyKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5yZW1vdmVkLmVtaXQodGhpcy52YWx1ZSk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICByZW1vdmVLZXlIYW5kbGVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKHRoaXMucmVtb3ZhYmxlICYmIChldmVudC5rZXlDb2RlID09PSBERUxFVEUgfHwgZXZlbnQua2V5Q29kZSA9PT0gQkFDS1NQQUNFKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5yZW1vdmVkLmVtaXQodGhpcy52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdGFnQ2xpY2tIYW5kbGVyKCkge1xuICAgIHRoaXMuY2xpY2tlZC5lbWl0KHRoaXMudmFsdWUpO1xuICB9XG59XG4iXX0=