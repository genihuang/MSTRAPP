/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxFormfieldControl, NxFormfieldErrorDirective } from '@allianz/ngx-ndbx/formfield';
import { getFontShorthand } from '@allianz/ngx-ndbx/utils';
import { Overlay } from '@angular/cdk/overlay';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, HostBinding, Input, QueryList, Renderer2, ViewChild } from '@angular/core';
import { startWith } from 'rxjs/operators';
import { Subject, Subscription } from 'rxjs';
import { NxPopoverTriggerDirective } from '@allianz/ngx-ndbx/popover';
import { NxDropdownComponent } from '@allianz/ngx-ndbx/dropdown';
export class NxWordComponent {
    /**
     * @param {?} elementRef
     * @param {?} _changeDetectorRef
     * @param {?} _renderer
     * @param {?} _overlay
     */
    constructor(elementRef, _changeDetectorRef, _renderer, _overlay) {
        this.elementRef = elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this._overlay = _overlay;
        this.subscription = Subscription.EMPTY;
        this.subscriptionValues = Subscription.EMPTY;
        /**
         * \@docs-private
         */
        this.hasErrors = false;
        /**
         * \@docs-private
         */
        this.inputChanges = new Subject();
        /**
         * \@docs-private
         */
        this.currentTextWidth = 0;
        // this will apply different min-widths to our component through our styles
        /**
         * Provide a hint for a minimal width. The actual size will be determined for inputs for each change.
         */
        this.size = 'regular';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._validateControlChild();
        this.subscription = this._control.stateChanges.pipe(startWith(null)).subscribe((/**
         * @return {?}
         */
        () => {
            this.hasErrors = this._control.errorState;
            this._changeDetectorRef.markForCheck();
        }));
        // if we have a ngcontrol available stick to its valueChanges subject
        if (this._control.ngControl) {
            this.subscriptionValues = this._control.ngControl.valueChanges.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                this.updateCurrentTextWidth();
                this.inputChanges.next();
            }));
            // in any other case it is a bre input and input changes are signaled through simple state changes
        }
        else {
            this.subscriptionValues = this._control.stateChanges.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                this.updateCurrentTextWidth();
                this.inputChanges.next();
            }));
        }
        this._control.setAriaLabel(this.label);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * \@docs-private
     * Calculate the width of the full text given by the input,
     * that value is bound to this component so it can grow.
     * The involved input is known to have a width of 100% an will fit the additional space given
     * which completes the auto growing behavior.
     * @return {?}
     */
    updateCurrentTextWidth() {
        // provide the canvas only lazy
        if (!this.measureCanvas) {
            this.measureCanvas = this._renderer.createElement('canvas');
        }
        /** @type {?} */
        const ctx = this.measureCanvas.getContext('2d');
        /** @type {?} */
        const inputRef = this._control.elementRef;
        /** @type {?} */
        const styles = window.getComputedStyle(inputRef.nativeElement);
        ctx.font = getFontShorthand(styles);
        /** @type {?} */
        const metrics = ctx.measureText(this._control.value);
        // add 1px (cursor width) to prevent jumping of the text on blur.
        /** @type {?} */
        const newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;
        // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent
        // Works as promised as long as there is not other tag around the word. Not expected but possible.
        /** @type {?} */
        const parent = this.elementRef.nativeElement.parentElement;
        /** @type {?} */
        const parentMeasurement = parent.getBoundingClientRect();
        // Limit to own given minimal width
        this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);
        // Limit to container width
        this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);
        this._popover.updatePosition();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    repositionError() {
        if (this._popover) {
            this._popover.updatePosition();
        }
    }
    // Fail if the required control is missing.
    /**
     * @protected
     * @return {?}
     */
    _validateControlChild() {
        if (!this._control) {
            throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    getConnectedOverlayOrigin() {
        return this.elementRef;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get isFocused() {
        return this._control.focused;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get isFilled() {
        return !this._control.empty;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get hasDropdown() {
        return Boolean(this._dropdown);
    }
}
NxWordComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-word',
                template: "<div\n  class=\"nx-word__input-wrapper\"\n  [nxPopoverTriggerFor]=\"popoverHover\"\n  nxPopoverTrigger='manual'\n  nxPopoverCloseable=\"false\"\n  nxPopoverDirection=\"top\"\n  [nxPopoverShow]=\"hasErrors && _errorChildren.length > 0\">\n\n  <!-- We only allow formfield controls here -->\n  <div *ngIf=\"!hasDropdown\" class=\"nx-word__inner-wrapper\">\n    <ng-content select=\"[nxInput]\"></ng-content>\n  </div>\n  <ng-content select=\"nx-dropdown\"></ng-content>\n</div>\n\n<nx-popover #popoverHover>\n  <ng-content select=\"[nxError]\"></ng-content>\n</nx-popover>\n",
                host: {
                    '[class.size-short]': 'size == "short"',
                    '[class.size-regular]': 'size == "regular"',
                    '[class.size-long]': 'size == "long"',
                    '[class.has-error]': 'hasErrors',
                    '[class.is-focused]': 'isFocused',
                    '[class.is-filled]': 'isFilled',
                    '[class.has-dropdown]': 'hasDropdown',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:inline-block;position:relative;font-weight:400;text-align:center;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;width:100%}:host .nx-word__inner-wrapper{border-bottom:2px solid #d9d9d9}:host.size-short{min-width:80px}:host.size-regular{min-width:152px}:host.size-long{min-width:360px}@media (max-width:991px){:host.size-long{min-width:280px}}@media (max-width:703px){:host.size-long{min-width:248px}}:host ::ng-deep .c-input{display:inline-block;text-align:inherit;font-size:inherit;line-height:inherit;background:0 0;color:inherit;border:none;outline:0;margin:0;width:100%;max-width:100%;height:auto;box-shadow:none;padding:0 8px}:host ::ng-deep .c-input.is-focused{outline:0;box-shadow:none;border-bottom-width:2px}:host ::ng-deep .c-input.is-filled,:host ::ng-deep .c-input.is-focused{color:#006192;font-weight:400}:host ::ng-deep .c-input.is-disabled{cursor:not-allowed}:host ::ng-deep .c-input::-ms-clear{display:none}:host ::ng-deep nx-dropdown{position:relative;border-bottom:2px solid #d9d9d9}:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:inherit;margin-bottom:-2px}:host ::ng-deep nx-dropdown.is-filled{border-color:#007ab3;color:#006192}:host ::ng-deep nx-dropdown .nx-dropdown__icon{line-height:inherit}:host ::ng-deep .nx-word__input-wrapper{width:100%}:host(.is-filled) .nx-word__inner-wrapper,:host(.is-focused) .nx-word__inner-wrapper{border-color:#007ab3}:host(.has-error) .nx-word__inner-wrapper{border-color:#dc3149}:host.has-error ::ng-deep nx-dropdown{color:#dc3149;border-color:#dc3149}:host.has-error ::ng-deep .c-input.has-error{color:#dc3149}:host-context(.is-negative) ::ng-deep .nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown.is-filled{border-color:#fff;color:#fff}:host-context(.is-negative) ::ng-deep .c-input{color:#fff}:host-context(.is-negative) .nx-word__inner-wrapper{border-color:#fff}.nx-word__inner-wrapper{height:52px}@media (max-width:991px){:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:26px}.nx-word__inner-wrapper{height:36px}}:host-context(.nx-natural-language-form--small) .nx-word__inner-wrapper{height:36px}:host-context(.nx-natural-language-form--small) ::ng-deep nx-dropdown .nx-dropdown__container{margin-bottom:2px}"]
            }] }
];
/** @nocollapse */
NxWordComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: Overlay }
];
NxWordComponent.propDecorators = {
    _control: [{ type: ContentChild, args: [NxFormfieldControl,] }],
    _errorChildren: [{ type: ContentChildren, args: [NxFormfieldErrorDirective,] }],
    _popover: [{ type: ViewChild, args: [NxPopoverTriggerDirective,] }],
    _dropdown: [{ type: ContentChild, args: [NxDropdownComponent,] }],
    currentTextWidth: [{ type: HostBinding, args: ['style.width.px',] }],
    size: [{ type: Input, args: ['nxSize',] }],
    label: [{ type: Input, args: ['nxLabel',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxWordComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    NxWordComponent.prototype.subscriptionValues;
    /**
     * \@docs-private
     * @type {?}
     */
    NxWordComponent.prototype.hasErrors;
    /**
     * @type {?}
     * @private
     */
    NxWordComponent.prototype.measureCanvas;
    /**
     * \@docs-private
     * @type {?}
     */
    NxWordComponent.prototype.inputChanges;
    /** @type {?} */
    NxWordComponent.prototype._control;
    /** @type {?} */
    NxWordComponent.prototype._errorChildren;
    /** @type {?} */
    NxWordComponent.prototype._popover;
    /** @type {?} */
    NxWordComponent.prototype._dropdown;
    /**
     * \@docs-private
     * @type {?}
     */
    NxWordComponent.prototype.currentTextWidth;
    /**
     * Provide a hint for a minimal width. The actual size will be determined for inputs for each change.
     * @type {?}
     */
    NxWordComponent.prototype.size;
    /**
     * A word doesn't have a set place to show labels.
     * In order to be accessible, you have to provide a label with this property.
     * It will be attached to the given input through `aria-label`.
     * @type {?}
     */
    NxWordComponent.prototype.label;
    /**
     * \@docs-private
     * @type {?}
     */
    NxWordComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NxWordComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxWordComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NxWordComponent.prototype._overlay;
}
//# sourceMappingURL=data:application/json;base64,