/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, HostListener, Input, QueryList, } from '@angular/core';
import { merge, Subject, Subscription } from 'rxjs';
import { delay, throttleTime } from 'rxjs/operators';
import { NxWordComponent } from './word.component';
/** @type {?} */
const DEFAULT_SIZE = 'large';
export class NxNaturalLanguageFormComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._negative = false;
        /**
         * \@docs-private
         */
        this.resizeEvent$ = new Subject();
        /**
         * \@docs-private
         */
        this.updatePopoversSubscription = Subscription.EMPTY;
        /**
         * \@docs-private
         */
        this._size = DEFAULT_SIZE;
    }
    /**
     * Whether the negative set of stylings should be used.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Sets the size of the NLF. Default value: large
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.resizeEvent$.next();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // Collect all words and listen for changes so we can update any open error popover
        // which would otherwise get wrongly positioned.
        /** @type {?} */
        const subjects = this._words.map((/**
         * @param {?} word
         * @return {?}
         */
        (word) => word.inputChanges));
        /** @type {?} */
        const source = merge(...subjects);
        this.updatePopoversSubscription = source.subscribe((/**
         * @return {?}
         */
        () => {
            this.updatePositionPopovers();
        }));
        this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));
        this.resizeObservable.subscribe((/**
         * @return {?}
         */
        () => this.resizeWords()));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    resizeWords() {
        this._words.forEach((/**
         * @param {?} word
         * @return {?}
         */
        (word) => {
            word.updateCurrentTextWidth();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.updatePopoversSubscription.unsubscribe();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    updatePositionPopovers() {
        if (this._words) {
            this._words.forEach((/**
             * @param {?} word
             * @return {?}
             */
            (word) => {
                word.repositionError();
            }));
        }
    }
}
NxNaturalLanguageFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-natural-language-form',
                template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.is-negative]': 'negative',
                    '[class.nx-natural-language-form--small]': 'size === "small"',
                    '[class.nx-natural-language-form--large]': 'size === "large"',
                },
                styles: [":host{display:block;padding-top:72px;padding-bottom:80px;color:#414141;font-weight:300;font-size:40px;line-height:52px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}:host.is-negative{color:#fff}@media (max-width:991px){:host{font-size:26px;line-height:36px}}@media (max-width:703px){:host{font-size:26px}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:26px;line-height:32px;letter-spacing:.3px}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}"]
            }] }
];
/** @nocollapse */
NxNaturalLanguageFormComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxNaturalLanguageFormComponent.propDecorators = {
    _words: [{ type: ContentChildren, args: [NxWordComponent,] }],
    negative: [{ type: Input, args: ['nxNegative',] }],
    size: [{ type: Input }],
    onResize: [{ type: HostListener, args: ['window:orientationchange', ['$event'],] }, { type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._negative;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.resizeEvent$;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.resizeObservable;
    /** @type {?} */
    NxNaturalLanguageFormComponent.prototype._words;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.updatePopoversSubscription;
    /**
     * \@docs-private
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0dXJhbC1sYW5ndWFnZS1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsibmF0dXJhbC1sYW5ndWFnZS1mb3JtL25hdHVyYWwtbGFuZ3VhZ2UtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsWUFBWSxFQUNaLEtBQUssRUFFTCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLEtBQUssRUFBYyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztNQUs3QyxZQUFZLEdBQUcsT0FBTztBQWM1QixNQUFNLE9BQU8sOEJBQThCOzs7O0lBdUN6QyxZQUFvQixrQkFBcUM7UUFBckMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQXRDakQsY0FBUyxHQUFHLEtBQUssQ0FBQzs7OztRQUcxQixpQkFBWSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDOzs7O1FBUWxELCtCQUEwQixHQUFpQixZQUFZLENBQUMsS0FBSyxDQUFDOzs7O1FBR3RELFVBQUssR0FBOEIsWUFBWSxDQUFDO0lBd0JLLENBQUM7Ozs7OztJQXJCOUQsSUFDSSxRQUFRLENBQUMsS0FBSztRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBS0QsSUFDSSxJQUFJLENBQUMsS0FBZ0M7UUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFDRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQzs7Ozs7O0lBT0QsUUFBUSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxrQkFBa0I7Ozs7Y0FHVixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxJQUFxQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFDOztjQUN4RSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBRWpDLElBQUksQ0FBQywwQkFBMEIsR0FBRyxNQUFNLENBQUMsU0FBUzs7O1FBQUUsR0FBRyxFQUFFO1lBQ3ZELElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUM7SUFDNUQsQ0FBQzs7Ozs7SUFHRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxJQUFxQixFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDaEMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQywwQkFBMEIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUdELHNCQUFzQjtRQUNwQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLElBQXFCLEVBQUUsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3pCLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7WUE1RkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLG9HQUFtRDtnQkFDbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBRS9DLElBQUksRUFBRTtvQkFDSixxQkFBcUIsRUFBRSxVQUFVO29CQUNqQyx5Q0FBeUMsRUFBRyxrQkFBa0I7b0JBQzlELHlDQUF5QyxFQUFHLGtCQUFrQjtpQkFDL0Q7O2FBQ0Y7Ozs7WUE1QkMsaUJBQWlCOzs7cUJBdUNoQixlQUFlLFNBQUMsZUFBZTt1QkFTL0IsS0FBSyxTQUFDLFlBQVk7bUJBWWxCLEtBQUs7dUJBWUwsWUFBWSxTQUFDLDBCQUEwQixFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ25ELFlBQVksU0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7SUExQ3pDLG1EQUEwQjs7Ozs7SUFHMUIsc0RBQWtEOzs7OztJQUdsRCwwREFBbUM7O0lBRW5DLGdEQUFxRTs7Ozs7SUFHckUsb0VBQThEOzs7Ozs7SUFHOUQsK0NBQXdEOzs7OztJQXdCNUMsNERBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgUXVlcnlMaXN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1lcmdlLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbGF5LCB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54V29yZENvbXBvbmVudCB9IGZyb20gJy4vd29yZC5jb21wb25lbnQnO1xuXG4vKiogU2l6ZSBvZiB0aGUgTkxGLiAqL1xuZXhwb3J0IHR5cGUgTnhOYXR1cmFsTGFuZ3VhZ2VGb3JtU2l6ZSA9ICdzbWFsbCcgfCAnbGFyZ2UnO1xuXG5jb25zdCBERUZBVUxUX1NJWkUgPSAnbGFyZ2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1uYXR1cmFsLWxhbmd1YWdlLWZvcm0nLFxuICB0ZW1wbGF0ZVVybDogJ25hdHVyYWwtbGFuZ3VhZ2UtZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnbmF0dXJhbC1sYW5ndWFnZS1mb3JtLnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuaXMtbmVnYXRpdmVdJzogJ25lZ2F0aXZlJyxcbiAgICAnW2NsYXNzLm54LW5hdHVyYWwtbGFuZ3VhZ2UtZm9ybS0tc21hbGxdJyA6ICdzaXplID09PSBcInNtYWxsXCInLFxuICAgICdbY2xhc3MubngtbmF0dXJhbC1sYW5ndWFnZS1mb3JtLS1sYXJnZV0nIDogJ3NpemUgPT09IFwibGFyZ2VcIicsXG4gIH1cbn0pXG5cbmV4cG9ydCBjbGFzcyBOeE5hdHVyYWxMYW5ndWFnZUZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9uZWdhdGl2ZSA9IGZhbHNlO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHJlc2l6ZUV2ZW50JDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgcmVzaXplT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTx2b2lkPjtcblxuICBAQ29udGVudENoaWxkcmVuKE54V29yZENvbXBvbmVudCkgX3dvcmRzOiBRdWVyeUxpc3Q8TnhXb3JkQ29tcG9uZW50PjtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICB1cGRhdGVQb3BvdmVyc1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHByaXZhdGUgX3NpemU6IE54TmF0dXJhbExhbmd1YWdlRm9ybVNpemUgPSBERUZBVUxUX1NJWkU7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIG5lZ2F0aXZlIHNldCBvZiBzdHlsaW5ncyBzaG91bGQgYmUgdXNlZC4gKi9cbiAgQElucHV0KCdueE5lZ2F0aXZlJylcbiAgc2V0IG5lZ2F0aXZlKHZhbHVlKSB7XG4gICAgdGhpcy5fbmVnYXRpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICB9XG5cbiAgZ2V0IG5lZ2F0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl9uZWdhdGl2ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzaXplIG9mIHRoZSBOTEYuIERlZmF1bHQgdmFsdWU6IGxhcmdlXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgc2l6ZSh2YWx1ZTogTnhOYXR1cmFsTGFuZ3VhZ2VGb3JtU2l6ZSkge1xuICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuICBnZXQgc2l6ZSgpOiBOeE5hdHVyYWxMYW5ndWFnZUZvcm1TaXplIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93Om9yaWVudGF0aW9uY2hhbmdlJywgWyckZXZlbnQnXSlcbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsnJGV2ZW50J10pXG4gIG9uUmVzaXplKGV2ZW50KSB7XG4gICAgdGhpcy5yZXNpemVFdmVudCQubmV4dCgpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIENvbGxlY3QgYWxsIHdvcmRzIGFuZCBsaXN0ZW4gZm9yIGNoYW5nZXMgc28gd2UgY2FuIHVwZGF0ZSBhbnkgb3BlbiBlcnJvciBwb3BvdmVyXG4gICAgLy8gd2hpY2ggd291bGQgb3RoZXJ3aXNlIGdldCB3cm9uZ2x5IHBvc2l0aW9uZWQuXG4gICAgY29uc3Qgc3ViamVjdHMgPSB0aGlzLl93b3Jkcy5tYXAoKHdvcmQ6IE54V29yZENvbXBvbmVudCkgPT4gd29yZC5pbnB1dENoYW5nZXMpO1xuICAgIGNvbnN0IHNvdXJjZSA9IG1lcmdlKC4uLnN1YmplY3RzKTtcblxuICAgIHRoaXMudXBkYXRlUG9wb3ZlcnNTdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKCAoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uUG9wb3ZlcnMoKTtcbiAgICB9KTtcblxuICAgIHRoaXMucmVzaXplT2JzZXJ2YWJsZSA9IHRoaXMucmVzaXplRXZlbnQkLnBpcGUodGhyb3R0bGVUaW1lKDUwMCksIGRlbGF5KDEwMCkpO1xuICAgIHRoaXMucmVzaXplT2JzZXJ2YWJsZS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5yZXNpemVXb3JkcygpKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHJlc2l6ZVdvcmRzKCkge1xuICAgIHRoaXMuX3dvcmRzLmZvckVhY2goKHdvcmQ6IE54V29yZENvbXBvbmVudCkgPT4ge1xuICAgICAgd29yZC51cGRhdGVDdXJyZW50VGV4dFdpZHRoKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVBvcG92ZXJzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICB1cGRhdGVQb3NpdGlvblBvcG92ZXJzKCkge1xuICAgIGlmICh0aGlzLl93b3Jkcykge1xuICAgICAgdGhpcy5fd29yZHMuZm9yRWFjaCgod29yZDogTnhXb3JkQ29tcG9uZW50KSA9PiB7XG4gICAgICAgIHdvcmQucmVwb3NpdGlvbkVycm9yKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==