/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxTabGroupBase } from './tab-group-base';
import { TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, Component, Input, TemplateRef, ViewChild, ViewContainerRef, Optional, Inject, Host } from '@angular/core';
import { Subject } from 'rxjs';
export class NxTabComponent {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _tabGroup
     */
    constructor(_viewContainerRef, _tabGroup) {
        this._viewContainerRef = _viewContainerRef;
        this._tabGroup = _tabGroup;
        /**
         * The portal that will be the hosted content of the tab
         */
        this._contentPortal = null;
        /**
         * Emits whenever the internal state of the tab changes.
         */
        this._stateChanges = new Subject();
        /**
         * Whether the tab is currently active.
         */
        this.isActive = false;
        if (!this._tabGroup) {
            throw Error(`The nx-tab element has to be wrapped in a nx-tab-group to work.
      Please provide a nx-tab-group element and place your tabs inside it.`);
        }
    }
    /**
     * Sets the label of the tab shown in the tablist.
     * @return {?}
     */
    get label() {
        return this._label;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        if (this._label !== value) {
            this._label = value;
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get content() {
        return this._contentPortal;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('label')) {
            this._stateChanges.next();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._contentPortal = new TemplatePortal(this._implicitContent, this._viewContainerRef);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._stateChanges.complete();
    }
}
NxTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-tab',
                exportAs: 'nxTab',
                template: "<ng-template><ng-content></ng-content></ng-template>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NxTabComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: NxTabGroupBase, decorators: [{ type: Inject, args: [NxTabGroupBase,] }, { type: Optional }, { type: Host }] }
];
NxTabComponent.propDecorators = {
    label: [{ type: Input }],
    _implicitContent: [{ type: ViewChild, args: [TemplateRef,] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._label;
    /**
     * The portal that will be the hosted content of the tab
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._contentPortal;
    /**
     * Emits whenever the internal state of the tab changes.
     * @type {?}
     */
    NxTabComponent.prototype._stateChanges;
    /**
     * Template inside the NxTab view that contains an `<ng-content>`.
     * @type {?}
     */
    NxTabComponent.prototype._implicitContent;
    /**
     * Whether the tab is currently active.
     * @type {?}
     */
    NxTabComponent.prototype.isActive;
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._tabGroup;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJ0YWJzL3RhYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxLQUFLLEVBS0wsV0FBVyxFQUNYLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsUUFBUSxFQUNSLE1BQU0sRUFDTixJQUFJLEVBQ0wsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVEvQixNQUFNLE9BQU8sY0FBYzs7Ozs7SUFpQ3pCLFlBQ1UsaUJBQW1DLEVBQ1MsU0FBeUI7UUFEckUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtRQUNTLGNBQVMsR0FBVCxTQUFTLENBQWdCOzs7O1FBL0J2RSxtQkFBYyxHQUEwQixJQUFJLENBQUM7Ozs7UUFHNUMsa0JBQWEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDOzs7O1FBd0I3QyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBS2YsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsTUFBTSxLQUFLLENBQUM7MkVBQ3lELENBQUMsQ0FBQztTQUN4RTtJQUNILENBQUM7Ozs7O0lBOUJELElBQ0ksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7OztJQUNELElBQUksS0FBSyxDQUFDLEtBQWE7UUFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtZQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7O0lBR0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBbUJELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMzQjtJQUNILENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDMUYsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7OztZQTVERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixnRUFBdUI7Z0JBQ3ZCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O1lBWkMsZ0JBQWdCO1lBWlQsY0FBYyx1QkE0RGxCLE1BQU0sU0FBQyxjQUFjLGNBQUcsUUFBUSxZQUFJLElBQUk7OztvQkF6QjFDLEtBQUs7K0JBZ0JMLFNBQVMsU0FBQyxXQUFXOzs7Ozs7O0lBekJ0QixnQ0FBdUI7Ozs7OztJQUd2Qix3Q0FBcUQ7Ozs7O0lBR3JELHVDQUE2Qzs7Ozs7SUFtQjdDLDBDQUEyRDs7Ozs7SUFLM0Qsa0NBQWlCOzs7OztJQUdmLDJDQUEyQzs7Ozs7SUFDM0MsbUNBQTZFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTnhUYWJHcm91cEJhc2UgfSBmcm9tICcuL3RhYi1ncm91cC1iYXNlJztcbmltcG9ydCB7IFRlbXBsYXRlUG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgT3B0aW9uYWwsXG4gIEluamVjdCxcbiAgSG9zdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtdGFiJyxcbiAgZXhwb3J0QXM6ICdueFRhYicsXG4gIHRlbXBsYXRlVXJsOiAndGFiLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeFRhYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9sYWJlbDogc3RyaW5nO1xuXG4gIC8qKiBUaGUgcG9ydGFsIHRoYXQgd2lsbCBiZSB0aGUgaG9zdGVkIGNvbnRlbnQgb2YgdGhlIHRhYiAqL1xuICBwcml2YXRlIF9jb250ZW50UG9ydGFsOiBUZW1wbGF0ZVBvcnRhbCB8IG51bGwgPSBudWxsO1xuXG4gIC8qKiBFbWl0cyB3aGVuZXZlciB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIHRhYiBjaGFuZ2VzLiAqL1xuICByZWFkb25seSBfc3RhdGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAvKiogU2V0cyB0aGUgbGFiZWwgb2YgdGhlIHRhYiBzaG93biBpbiB0aGUgdGFibGlzdC4gKi9cbiAgQElucHV0KClcbiAgZ2V0IGxhYmVsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2xhYmVsO1xuICB9XG4gIHNldCBsYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX2xhYmVsICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fbGFiZWwgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXQgY29udGVudCgpOiBUZW1wbGF0ZVBvcnRhbCB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9jb250ZW50UG9ydGFsO1xuICB9XG5cbiAgLyoqIFRlbXBsYXRlIGluc2lkZSB0aGUgTnhUYWIgdmlldyB0aGF0IGNvbnRhaW5zIGFuIGA8bmctY29udGVudD5gLiAqL1xuICBAVmlld0NoaWxkKFRlbXBsYXRlUmVmKSBfaW1wbGljaXRDb250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSB0YWIgaXMgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGlzQWN0aXZlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBASW5qZWN0KE54VGFiR3JvdXBCYXNlKSBAT3B0aW9uYWwoKSBASG9zdCgpIHByaXZhdGUgX3RhYkdyb3VwOiBOeFRhYkdyb3VwQmFzZSkge1xuICAgIGlmICghdGhpcy5fdGFiR3JvdXApIHtcbiAgICAgIHRocm93IEVycm9yKGBUaGUgbngtdGFiIGVsZW1lbnQgaGFzIHRvIGJlIHdyYXBwZWQgaW4gYSBueC10YWItZ3JvdXAgdG8gd29yay5cbiAgICAgIFBsZWFzZSBwcm92aWRlIGEgbngtdGFiLWdyb3VwIGVsZW1lbnQgYW5kIHBsYWNlIHlvdXIgdGFicyBpbnNpZGUgaXQuYCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLmhhc093blByb3BlcnR5KCdsYWJlbCcpKSB7XG4gICAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX2NvbnRlbnRQb3J0YWwgPSBuZXcgVGVtcGxhdGVQb3J0YWwodGhpcy5faW1wbGljaXRDb250ZW50LCB0aGlzLl92aWV3Q29udGFpbmVyUmVmKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=