/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Directive, ChangeDetectionStrategy, Optional, SkipSelf, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
export class NxTabNavBarComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._negative = false;
    }
    /**
     * Whether the tab nav bar has negative styling.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this.negative) {
            this._negative = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
}
NxTabNavBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-tab-nav-bar',
                template: "<ng-content></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.is-negative]': 'negative',
                    'role': 'navigation',
                },
                styles: [":host{display:flex;align-items:flex-end;justify-content:center}:host ::ng-deep a.nx-tab-link{text-decoration:none;border:none;background:0 0;color:#006192;border-bottom:2px solid #007ab3;padding:0 16px 6px;font-weight:400;font-size:18px;line-height:24px}:host ::ng-deep a.nx-tab-link.is-active{border-width:4px;font-weight:700;transition:font-weight .3s;padding-bottom:4px}:host(.is-negative){color:#fff}:host(.is-negative) ::ng-deep a.nx-tab-link{color:#fff;border-bottom-color:#fff}:host-context([data-whatinput=keyboard]) nx-tab-link:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
            }] }
];
/** @nocollapse */
NxTabNavBarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxTabNavBarComponent.propDecorators = {
    negative: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabNavBarComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxTabNavBarComponent.prototype._changeDetectorRef;
}
export class NxTabLinkDirective {
    /**
     * @param {?} _tabNavBar
     */
    constructor(_tabNavBar) {
        this._tabNavBar = _tabNavBar;
        this._active = false;
        if (!this._tabNavBar) {
            throw Error(`The nx-tab-link element has to be wrapped in a nx-tab-nav-bar to work.`);
        }
    }
    /**
     * Whether the tab link is active and has the active styling.
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._active) {
            this._active = value;
        }
    }
}
NxTabLinkDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxTabLink]',
                host: {
                    '[class.nx-tab-link]': 'true',
                    '[class.is-active]': 'active',
                    '[attr.aria-current]': 'active',
                }
            },] }
];
/** @nocollapse */
NxTabLinkDirective.ctorParameters = () => [
    { type: NxTabNavBarComponent, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
NxTabLinkDirective.propDecorators = {
    active: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabLinkDirective.prototype._active;
    /**
     * @type {?}
     * @private
     */
    NxTabLinkDirective.prototype._tabNavBar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLW5hdi1iYXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInRhYnMvdGFiLW5hdi1iYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBWTlELE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFrQi9CLFlBQW9CLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBaEJqRCxjQUFTLEdBQVksS0FBSyxDQUFDO0lBZ0J5QixDQUFDOzs7Ozs7SUFiN0QsSUFDSSxRQUFRLENBQUMsS0FBYzs7Y0FDbkIsUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUM3QyxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUN4QztJQUNILENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7O1lBMUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixxQ0FBK0I7Z0JBRS9CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxJQUFJLEVBQUU7b0JBQ0oscUJBQXFCLEVBQUUsVUFBVTtvQkFDakMsTUFBTSxFQUFFLFlBQVk7aUJBQ3JCOzthQUNGOzs7O1lBWmtGLGlCQUFpQjs7O3VCQWtCakcsS0FBSzs7Ozs7OztJQUhOLHlDQUFtQzs7Ozs7SUFnQnZCLGtEQUE2Qzs7QUFZM0QsTUFBTSxPQUFPLGtCQUFrQjs7OztJQWdCN0IsWUFDa0MsVUFBZ0M7UUFBaEMsZUFBVSxHQUFWLFVBQVUsQ0FBc0I7UUFmMUQsWUFBTyxHQUFZLEtBQUssQ0FBQztRQWdCL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsTUFBTSxLQUFLLENBQUMsd0VBQXdFLENBQUMsQ0FBQztTQUN2RjtJQUNILENBQUM7Ozs7O0lBaEJELElBQ0ksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOzs7OztJQUNELElBQUksTUFBTSxDQUFDLEtBQWM7O2NBQ2pCLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7UUFDN0MsSUFBSSxRQUFRLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNILENBQUM7OztZQXRCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLElBQUksRUFBRTtvQkFDSixxQkFBcUIsRUFBRSxNQUFNO29CQUM3QixtQkFBbUIsRUFBRSxRQUFRO29CQUM3QixxQkFBcUIsRUFBRSxRQUFRO2lCQUNoQzthQUNGOzs7O1lBa0IrQyxvQkFBb0IsdUJBQS9ELFFBQVEsWUFBSSxRQUFROzs7cUJBWnRCLEtBQUs7Ozs7Ozs7SUFITixxQ0FBaUM7Ozs7O0lBZS9CLHdDQUFnRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIERpcmVjdGl2ZSwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIE9wdGlvbmFsLCBTa2lwU2VsZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXRhYi1uYXYtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICd0YWItbmF2LWJhci5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFiLW5hdi1iYXIuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuaXMtbmVnYXRpdmVdJzogJ25lZ2F0aXZlJyxcbiAgICAncm9sZSc6ICduYXZpZ2F0aW9uJyxcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeFRhYk5hdkJhckNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfbmVnYXRpdmU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogV2hldGhlciB0aGUgdGFiIG5hdiBiYXIgaGFzIG5lZ2F0aXZlIHN0eWxpbmcuICovXG4gIEBJbnB1dCgpXG4gIHNldCBuZWdhdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICBpZiAobmV3VmFsdWUgIT09IHRoaXMubmVnYXRpdmUpIHtcbiAgICAgIHRoaXMuX25lZ2F0aXZlID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbmVnYXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25lZ2F0aXZlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tueFRhYkxpbmtdJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubngtdGFiLWxpbmtdJzogJ3RydWUnLFxuICAgICdbY2xhc3MuaXMtYWN0aXZlXSc6ICdhY3RpdmUnLFxuICAgICdbYXR0ci5hcmlhLWN1cnJlbnRdJzogJ2FjdGl2ZScsXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhUYWJMaW5rRGlyZWN0aXZlIHtcblxuICBwcml2YXRlIF9hY3RpdmU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogV2hldGhlciB0aGUgdGFiIGxpbmsgaXMgYWN0aXZlIGFuZCBoYXMgdGhlIGFjdGl2ZSBzdHlsaW5nLiAqL1xuICBASW5wdXQoKVxuICBnZXQgYWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cbiAgc2V0IGFjdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICBpZiAobmV3VmFsdWUgIT09IHRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcHJpdmF0ZSBfdGFiTmF2QmFyOiBOeFRhYk5hdkJhckNvbXBvbmVudCkge1xuICAgIGlmICghdGhpcy5fdGFiTmF2QmFyKSB7XG4gICAgICB0aHJvdyBFcnJvcihgVGhlIG54LXRhYi1saW5rIGVsZW1lbnQgaGFzIHRvIGJlIHdyYXBwZWQgaW4gYSBueC10YWItbmF2LWJhciB0byB3b3JrLmApO1xuICAgIH1cbiAgfVxufVxuIl19