/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { clamp } from '@allianz/ngx-ndbx/utils';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Decimal } from 'decimal.js';
import { fromEvent } from 'rxjs';
/**
 * @record
 */
function Position() { }
if (false) {
    /** @type {?} */
    Position.prototype.x;
    /** @type {?} */
    Position.prototype.y;
}
/** @enum {number} */
const EventType = {
    TOUCH: 0, MOUSE: 1,
};
EventType[EventType.TOUCH] = 'TOUCH';
EventType[EventType.MOUSE] = 'MOUSE';
/** @type {?} */
let nextId = 0;
/** @type {?} */
const DEFAULT_MIN = 0;
/** @type {?} */
const DEFAULT_MAX = 100;
/** @type {?} */
const DEFAULT_STEP = 1;
export class NxSliderComponent {
    /**
     * @param {?} elementRef
     * @param {?} _changeDetectorRef
     */
    constructor(elementRef, _changeDetectorRef) {
        this.elementRef = elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._id = `nx-slider-${nextId++}`;
        this._tabIndex = 0;
        this._min = DEFAULT_MIN;
        this._max = DEFAULT_MAX;
        this._disabled = false;
        this._inverted = false;
        this._thumbLabel = true;
        this._negative = false;
        /**
         * An event is dispatched on each value change.
         */
        this.valueChange = new EventEmitter();
        this.isActive = false;
        this.dragSubscriptions = [];
        this.position = null;
        this._value = 0;
        this._step = DEFAULT_STEP;
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        /**
         * Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ).
         */
        this.valueFormatter = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value);
        /**
         * Sets the customization function for the label on the min-side of the slider (Default:(value) => value).
         */
        this.labelMinFormatter = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value);
        /**
         * Sets the customization function for the label on the max-side of the slider (Default:(value) => value).
         */
        this.labelMaxFormatter = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value);
    }
    /**
     * Sets the id of the slider.
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * Sets the tabindex of the slider.
     * @param {?} value
     * @return {?}
     */
    set tabindex(value) {
        this._tabIndex = coerceNumberProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get tabindex() {
        return this._tabIndex;
    }
    /**
     * Sets the minimum value (Default: 0).
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = coerceNumberProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * Sets the maximum value (Default: 100).
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = coerceNumberProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * Sets the step size by which the value of the slider can be increased or decreased (Default: 1).
     * @return {?}
     */
    get step() { return this._step; }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = coerceNumberProperty(value, this._step);
        if (this._step % 1 !== 0) {
            this._roundToDecimal = this._step.toString().split('.').pop().length;
        }
    }
    /**
     * Sets the label which is displayed on top of the slider.
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        if (this._label !== value) {
            this._label = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get label() {
        return this._label;
    }
    /**
     * Whether the input to the control of the slider should be disabled.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Whether the max value is to the right (false) or left (true).
     * @param {?} value
     * @return {?}
     */
    set inverted(value) {
        this._inverted = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get inverted() {
        return this._inverted;
    }
    /**
     * Whether to display the thumb label on top of the slider.
     * @param {?} value
     * @return {?}
     */
    set thumbLabel(value) {
        this._thumbLabel = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get thumbLabel() {
        return this._thumbLabel;
    }
    /**
     * Whether the negative set of styles is applied (Default: 'false').
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Sets the current value of the slider.
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.writeValue(Number(value));
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.reset();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this._value) {
            this._value = value;
            this.valueChange.emit(value);
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    isMinimum() {
        return this._value === this.min;
    }
    /**
     * \@docs-private
     * A valid step is either:
     * - the minimum because thats our anchor for all value evaluation and steps
     * - (_value - min) % step === 0
     * @return {?}
     */
    isValidStep() {
        /** @type {?} */
        const safeValue = new Decimal(this._value).minus(this.min);
        /** @type {?} */
        const modulo = safeValue.mod(this.step);
        return this.isMinimum() || modulo.cmp(0) === 0;
    }
    /**
     * \@docs-private
     * We have to look at two cases:
     * - current value is a valid multitude of the step size
     *   then we can safely add or subtract the step
     * - the value is not a valid multitude. this could be the max value or the value bound
     *   via nxValue
     *   then we look for the next closest value upwards or downwards
     *   decimal.js provides a nice utility function for this.
     * @param {?} valueDiff
     * @return {?}
     */
    changeValue(valueDiff) {
        /** @type {?} */
        let newValue = new Decimal(this._value);
        if (this.isValidStep()) {
            newValue = newValue.plus(valueDiff);
        }
        else {
            // subtract the minimum to find the closest multitude then add the minimum again to get the valid slider step
            /** @type {?} */
            const minAdjustedValue = new Decimal(this._value).minus(this.min);
            newValue = valueDiff < 0 ? minAdjustedValue.toNearest(this.step, Decimal.ROUND_DOWN)
                : minAdjustedValue.toNearest(this.step, Decimal.ROUND_UP);
            newValue = newValue.plus(this.min);
        }
        // cast the Decimal object to a JS number before it gets returned
        /** @type {?} */
        let toNumber = newValue.toNumber();
        toNumber = clamp(toNumber, this.min, this.max);
        this._onChange(toNumber);
        this.value = toNumber;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get percentageValue() {
        /** @type {?} */
        let percentageValue = ((this.value || 0) - this.min) / (this.max - this.min) * 100;
        if (this.inverted) {
            percentageValue = 100 - percentageValue;
        }
        return clamp(percentageValue, 0, 100);
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    sliderClick(event) {
        if (this.disabled) {
            return;
        }
        this._focusHandleElement();
        event.stopPropagation();
        this.position = this.getPositionFromEvent(event);
        this.frameId = requestAnimationFrame((/**
         * @return {?}
         */
        () => {
            this.valueByPosition();
        }));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    focus() {
        if (this.disabled) {
            return;
        }
        this._focusHandleElement();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    blur() {
        if (this.disabled) {
            return;
        }
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    handleKeypress(event) {
        if (this.disabled) {
            return;
        }
        if (event.which < LEFT_ARROW || event.which > DOWN_ARROW) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        switch (event.which) {
            case this.inverted ? RIGHT_ARROW : LEFT_ARROW:
            case DOWN_ARROW:
                return this.changeValue(-this.step);
            case UP_ARROW:
            case this.inverted ? LEFT_ARROW : RIGHT_ARROW:
                return this.changeValue(this.step);
        }
    }
    /**
     * \@docs-private
     * this is called on mousedown or touchstart
     * @param {?} event
     * @return {?}
     */
    dragStart(event) {
        if (this.disabled) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this.isActive = true;
        /** @type {?} */
        const isTouchEvent = this.detectEventType(event) === EventType.TOUCH;
        if (isTouchEvent) {
            this.dragSubscriptions = [
                fromEvent(document, 'touchmove').subscribe(this.handleDragMove.bind(this)),
                fromEvent(document, 'touchend').subscribe(this.handleDragStop.bind(this)),
                fromEvent(document, 'touchcancel').subscribe(this.handleDragStop.bind(this))
            ];
        }
        else {
            this.dragSubscriptions = [
                fromEvent(document, 'mousemove').subscribe(this.handleDragMove.bind(this)),
                fromEvent(document, 'mouseup').subscribe(this.handleDragStop.bind(this))
            ];
        }
        this.position = this.getPositionFromEvent(event);
        this.runChangeObserver();
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    formatValue(value) {
        return this.valueFormatter(value);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelLeft() {
        return this.inverted ? this.formatLabelMax() : this.formatLabelMin();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelRight() {
        return this.inverted ? this.formatLabelMin() : this.formatLabelMax();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    valueByPosition() {
        /** @type {?} */
        const rect = this.elementRef.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const x = Math.max(rect.left, Math.min(rect.right, this.position.x));
        // position of slider relative to slider width
        /** @type {?} */
        let percent = (x - rect.left) / rect.width;
        if (this.inverted) {
            percent = 1 - percent;
        }
        /** @type {?} */
        const exactValue = this.min + percent * (this.max - this.min);
        /**
         * edge case handling because of float precision errors
         * you couldn't reach the maximum
         * @type {?}
         */
        let closestValue;
        if (percent === 1) {
            closestValue = this.max;
        }
        else if (percent === 0) {
            closestValue = this.min;
        }
        else {
            closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
        }
        if (this._roundToDecimal) {
            closestValue = this.roundToDecimal(closestValue);
        }
        closestValue = clamp(closestValue, this.min, this.max);
        this._onChange(closestValue);
        this.value = closestValue;
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    roundToDecimal(value) {
        return parseFloat(value.toFixed(this._roundToDecimal));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelMin() {
        return this.labelMinFormatter(this.min);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelMax() {
        return this.labelMaxFormatter(this.max);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleDragMove(event) {
        event.preventDefault();
        event.stopPropagation();
        this.position = this.getPositionFromEvent(event);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleDragStop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.reset();
        this.valueByPosition();
    }
    /**
     * @private
     * @return {?}
     */
    runChangeObserver() {
        this.frameId = requestAnimationFrame((/**
         * @return {?}
         */
        () => {
            this.valueByPosition();
            if (this.isActive) {
                this.runChangeObserver();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    reset() {
        this.isActive = false;
        for (const subscription of this.dragSubscriptions) {
            subscription.unsubscribe();
        }
        this.dragSubscriptions = [];
        cancelAnimationFrame(this.frameId);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    detectEventType(event) {
        return event.type.includes('touch') ? EventType.TOUCH : EventType.MOUSE;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    getPositionFromEvent(event) {
        /** @type {?} */
        const eventType = this.detectEventType(event);
        /** @type {?} */
        const cursor = eventType === EventType.TOUCH ? ((/** @type {?} */ (event))).touches.item(0) : event;
        return {
            x: cursor.clientX,
            y: cursor.clientY
        };
    }
    /**
     * \@docs-private
     * @return {?}
     */
    _focusHandleElement() {
        this.handleElement.nativeElement.focus();
    }
}
NxSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-slider',
                template: "<label class=\"nx-slider__label\" [id]=\"id + '-label'\" [attr.for]=\"id + '-handle'\" (click)=\"_focusHandleElement()\">{{label}}</label>\n\n<div\n  class=\"nx-slider__wrapper\"\n  (click)=\"sliderClick($event)\"\n>\n\n  <span class=\"nx-slider__background\">\n    <span class=\"nx-slider__filler\" [style.width.%]=\"percentageValue\"></span>\n\n    <a class=\"nx-slider__handle\"\n        [id]=\"id + '-handle'\"\n        [attr.tabindex]=\"tabindex\"\n        [attr.aria-labelledby]=\"id + '-label'\"\n        role=\"slider\"\n        [attr.aria-valuemin]=\"formatLabelMin()\"\n        [attr.aria-valuemax]=\"formatLabelMax()\"\n        [attr.aria-valuetext]=\"formatValue(value)\"\n        [attr.aria-valuenow]=\"formatValue(value)\"\n        (mousedown)=\"dragStart($event)\"\n        (touchstart)=\"dragStart($event)\"\n        #handle\n      >\n\n      <span *ngIf=\"thumbLabel\" class=\"nx-slider__value\">{{formatValue(value)}}\n        <div class=\"nx-slider__arrow\">\n        </div>\n      </span>\n    </a>\n\n  </span>\n</div>\n\n<div class=\"nx-slider__label-container\">\n    <span class=\"nx-slider__value-label\">{{formatLabelLeft()}}</span>\n    <span class=\"nx-slider__value-label\">{{formatLabelRight()}}</span>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxSliderComponent)),
                        multi: true
                    }],
                host: {
                    '[attr.aria-disabled]': 'disabled ? true : null',
                    '(keydown)': 'handleKeypress($event)',
                    '[class.nx-slider--disabled]': 'disabled',
                    '[class.nx-slider--negative]': 'negative'
                },
                styles: [":host{display:block}.nx-slider__label{font-size:20px;line-height:24px;letter-spacing:.2px;color:#414141;font-weight:300}.nx-slider__wrapper{width:100%;padding:66px 0 26px}.nx-slider__background{position:relative;background-color:#d9d9d9;display:block;height:4px;border-radius:2px;white-space:nowrap;cursor:pointer}.nx-slider__filler{display:inline-block;height:4px;border-radius:2px;background-color:#007ab3;float:left}.nx-slider__handle{display:inline-block;position:relative;width:24px;height:24px;background-color:#fff;border-radius:50%;box-shadow:0 2px 4px rgba(65,65,65,.5);border:1px solid #f5f5f5;box-sizing:border-box;margin-left:-12px;top:-10px;z-index:2;cursor:-webkit-grab;cursor:grab}.nx-slider__handle:focus{outline:0}:host-context([data-whatinput=keyboard]) .nx-slider__handle:focus{border-color:#7fbcd9;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}.nx-slider__value{background-color:#fff;border:1px solid #f5f5f5;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);color:#006192;cursor:-webkit-grab;cursor:grab;line-height:16px;height:24px;width:48px;text-align:center;right:8px;font-weight:600;font-size:12px;letter-spacing:.5px;padding:3px 8px;position:relative;top:-40px;display:table;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.nx-slider__arrow{width:6px;height:6px;background:#fff;border-right:1px solid #f5f5f5;border-bottom:1px solid #f5f5f5;left:50%;-webkit-transform:translate(-50%,1px) rotate(45deg);transform:translate(-50%,1px) rotate(45deg);position:absolute;box-shadow:-2px -2px 1px 1px #fff,2px 2px 4px rgba(65,65,65,.5)}@media screen and (-ms-high-contrast:active){.nx-slider__handle:focus{box-shadow:0 2px 4px,inset 0 0 0 4px}}.nx-slider__label-container{display:flex;width:100%;justify-content:space-between;color:#414141;font-size:14px;line-height:16px;letter-spacing:.2px}.nx-slider__max-value-label{text-align:right}:host(.nx-slider--disabled){cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__background,:host(.nx-slider--disabled) .nx-slider__filler,:host(.nx-slider--disabled) .nx-slider__handle,:host(.nx-slider--disabled) .nx-slider__value,:host(.nx-slider--disabled) .nx-slider__value-label{pointer-events:none;cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__filler{background-color:#7fbcd9}:host(.nx-slider--disabled) .nx-slider__value{color:#7fbcd9}:host(.nx-slider--disabled) .nx-slider__label-container{color:#d9d9d9}:host(.nx-slider--negative) .nx-slider__label,:host(.nx-slider--negative) .nx-slider__value-label{color:#fff}:host(.nx-slider--negative) .nx-slider__filler{background-color:#fff}:host(.nx-slider--negative) .nx-slider__background{background-color:rgba(255,255,255,.35)}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__label,:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__value-label{color:#d9d9d9}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__filler{background-color:#d9d9d9}"]
            }] }
];
/** @nocollapse */
NxSliderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
NxSliderComponent.propDecorators = {
    handleElement: [{ type: ViewChild, args: ['handle',] }],
    id: [{ type: Input, args: ['id',] }],
    tabindex: [{ type: Input }],
    min: [{ type: Input, args: ['nxMin',] }],
    max: [{ type: Input, args: ['nxMax',] }],
    step: [{ type: Input, args: ['nxStep',] }],
    label: [{ type: Input, args: ['nxLabel',] }],
    disabled: [{ type: Input }],
    inverted: [{ type: Input, args: ['nxInverted',] }],
    thumbLabel: [{ type: Input }],
    negative: [{ type: Input, args: ['negative',] }],
    valueChange: [{ type: Output, args: ['nxValueChange',] }],
    valueFormatter: [{ type: Input, args: ['nxValueFormatter',] }],
    labelMinFormatter: [{ type: Input, args: ['nxLabelMinFormatter',] }],
    labelMaxFormatter: [{ type: Input, args: ['nxLabelMaxFormatter',] }],
    value: [{ type: Input, args: ['nxValue',] }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxSliderComponent.prototype.handleElement;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._tabIndex;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._inverted;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._thumbLabel;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._negative;
    /**
     * An event is dispatched on each value change.
     * @type {?}
     */
    NxSliderComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.isActive;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.dragSubscriptions;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.frameId;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.position;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._roundToDecimal;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._onTouched;
    /**
     * Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ).
     * @type {?}
     */
    NxSliderComponent.prototype.valueFormatter;
    /**
     * Sets the customization function for the label on the min-side of the slider (Default:(value) => value).
     * @type {?}
     */
    NxSliderComponent.prototype.labelMinFormatter;
    /**
     * Sets the customization function for the label on the max-side of the slider (Default:(value) => value).
     * @type {?}
     */
    NxSliderComponent.prototype.labelMaxFormatter;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,