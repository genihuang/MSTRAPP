/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';
import { Component, Directive, Input, } from '@angular/core';
/**
 * Wrapper for the CdkTree node with NDBX design styles.
 * @template T
 */
export class NxTreeNodeComponent extends CdkTreeNode {
}
NxTreeNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-tree-node',
                exportAs: 'nxTreeNode',
                inputs: ['disabled', 'tabIndex'],
                host: {
                    '[attr.aria-expanded]': 'isExpanded',
                    '[attr.aria-level]': 'role === "treeitem" ? level : null',
                    '[attr.role]': 'role',
                    'class': 'nx-tree__node',
                    '[class.is-expanded]': 'isExpanded'
                },
                providers: [{ provide: CdkTreeNode, useExisting: NxTreeNodeComponent }],
                template: "<div class=\"nx-tree__node-box\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/**
 * Wrapper for the CdkTree node definition with NDBX design styles.
 * @template T
 */
export class NxTreeNodeDefDirective extends CdkTreeNodeDef {
}
NxTreeNodeDefDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxTreeNodeDef]',
                inputs: [
                    'when: nxTreeNodeDefWhen'
                ],
                providers: [{ provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }]
            },] }
];
NxTreeNodeDefDirective.propDecorators = {
    data: [{ type: Input, args: ['nxTreeNode',] }]
};
if (false) {
    /** @type {?} */
    NxTreeNodeDefDirective.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3RyZWUvIiwic291cmNlcyI6WyJub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQVUsV0FBVyxFQUFFLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZFLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUVULEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFtQnZCLE1BQU0sT0FBTyxtQkFBdUIsU0FBUSxXQUFjOzs7WUFkekQsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUUsWUFBWTtnQkFDdEIsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztnQkFDaEMsSUFBSSxFQUFFO29CQUNKLHNCQUFzQixFQUFFLFlBQVk7b0JBQ3BDLG1CQUFtQixFQUFFLG9DQUFvQztvQkFDekQsYUFBYSxFQUFFLE1BQU07b0JBQ3JCLE9BQU8sRUFBRSxlQUFlO29CQUN4QixxQkFBcUIsRUFBRSxZQUFZO2lCQUNwQztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFDLENBQUM7Z0JBQ3JFLG9GQUEwQjthQUMzQjs7Ozs7O0FBYUQsTUFBTSxPQUFPLHNCQUEwQixTQUFRLGNBQWlCOzs7WUFQL0QsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLE1BQU0sRUFBRTtvQkFDTix5QkFBeUI7aUJBQzFCO2dCQUNELFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQzthQUM1RTs7O21CQUVFLEtBQUssU0FBQyxZQUFZOzs7O0lBQW5CLHNDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2RrVHJlZSwgQ2RrVHJlZU5vZGUsIENka1RyZWVOb2RlRGVmfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIFdyYXBwZXIgZm9yIHRoZSBDZGtUcmVlIG5vZGUgd2l0aCBOREJYIGRlc2lnbiBzdHlsZXMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXRyZWUtbm9kZScsXG4gIGV4cG9ydEFzOiAnbnhUcmVlTm9kZScsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICd0YWJJbmRleCddLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtZXhwYW5kZWRdJzogJ2lzRXhwYW5kZWQnLFxuICAgICdbYXR0ci5hcmlhLWxldmVsXSc6ICdyb2xlID09PSBcInRyZWVpdGVtXCIgPyBsZXZlbCA6IG51bGwnLFxuICAgICdbYXR0ci5yb2xlXSc6ICdyb2xlJyxcbiAgICAnY2xhc3MnOiAnbngtdHJlZV9fbm9kZScsXG4gICAgJ1tjbGFzcy5pcy1leHBhbmRlZF0nOiAnaXNFeHBhbmRlZCdcbiAgfSxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka1RyZWVOb2RlLCB1c2VFeGlzdGluZzogTnhUcmVlTm9kZUNvbXBvbmVudH1dLFxuICB0ZW1wbGF0ZVVybDogJy4vbm9kZS5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOeFRyZWVOb2RlQ29tcG9uZW50PFQ+IGV4dGVuZHMgQ2RrVHJlZU5vZGU8VD4ge31cblxuLyoqXG4gKiBXcmFwcGVyIGZvciB0aGUgQ2RrVHJlZSBub2RlIGRlZmluaXRpb24gd2l0aCBOREJYIGRlc2lnbiBzdHlsZXMuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tueFRyZWVOb2RlRGVmXScsXG4gIGlucHV0czogW1xuICAgICd3aGVuOiBueFRyZWVOb2RlRGVmV2hlbidcbiAgXSxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka1RyZWVOb2RlRGVmLCB1c2VFeGlzdGluZzogTnhUcmVlTm9kZURlZkRpcmVjdGl2ZX1dXG59KVxuZXhwb3J0IGNsYXNzIE54VHJlZU5vZGVEZWZEaXJlY3RpdmU8VD4gZXh0ZW5kcyBDZGtUcmVlTm9kZURlZjxUPiB7XG4gIEBJbnB1dCgnbnhUcmVlTm9kZScpIGRhdGE6IFQ7XG59XG4iXX0=