/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CdkTree, CdkTreeNode } from '@angular/cdk/tree';
import { Directive, Input, Renderer2, ElementRef, Optional } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
/**
 * Regex used to split a string on its CSS units.
 * @type {?}
 */
const cssUnitPattern = /([A-Za-z%]+)$/;
/**
 * Indent for the children tree dataNodes.
 * This directive will add left-padding to the node to show hierarchy.
 * @template T
 */
export class NxTreeNodePaddingDirective {
    /**
     * @param {?} _treeNode
     * @param {?} _tree
     * @param {?} _renderer
     * @param {?} _element
     * @param {?} _dir
     */
    constructor(_treeNode, _tree, _renderer, _element, _dir) {
        this._treeNode = _treeNode;
        this._tree = _tree;
        this._renderer = _renderer;
        this._element = _element;
        this._dir = _dir;
        /**
         * Subject that emits when the component has been destroyed.
         */
        this._destroyed = new Subject();
        /**
         * CSS units used for the indentation value.
         */
        this.indentUnits = 'px';
        this._offset = 0;
        this._indent = 24;
        this._setPadding();
        if (this._dir) {
            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**
             * @return {?}
             */
            () => this._setPadding()));
        }
    }
    /**
     * The level of depth of the tree node. The padding will be `level * indent` pixels.
     * @return {?}
     */
    get level() { return this._level; }
    /**
     * @param {?} value
     * @return {?}
     */
    set level(value) {
        this._level = coerceNumberProperty(value);
        this._setPadding();
    }
    /**
     * The offset is added once on top of each indent. Default number is 0.
     * @return {?}
     */
    get offset() { return this._offset; }
    /**
     * @param {?} value
     * @return {?}
     */
    set offset(value) {
        this._offset = coerceNumberProperty(value);
        this._setPadding();
    }
    /**
     * The indent for each level. Can be a number or a CSS string.
     * Default number 24px from material design menu sub-menu spec.
     * @return {?}
     */
    get indent() { return this._indent; }
    /**
     * @param {?} indent
     * @return {?}
     */
    set indent(indent) {
        /** @type {?} */
        let value = indent;
        /** @type {?} */
        let units = 'px';
        if (typeof indent === 'string') {
            /** @type {?} */
            const parts = indent.split(cssUnitPattern);
            value = parts[0];
            units = parts[1] || units;
        }
        this.indentUnits = units;
        this._indent = coerceNumberProperty(value);
        this._setPadding();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
     * The padding indent value for the tree node. Returns a string with px numbers if not null.
     * @return {?}
     */
    _paddingIndent() {
        /** @type {?} */
        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)
            ? this._tree.treeControl.getLevel(this._treeNode.data)
            : null;
        /** @type {?} */
        const level = this._level || nodeLevel;
        return level ? `${level * this._indent + this._offset}${this.indentUnits}` : null;
    }
    /**
     * @return {?}
     */
    _setPadding() {
        /** @type {?} */
        const padding = this._paddingIndent();
        /** @type {?} */
        const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
        this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);
    }
}
NxTreeNodePaddingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxTreeNodePadding]',
            },] }
];
/** @nocollapse */
NxTreeNodePaddingDirective.ctorParameters = () => [
    { type: CdkTreeNode },
    { type: CdkTree },
    { type: Renderer2 },
    { type: ElementRef },
    { type: Directionality, decorators: [{ type: Optional }] }
];
NxTreeNodePaddingDirective.propDecorators = {
    level: [{ type: Input, args: ['nxTreeNodePadding',] }],
    offset: [{ type: Input, args: ['nxTreeNodePaddingOffset',] }],
    indent: [{ type: Input, args: ['nxTreeNodePaddingIndent',] }]
};
if (false) {
    /**
     * Subject that emits when the component has been destroyed.
     * @type {?}
     * @private
     */
    NxTreeNodePaddingDirective.prototype._destroyed;
    /**
     * CSS units used for the indentation value.
     * @type {?}
     */
    NxTreeNodePaddingDirective.prototype.indentUnits;
    /** @type {?} */
    NxTreeNodePaddingDirective.prototype._level;
    /** @type {?} */
    NxTreeNodePaddingDirective.prototype._offset;
    /** @type {?} */
    NxTreeNodePaddingDirective.prototype._indent;
    /**
     * @type {?}
     * @private
     */
    NxTreeNodePaddingDirective.prototype._treeNode;
    /**
     * @type {?}
     * @private
     */
    NxTreeNodePaddingDirective.prototype._tree;
    /**
     * @type {?}
     * @private
     */
    NxTreeNodePaddingDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NxTreeNodePaddingDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NxTreeNodePaddingDirective.prototype._dir;
}
//# sourceMappingURL=data:application/json;base64,