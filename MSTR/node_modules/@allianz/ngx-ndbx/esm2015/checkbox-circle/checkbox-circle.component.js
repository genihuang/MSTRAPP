/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
let nextId = 0;
/**
 * @deprecated Use `nx-circle-toggle` instead
 * \@deletion-target 8.0.0
 */
export class NxCheckboxCircleComponent {
    constructor() {
        this._id = (nextId++).toString();
        /**
         * An event emitted when the checked value has changed.
         */
        this.checkedChange = new EventEmitter(false);
        this.onChangeCallback = (/**
         * @param {?} checked
         * @return {?}
         */
        (checked) => { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
        console.warn('`nx-checkbox-circle` is deprecated. Use `nx-circle-toggle` instead.');
    }
    /**
     * Id of the checkbox.
     * If not set, the checkbox gets an incremented value by default.
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        if (value !== this._id) {
            this._id = value;
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return `nx-checkbox-circle-${this._id}`;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.checked = value;
        this.checkedChange.emit(value);
    }
    /**
     * @param {?} onChange
     * @return {?}
     */
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    /**
     * @param {?} onTouched
     * @return {?}
     */
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
    /**
     * \@docs-private
     * @return {?}
     */
    toggle() {
        this.writeValue(!this.checked);
        this.onChangeCallback(this.checked);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get svgButton() {
        return !!this.svg && !!this.svgChecked;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get svgUrl() {
        return this.checked ? this.svgChecked : this.svg;
    }
}
NxCheckboxCircleComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-checkbox-circle',
                template: "<input [id]=\"id\" class=\"nx-checkbox-circle__input\" [name]=\"name\" [attr.aria-labelledby]=\"id + '-label'\"\n    type=\"checkbox\" [checked]=\"checked\" (click)=\"toggle()\">\n<label class=\"nx-checkbox-circle__label\" [for]=\"id\"\n  [id]=\"id + '-label'\">\n  <span class=\"nx-checkbox-circle__check-icon\">\n    <nx-icon name=\"check-circle\"></nx-icon>\n  </span>\n  <span class=\"nx-checkbox-circle__icon\">\n    <nx-icon *ngIf=\"iconName\" [name]=\"iconName\"></nx-icon>\n    <img *ngIf=\"svgButton\" class=\"nx-checkbox-circle__icon-image\" [src]=\"svgUrl\"\n    />\n  </span>\n  <span class=\"nx-checkbox-circle__label-text\">\n    {{label}}\n  </span>\n</label>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxCheckboxCircleComponent)),
                        multi: true
                    }
                ],
                host: {
                    '[class.is-checked]': 'checked'
                },
                styles: [":host{display:inline-block;margin-right:65px;vertical-align:top;position:relative}.nx-checkbox-circle__icon-image{height:100%}.nx-checkbox-circle__label-text{display:inline-block;max-width:16rem}.nx-checkbox-circle__input{opacity:0;position:absolute}.nx-checkbox-circle__check-icon{background-color:#f5f5f5;border-radius:50%;color:#3da556;display:block;font-size:31px;text-align:center;line-height:1;width:32px;height:32px;margin-left:1.6rem;padding:0;position:absolute;top:0;left:50%;opacity:0;transition:opacity .3s;z-index:1}@media (max-width:703px){:host{margin-right:48px}.nx-checkbox-circle__check-icon{width:28px;height:28px;font-size:27px;left:45%}}:host(.is-checked) .nx-checkbox-circle__check-icon{opacity:1;transition:opacity .3s}.nx-checkbox-circle__icon{border:2px solid #007ab3;border-radius:50%;content:\"\";display:block;height:8rem;width:8rem;left:50%;margin-left:-4rem;position:absolute;top:5px;transition:background-color .2s,border-color .2s,box-shadow .2s}.nx-checkbox-circle__icon nx-icon{border-radius:50%;color:#007ab3;display:block;font-size:4.8rem;position:absolute;text-align:center;margin:1.4rem;z-index:1}.nx-checkbox-circle__icon:hover{border-color:#006192;cursor:pointer}.nx-checkbox-circle__icon:hover nx-icon{color:#006192}:host(.is-checked) .nx-checkbox-circle__icon{background-color:#007ab3}@media screen and (-ms-high-contrast:active){:host(.is-checked) .nx-checkbox-circle__icon{color:#000}}:host(.is-checked) .nx-checkbox-circle__icon:hover{background-color:#006192;border-color:#006192}:host(.is-checked) .nx-checkbox-circle__icon nx-icon{color:#fff}.nx-checkbox-circle__label{display:inline-block;font-size:16px;font-weight:600;line-height:20px;margin-right:8px;padding:9.5rem 0 0;position:relative;text-align:center}@media (max-width:703px){.nx-checkbox-circle__icon{width:6.4rem;height:6.4rem;margin-left:-3.2rem}.nx-checkbox-circle__icon nx-icon{margin:1.1rem;font-size:4rem}.nx-checkbox-circle__label{margin-right:6px;padding:8rem 0 0;font-size:14px;line-height:16px}}.nx-checkbox-circle__text{display:block;position:absolute;text-align:center;left:0;top:5px;font-size:22px;line-height:8rem;width:8rem;height:8rem;color:#007ab3;border-radius:50%;border:2px solid #007ab3;z-index:0;cursor:pointer}.nx-checkbox-circle__text:hover{color:#006192;border-color:#006192}@media (max-width:703px){.nx-checkbox-circle__text{font-size:18px;line-height:6.4rem;width:6.4rem;height:6.4rem}}:host-context([data-whatinput=keyboard]) .nx-checkbox-circle__input:focus+.nx-checkbox-circle__label ::ng-deep .nx-checkbox-circle__icon{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
            }] }
];
/** @nocollapse */
NxCheckboxCircleComponent.ctorParameters = () => [];
NxCheckboxCircleComponent.propDecorators = {
    id: [{ type: Input }],
    name: [{ type: Input }],
    checkedChange: [{ type: Output }],
    checked: [{ type: Input }],
    iconName: [{ type: Input, args: ['nxIcon',] }],
    svg: [{ type: Input, args: ['nxSvg',] }],
    svgChecked: [{ type: Input, args: ['nxSvgChecked',] }],
    label: [{ type: Input, args: ['nxLabel',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCheckboxCircleComponent.prototype._id;
    /**
     * The name of the Checkbox Circle.
     * @type {?}
     */
    NxCheckboxCircleComponent.prototype.name;
    /**
     * An event emitted when the checked value has changed.
     * @type {?}
     */
    NxCheckboxCircleComponent.prototype.checkedChange;
    /**
     * Whether the checkbox circle is checked.
     * @type {?}
     */
    NxCheckboxCircleComponent.prototype.checked;
    /**
     * The name of the icon that is displayed. If not added, no icon will be displayed.
     * @type {?}
     */
    NxCheckboxCircleComponent.prototype.iconName;
    /**
     * If set, the passed SVG will be displayed in the not-checked state.
     * @type {?}
     */
    NxCheckboxCircleComponent.prototype.svg;
    /**
     * If set, the passed SVG will be displayed in the checked state.
     * @type {?}
     */
    NxCheckboxCircleComponent.prototype.svgChecked;
    /**
     * Label to be displayed under circle.
     * @type {?}
     */
    NxCheckboxCircleComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxCircleComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxCircleComponent.prototype.onTouchedCallback;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsiY2hlY2tib3gtY2lyY2xlL2NoZWNrYm94LWNpcmNsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUF3QixNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBRXJFLE1BQU0sR0FBRyxDQUFDOzs7OztBQXFCZCxNQUFNLE9BQU8seUJBQXlCO0lBa0RwQztRQWhEUSxRQUFHLEdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDOzs7O1FBc0I1QyxrQkFBYSxHQUFHLElBQUksWUFBWSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBc0J6QyxxQkFBZ0I7Ozs7UUFBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBQztRQUU3QyxzQkFBaUI7OztRQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBQztRQUdwQyxPQUFPLENBQUMsSUFBSSxDQUFDLHFFQUFxRSxDQUFDLENBQUM7SUFDdEYsQ0FBQzs7Ozs7OztJQTVDRCxJQUNXLEVBQUUsQ0FBQyxLQUFhO1FBQ3pCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDbEI7SUFDSCxDQUFDOzs7O0lBQ0QsSUFBVyxFQUFFO1FBQ1gsT0FBTyxzQkFBc0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFDLENBQUM7Ozs7O0lBc0NELFVBQVUsQ0FBQyxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsUUFBYTtRQUM1QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsU0FBYztRQUM5QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUUsVUFBbUI7SUFDckMsQ0FBQzs7Ozs7SUFHRCxNQUFNO1FBQ0osSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBR0QsSUFBSSxTQUFTO1FBQ1gsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QyxDQUFDOzs7OztJQUdELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuRCxDQUFDOzs7WUFuR0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLGdyQkFBNkM7Z0JBRTdDLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixFQUFDO3dCQUN4RCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjtnQkFDRCxJQUFJLEVBQUU7b0JBQ0osb0JBQW9CLEVBQUUsU0FBUztpQkFDaEM7O2FBQ0Y7Ozs7O2lCQVNFLEtBQUs7bUJBV0wsS0FBSzs0QkFJTCxNQUFNO3NCQUlOLEtBQUs7dUJBSUwsS0FBSyxTQUFDLFFBQVE7a0JBSWQsS0FBSyxTQUFDLE9BQU87eUJBSWIsS0FBSyxTQUFDLGNBQWM7b0JBSXBCLEtBQUssU0FBQyxTQUFTOzs7Ozs7O0lBekNoQix3Q0FBNEM7Ozs7O0lBaUI1Qyx5Q0FDYTs7Ozs7SUFHYixrREFDaUQ7Ozs7O0lBR2pELDRDQUNpQjs7Ozs7SUFHakIsNkNBQ2lCOzs7OztJQUdqQix3Q0FDWTs7Ozs7SUFHWiwrQ0FDbUI7Ozs7O0lBR25CLDBDQUNjOzs7OztJQUVkLHFEQUFxRDs7Ozs7SUFFckQsc0RBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIElucHV0LCBPdXRwdXQsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmxldCBuZXh0SWQgPSAwO1xuXG4vKipcbiAgKiBAZGVwcmVjYXRlZCBVc2UgYG54LWNpcmNsZS10b2dnbGVgIGluc3RlYWRcbiAgKiBAZGVsZXRpb24tdGFyZ2V0IDguMC4wXG4gICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1jaGVja2JveC1jaXJjbGUnLFxuICB0ZW1wbGF0ZVVybDogJ2NoZWNrYm94LWNpcmNsZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydjaGVja2JveC1jaXJjbGUuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOeENoZWNrYm94Q2lyY2xlQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5pcy1jaGVja2VkXSc6ICdjaGVja2VkJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54Q2hlY2tib3hDaXJjbGVDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgcHJpdmF0ZSBfaWQ6IHN0cmluZyA9IChuZXh0SWQrKykudG9TdHJpbmcoKTtcblxuICAvKipcbiAgICogSWQgb2YgdGhlIGNoZWNrYm94LlxuICAgKiBJZiBub3Qgc2V0LCB0aGUgY2hlY2tib3ggZ2V0cyBhbiBpbmNyZW1lbnRlZCB2YWx1ZSBieSBkZWZhdWx0LlxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9pZCkge1xuICAgICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGdldCBpZCgpIHtcbiAgICByZXR1cm4gYG54LWNoZWNrYm94LWNpcmNsZS0ke3RoaXMuX2lkfWA7XG4gIH1cblxuICAvKiogVGhlIG5hbWUgb2YgdGhlIENoZWNrYm94IENpcmNsZS4gKi9cbiAgQElucHV0KClcbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGNoZWNrZWQgdmFsdWUgaGFzIGNoYW5nZWQuICovXG4gIEBPdXRwdXQoKVxuICBjaGVja2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPihmYWxzZSk7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIGNoZWNrYm94IGNpcmNsZSBpcyBjaGVja2VkLiAqL1xuICBASW5wdXQoKVxuICBjaGVja2VkOiBib29sZWFuO1xuXG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiB0aGF0IGlzIGRpc3BsYXllZC4gSWYgbm90IGFkZGVkLCBubyBpY29uIHdpbGwgYmUgZGlzcGxheWVkLiAqL1xuICBASW5wdXQoJ254SWNvbicpXG4gIGljb25OYW1lOiBzdHJpbmc7XG5cbiAgLyoqIElmIHNldCwgdGhlIHBhc3NlZCBTVkcgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIG5vdC1jaGVja2VkIHN0YXRlLiAqL1xuICBASW5wdXQoJ254U3ZnJylcbiAgc3ZnOiBzdHJpbmc7XG5cbiAgLyoqIElmIHNldCwgdGhlIHBhc3NlZCBTVkcgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGNoZWNrZWQgc3RhdGUuICovXG4gIEBJbnB1dCgnbnhTdmdDaGVja2VkJylcbiAgc3ZnQ2hlY2tlZDogc3RyaW5nO1xuXG4gIC8qKiBMYWJlbCB0byBiZSBkaXNwbGF5ZWQgdW5kZXIgY2lyY2xlLiAqL1xuICBASW5wdXQoJ254TGFiZWwnKVxuICBsYWJlbDogc3RyaW5nO1xuXG4gIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjayA9IChjaGVja2VkOiBib29sZWFuKSA9PiB7IH07XG5cbiAgcHJpdmF0ZSBvblRvdWNoZWRDYWxsYmFjayA9ICgpID0+IHsgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zb2xlLndhcm4oJ2BueC1jaGVja2JveC1jaXJjbGVgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgbngtY2lyY2xlLXRvZ2dsZWAgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrZWQgPSB2YWx1ZTtcbiAgICB0aGlzLmNoZWNrZWRDaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKG9uQ2hhbmdlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBvbkNoYW5nZTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKG9uVG91Y2hlZDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IG9uVG91Y2hlZDtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGU/KGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzLndyaXRlVmFsdWUoIXRoaXMuY2hlY2tlZCk7XG4gICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHRoaXMuY2hlY2tlZCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXQgc3ZnQnV0dG9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuc3ZnICYmICEhdGhpcy5zdmdDaGVja2VkO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IHN2Z1VybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNoZWNrZWQgPyB0aGlzLnN2Z0NoZWNrZWQgOiB0aGlzLnN2ZztcbiAgfVxufVxuIl19