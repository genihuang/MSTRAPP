/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Output, TemplateRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { NxPopoverContentDirective } from './popover-content';
export class NxPopoverComponent {
    constructor() {
        /**
         * Event emitted when the popover is closed.
         */
        this.closed = new EventEmitter();
        /**
         * \@docs-private
         */
        this.closeButtonClick = new Subject();
        /**
         * \@docs-private
         */
        this.showCloseButton = false;
        /**
         * \@docs-private
         */
        this.arrowStyle = {};
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.closed.complete();
    }
    // emit to notify the popover trigger directive that the close button was clicked
    /**
     * \@docs-private
     * @return {?}
     */
    emitButtonClick() {
        this.closeButtonClick.next();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    emitClosedEvent() {
        this.closed.emit();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get classList() {
        if (this.direction) {
            return [`nx-popover--${this.direction}`];
        }
    }
}
NxPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-popover',
                template: "<ng-template>\n  <div [ngClass]=\"classList\" role=\"tooltip\" aria-hidden=\"false\">\n    <div class=\"nx-popover__content\">\n        <div class=\"nx-popover__arrow\" [ngStyle]=\"arrowStyle\">\n          </div>\n      <span aria-hidden=\"true\" class=\"nx-popover__close-icon\" (click)=\"emitButtonClick()\"\n            *ngIf=\"showCloseButton\">\n        <nx-icon name=\"close\"></nx-icon>\n      </span>\n      <span [id]=\"id\">\n        <ng-content></ng-content>\n        <ng-container [ngTemplateOutlet]=\"_lazyContent?._template\"></ng-container>\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'nxPopover',
                styles: [".nx-popover__content{background-color:#fff;border:1px solid #d9d9d9;border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:23px;display:inline-block;font-size:16px}.nx-popover__close-icon{position:absolute;top:4px;right:4px;cursor:pointer;font-size:16px;line-height:16px}[data-whatintent=mouse] .nx-popover__content:focus{outline:0}.nx-popover__arrow{width:12px;height:12px;background-color:inherit;position:absolute;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);border-top:1px solid #d9d9d9;border-left:1px solid #d9d9d9}.nx-popover--top .nx-popover__arrow{-webkit-transform:translate(-50%,0) rotate(225deg);transform:translate(-50%,0) rotate(225deg);bottom:-5px;box-shadow:2px 2px 1px 1px #fff,-2px -2px 4px rgba(65,65,65,.5)}.nx-popover--right .nx-popover__arrow{-webkit-transform:translate(0,-50%) rotate(-45deg);transform:translate(0,-50%) rotate(-45deg);left:-5px}.nx-popover--bottom .nx-popover__arrow{-webkit-transform:translate(-50%,0) rotate(45deg);transform:translate(-50%,0) rotate(45deg);top:-5px}.nx-popover--left .nx-popover__arrow{-webkit-transform:translate(0,-50%) rotate(135deg);transform:translate(0,-50%) rotate(135deg);right:-5px}"]
            }] }
];
/** @nocollapse */
NxPopoverComponent.ctorParameters = () => [];
NxPopoverComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: [TemplateRef,] }],
    _lazyContent: [{ type: ContentChild, args: [NxPopoverContentDirective,] }],
    closed: [{ type: Output, args: ['nxClosed',] }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxPopoverComponent.prototype.templateRef;
    /**
     * Content that will be rendered lazily.
     * @type {?}
     */
    NxPopoverComponent.prototype._lazyContent;
    /**
     * Event emitted when the popover is closed.
     * @type {?}
     */
    NxPopoverComponent.prototype.closed;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPopoverComponent.prototype.closeButtonClick;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPopoverComponent.prototype.id;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPopoverComponent.prototype.direction;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPopoverComponent.prototype.showCloseButton;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPopoverComponent.prototype.arrowStyle;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInBvcG92ZXIvcG9wb3Zlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixZQUFZLEVBRVosTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQVM1RCxNQUFNLE9BQU8sa0JBQWtCO0lBMkI3Qjs7OztRQWpCQSxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7OztRQUdsQyxxQkFBZ0IsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDOzs7O1FBU3ZDLG9CQUFlLEdBQVksS0FBSyxDQUFDOzs7O1FBR2pDLGVBQVUsR0FBRyxFQUFFLENBQUM7SUFHaEIsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7OztJQUlELGVBQWU7UUFDYixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFHRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUdELElBQUksU0FBUztRQUNYLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPLENBQUMsZUFBZSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUMxQztJQUNILENBQUM7OztZQXpERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLDhtQkFBdUM7Z0JBQ3ZDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUUvQyxRQUFRLEVBQUUsV0FBVzs7YUFDdEI7Ozs7OzBCQUdFLFNBQVMsU0FBQyxXQUFXOzJCQUlyQixZQUFZLFNBQUMseUJBQXlCO3FCQUd0QyxNQUFNLFNBQUMsVUFBVTs7Ozs7OztJQVBsQix5Q0FDOEI7Ozs7O0lBRzlCLDBDQUFpRjs7Ozs7SUFHakYsb0NBQ2tDOzs7OztJQUdsQyw4Q0FBdUM7Ozs7O0lBR3ZDLGdDQUFXOzs7OztJQUdYLHVDQUFVOzs7OztJQUdWLDZDQUFpQzs7Ozs7SUFHakMsd0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBFdmVudEVtaXR0ZXIsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtOeFBvcG92ZXJDb250ZW50RGlyZWN0aXZlfSBmcm9tICcuL3BvcG92ZXItY29udGVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXBvcG92ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG9wb3Zlci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnLi9wb3BvdmVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGV4cG9ydEFzOiAnbnhQb3BvdmVyJyxcbn0pXG5leHBvcnQgY2xhc3MgTnhQb3BvdmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQFZpZXdDaGlsZChUZW1wbGF0ZVJlZilcbiAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgLyoqIENvbnRlbnQgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIGxhemlseS4gKi9cbiAgQENvbnRlbnRDaGlsZChOeFBvcG92ZXJDb250ZW50RGlyZWN0aXZlKSBfbGF6eUNvbnRlbnQ6IE54UG9wb3ZlckNvbnRlbnREaXJlY3RpdmU7XG5cbiAgLyoqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgcG9wb3ZlciBpcyBjbG9zZWQuICovXG4gIEBPdXRwdXQoJ254Q2xvc2VkJylcbiAgY2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGNsb3NlQnV0dG9uQ2xpY2sgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZGlyZWN0aW9uO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHNob3dDbG9zZUJ1dHRvbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGFycm93U3R5bGUgPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY2xvc2VkLmNvbXBsZXRlKCk7XG4gIH1cblxuICAvLyBlbWl0IHRvIG5vdGlmeSB0aGUgcG9wb3ZlciB0cmlnZ2VyIGRpcmVjdGl2ZSB0aGF0IHRoZSBjbG9zZSBidXR0b24gd2FzIGNsaWNrZWRcbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZW1pdEJ1dHRvbkNsaWNrKCkge1xuICAgIHRoaXMuY2xvc2VCdXR0b25DbGljay5uZXh0KCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBlbWl0Q2xvc2VkRXZlbnQoKSB7XG4gICAgdGhpcy5jbG9zZWQuZW1pdCgpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IGNsYXNzTGlzdCgpOiBzdHJpbmdbXSB7XG4gICAgaWYgKHRoaXMuZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gW2BueC1wb3BvdmVyLS0ke3RoaXMuZGlyZWN0aW9ufWBdO1xuICAgIH1cbiAgfVxufVxuIl19