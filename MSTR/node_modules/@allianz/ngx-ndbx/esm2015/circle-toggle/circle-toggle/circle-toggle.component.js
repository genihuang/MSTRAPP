/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild, Optional, HostListener, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { ToggleButton } from './toggle-button';
import { NxCircleToggleGroupComponent } from '../circle-toggle-group/circle-toggle-group.component';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';
export class ToggleChangeEvent {
    /**
     * @param {?} button
     * @param {?} value
     */
    constructor(button, value) {
        this.button = button;
        this.value = value;
    }
}
if (false) {
    /**
     * A toggle button
     * @type {?}
     */
    ToggleChangeEvent.prototype.button;
    /**
     * The value of the toggle button that is sent with the event.
     * @type {?}
     */
    ToggleChangeEvent.prototype.value;
}
/** @type {?} */
let nextId = 0;
export class NxCircleToggleComponent extends ToggleButton {
    /**
     * @param {?} toggleGroup
     * @param {?} _checkedDispatcher
     * @param {?} _changeDetectorRef
     */
    constructor(/** @docs-private */ toggleGroup, _checkedDispatcher, _changeDetectorRef) {
        super();
        this.toggleGroup = toggleGroup;
        this._checkedDispatcher = _checkedDispatcher;
        this._changeDetectorRef = _changeDetectorRef;
        this._id = `toggle-button-${nextId++}`;
        /**
         * \@docs-private
         */
        this.inGroup = false;
        this._name = null;
        /**
         * An event that is emitted when the checked state fo the circle toggle changes.
         */
        this.checkedChange = new EventEmitter();
        /**
         * An event that is emitted when the checked state of the circle toggle changes.
         * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
         */
        this.selectionChange = new EventEmitter();
        this._checked = false;
        this._value = null;
        this._iconName = null;
        this._svg = null;
        this._svgChecked = null;
        this._label = null;
        this._hint = null;
        this._hover = false;
        /**
         * touched is set to true on touch devices.
         */
        this._touched = false;
        this._removeUniqueSelectionListener = (/**
         * @return {?}
         */
        () => { });
        this.onChangeCallback = (/**
         * @param {?} checked
         * @return {?}
         */
        (checked) => { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
        if (this.toggleGroup) {
            this.name = this.toggleGroup.name;
        }
    }
    /**
     * Id of the circle toggle.
     *
     * If not set, the circle toggle gets an incremented value by default.
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._id = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * Name that is used for accessibility.
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * Whether the circle toggle is checked.
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (this.checked !== newValue) {
            this._checked = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get checked() {
        return this._checked;
    }
    /**
     * The value that is used in the model.
     * @param {?} newValue
     * @return {?}
     */
    set value(newValue) {
        this._value = newValue;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * Id of the icon that should be displayed.
     * @param {?} name
     * @return {?}
     */
    set iconName(name) {
        this._iconName = name;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get iconName() {
        return this._iconName;
    }
    /**
     * SVG that is displayed if the circle toggle is unchecked.
     * @param {?} src
     * @return {?}
     */
    set svg(src) {
        this._svg = src;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get svg() {
        return this._svg;
    }
    /**
     * SVG that is displayed if the circle toggle is checked.
     * @param {?} src
     * @return {?}
     */
    set svgChecked(src) {
        this._svgChecked = src;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get svgChecked() {
        return this._svgChecked;
    }
    /**
     * Label displayed below the circle.
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        this._label = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get label() {
        return this._label;
    }
    /**
     * Additional hint displayed below the label.
     * @param {?} value
     * @return {?}
     */
    set hint(value) {
        this._hint = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get hint() {
        return this._hint;
    }
    /**
     * Whether the circle toggle uses the negative set of styling.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (this.negative !== newValue) {
            this._negative = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Whether the circle toggle has a responsive behavior.
     * @param {?} value
     * @return {?}
     */
    set responsive(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (this.responsive !== newValue) {
            this._responsive = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get responsive() {
        return this._responsive;
    }
    /**
     * Whether the circle toggle is disabled.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (this.disabled !== newValue) {
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    onMouseEnter() {
        if (!this._touched) {
            this._hover = true;
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    onMouseLeave() {
        if (!this._touched) {
            this._hover = false;
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    onTouchStart() {
        this._touched = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.toggleGroup) {
            this.attachListenerForGroup();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.toggleGroup) {
            Promise.resolve().then((/**
             * @return {?}
             */
            () => {
                this.inGroup = true;
                this.negative = this.toggleGroup.negative;
                this.disabled = this.toggleGroup.disabled;
                this.responsive = this.toggleGroup.responsive;
                this.id = this.toggleGroup.id + `-button-${nextId++}`;
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // function returned by the listener
        this._removeUniqueSelectionListener();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    attachListenerForGroup() {
        this._removeUniqueSelectionListener =
            this._checkedDispatcher.listen((/**
             * @param {?} groupId
             * @param {?} buttonId
             * @return {?}
             */
            (groupId, buttonId) => {
                if (this.id !== buttonId && groupId === this.toggleGroup.id) {
                    this.checked = false;
                }
            }));
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    writeValue(newValue) {
        this.checked = newValue;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    toggle(event) {
        event.preventDefault();
        event.stopPropagation();
        if ((this.toggleGroup && this.checked) || this.disabled) {
            return;
        }
        else {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this.checkedChange.emit(this.checked);
            this.selectionChange.emit(new ToggleChangeEvent(this, this.value));
            if (this.toggleGroup) {
                this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
            }
        }
    }
    /**
     * \@docs-private
     *
     * method called by the group if the internal value of the group is changed programatically,
     * does not trigger change emission
     * @return {?}
     */
    setGroupSelection() {
        // propagate changes only if the value in the group is different than the button checked value
        if (!this.checked) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get svgButton() {
        return !!this.svg && !!this.svgChecked;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get svgUrl() {
        /** @type {?} */
        let useFilledSvg = this.checked || (!this.disabled && this._hover);
        if (this.negative) {
            useFilledSvg = !useFilledSvg;
        }
        return useFilledSvg ? this.svgChecked : this.svg;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get type() {
        return this.toggleGroup ? 'radio' : 'checkbox';
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    handleEnterKey(event) {
        if (!this.toggleGroup) {
            this.toggle(event);
        }
    }
}
NxCircleToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-circle-toggle',
                template: "<input [id]=\"id + '-input'\"\n       class=\"nx-circle-toggle__input\"\n       [attr.aria-labelledby]=\"id + '-label'\"\n       [type]=\"type\"\n       [attr.name]=\"name\"\n       [checked]=\"checked\"\n       [disabled]= \"disabled\"\n       [attr.aria-checked]=\"checked\"\n       (keydown.enter)=\"handleEnterKey($event)\"\n       (click)=\"toggle($event)\">\n<label class=\"nx-circle-toggle__label\"\n  [for]=\"id + '-input'\"\n  [id]=\"id + '-label'\">\n    <nx-icon-toggle-button\n      [label]=\"label\"\n      [hint]=\"hint\"\n      [checked]=\"checked\"\n      [icon]=\"iconName\"\n      [negative]=\"negative\"\n      [svg]=\"svgUrl\"\n      [disabled]=\"disabled\"\n      [inGroup]=\"inGroup\"\n      [touched]=\"_touched\">\n    </nx-icon-toggle-button>\n    <!-- The mobile toggle button is needed for the responsive mobile version of the component.\n    The display swtich is handled in the css. -->\n    <nx-mobile-toggle-button\n      [label]=\"label\"\n      [hint]=\"hint\"\n      [checked]=\"checked\"\n      [negative]=\"negative\"\n      [disabled]=\"disabled\">\n    </nx-mobile-toggle-button>\n</label>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: ToggleButton,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxCircleToggleComponent))
                    },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxCircleToggleComponent)),
                        multi: true
                    }
                ],
                host: {
                    '[class.nx-toggle-circle]': 'true',
                    '[class.in-group]': 'inGroup',
                    '[class.is-disabled]': 'disabled',
                    '[class.is-responsive]': 'responsive'
                },
                styles: [":host{display:inline-block;vertical-align:top;position:relative}:host:not(.is-responsive){opacity:.9999}:host .nx-circle-toggle__input{opacity:0;position:absolute}:host:not(.in-group){margin-right:64px}@media (max-width:703px){:host:not(.in-group){margin-right:48px}}:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__check-focus,:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__icon-wrapper{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep nx-mobile-toggle-button{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;z-index:1}"]
            }] }
];
/** @nocollapse */
NxCircleToggleComponent.ctorParameters = () => [
    { type: NxCircleToggleGroupComponent, decorators: [{ type: Optional }] },
    { type: UniqueSelectionDispatcher },
    { type: ChangeDetectorRef }
];
NxCircleToggleComponent.propDecorators = {
    name: [{ type: Input }],
    checkedChange: [{ type: Output }],
    selectionChange: [{ type: Output }],
    checked: [{ type: Input }],
    value: [{ type: Input }],
    iconName: [{ type: Input, args: ['icon',] }],
    svg: [{ type: Input }],
    svgChecked: [{ type: Input }],
    label: [{ type: Input }],
    hint: [{ type: Input }],
    negative: [{ type: Input }],
    responsive: [{ type: Input }],
    disabled: [{ type: Input }],
    toggleButton: [{ type: ViewChild, args: [NxMobileToggleButtonComponent,] }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    onTouchStart: [{ type: HostListener, args: ['touchstart',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._id;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCircleToggleComponent.prototype.inGroup;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._name;
    /**
     * An event that is emitted when the checked state fo the circle toggle changes.
     * @type {?}
     */
    NxCircleToggleComponent.prototype.checkedChange;
    /**
     * An event that is emitted when the checked state of the circle toggle changes.
     * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
     * @type {?}
     */
    NxCircleToggleComponent.prototype.selectionChange;
    /** @type {?} */
    NxCircleToggleComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._iconName;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._svg;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._svgChecked;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._hint;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._responsive;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._disabled;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCircleToggleComponent.prototype.toggleButton;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._hover;
    /**
     * touched is set to true on touch devices.
     * @type {?}
     */
    NxCircleToggleComponent.prototype._touched;
    /** @type {?} */
    NxCircleToggleComponent.prototype._removeUniqueSelectionListener;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype.onTouchedCallback;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCircleToggleComponent.prototype.toggleGroup;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._checkedDispatcher;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,