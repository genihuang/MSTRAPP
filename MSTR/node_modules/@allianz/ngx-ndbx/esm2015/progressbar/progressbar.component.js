/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ChangeDetectionStrategy } from '@angular/core';
import { Component } from '@angular/core';
import { clamp } from '@allianz/ngx-ndbx/utils';
/** @type {?} */
let progressbarId = 0;
export class NxProgressbarComponent {
    constructor() {
        /**
         * \@docs-private
         */
        this.progressbarId = `nx-progress-bar-${progressbarId++}`;
        this._value = 0;
    }
    /**
     * Sets the value of the progress bar. Defaults to zero. Mirrored to aria-value now.
     * @return {?}
     */
    get value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) { this._value = clamp(value || 0); }
    /**
     * @return {?}
     */
    _primaryTransform() {
        /** @type {?} */
        const scale = this.value;
        return { transform: `scaleX(${scale})` };
    }
}
NxProgressbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-progressbar',
                template: "<div class=\"nx-progress__track\">\n  <div class=\"nx-progress__indicator\" [ngStyle]=\"_primaryTransform()\"></div>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.aria-valuenow]': 'value'
                },
                styles: [":host{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}.nx-progress__track{background-color:#ececec;height:100%}.nx-progress__indicator{-webkit-transform-origin:top left;transform-origin:top left;height:100%;position:absolute;width:100%}.nx-progress__indicator::after{height:100%;position:absolute;width:100%;-webkit-animation:none;animation:none;content:'';display:inline-block;left:0;background:#007ab3}"]
            }] }
];
NxProgressbarComponent.propDecorators = {
    value: [{ type: Input }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxProgressbarComponent.prototype.progressbarId;
    /**
     * @type {?}
     * @private
     */
    NxProgressbarComponent.prototype._value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvcHJvZ3Jlc3NiYXIvIiwic291cmNlcyI6WyJwcm9ncmVzc2Jhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUM7O0lBQzVDLGFBQWEsR0FBRyxDQUFDO0FBV3JCLE1BQU0sT0FBTyxzQkFBc0I7SUFUbkM7Ozs7UUFZRSxrQkFBYSxHQUFHLG1CQUFtQixhQUFhLEVBQUUsRUFBRSxDQUFDO1FBTTdDLFdBQU0sR0FBVyxDQUFDLENBQUM7SUFNN0IsQ0FBQzs7Ozs7SUFUQyxJQUNJLEtBQUssS0FBYSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzs7OztJQUMzQyxJQUFJLEtBQUssQ0FBQyxLQUFhLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7OztJQUc3RCxpQkFBaUI7O2NBQ1QsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLO1FBQ3hCLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxLQUFLLEdBQUcsRUFBQyxDQUFDO0lBQ3pDLENBQUM7OztZQXZCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsd0lBQTJDO2dCQUMzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFFL0MsSUFBSSxFQUFFO29CQUNKLHNCQUFzQixFQUFFLE9BQU87aUJBQ2hDOzthQUNGOzs7b0JBT0UsS0FBSzs7Ozs7OztJQUhOLCtDQUFxRDs7Ozs7SUFNckQsd0NBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvdXRpbHMnO1xubGV0IHByb2dyZXNzYmFySWQgPSAwO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1wcm9ncmVzc2JhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm9ncmVzc2Jhci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnLi9wcm9ncmVzc2Jhci5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtdmFsdWVub3ddJzogJ3ZhbHVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54UHJvZ3Jlc3NiYXJDb21wb25lbnQge1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHByb2dyZXNzYmFySWQgPSBgbngtcHJvZ3Jlc3MtYmFyLSR7cHJvZ3Jlc3NiYXJJZCsrfWA7XG5cbiAgLyoqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBiYXIuIERlZmF1bHRzIHRvIHplcm8uIE1pcnJvcmVkIHRvIGFyaWEtdmFsdWUgbm93LiAqL1xuICBASW5wdXQoKVxuICBnZXQgdmFsdWUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3ZhbHVlOyB9XG4gIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKSB7IHRoaXMuX3ZhbHVlID0gY2xhbXAodmFsdWUgfHwgMCk7IH1cbiAgcHJpdmF0ZSBfdmFsdWU6IG51bWJlciA9IDA7XG5cbiAgX3ByaW1hcnlUcmFuc2Zvcm0oKSB7XG4gICAgY29uc3Qgc2NhbGUgPSB0aGlzLnZhbHVlO1xuICAgIHJldHVybiB7dHJhbnNmb3JtOiBgc2NhbGVYKCR7c2NhbGV9KWB9O1xuICB9XG59XG4iXX0=