/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mapClassNames } from '@allianz/ngx-ndbx/utils';
/**
 * is udefined or empty?
 * @param {?} value
 * @return {?}
 */
export function isEmpty(value) {
    return (value === undefined || value === '');
}
/**
 * @param {?} value
 * @return {?}
 */
export function isEmptyArray(value) {
    return (value === undefined || value.length === 0);
}
/**
 * add space and return mapClassNames (css)
 * @param {?} aux
 * @param {?} map
 * @return {?}
 */
export function addStyles(aux, map) {
    return ' ' + mapClassNames(aux, [], map);
}
/**
 * input='small,medium,large'
 *  map = MAPPING
 * @param {?} input
 * @param {?} map
 * @return {?}
 */
export function addStylesFromDimensions(input, map) {
    /** @type {?} */
    const aux = processSplit(input);
    /** @type {?} */
    let output = '';
    if (aux.length >= 1 && aux.length <= 4) {
        /** @type {?} */
        const auxTiny = addStyles(aux[0], map).replace('-{tier}', '');
        /** @type {?} */
        let auxSmall = '';
        /** @type {?} */
        let auxMedium = '';
        /** @type {?} */
        let auxLarge = '';
        switch (aux.length) {
            case 1:
                auxSmall = addStyles(aux[0], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[0], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[0], map).replace('{tier}', 'large');
                break;
            case 2:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[1], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[1], map).replace('{tier}', 'large');
                break;
            case 3:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[2], map).replace('{tier}', 'large');
                break;
            default:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[3], map).replace('{tier}', 'large');
                break;
        }
        output += ' ' + auxTiny.trim() + ' '
            + auxSmall.trim() + ' '
            + auxMedium.trim() + ' '
            + auxLarge.trim();
    }
    return output;
}
// Simple split
/**
 * @param {?} aux
 * @param {?=} char
 * @return {?}
 */
export function processSplit(aux, char = ',') {
    return aux.split(char).map((/**
     * @param {?} item
     * @return {?}
     */
    item => item.trim()));
}
/**
 * @param {?} el
 * @param {?} aux
 * @return {?}
 */
export function validateClassInElement(el, aux) {
    return el.hasAttribute(aux);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9ncmlkLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7O0FBSXhELE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBVTtJQUM5QixPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEtBQVk7SUFDckMsT0FBTyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDOzs7Ozs7O0FBR0QsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFXLEVBQUUsR0FBTztJQUMxQyxPQUFPLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3QyxDQUFDOzs7Ozs7OztBQUtELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxLQUFhLEVBQUUsR0FBTzs7VUFDcEQsR0FBRyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7O1FBQzNCLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTs7Y0FDOUIsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUM7O1lBQ3pELFFBQVEsR0FBRyxFQUFFOztZQUNiLFNBQVMsR0FBRyxFQUFFOztZQUNkLFFBQVEsR0FBRyxFQUFFO1FBQ2pCLFFBQVEsR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNsQixLQUFLLENBQUM7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cG9ydCB7IG1hcENsYXNzTmFtZXMgfSBmcm9tICdAYWxsaWFuei9uZ3gtbmRieC91dGlscyc7XG5pbXBvcnQgeyBFbGVtZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuXG4vKiogaXMgdWRlZmluZWQgb3IgZW1wdHk/ICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5QXJyYXkodmFsdWU6IGFueVtdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8qKiBhZGQgc3BhY2UgYW5kIHJldHVybiBtYXBDbGFzc05hbWVzIChjc3MpICovXG5leHBvcnQgZnVuY3Rpb24gYWRkU3R5bGVzKGF1eDogc3RyaW5nLCBtYXA6IHt9KTogc3RyaW5nIHtcbiAgICByZXR1cm4gJyAnICsgbWFwQ2xhc3NOYW1lcyhhdXgsIFtdLCBtYXApO1xufVxuXG4vKiogaW5wdXQ9J3NtYWxsLG1lZGl1bSxsYXJnZSdcbiAqICBtYXAgPSBNQVBQSU5HXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRTdHlsZXNGcm9tRGltZW5zaW9ucyhpbnB1dDogc3RyaW5nLCBtYXA6IHt9KTogc3RyaW5nIHtcbiAgICBjb25zdCBhdXggPSBwcm9jZXNzU3BsaXQoaW5wdXQpO1xuICAgIGxldCBvdXRwdXQgPSAnJztcbiAgICBpZiAoYXV4Lmxlbmd0aCA+PSAxICYmIGF1eC5sZW5ndGggPD0gNCkge1xuICAgICAgICBjb25zdCBhdXhUaW55ID0gYWRkU3R5bGVzKGF1eFswXSwgbWFwKS5yZXBsYWNlKCcte3RpZXJ9JywgJycpO1xuICAgICAgICBsZXQgYXV4U21hbGwgPSAnJztcbiAgICAgICAgbGV0IGF1eE1lZGl1bSA9ICcnO1xuICAgICAgICBsZXQgYXV4TGFyZ2UgPSAnJztcbiAgICAgICAgc3dpdGNoIChhdXgubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgYXV4U21hbGwgPSBhZGRTdHlsZXMoYXV4WzBdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdzbWFsbCcpO1xuICAgICAgICAgICAgYXV4TWVkaXVtID0gYWRkU3R5bGVzKGF1eFswXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbWVkaXVtJyk7XG4gICAgICAgICAgICBhdXhMYXJnZSA9IGFkZFN0eWxlcyhhdXhbMF0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ2xhcmdlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBhdXhTbWFsbCA9IGFkZFN0eWxlcyhhdXhbMV0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ3NtYWxsJyk7XG4gICAgICAgICAgICBhdXhNZWRpdW0gPSBhZGRTdHlsZXMoYXV4WzFdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdtZWRpdW0nKTtcbiAgICAgICAgICAgIGF1eExhcmdlID0gYWRkU3R5bGVzKGF1eFsxXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbGFyZ2UnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGF1eFNtYWxsID0gYWRkU3R5bGVzKGF1eFsxXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnc21hbGwnKTtcbiAgICAgICAgICAgIGF1eE1lZGl1bSA9IGFkZFN0eWxlcyhhdXhbMl0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ21lZGl1bScpO1xuICAgICAgICAgICAgYXV4TGFyZ2UgPSBhZGRTdHlsZXMoYXV4WzJdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdsYXJnZScpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGF1eFNtYWxsID0gYWRkU3R5bGVzKGF1eFsxXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnc21hbGwnKTtcbiAgICAgICAgICAgIGF1eE1lZGl1bSA9IGFkZFN0eWxlcyhhdXhbMl0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ21lZGl1bScpO1xuICAgICAgICAgICAgYXV4TGFyZ2UgPSBhZGRTdHlsZXMoYXV4WzNdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdsYXJnZScpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ICs9ICcgJyArIGF1eFRpbnkudHJpbSgpICsgJyAnXG4gICAgICAgICAgICAgICAgICAgICAgKyBhdXhTbWFsbC50cmltKCkgKyAnICdcbiAgICAgICAgICAgICAgICAgICAgICArIGF1eE1lZGl1bS50cmltKCkgKyAnICdcbiAgICAgICAgICAgICAgICAgICAgICArIGF1eExhcmdlLnRyaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuLy8gU2ltcGxlIHNwbGl0XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1NwbGl0KGF1eDogc3RyaW5nLCBjaGFyOiBzdHJpbmcgPSAnLCcpOiBBcnJheTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXV4LnNwbGl0KGNoYXIpLm1hcChpdGVtID0+IGl0ZW0udHJpbSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ2xhc3NJbkVsZW1lbnQoZWw6IGFueSwgYXV4OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZWwuaGFzQXR0cmlidXRlKGF1eCk7XG59XG4iXX0=