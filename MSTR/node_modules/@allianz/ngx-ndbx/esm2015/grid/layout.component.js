/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
export class NxLayoutComponent {
    constructor() {
        this._classNames = '';
        /**
         * \@docs-private
         */
        this.grid = true;
    }
    /**
     * Type of layout.
     *
     * Values: grid | grid nogutters | grid maxwidth. Default value: grid.
     * @param {?} value
     * @return {?}
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        this.grid = !!this._classNames.match(/grid/);
        this.noGutters = !!this._classNames.match(/nogutters/);
        this.maxWidth = !!this._classNames.match(/maxwidth/);
    }
    /**
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
}
NxLayoutComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: '[nxLayout]',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.nx-grid]': 'grid',
                    '[class.nx-grid--no-gutters]': 'noGutters',
                    '[class.nx-grid--max-width]': 'maxWidth'
                },
                styles: [":host(.nx-grid){position:relative;margin-left:auto;margin-right:auto;padding-right:8px;padding-left:8px}@media (min-width:704px){:host(.nx-grid){padding-right:32px;padding-left:32px}}:host(.nx-grid--no-gutters) ::ng-deep{padding-left:0;padding-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row{margin-left:0;margin-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row>[class*=nx-grid__column]{padding-left:0;padding-right:0}:host(.nx-grid--max-width){width:100%}@media (min-width:992px){:host(.nx-grid--max-width){width:1184px;max-width:100%}}"]
            }] }
];
NxLayoutComponent.propDecorators = {
    classNames: [{ type: Input, args: ['nxLayout',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxLayoutComponent.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLayoutComponent.prototype.grid;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLayoutComponent.prototype.noGutters;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLayoutComponent.prototype.maxWidth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L2dyaWQvIiwic291cmNlcyI6WyJsYXlvdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWMxRSxNQUFNLE9BQU8saUJBQWlCO0lBWjlCO1FBYVUsZ0JBQVcsR0FBVyxFQUFFLENBQUM7Ozs7UUFHakMsU0FBSSxHQUFZLElBQUksQ0FBQztJQTRCdkIsQ0FBQzs7Ozs7Ozs7SUFmQyxJQUNJLFVBQVUsQ0FBQyxLQUFhO1FBQzFCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7WUFDOUIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7OztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7WUEzQ0YsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBRS9DLElBQUksRUFBRTtvQkFDSixpQkFBaUIsRUFBRSxNQUFNO29CQUN6Qiw2QkFBNkIsRUFBRSxXQUFXO29CQUMxQyw0QkFBNEIsRUFBRSxVQUFVO2lCQUN6Qzs7YUFDRjs7O3lCQWtCRSxLQUFLLFNBQUMsVUFBVTs7Ozs7OztJQWhCakIsd0NBQWlDOzs7OztJQUdqQyxpQ0FBcUI7Ozs7O0lBR3JCLHNDQUFtQjs7Ozs7SUFHbkIscUNBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdbbnhMYXlvdXRdJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWydsYXlvdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubngtZ3JpZF0nOiAnZ3JpZCcsXG4gICAgJ1tjbGFzcy5ueC1ncmlkLS1uby1ndXR0ZXJzXSc6ICdub0d1dHRlcnMnLFxuICAgICdbY2xhc3MubngtZ3JpZC0tbWF4LXdpZHRoXSc6ICdtYXhXaWR0aCdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeExheW91dENvbXBvbmVudCB7XG4gIHByaXZhdGUgX2NsYXNzTmFtZXM6IHN0cmluZyA9ICcnO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGdyaWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIG5vR3V0dGVyczogYm9vbGVhbjtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBtYXhXaWR0aDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVHlwZSBvZiBsYXlvdXQuXG4gICAqXG4gICAqIFZhbHVlczogZ3JpZCB8IGdyaWQgbm9ndXR0ZXJzIHwgZ3JpZCBtYXh3aWR0aC4gRGVmYXVsdCB2YWx1ZTogZ3JpZC5cbiAgICovXG4gIEBJbnB1dCgnbnhMYXlvdXQnKVxuICBzZXQgY2xhc3NOYW1lcyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX2NsYXNzTmFtZXMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY2xhc3NOYW1lcyA9IHZhbHVlO1xuICAgIHRoaXMuZ3JpZCA9ICEhdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvZ3JpZC8pO1xuICAgIHRoaXMubm9HdXR0ZXJzID0gISF0aGlzLl9jbGFzc05hbWVzLm1hdGNoKC9ub2d1dHRlcnMvKTtcbiAgICB0aGlzLm1heFdpZHRoID0gISF0aGlzLl9jbGFzc05hbWVzLm1hdGNoKC9tYXh3aWR0aC8pO1xuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY2xhc3NOYW1lcztcbiAgfVxufVxuIl19