/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, Optional, Inject, InjectionToken } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
/** @type {?} */
let nextId = 0;
/**
 * @record
 */
export function LabelDefaultOptions() { }
if (false) {
    /**
     * Sets the default appearance. (optional)
     * @type {?|undefined}
     */
    LabelDefaultOptions.prototype.size;
}
/** @type {?} */
const DEFAULT_SIZE = 'large';
/** @type {?} */
export const LABEL_DEFAULT_OPTIONS = new InjectionToken('LABEL_DEFAULT_OPTIONS');
export class NxLabelComponent {
    /**
     * @param {?} _defaultOptions
     */
    constructor(_defaultOptions) {
        this._defaultOptions = _defaultOptions;
        this._stateChanges = new Subject();
        this._disabled = false;
        this._negative = false;
        this._id = `nx-label-${nextId++}`;
        this._size = (this._defaultOptions && this._defaultOptions.size) ? this._defaultOptions.size : DEFAULT_SIZE;
    }
    /**
     * Sets the label to disabled
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Sets the label to disabled
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Sets the Id of the label
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * **NDBX Expert option**
     * Sets the appearance of the label
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        this._stateChanges.next();
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
}
NxLabelComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-label',
                template: "<label class=\"nx-label__content\">\n  <ng-content></ng-content>\n</label>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.disabled]': 'disabled',
                    '[attr.aria-labelledby]': 'id || null',
                    '[class.nx-label--negative]': 'negative',
                    '[class.nx-label--large]': 'size === "large"',
                    '[class.nx-label--small]': 'size === "small"',
                    '[attr.id]': 'id',
                },
                styles: [":host{display:block;color:#414141}:host.nx-label--small{font-size:16px;line-height:24px;font-weight:600}:host.nx-label--large{font-size:20px;line-height:28px;letter-spacing:.2px;font-weight:300}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:#fff}"]
            }] }
];
/** @nocollapse */
NxLabelComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LABEL_DEFAULT_OPTIONS,] }] }
];
NxLabelComponent.propDecorators = {
    disabled: [{ type: Input }],
    negative: [{ type: Input }],
    id: [{ type: Input }],
    size: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NxLabelComponent.prototype._stateChanges;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImxhYmVsL2xhYmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFFM0IsTUFBTSxHQUFHLENBQUM7Ozs7QUFFZCx5Q0FHQzs7Ozs7O0lBREMsbUNBQXVCOzs7TUFLbkIsWUFBWSxHQUFHLE9BQU87O0FBRTVCLE1BQU0sT0FBTyxxQkFBcUIsR0FDaEMsSUFBSSxjQUFjLENBQXNCLHVCQUF1QixDQUFDO0FBaUJsRSxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBc0QzQixZQUErRCxlQUFvQztRQUFwQyxvQkFBZSxHQUFmLGVBQWUsQ0FBcUI7UUFyRDFGLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUNyQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLGNBQVMsR0FBWSxLQUFLLENBQUM7UUF5QjNCLFFBQUcsR0FBVyxZQUFZLE1BQU0sRUFBRSxFQUFFLENBQUM7UUE0QjNDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDOUcsQ0FBQzs7Ozs7O0lBbERELElBQ0ksUUFBUSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBR0QsSUFDSSxRQUFRLENBQUMsS0FBYztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7Ozs7SUFJRCxJQUNJLEVBQUUsQ0FBQyxLQUFhO1FBQ2xCLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxLQUFLLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDbEI7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSSxFQUFFO1FBQ0osT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2xCLENBQUM7Ozs7Ozs7SUFLRCxJQUNJLElBQUksQ0FBQyxLQUFzQjtRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQzs7O1lBcEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsd0ZBQXFDO2dCQUVyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsSUFBSSxFQUFFO29CQUNKLGlCQUFpQixFQUFFLFVBQVU7b0JBQzdCLHdCQUF3QixFQUFFLFlBQVk7b0JBQ3RDLDRCQUE0QixFQUFFLFVBQVU7b0JBQ3hDLHlCQUF5QixFQUFFLGtCQUFrQjtvQkFDN0MseUJBQXlCLEVBQUUsa0JBQWtCO29CQUM3QyxXQUFXLEVBQUUsSUFBSTtpQkFDbEI7O2FBQ0Y7Ozs7NENBeURjLFFBQVEsWUFBSSxNQUFNLFNBQUMscUJBQXFCOzs7dUJBL0NwRCxLQUFLO3VCQVdMLEtBQUs7aUJBWUwsS0FBSzttQkFjTCxLQUFLOzs7O0lBM0NOLHlDQUE2Qzs7Ozs7SUFDN0MscUNBQW1DOzs7OztJQUNuQyxxQ0FBbUM7Ozs7O0lBQ25DLGlDQUErQjs7Ozs7SUF3Qi9CLCtCQUE2Qzs7Ozs7SUEwQmpDLDJDQUF1RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPcHRpb25hbCwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxubGV0IG5leHRJZCA9IDA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFiZWxEZWZhdWx0T3B0aW9ucyB7XG4gIC8qKiBTZXRzIHRoZSBkZWZhdWx0IGFwcGVhcmFuY2UuIChvcHRpb25hbCkgKi9cbiAgc2l6ZT86IExBQkVMX1NJWkVfVFlQRTtcbn1cblxuLyoqIE9wdGlvbnMgZm9yIHNpemluZyBvZiB0aGUgbGFiZWwuICovXG5leHBvcnQgdHlwZSBMQUJFTF9TSVpFX1RZUEUgPSAnc21hbGwnIHwgJ2xhcmdlJztcbmNvbnN0IERFRkFVTFRfU0laRSA9ICdsYXJnZSc7XG5cbmV4cG9ydCBjb25zdCBMQUJFTF9ERUZBVUxUX09QVElPTlMgPVxuICBuZXcgSW5qZWN0aW9uVG9rZW48TGFiZWxEZWZhdWx0T3B0aW9ucz4oJ0xBQkVMX0RFRkFVTFRfT1BUSU9OUycpO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtbGFiZWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGFiZWwuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnbGFiZWwuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuZGlzYWJsZWRdJzogJ2Rpc2FibGVkJyxcbiAgICAnW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XSc6ICdpZCB8fCBudWxsJyxcbiAgICAnW2NsYXNzLm54LWxhYmVsLS1uZWdhdGl2ZV0nOiAnbmVnYXRpdmUnLFxuICAgICdbY2xhc3MubngtbGFiZWwtLWxhcmdlXSc6ICdzaXplID09PSBcImxhcmdlXCInLFxuICAgICdbY2xhc3MubngtbGFiZWwtLXNtYWxsXSc6ICdzaXplID09PSBcInNtYWxsXCInLFxuICAgICdbYXR0ci5pZF0nOiAnaWQnLFxuICB9LFxufSlcblxuXG5leHBvcnQgY2xhc3MgTnhMYWJlbENvbXBvbmVudCB7XG4gIHJlYWRvbmx5IF9zdGF0ZUNoYW5nZXMgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9uZWdhdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9zaXplOiBMQUJFTF9TSVpFX1RZUEU7XG5cbiAgLyoqIFNldHMgdGhlIGxhYmVsIHRvIGRpc2FibGVkICovXG4gIEBJbnB1dCgpXG4gIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIC8qKiBTZXRzIHRoZSBsYWJlbCB0byBkaXNhYmxlZCAqL1xuICBASW5wdXQoKVxuICBzZXQgbmVnYXRpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9uZWdhdGl2ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBuZWdhdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbmVnYXRpdmU7XG4gIH1cblxuICBwcml2YXRlIF9pZDogc3RyaW5nID0gYG54LWxhYmVsLSR7bmV4dElkKyt9YDtcbiAgLyoqIFNldHMgdGhlIElkIG9mIHRoZSBsYWJlbCAqL1xuICBASW5wdXQoKVxuICBzZXQgaWQodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9pZCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgLyoqXG4gICAqICoqTkRCWCBFeHBlcnQgb3B0aW9uKipcbiAgICogU2V0cyB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgbGFiZWwgKi9cbiAgQElucHV0KClcbiAgc2V0IHNpemUodmFsdWU6IExBQkVMX1NJWkVfVFlQRSkge1xuICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICB9XG5cbiAgZ2V0IHNpemUoKTogTEFCRUxfU0laRV9UWVBFIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTEFCRUxfREVGQVVMVF9PUFRJT05TKSBwcml2YXRlIF9kZWZhdWx0T3B0aW9uczogTGFiZWxEZWZhdWx0T3B0aW9uc1xuICApIHtcbiAgICB0aGlzLl9zaXplID0gKHRoaXMuX2RlZmF1bHRPcHRpb25zICYmIHRoaXMuX2RlZmF1bHRPcHRpb25zLnNpemUpID8gdGhpcy5fZGVmYXVsdE9wdGlvbnMuc2l6ZSA6IERFRkFVTFRfU0laRTtcbiAgfVxufVxuIl19