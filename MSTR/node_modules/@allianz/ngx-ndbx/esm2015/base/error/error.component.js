/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, InjectionToken, Inject, Optional } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/**
 * Represents the default options for the error notification that can be configured
 * using the `ERROR_DEFAULT_OPTIONS` injection token.
 * @record
 */
export function ErrorDefaultOptions() { }
if (false) {
    /**
     * Defines the style type of the error notification.
     * @type {?|undefined}
     */
    ErrorDefaultOptions.prototype.appearance;
}
/** @type {?} */
export const ERROR_DEFAULT_OPTIONS = new InjectionToken('ERROR_DEFAULT_OPTIONS');
export class NxErrorComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _defaultOptions
     */
    constructor(_changeDetectorRef, _defaultOptions) {
        this._changeDetectorRef = _changeDetectorRef;
        this._defaultOptions = _defaultOptions;
        this._showIcon = true;
        this._appearance = 'message';
        if (this._defaultOptions && this._defaultOptions.appearance) {
            this.appearance = this._defaultOptions.appearance;
        }
    }
    /**
     * Whether an icon should be displayed.
     * @param {?} value
     * @return {?}
     */
    set showIcon(value) {
        this._showIcon = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get showIcon() {
        return this._showIcon;
    }
    /**
     * Whether the error should have message or text styling.
     *
     * Default is 'message'.
     * @param {?} value
     * @return {?}
     */
    set appearance(value) {
        if (value !== this.appearance) {
            this._appearance = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get appearance() {
        return this._appearance;
    }
}
NxErrorComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-error',
                template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n  <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\">\n  </nx-icon>\n  <div class=\"nx-error__content-wrapper\">\n    <div class=\"nx-error__content\">\n      <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" [showIcon]=\"showIcon\" nxContext=\"error\">\n  <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n  <ng-content></ng-content>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.role]': '"alert"'
                },
                styles: [":host{font-size:16px;line-height:20px;color:#dc3149;width:100%;display:block}:host .nx-error__content{line-height:20px}:host .nx-error__icon{font-size:20px;line-height:20px;color:#dc3149;margin-right:8px;float:left}"]
            }] }
];
/** @nocollapse */
NxErrorComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ERROR_DEFAULT_OPTIONS,] }] }
];
NxErrorComponent.propDecorators = {
    showIcon: [{ type: Input }],
    appearance: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._showIcon;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._appearance;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImVycm9yL2Vycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0gsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQVM1RCx5Q0FHQzs7Ozs7O0lBREMseUNBQTRCOzs7QUFHOUIsTUFBTSxPQUFPLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFzQix1QkFBdUIsQ0FBQztBQVdyRyxNQUFNLE9BQU8sZ0JBQWdCOzs7OztJQThCM0IsWUFBb0Isa0JBQXFDLEVBQ0osZUFBb0M7UUFEckUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUNKLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQTlCakYsY0FBUyxHQUFZLElBQUksQ0FBQztRQUMxQixnQkFBVyxHQUFtQixTQUFTLENBQUM7UUE4QjVDLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRTtZQUMzRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7Ozs7O0lBOUJILElBQ0ksUUFBUSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQzs7OztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7Ozs7OztJQU9ELElBQ0ksVUFBVSxDQUFDLEtBQXFCO1FBQ2xDLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7WUFyQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxVQUFVO2dCQUNwQixtckJBQXFDO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFFL0MsSUFBSSxFQUFFO29CQUNKLGFBQWEsRUFBRSxTQUFTO2lCQUN6Qjs7YUFDRjs7OztZQXpCZ0MsaUJBQWlCOzRDQXlEN0MsUUFBUSxZQUFJLE1BQU0sU0FBQyxxQkFBcUI7Ozt1QkExQjFDLEtBQUs7eUJBY0wsS0FBSzs7Ozs7OztJQWxCTixxQ0FBa0M7Ozs7O0lBQ2xDLHVDQUFnRDs7Ozs7SUE0QnBDLDhDQUE2Qzs7Ozs7SUFDdkQsMkNBQXVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIEluamVjdGlvblRva2VuLCBJbmplY3QsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Y29lcmNlQm9vbGVhblByb3BlcnR5fSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuXG4vKiBUeXBlcyBvZiBlcnJvciBub3RpZmljYXRpb24gc3R5bGVzICovXG5leHBvcnQgdHlwZSBFcnJvclN0eWxlVHlwZSA9ICdtZXNzYWdlJyB8ICd0ZXh0JztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBlcnJvciBub3RpZmljYXRpb24gdGhhdCBjYW4gYmUgY29uZmlndXJlZFxuICogdXNpbmcgdGhlIGBFUlJPUl9ERUZBVUxUX09QVElPTlNgIGluamVjdGlvbiB0b2tlbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvckRlZmF1bHRPcHRpb25zIHtcbiAgLyoqIERlZmluZXMgdGhlIHN0eWxlIHR5cGUgb2YgdGhlIGVycm9yIG5vdGlmaWNhdGlvbi4gKi9cbiAgYXBwZWFyYW5jZT86IEVycm9yU3R5bGVUeXBlO1xufVxuXG5leHBvcnQgY29uc3QgRVJST1JfREVGQVVMVF9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPEVycm9yRGVmYXVsdE9wdGlvbnM+KCdFUlJPUl9ERUZBVUxUX09QVElPTlMnKTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtZXJyb3InLFxuICB0ZW1wbGF0ZVVybDogJy4vZXJyb3IuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJy4vZXJyb3IuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5yb2xlXSc6ICdcImFsZXJ0XCInXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE54RXJyb3JDb21wb25lbnQge1xuICBwcml2YXRlIF9zaG93SWNvbjogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgX2FwcGVhcmFuY2U6IEVycm9yU3R5bGVUeXBlID0gJ21lc3NhZ2UnO1xuXG4gIC8qKiBXaGV0aGVyIGFuIGljb24gc2hvdWxkIGJlIGRpc3BsYXllZC4gKi9cbiAgQElucHV0KClcbiAgc2V0IHNob3dJY29uKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd0ljb24gPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG4gIGdldCBzaG93SWNvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd0ljb247XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZXJyb3Igc2hvdWxkIGhhdmUgbWVzc2FnZSBvciB0ZXh0IHN0eWxpbmcuXG4gICAqXG4gICAqIERlZmF1bHQgaXMgJ21lc3NhZ2UnLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGFwcGVhcmFuY2UodmFsdWU6IEVycm9yU3R5bGVUeXBlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLmFwcGVhcmFuY2UpIHtcbiAgICAgIHRoaXMuX2FwcGVhcmFuY2UgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuICBnZXQgYXBwZWFyYW5jZSgpOiBFcnJvclN0eWxlVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGVhcmFuY2U7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChFUlJPUl9ERUZBVUxUX09QVElPTlMpIHByaXZhdGUgX2RlZmF1bHRPcHRpb25zOiBFcnJvckRlZmF1bHRPcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5fZGVmYXVsdE9wdGlvbnMgJiYgdGhpcy5fZGVmYXVsdE9wdGlvbnMuYXBwZWFyYW5jZSkge1xuICAgICAgICB0aGlzLmFwcGVhcmFuY2UgPSB0aGlzLl9kZWZhdWx0T3B0aW9ucy5hcHBlYXJhbmNlO1xuICAgICAgfVxuICAgIH1cbn1cbiJdfQ==