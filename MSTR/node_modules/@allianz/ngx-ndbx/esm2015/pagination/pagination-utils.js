/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * \@docs-private
 */
export class NxPaginationUtils {
    constructor() {
        this._pagesToShow = 3;
        this._elipsisText = '...';
        this._classExpanded = 'expanded-view';
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getPages(currentPage, totalPages) {
        /** @type {?} */
        let pages = [];
        /** @type {?} */
        let start = [];
        /** @type {?} */
        let middle = [];
        /** @type {?} */
        let end = [];
        // First array -> start
        start = this.getStartArray(currentPage, totalPages);
        // Second array -> middle
        middle = this.getMiddleArray(currentPage, totalPages);
        // Third array -> end
        end = this.getEndArray(currentPage, totalPages);
        pages = [...start, ...middle, ...end];
        return pages;
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getMiddleArray(currentPage, totalPages) {
        /** @type {?} */
        let pageNumber = currentPage < 6 ? 4 : currentPage - 1;
        /** @type {?} */
        const middle = [];
        while (middle.length < 3 &&
            pageNumber >= 2 &&
            pageNumber <= totalPages - 3 &&
            (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)) {
            middle.push(this.createPaginationItem(pageNumber, pageNumber));
            pageNumber++;
        }
        return middle;
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getEndArray(currentPage, totalPages) {
        /** @type {?} */
        const end = [];
        /** @type {?} */
        let currentItemToShow = totalPages <= 3 ? totalPages + 1 :
            totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2;
        /** @type {?} */
        const showEllipsis = currentPage < totalPages - 4;
        while (currentItemToShow <= totalPages) {
            /** @type {?} */
            const endItem = end.length === 0 && showEllipsis ?
                this.createPaginationItem(this._elipsisText, currentItemToShow, true) :
                this.createPaginationItem(currentItemToShow, currentItemToShow, true);
            end.push(endItem);
            currentItemToShow++;
        }
        return end;
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getStartArray(currentPage, totalPages) {
        /** @type {?} */
        let counterPages = 0;
        /** @type {?} */
        const start = [];
        /** @type {?} */
        const maxSizeArray = 3;
        while (counterPages < maxSizeArray && counterPages < totalPages) {
            /** @type {?} */
            const startItem = counterPages === 2 && currentPage > 5 ?
                this.createPaginationItem(this._elipsisText, counterPages, true) :
                this.createPaginationItem(counterPages + 1, counterPages + 1, true);
            start.push(startItem);
            counterPages++;
        }
        return start;
    }
    /**
     * @private
     * @param {?} label
     * @param {?} value
     * @param {?=} classExpanded
     * @return {?}
     */
    createPaginationItem(label, value, classExpanded) {
        return { label: label, value: value, class: classExpanded ? this._classExpanded : '' };
    }
}
NxPaginationUtils.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._pagesToShow;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._elipsisText;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._classExpanded;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsicGFnaW5hdGlvbi9wYWdpbmF0aW9uLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBSzNDLE1BQU0sT0FBTyxpQkFBaUI7SUFEOUI7UUFFVSxpQkFBWSxHQUFHLENBQUMsQ0FBQztRQUNqQixpQkFBWSxHQUFXLEtBQUssQ0FBQztRQUM3QixtQkFBYyxHQUFXLGVBQWUsQ0FBQztJQXlFbkQsQ0FBQzs7Ozs7O0lBdkVDLFFBQVEsQ0FBQyxXQUFtQixFQUFFLFVBQWtCOztZQUUxQyxLQUFLLEdBQUcsRUFBRTs7WUFDVixLQUFLLEdBQUcsRUFBRTs7WUFBRSxNQUFNLEdBQUcsRUFBRTs7WUFBRSxHQUFHLEdBQUcsRUFBRTtRQUVyQyx1QkFBdUI7UUFDdkIsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3BELHlCQUF5QjtRQUN6QixNQUFNLEdBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdkQscUJBQXFCO1FBQ3JCLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVoRCxLQUFLLEdBQUcsQ0FBRSxHQUFHLEtBQUssRUFBRSxHQUFHLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBRSxDQUFDO1FBRXhDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBRUQsY0FBYyxDQUFDLFdBQW1CLEVBQUUsVUFBa0I7O1lBQ2hELFVBQVUsR0FBRyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDOztjQUNoRCxNQUFNLEdBQUcsRUFBRTtRQUVqQixPQUNFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNqQixVQUFVLElBQUksQ0FBQztZQUNmLFVBQVUsSUFBSSxVQUFVLEdBQUcsQ0FBQztZQUM1QixDQUFDLFVBQVUsSUFBSSxXQUFXLEdBQUcsQ0FBQyxJQUFJLFVBQVUsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQ2hFO1lBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDL0QsVUFBVSxFQUFFLENBQUM7U0FDZDtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7OztJQUNELFdBQVcsQ0FBQyxXQUFtQixFQUFFLFVBQWtCOztjQUMzQyxHQUFHLEdBQUcsRUFBRTs7WUFDVixpQkFBaUIsR0FDbkIsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUM7O2NBQzVELFlBQVksR0FBRyxXQUFXLEdBQUcsVUFBVSxHQUFHLENBQUM7UUFFakQsT0FBTyxpQkFBaUIsSUFBSSxVQUFVLEVBQUU7O2tCQUNoQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUM7Z0JBQ2hELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsRUFBRyxpQkFBaUIsRUFBRSxJQUFJLENBQUM7WUFDeEUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsQixpQkFBaUIsRUFBRSxDQUFDO1NBQ3JCO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOzs7Ozs7SUFDRCxhQUFhLENBQUMsV0FBbUIsRUFBRSxVQUFrQjs7WUFDL0MsWUFBWSxHQUFHLENBQUM7O2NBQ2QsS0FBSyxHQUFHLEVBQUU7O2NBQ1YsWUFBWSxHQUFHLENBQUM7UUFFdEIsT0FBTyxZQUFZLEdBQUcsWUFBWSxJQUFJLFlBQVksR0FBRyxVQUFVLEVBQUU7O2tCQUN6RCxTQUFTLEdBQUcsWUFBWSxLQUFLLENBQUMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNsRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxHQUFHLENBQUMsRUFBRyxZQUFZLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQztZQUV0RSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RCLFlBQVksRUFBRSxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7OztJQUdPLG9CQUFvQixDQUFDLEtBQXNCLEVBQUUsS0FBYSxFQUFFLGFBQXVCO1FBQ3pGLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFHLENBQUM7SUFDMUYsQ0FBQzs7O1lBM0VGLFVBQVU7Ozs7Ozs7SUFFVCx5Q0FBeUI7Ozs7O0lBQ3pCLHlDQUFxQzs7Ozs7SUFDckMsMkNBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vcGFnaW5hdGlvbi5jb21wb25lbnQnO1xuXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE54UGFnaW5hdGlvblV0aWxzICB7XG4gIHByaXZhdGUgX3BhZ2VzVG9TaG93ID0gMztcbiAgcHJpdmF0ZSBfZWxpcHNpc1RleHQ6IHN0cmluZyA9ICcuLi4nO1xuICBwcml2YXRlIF9jbGFzc0V4cGFuZGVkOiBzdHJpbmcgPSAnZXhwYW5kZWQtdmlldyc7XG5cbiAgZ2V0UGFnZXMoY3VycmVudFBhZ2U6IG51bWJlciwgdG90YWxQYWdlczogbnVtYmVyKTogUGFnZVtdIHtcblxuICAgIGxldCBwYWdlcyA9IFtdO1xuICAgIGxldCBzdGFydCA9IFtdLCBtaWRkbGUgPSBbXSwgZW5kID0gW107XG5cbiAgICAvLyBGaXJzdCBhcnJheSAtPiBzdGFydFxuICAgIHN0YXJ0ID0gdGhpcy5nZXRTdGFydEFycmF5KGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2VzKTtcbiAgICAvLyBTZWNvbmQgYXJyYXkgLT4gbWlkZGxlXG4gICAgbWlkZGxlID0gIHRoaXMuZ2V0TWlkZGxlQXJyYXkoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpO1xuICAgIC8vIFRoaXJkIGFycmF5IC0+IGVuZFxuICAgIGVuZCA9IHRoaXMuZ2V0RW5kQXJyYXkoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpO1xuXG4gICAgcGFnZXMgPSBbIC4uLnN0YXJ0LCAuLi5taWRkbGUsIC4uLmVuZCBdO1xuXG4gICAgcmV0dXJuIHBhZ2VzO1xuICB9XG5cbiAgZ2V0TWlkZGxlQXJyYXkoY3VycmVudFBhZ2U6IG51bWJlciwgdG90YWxQYWdlczogbnVtYmVyKTogQXJyYXk8YW55PiB7XG4gICAgbGV0IHBhZ2VOdW1iZXIgPSBjdXJyZW50UGFnZSA8IDYgPyA0IDogY3VycmVudFBhZ2UgLSAxO1xuICAgIGNvbnN0IG1pZGRsZSA9IFtdO1xuXG4gICAgd2hpbGUgKFxuICAgICAgbWlkZGxlLmxlbmd0aCA8IDMgJiZcbiAgICAgIHBhZ2VOdW1iZXIgPj0gMiAmJlxuICAgICAgcGFnZU51bWJlciA8PSB0b3RhbFBhZ2VzIC0gMyAmJlxuICAgICAgKHBhZ2VOdW1iZXIgPD0gY3VycmVudFBhZ2UgKyAxICYmIHBhZ2VOdW1iZXIgPj0gY3VycmVudFBhZ2UgLSAxKVxuICAgICkge1xuICAgICAgbWlkZGxlLnB1c2godGhpcy5jcmVhdGVQYWdpbmF0aW9uSXRlbShwYWdlTnVtYmVyLCBwYWdlTnVtYmVyKSk7XG4gICAgICBwYWdlTnVtYmVyKys7XG4gICAgfVxuICAgIHJldHVybiBtaWRkbGU7XG4gIH1cbiAgZ2V0RW5kQXJyYXkoY3VycmVudFBhZ2U6IG51bWJlciwgdG90YWxQYWdlczogbnVtYmVyKTogQXJyYXk8YW55PiB7XG4gICAgY29uc3QgZW5kID0gW107XG4gICAgbGV0IGN1cnJlbnRJdGVtVG9TaG93OiBudW1iZXIgPVxuICAgICAgdG90YWxQYWdlcyA8PSAzID8gdG90YWxQYWdlcyArIDEgOlxuICAgICAgdG90YWxQYWdlcyA8PSA2ID8gdG90YWxQYWdlcyAtICh0b3RhbFBhZ2VzIC0gNCkgOiB0b3RhbFBhZ2VzIC0gMiA7XG4gICAgY29uc3Qgc2hvd0VsbGlwc2lzID0gY3VycmVudFBhZ2UgPCB0b3RhbFBhZ2VzIC0gNDtcblxuICAgIHdoaWxlIChjdXJyZW50SXRlbVRvU2hvdyA8PSB0b3RhbFBhZ2VzKSB7XG4gICAgICBjb25zdCBlbmRJdGVtID0gZW5kLmxlbmd0aCA9PT0gMCAmJiBzaG93RWxsaXBzaXMgP1xuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2luYXRpb25JdGVtKHRoaXMuX2VsaXBzaXNUZXh0LCBjdXJyZW50SXRlbVRvU2hvdywgdHJ1ZSkgOlxuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2luYXRpb25JdGVtKGN1cnJlbnRJdGVtVG9TaG93ICwgY3VycmVudEl0ZW1Ub1Nob3csIHRydWUpO1xuICAgICAgZW5kLnB1c2goZW5kSXRlbSk7XG4gICAgICBjdXJyZW50SXRlbVRvU2hvdysrO1xuICAgIH1cblxuICAgIHJldHVybiBlbmQ7XG4gIH1cbiAgZ2V0U3RhcnRBcnJheShjdXJyZW50UGFnZTogbnVtYmVyLCB0b3RhbFBhZ2VzOiBudW1iZXIpOiBBcnJheTxhbnk+IHtcbiAgICBsZXQgY291bnRlclBhZ2VzID0gMDtcbiAgICBjb25zdCBzdGFydCA9IFtdO1xuICAgIGNvbnN0IG1heFNpemVBcnJheSA9IDM7XG5cbiAgICB3aGlsZSAoY291bnRlclBhZ2VzIDwgbWF4U2l6ZUFycmF5ICYmIGNvdW50ZXJQYWdlcyA8IHRvdGFsUGFnZXMpIHtcbiAgICAgIGNvbnN0IHN0YXJ0SXRlbSA9IGNvdW50ZXJQYWdlcyA9PT0gMiAmJiBjdXJyZW50UGFnZSA+IDUgP1xuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2luYXRpb25JdGVtKHRoaXMuX2VsaXBzaXNUZXh0LCBjb3VudGVyUGFnZXMsIHRydWUpIDpcbiAgICAgICAgdGhpcy5jcmVhdGVQYWdpbmF0aW9uSXRlbShjb3VudGVyUGFnZXMgKyAxICwgY291bnRlclBhZ2VzICsgMSwgdHJ1ZSk7XG5cbiAgICAgIHN0YXJ0LnB1c2goc3RhcnRJdGVtKTtcbiAgICAgIGNvdW50ZXJQYWdlcysrO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFydDtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBjcmVhdGVQYWdpbmF0aW9uSXRlbShsYWJlbDogc3RyaW5nIHwgbnVtYmVyLCB2YWx1ZTogbnVtYmVyLCBjbGFzc0V4cGFuZGVkPzogYm9vbGVhbikge1xuICAgIHJldHVybiB7IGxhYmVsOiBsYWJlbCwgdmFsdWU6IHZhbHVlLCBjbGFzczogY2xhc3NFeHBhbmRlZCA/IHRoaXMuX2NsYXNzRXhwYW5kZWQgOiAnJyAgfTtcbiAgfVxuXG59XG4iXX0=