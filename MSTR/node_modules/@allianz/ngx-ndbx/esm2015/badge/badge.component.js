/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
export class NxBadgeComponent {
    /**
     * @param {?} _changeDetRef
     */
    constructor(_changeDetRef) {
        this._changeDetRef = _changeDetRef;
        this._vibrant = false;
    }
    /**
     * Sets the class name for the badge element.
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        if (value !== this._type) {
            this._type = value;
            this._changeDetRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * Change badge style to vibrant.
     * @param {?} value
     * @return {?}
     */
    set vibrant(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (value !== this._vibrant) {
            this._vibrant = newValue;
            this._changeDetRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get vibrant() {
        return this._vibrant;
    }
}
NxBadgeComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-badge',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.nx-badge--active]': 'type === "active"',
                    '[class.nx-badge--positive]': 'type === "positive"',
                    '[class.nx-badge--critical]': 'type === "critical"',
                    '[class.nx-badge--negative]': 'type === "negative"',
                    '[class.nx-badge--vibrant]': 'vibrant'
                },
                styles: [":host{display:inline-block;padding:0 8px;font-size:16px;font-weight:400;line-height:24px;white-space:nowrap;border-radius:12px;color:#414141;background-color:#d9d9d9;min-width:24px}@media screen and (-ms-high-contrast:active){:host{box-shadow:0 0 0 1px windowText}}:host.nx-badge--active{background-color:#cfe9ee}:host.nx-badge--positive{background-color:#e3ebaf}:host.nx-badge--critical{background-color:#f7c7c3}:host.nx-badge--negative{background-color:#ffe8b0}:host(.nx-badge--vibrant){color:#fff;background-color:#414141}:host(.nx-badge--vibrant).nx-badge--active{background-color:#007ab3}:host(.nx-badge--vibrant).nx-badge--positive{background-color:#1e8927}:host(.nx-badge--vibrant).nx-badge--critical{background-color:#dc3149}:host(.nx-badge--vibrant).nx-badge--negative{color:#414141;background-color:#efbe25}"]
            }] }
];
/** @nocollapse */
NxBadgeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxBadgeComponent.propDecorators = {
    type: [{ type: Input }],
    vibrant: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxBadgeComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    NxBadgeComponent.prototype._vibrant;
    /**
     * @type {?}
     * @private
     */
    NxBadgeComponent.prototype._changeDetRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFkZ2UvIiwic291cmNlcyI6WyJiYWRnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBaUI5RCxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBSTNCLFlBQW9CLGFBQWdDO1FBQWhDLGtCQUFhLEdBQWIsYUFBYSxDQUFtQjtRQUY1QyxhQUFRLEdBQVksS0FBSyxDQUFDO0lBRXNCLENBQUM7Ozs7OztJQUd6RCxJQUNJLElBQUksQ0FBQyxLQUFrQjtRQUN6QixJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDbkM7SUFDSCxDQUFDOzs7O0lBQ0QsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7OztJQUVELElBQ0ksT0FBTyxDQUFDLEtBQWM7O2NBQ2xCLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7UUFFN0MsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUN6QixJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7WUExQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxVQUFVO2dCQUNwQixRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFFL0MsSUFBSSxFQUFFO29CQUNKLDBCQUEwQixFQUFFLG1CQUFtQjtvQkFDL0MsNEJBQTRCLEVBQUUscUJBQXFCO29CQUNuRCw0QkFBNEIsRUFBRSxxQkFBcUI7b0JBQ25ELDRCQUE0QixFQUFFLHFCQUFxQjtvQkFDbkQsMkJBQTJCLEVBQUUsU0FBUztpQkFDdkM7O2FBQ0Y7Ozs7WUFqQm1ELGlCQUFpQjs7O21CQXlCbEUsS0FBSztzQkFXTCxLQUFLOzs7Ozs7O0lBakJOLGlDQUEyQjs7Ozs7SUFDM0Isb0NBQWtDOzs7OztJQUV0Qix5Q0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbi8qKiBQb3NzaWJsZSBiYWRnZSB0eXBlcy4gKi9cbmV4cG9ydCB0eXBlIE54QmFkZ2VUeXBlID0gJ2FjdGl2ZScgfCAncG9zaXRpdmUnIHwgJ2NyaXRpY2FsJyB8ICduZWdhdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LWJhZGdlJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWycuL2JhZGdlLmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm54LWJhZGdlLS1hY3RpdmVdJzogJ3R5cGUgPT09IFwiYWN0aXZlXCInLFxuICAgICdbY2xhc3MubngtYmFkZ2UtLXBvc2l0aXZlXSc6ICd0eXBlID09PSBcInBvc2l0aXZlXCInLFxuICAgICdbY2xhc3MubngtYmFkZ2UtLWNyaXRpY2FsXSc6ICd0eXBlID09PSBcImNyaXRpY2FsXCInLFxuICAgICdbY2xhc3MubngtYmFkZ2UtLW5lZ2F0aXZlXSc6ICd0eXBlID09PSBcIm5lZ2F0aXZlXCInLFxuICAgICdbY2xhc3MubngtYmFkZ2UtLXZpYnJhbnRdJzogJ3ZpYnJhbnQnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhCYWRnZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3R5cGU6IE54QmFkZ2VUeXBlO1xuICBwcml2YXRlIF92aWJyYW50OiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0UmVmOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgLyoqIFNldHMgdGhlIGNsYXNzIG5hbWUgZm9yIHRoZSBiYWRnZSBlbGVtZW50LiAgKi9cbiAgQElucHV0KClcbiAgc2V0IHR5cGUodmFsdWU6IE54QmFkZ2VUeXBlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl90eXBlKSB7XG4gICAgICB0aGlzLl90eXBlID0gdmFsdWU7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIGdldCB0eXBlKCk6IE54QmFkZ2VUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuICAvKiogQ2hhbmdlIGJhZGdlIHN0eWxlIHRvIHZpYnJhbnQuICovXG4gIEBJbnB1dCgpXG4gIHNldCB2aWJyYW50KHZhbHVlOiBib29sZWFuKSB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl92aWJyYW50KSB7XG4gICAgICB0aGlzLl92aWJyYW50ID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIGdldCB2aWJyYW50KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl92aWJyYW50O1xuICB9XG59XG4iXX0=