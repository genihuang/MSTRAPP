import { ElementRef } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
export declare const NX_MASK_VALUE_ACCESSOR: any;
export declare const NX_MASK_VALIDATORS: any;
export declare class NxMaskDirective implements ControlValueAccessor, Validator {
    private _elementRef;
    private _mask;
    private _separators;
    private _dropSpecialCharacters;
    private _position;
    private _validateMask;
    private _onChangeCallback;
    private _onTouchedCallback;
    private _validatorOnChange;
    /** Sets the mask.  */
    mask: string;
    /**
     * Sets the keys that are recognized as separators.
     * Default separators: / ( ) . : - + , and space.
     */
    separators: string[];
    /** Whether the separators should be dropped in the control value accessor. */
    dropSpecialCharacters: boolean;
    /** Whether the mask validation should be applied on the input. Default: true. */
    validateMask: boolean;
    constructor(_elementRef: ElementRef);
    /** Returns the unmasked value. */
    getUnmaskedValue(): string;
    /**
     * this._position can be set to a new value in this function;
     * it is used to set the cursor position after checking the masked input in _onInputChange().
     */
    _onKeydown(event: KeyboardEvent): void;
    /**
     * Returns the cursor position after a letter is entered at `selectionStart` position in the mask.
     * There are two cases to consider ('|' => cursor position where the character is entered, mask: 00:00:00):
     * - before the separators there is space for entering the letter: '12:3|4:5' => '12:30:|45'
     * - the letter has to be shifted and is entered after the separators: '12:34|:5' => '12:34:0|5'
     */
    private _calculateCursorShift;
    private _keyCodeIsNumber;
    private _keyCodeIsLetter;
    private _isKeyCodeAllowed;
    private _isStringAllowed;
    _onInputChange(event: KeyboardEvent): void;
    _onPaste(event: ClipboardEvent): void;
    private updateValue;
    private getMaskedString;
    private isSeparator;
    writeValue(value: any): void;
    registerOnChange(onChange: any): void;
    registerOnTouched(onTouched: any): void;
    /** @docs-private */
    registerOnValidatorChange(fn: () => void): void;
    _validateFn(): {
        nxMaskLengthError: {
            'length': number;
            'actual': any;
        };
    };
    /** @docs-private */
    validate(): {
        nxMaskLengthError: {
            'length': number;
            'actual': any;
        };
    };
}
