import { Overlay } from '@angular/cdk/overlay';
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { NxPopoverComponent } from './popover.component';
export declare type PopoverDirection = 'left' | 'top' | 'right' | 'bottom';
export declare type PopoverTriggerType = 'click' | 'hover' | 'manual';
export declare type PopoverTriggerScrollStrategy = 'close' | 'reposition';
export declare class NxPopoverTriggerDirective implements AfterViewInit, OnDestroy, OnInit {
    private overlay;
    private elementRef;
    private viewContainerRef;
    private eventManager;
    private overlayRef;
    private portal;
    private _destroyed;
    private _show;
    private _closeable;
    private _positionStrategy;
    private _embeddedViewRef;
    private _documentClickObservable;
    /** @docs-private */
    id: string;
    /** An event is emitted if the visibility status of the popover changes. */
    changeShow: EventEmitter<boolean>;
    /** Whether to show or hide the popover. */
    show: boolean;
    /** Whether to show a close button. By default a close icon is only shown for trigger type click. */
    closeable: boolean;
    /** Links the trigger with the popover to open. */
    popover: NxPopoverComponent;
    /** Sets the desired direction to open the popover. E.g., right, left, bottom, top */
    direction: PopoverDirection;
    /** Whether the popover will be opened automatically. */
    popoverInitialVisible: boolean;
    /** An event is emitted when the visibility of the popopver changes. */
    visibleChange: EventEmitter<boolean>;
    /** Whether the popover opens in modal state. */
    modal: boolean;
    /** Sets the way to trigger the popover. Options are hover, click, manual */
    trigger: PopoverTriggerType;
    /** Sets the scroll strategy. 'close' closes the popover on scroll while 'reposition' scrolls the popover with the origin. */
    scrollStrategy: PopoverTriggerScrollStrategy;
    constructor(overlay: Overlay, elementRef: ElementRef, viewContainerRef: ViewContainerRef, eventManager: EventManager);
    /** @docs-private */
    onMouseEnter(): void;
    /** @docs-private */
    onMouseExit(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    readonly isOpen: boolean;
    /** @docs-private */
    isCloseable(): boolean;
    /** Update the popover with the given position strategy. */
    updatePosition(): void;
    /** @docs-private */
    handleClick(): void;
    /** Open the popover instance. */
    open(): void;
    /** Close the popover instance. */
    close(): void;
    /** Toggle the popover instance. */
    toggle(): void;
    private openPopover;
    private closePopover;
    private createOverlay;
    private subscribeToPositions;
    private _subscribeToBackdropClick;
    private _subscribeToDetach;
    private waitForClose;
    private positionOverlay;
    private positionArrow;
    private getPosition;
}
