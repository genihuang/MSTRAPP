/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { CdkAccordion } from '@angular/cdk/accordion';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
var DEFAULT_TYPE = 'regular';
var NxAccordionDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NxAccordionDirective, _super);
    function NxAccordionDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._style = 'regular';
        _this._negative = null;
        return _this;
    }
    Object.defineProperty(NxAccordionDirective.prototype, "style", {
        get: /**
         * @return {?}
         */
        function () {
            return this._style;
        },
        /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'
         */
        set: /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value ? value : DEFAULT_TYPE;
            var _a = tslib_1.__read(value.match(/regular|light/) || [DEFAULT_TYPE], 1), newValue = _a[0];
            this._style = (/** @type {?} */ (newValue));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxAccordionDirective.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the negative set of styles should be used. */
        set: /**
         * Whether the negative set of styles should be used.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NxAccordionDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-accordion',
                    host: {
                        '[class.nx-accordion]': 'true',
                        'role': 'presentation'
                    }
                },] }
    ];
    NxAccordionDirective.propDecorators = {
        style: [{ type: Input, args: ['nxStyle',] }],
        negative: [{ type: Input }]
    };
    return NxAccordionDirective;
}(CdkAccordion));
export { NxAccordionDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxAccordionDirective.prototype._style;
    /**
     * @type {?}
     * @private
     */
    NxAccordionDirective.prototype._negative;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJhY2NvcmRpb24vYWNjb3JkaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztJQUd4RCxZQUFZLEdBQW1CLFNBQVM7QUFFOUM7SUFRMEMsZ0RBQVk7SUFSdEQ7UUFBQSxxRUFxQ0M7UUEzQlMsWUFBTSxHQUFtQixTQUFTLENBQUM7UUFpQm5DLGVBQVMsR0FBWSxJQUFJLENBQUM7O0lBVXBDLENBQUM7SUFyQkMsc0JBQ0ksdUNBQUs7Ozs7UUFNVDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO1FBYkQ7OztXQUdHOzs7Ozs7O1FBQ0gsVUFDVSxLQUFxQjtZQUM3QixLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztZQUUvQixJQUFBLHNFQUEyRCxFQUExRCxnQkFBMEQ7WUFDakUsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBQSxRQUFRLEVBQWtCLENBQUM7UUFDM0MsQ0FBQzs7O09BQUE7SUFRRCxzQkFDSSwwQ0FBUTs7OztRQUdaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFQRCx5REFBeUQ7Ozs7OztRQUN6RCxVQUNhLEtBQWM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxDQUFDOzs7T0FBQTs7Z0JBakNGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLElBQUksRUFBRTt3QkFDSixzQkFBc0IsRUFBRSxNQUFNO3dCQUM5QixNQUFNLEVBQUUsY0FBYztxQkFDdkI7aUJBQ0Y7Ozt3QkFTRSxLQUFLLFNBQUMsU0FBUzsyQkFjZixLQUFLOztJQU9SLDJCQUFDO0NBQUEsQUFyQ0QsQ0FRMEMsWUFBWSxHQTZCckQ7U0E3Qlksb0JBQW9COzs7Ozs7SUFFL0Isc0NBQTJDOzs7OztJQWlCM0MseUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2RrQWNjb3JkaW9uIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2FjY29yZGlvbic7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQWNjb3JkaW9uU3R5bGUgfSBmcm9tICcuL2V4cGFuc2lvbi1wYW5lbCc7XG5cbmNvbnN0IERFRkFVTFRfVFlQRTogQWNjb3JkaW9uU3R5bGUgPSAncmVndWxhcic7XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnbngtYWNjb3JkaW9uJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubngtYWNjb3JkaW9uXSc6ICd0cnVlJyxcbiAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhBY2NvcmRpb25EaXJlY3RpdmUgZXh0ZW5kcyBDZGtBY2NvcmRpb24ge1xuXG4gIHByaXZhdGUgX3N0eWxlOiBBY2NvcmRpb25TdHlsZSA9ICdyZWd1bGFyJztcblxuICAvKipcbiAgICogVmFsdWUgZm9yIHRoZSBzdHlsaW5nIHRoYXQgc2hvdWxkIGJlIGNob3Nlbi5cbiAgICogRGVmYXVsdCB2YWx1ZTogJ3JlZ3VsYXInXG4gICAqL1xuICBASW5wdXQoJ254U3R5bGUnKVxuICBzZXQgc3R5bGUodmFsdWU6IEFjY29yZGlvblN0eWxlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlIDogREVGQVVMVF9UWVBFO1xuXG4gICAgY29uc3QgW25ld1ZhbHVlXSA9IHZhbHVlLm1hdGNoKC9yZWd1bGFyfGxpZ2h0LykgfHwgW0RFRkFVTFRfVFlQRV07XG4gICAgdGhpcy5fc3R5bGUgPSBuZXdWYWx1ZSBhcyBBY2NvcmRpb25TdHlsZTtcbiAgfVxuICBnZXQgc3R5bGUoKTogQWNjb3JkaW9uU3R5bGUge1xuICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgfVxuXG4gIHByaXZhdGUgX25lZ2F0aXZlOiBib29sZWFuID0gbnVsbDtcblxuICAvKiogV2hldGhlciB0aGUgbmVnYXRpdmUgc2V0IG9mIHN0eWxlcyBzaG91bGQgYmUgdXNlZC4gKi9cbiAgQElucHV0KClcbiAgc2V0IG5lZ2F0aXZlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbmVnYXRpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICB9XG4gIGdldCBuZWdhdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbmVnYXRpdmU7XG4gIH1cbn1cbiJdfQ==