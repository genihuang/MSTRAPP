/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, Host } from '@angular/core';
import { merge, Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { nxAccordionAnimations } from './accordion-animations';
import { NxExpansionPanelComponent } from './expansion-panel';
var NxExpansionPanelHeaderComponent = /** @class */ (function () {
    function NxExpansionPanelHeaderComponent(panel, _changeDetectorRef) {
        var _this = this;
        this.panel = panel;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter((/**
         * @param {?} changes
         * @return {?}
         */
        function (changes) { return !!(changes.hideToggle || changes.disabled); }))))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this._changeDetectorRef.markForCheck(); }));
    }
    /**
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._parentChangeSubscription.unsubscribe();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.isExpanded = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.panel.expanded;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.getOpenState = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.panel.getOpenState();
    };
    /**
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype._getPanelId = /**
     * @return {?}
     */
    function () {
        return this.panel.id;
    };
    /**
     * Toggle the expansion panel.
     */
    /**
     * Toggle the expansion panel.
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.toggle = /**
     * Toggle the expansion panel.
     * @return {?}
     */
    function () {
        this.panel.toggle();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.keydown = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            case SPACE:
            case ENTER:
                event.preventDefault();
                this.toggle();
                break;
            default:
                return;
        }
    };
    NxExpansionPanelHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-expansion-panel-header',
                    template: "<div class=\"nx-expansion-panel__header-content\">\n  <ng-content select=\"nx-expansion-panel-title\"></ng-content>\n  <ng-content select=\"nx-expansion-panel-description\"></ng-content>\n  <nx-icon\n    [@indicatorRotate]=\"getOpenState()\"\n    class=\"nx-expansion-panel__chevron\"\n    name=\"chevron-down\">\n  </nx-icon>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [nxAccordionAnimations.indicatorRotate],
                    host: {
                        '[class.nx-expanded]': 'isExpanded()',
                        'class': 'nx-expansion-panel__header',
                        'role': 'button',
                        '[attr.id]': 'panel._headerId',
                        '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                        '[attr.aria-controls]': '_getPanelId()',
                        '[attr.aria-expanded]': 'isExpanded()',
                        '[attr.aria-disabled]': 'panel.disabled',
                        '(keydown)': 'keydown($event)',
                        '(click)': 'toggle()'
                    },
                    styles: [":host:focus{outline:0}.nx-expansion-panel__header-content{width:100%;cursor:pointer;align-items:center;color:#414141;display:flex;justify-content:space-between;position:relative;padding:24px 32px;margin-top:16px;background:#f5f5f5;outline:0;border:none}::ng-deep .nx-expansion-panel__header-title{font-size:26px;font-weight:300;line-height:32px;letter-spacing:.3px;text-align:left;margin-right:32px}:host-context(.nx-expansion-panel--negative) .nx-expansion-panel__header-content{background-color:#fff}.nx-expansion-panel__chevron{color:#006192;pointer-events:none;font-size:24px}:host-context(.nx-expansion-panel--light) .nx-expansion-panel__header-content{margin-top:0;background:0 0}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{color:#006192;letter-spacing:.2px;font-weight:400;font-size:20px;line-height:28px}@media (max-width:703px){.nx-expansion-panel__header-content{padding:16px;margin-top:0;border-top:1px solid #d9d9d9}::ng-deep .nx-expansion-panel__header-title{font-size:20px;line-height:28px;margin-right:16px;font-weight:400}:host(.nx-expanded) .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{line-height:24px;font-size:16px}:host-context(.nx-expansion-panel--light.nx-expanded) .nx-expansion-panel__header-content{border-bottom:none}}:host[aria-disabled=true] .nx-expansion-panel__header-content{cursor:not-allowed}:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__chevron,:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__header-title{color:#c2c2c2}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content{border-color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-title{color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__chevron{color:#fff}:host-context([data-whatinput=keyboard]):focus .nx-expansion-panel__header-content{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-top-color:transparent;z-index:1}"]
                }] }
    ];
    /** @nocollapse */
    NxExpansionPanelHeaderComponent.ctorParameters = function () { return [
        { type: NxExpansionPanelComponent, decorators: [{ type: Host }] },
        { type: ChangeDetectorRef }
    ]; };
    return NxExpansionPanelHeaderComponent;
}());
export { NxExpansionPanelHeaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelHeaderComponent.prototype._parentChangeSubscription;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelHeaderComponent.prototype.panel;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelHeaderComponent.prototype._changeDetectorRef;
}
/**
 * This directive is to be used inside of the NxExpansionPanelHeader component.
 */
var NxExpansionPanelDescriptionDirective = /** @class */ (function () {
    function NxExpansionPanelDescriptionDirective() {
    }
    NxExpansionPanelDescriptionDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-expansion-panel-description',
                    host: {
                        class: 'nx-expansion-panel__header-description'
                    }
                },] }
    ];
    return NxExpansionPanelDescriptionDirective;
}());
export { NxExpansionPanelDescriptionDirective };
/**
 * This directive is to be used inside of the NxExpansionPanelHeader component.
 */
var NxExpansionPanelTitleDirective = /** @class */ (function () {
    function NxExpansionPanelTitleDirective() {
    }
    NxExpansionPanelTitleDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-expansion-panel-title',
                    host: {
                        class: 'nx-expansion-panel__header-title'
                    }
                },] }
    ];
    return NxExpansionPanelTitleDirective;
}());
export { NxExpansionPanelTitleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWhlYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsiYWNjb3JkaW9uL2V4cGFuc2lvbi1wYW5lbC1oZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ2xILE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUc5RDtJQXNCRSx5Q0FDc0MsS0FBZ0MsRUFDNUQsa0JBQXFDO1FBRi9DLGlCQVdDO1FBVnFDLFVBQUssR0FBTCxLQUFLLENBQTJCO1FBQzVELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFKdkMsOEJBQXlCLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQztRQU1yRCxJQUFJLENBQUMseUJBQXlCLEdBQUcsS0FBSyxDQUNwQyxLQUFLLENBQUMsTUFBTSxFQUNaLEtBQUssQ0FBQyxNQUFNLEVBQ1osS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQTFDLENBQTBDLEVBQUMsQ0FBQyxDQUN4RjthQUNBLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLEVBQXRDLENBQXNDLEVBQUMsQ0FBQztJQUUzRCxDQUFDOzs7O0lBRUQscURBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxvQkFBb0I7Ozs7O0lBQ3BCLG9EQUFVOzs7O0lBQVY7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCxvQkFBb0I7Ozs7O0lBQ3BCLHNEQUFZOzs7O0lBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELHFEQUFXOzs7SUFBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILGdEQUFNOzs7O0lBQU47UUFDRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxvQkFBb0I7Ozs7OztJQUNwQixpREFBTzs7Ozs7SUFBUCxVQUFRLEtBQW9CO1FBQzFCLFFBQVEsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNyQixLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssS0FBSztnQkFDUixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDZCxNQUFNO1lBQ1I7Z0JBQ0UsT0FBTztTQUNWO0lBQ0gsQ0FBQzs7Z0JBdkVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQywwVkFBMEM7b0JBRTFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxVQUFVLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUM7b0JBQ25ELElBQUksRUFBRTt3QkFDSixxQkFBcUIsRUFBRSxjQUFjO3dCQUNyQyxPQUFPLEVBQUUsNEJBQTRCO3dCQUNyQyxNQUFNLEVBQUUsUUFBUTt3QkFDaEIsV0FBVyxFQUFFLGlCQUFpQjt3QkFDOUIsaUJBQWlCLEVBQUUseUJBQXlCO3dCQUM1QyxzQkFBc0IsRUFBRSxlQUFlO3dCQUN2QyxzQkFBc0IsRUFBRSxjQUFjO3dCQUN0QyxzQkFBc0IsRUFBRSxnQkFBZ0I7d0JBQ3hDLFdBQVcsRUFBRSxpQkFBaUI7d0JBQzlCLFNBQVMsRUFBRSxVQUFVO3FCQUN0Qjs7aUJBQ0Y7Ozs7Z0JBckJRLHlCQUF5Qix1QkEwQlIsSUFBSTtnQkEvQkksaUJBQWlCOztJQWdGbkQsc0NBQUM7Q0FBQSxBQXhFRCxJQXdFQztTQXJEWSwrQkFBK0I7Ozs7OztJQUMxQyxvRUFBdUQ7Ozs7O0lBR2hDLGdEQUErQzs7Ozs7SUFDcEUsNkRBQTZDOzs7OztBQXNEakQ7SUFBQTtJQU9tRCxDQUFDOztnQkFQbkQsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxJQUFJLEVBQUc7d0JBQ0wsS0FBSyxFQUFFLHdDQUF3QztxQkFDaEQ7aUJBQ0Y7O0lBQ2tELDJDQUFDO0NBQUEsQUFQcEQsSUFPb0Q7U0FBdkMsb0NBQW9DOzs7O0FBS2pEO0lBQUE7SUFPNkMsQ0FBQzs7Z0JBUDdDLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsSUFBSSxFQUFHO3dCQUNMLEtBQUssRUFBRSxrQ0FBa0M7cUJBQzFDO2lCQUNGOztJQUM0QyxxQ0FBQztDQUFBLEFBUDlDLElBTzhDO1NBQWpDLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVOVEVSLCBTUEFDRSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRGlyZWN0aXZlLCBIb3N0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1lcmdlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgbnhBY2NvcmRpb25BbmltYXRpb25zIH0gZnJvbSAnLi9hY2NvcmRpb24tYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBOeEV4cGFuc2lvblBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXInLFxuICB0ZW1wbGF0ZVVybDogJ2V4cGFuc2lvbi1wYW5lbC1oZWFkZXIuaHRtbCcsXG4gIHN0eWxlVXJsczogWydleHBhbnNpb24tcGFuZWwtaGVhZGVyLnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGFuaW1hdGlvbnM6IFtueEFjY29yZGlvbkFuaW1hdGlvbnMuaW5kaWNhdG9yUm90YXRlXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubngtZXhwYW5kZWRdJzogJ2lzRXhwYW5kZWQoKScsXG4gICAgJ2NsYXNzJzogJ254LWV4cGFuc2lvbi1wYW5lbF9faGVhZGVyJyxcbiAgICAncm9sZSc6ICdidXR0b24nLFxuICAgICdbYXR0ci5pZF0nOiAncGFuZWwuX2hlYWRlcklkJyxcbiAgICAnW2F0dHIudGFiaW5kZXhdJzogJ3BhbmVsLmRpc2FibGVkID8gLTEgOiAwJyxcbiAgICAnW2F0dHIuYXJpYS1jb250cm9sc10nOiAnX2dldFBhbmVsSWQoKScsXG4gICAgJ1thdHRyLmFyaWEtZXhwYW5kZWRdJzogJ2lzRXhwYW5kZWQoKScsXG4gICAgJ1thdHRyLmFyaWEtZGlzYWJsZWRdJzogJ3BhbmVsLmRpc2FibGVkJyxcbiAgICAnKGtleWRvd24pJzogJ2tleWRvd24oJGV2ZW50KScsXG4gICAgJyhjbGljayknOiAndG9nZ2xlKCknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhFeHBhbnNpb25QYW5lbEhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX3BhcmVudENoYW5nZVN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqLyBASG9zdCgpIHB1YmxpYyBwYW5lbDogTnhFeHBhbnNpb25QYW5lbENvbXBvbmVudCxcbiAgICBwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgdGhpcy5fcGFyZW50Q2hhbmdlU3Vic2NyaXB0aW9uID0gbWVyZ2UoXG4gICAgICBwYW5lbC5vcGVuZWQsXG4gICAgICBwYW5lbC5jbG9zZWQsXG4gICAgICBwYW5lbC5faW5wdXRDaGFuZ2VzLnBpcGUoZmlsdGVyKGNoYW5nZXMgPT4gISEoY2hhbmdlcy5oaWRlVG9nZ2xlIHx8IGNoYW5nZXMuZGlzYWJsZWQpKSlcbiAgICApXG4gICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKSk7XG5cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX3BhcmVudENoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wYW5lbC5leHBhbmRlZDtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGdldE9wZW5TdGF0ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnBhbmVsLmdldE9wZW5TdGF0ZSgpO1xuICB9XG5cbiAgX2dldFBhbmVsSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wYW5lbC5pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIGV4cGFuc2lvbiBwYW5lbC5cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzLnBhbmVsLnRvZ2dsZSgpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAga2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgY2FzZSBTUEFDRTpcbiAgICAgIGNhc2UgRU5URVI6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogVGhpcyBkaXJlY3RpdmUgaXMgdG8gYmUgdXNlZCBpbnNpZGUgb2YgdGhlIE54RXhwYW5zaW9uUGFuZWxIZWFkZXIgY29tcG9uZW50LlxuICovXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogJ254LWV4cGFuc2lvbi1wYW5lbC1kZXNjcmlwdGlvbicsXG4gIGhvc3QgOiB7XG4gICAgY2xhc3M6ICdueC1leHBhbnNpb24tcGFuZWxfX2hlYWRlci1kZXNjcmlwdGlvbidcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeEV4cGFuc2lvblBhbmVsRGVzY3JpcHRpb25EaXJlY3RpdmUge31cblxuLyoqXG4gKiBUaGlzIGRpcmVjdGl2ZSBpcyB0byBiZSB1c2VkIGluc2lkZSBvZiB0aGUgTnhFeHBhbnNpb25QYW5lbEhlYWRlciBjb21wb25lbnQuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnbngtZXhwYW5zaW9uLXBhbmVsLXRpdGxlJyxcbiAgaG9zdCA6IHtcbiAgICBjbGFzczogJ254LWV4cGFuc2lvbi1wYW5lbF9faGVhZGVyLXRpdGxlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54RXhwYW5zaW9uUGFuZWxUaXRsZURpcmVjdGl2ZSB7fVxuIl19