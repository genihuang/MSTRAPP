/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
/** @type {?} */
var DEFAULT_TYPE = 'normal';
var NxCopytextComponent = /** @class */ (function () {
    function NxCopytextComponent() {
        /**
         * \@docs-private
         */
        this.type = DEFAULT_TYPE;
        /**
         * \@docs-private
         */
        this.negative = false;
    }
    Object.defineProperty(NxCopytextComponent.prototype, "classNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classNames;
        },
        /**
         * Sets the type and whether the negative set of styling should be used.
         *
         * You can combine the values of type NxCopytextType and 'negative'.
         *
         * Default type: 'normal'
         */
        set: /**
         * Sets the type and whether the negative set of styling should be used.
         *
         * You can combine the values of type NxCopytextType and 'negative'.
         *
         * Default type: 'normal'
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._classNames === value) {
                return;
            }
            this._classNames = value;
            var _a = tslib_1.__read(this._classNames.match(/small|medium|normal|large/) || [DEFAULT_TYPE], 1), _b = _a[0], type = _b === void 0 ? null : _b;
            this.type = (/** @type {?} */ (type));
            this.negative = !!this._classNames.match(/negative/);
        },
        enumerable: true,
        configurable: true
    });
    NxCopytextComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'p[nxCopytext]',
                    template: "<ng-content></ng-content>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-copy]': 'true',
                        '[class.nx-copy--small]': 'type === "small"',
                        '[class.nx-copy--medium]': 'type === "medium"',
                        '[class.nx-copy--normal]': 'type === "normal"',
                        '[class.nx-copy--large]': 'type === "large"',
                        '[class.nx-copy--negative]': 'negative',
                    },
                    styles: [":host{margin:0 0 32px;font-size:16px;font-size:var(--body-03-font-size,16px);line-height:24px;line-height:var(--body-03-line-height,24px);font-weight:400;font-weight:var(--body-03-font-weight,400);letter-spacing:0;letter-spacing:var(--body-03-letter-spacing,0)}:host.nx-copy.nx-copy{font-weight:400}:host(.nx-copy--negative){color:#fff}:host(.nx-copy--small){font-size:12px;font-size:var(--body-05-font-size,12px);line-height:16px;line-height:var(--body-05-line-height,16px);font-weight:600;font-weight:var(--body-05-font-weight,600);letter-spacing:.5px;letter-spacing:var(--body-05-letter-spacing,.5px)}:host(.nx-copy--medium){font-size:14px;font-size:var(--body-04-font-size,14px);line-height:20px;line-height:var(--body-04-line-height,20px);font-weight:600;font-weight:var(--body-04-font-weight,600);letter-spacing:.2px;letter-spacing:var(--body-04-letter-spacing,.2px)}:host(.nx-copy--large){font-size:18px;font-size:var(--body-02-font-size,18px);line-height:24px;line-height:var(--body-02-line-height,24px);font-weight:400;font-weight:var(--body-02-font-weight,400);letter-spacing:.2px;letter-spacing:var(--body-02-letter-spacing,.2px)}"]
                }] }
    ];
    NxCopytextComponent.propDecorators = {
        classNames: [{ type: Input, args: ['nxCopytext',] }]
    };
    return NxCopytextComponent;
}());
export { NxCopytextComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCopytextComponent.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCopytextComponent.prototype.type;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCopytextComponent.prototype.negative;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weXRleHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJjb3B5dGV4dC9jb3B5dGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFLcEUsWUFBWSxHQUFHLFFBQVE7QUFFN0I7SUFBQTs7OztRQW1CRSxTQUFJLEdBQW1CLFlBQVksQ0FBQzs7OztRQUdwQyxhQUFRLEdBQVksS0FBSyxDQUFDO0lBMEI1QixDQUFDO0lBakJDLHNCQUNJLDJDQUFVOzs7O1FBV2Q7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQztRQXJCRDs7Ozs7O1dBTUc7Ozs7Ozs7Ozs7UUFDSCxVQUNlLEtBQWE7WUFDMUIsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsT0FBTzthQUNSO1lBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBQSw2RkFBcUYsRUFBcEYsVUFBVyxFQUFYLGdDQUFvRjtZQUMzRixJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFBLElBQUksRUFBa0IsQ0FBQztZQUVuQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2RCxDQUFDOzs7T0FBQTs7Z0JBekNGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLGVBQWU7b0JBRXpCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUU7d0JBQ0osaUJBQWlCLEVBQUUsTUFBTTt3QkFDekIsd0JBQXdCLEVBQUUsa0JBQWtCO3dCQUM1Qyx5QkFBeUIsRUFBRSxtQkFBbUI7d0JBQzlDLHlCQUF5QixFQUFFLG1CQUFtQjt3QkFDOUMsd0JBQXdCLEVBQUUsa0JBQWtCO3dCQUM1QywyQkFBMkIsRUFBRSxVQUFVO3FCQUN4Qzs7aUJBQ0Y7Ozs2QkFpQkUsS0FBSyxTQUFDLFlBQVk7O0lBaUJyQiwwQkFBQztDQUFBLEFBaERELElBZ0RDO1NBakNZLG1CQUFtQjs7Ozs7O0lBQzlCLDBDQUE0Qjs7Ozs7SUFHNUIsbUNBQW9DOzs7OztJQUdwQyx1Q0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogQSB0eXBlIHRoYXQgc3BlY2lmaWVzIHRoZSBmb250IHNpemUgb2YgYSBjb3B5dGV4dC4gKi9cbmV4cG9ydCB0eXBlIE54Q29weXRleHRUeXBlID0gJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ25vcm1hbCcgfCAnbGFyZ2UnO1xuXG5jb25zdCBERUZBVUxUX1RZUEUgPSAnbm9ybWFsJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdwW254Q29weXRleHRdJyxcbiAgc3R5bGVVcmxzOiBbJ2NvcHl0ZXh0LmNvbXBvbmVudC5zY3NzJ10sXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5ueC1jb3B5XSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLm54LWNvcHktLXNtYWxsXSc6ICd0eXBlID09PSBcInNtYWxsXCInLFxuICAgICdbY2xhc3MubngtY29weS0tbWVkaXVtXSc6ICd0eXBlID09PSBcIm1lZGl1bVwiJyxcbiAgICAnW2NsYXNzLm54LWNvcHktLW5vcm1hbF0nOiAndHlwZSA9PT0gXCJub3JtYWxcIicsXG4gICAgJ1tjbGFzcy5ueC1jb3B5LS1sYXJnZV0nOiAndHlwZSA9PT0gXCJsYXJnZVwiJyxcbiAgICAnW2NsYXNzLm54LWNvcHktLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhDb3B5dGV4dENvbXBvbmVudCB7XG4gIHByaXZhdGUgX2NsYXNzTmFtZXM6IHN0cmluZztcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICB0eXBlOiBOeENvcHl0ZXh0VHlwZSA9IERFRkFVTFRfVFlQRTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBuZWdhdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0eXBlIGFuZCB3aGV0aGVyIHRoZSBuZWdhdGl2ZSBzZXQgb2Ygc3R5bGluZyBzaG91bGQgYmUgdXNlZC5cbiAgICpcbiAgICogWW91IGNhbiBjb21iaW5lIHRoZSB2YWx1ZXMgb2YgdHlwZSBOeENvcHl0ZXh0VHlwZSBhbmQgJ25lZ2F0aXZlJy5cbiAgICpcbiAgICogRGVmYXVsdCB0eXBlOiAnbm9ybWFsJ1xuICAgKi9cbiAgQElucHV0KCdueENvcHl0ZXh0JylcbiAgc2V0IGNsYXNzTmFtZXModmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9jbGFzc05hbWVzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9jbGFzc05hbWVzID0gdmFsdWU7XG4gICAgY29uc3QgW3R5cGUgPSBudWxsXSA9IHRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL3NtYWxsfG1lZGl1bXxub3JtYWx8bGFyZ2UvKSB8fCBbREVGQVVMVF9UWVBFXTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlIGFzIE54Q29weXRleHRUeXBlO1xuXG4gICAgdGhpcy5uZWdhdGl2ZSA9ICEhdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvbmVnYXRpdmUvKTtcbiAgfVxuXG4gIGdldCBjbGFzc05hbWVzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NsYXNzTmFtZXM7XG4gIH1cblxuXG59XG4iXX0=