/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { NxModalService } from './modal.service';
var NxOpenModalOnClickDirective = /** @class */ (function () {
    function NxOpenModalOnClickDirective(templateRef, viewContainer, modalService) {
        var _this = this;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.modalService = modalService;
        /**
         * \@docs-private
         */
        this.clickHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.viewContainer.clear();
            // instantiate the template onto which this directive is applied
            /** @type {?} */
            var viewRef = _this.viewContainer.createEmbeddedView(_this.templateRef);
            // we need to mark the viewRef explicitly if the modal is used inside another
            // component that is using onPush change detection
            viewRef.markForCheck();
            event.preventDefault();
            event.stopPropagation();
        });
    }
    /**
     * @return {?}
     */
    NxOpenModalOnClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.modalService.close$.subscribe((/**
         * @return {?}
         */
        function () { return _this.viewContainer.clear(); }));
    };
    /**
     * @return {?}
     */
    NxOpenModalOnClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            if (el.removeEventListener) {
                el.removeEventListener('click', _this.clickHandler);
            }
        }));
        this.subscription.unsubscribe();
    };
    Object.defineProperty(NxOpenModalOnClickDirective.prototype, "nxOpenModalOnClick", {
        /**
         * One or multiple template reference variables pointing to elements
         * which should trigger opening the modal on click.
         *
         * Value: A single template reference variable or an array of template reference variables.
         */
        set: /**
         * One or multiple template reference variables pointing to elements
         * which should trigger opening the modal on click.
         *
         * Value: A single template reference variable or an array of template reference variables.
         * @param {?} elements
         * @return {?}
         */
        function (elements) {
            var _this = this;
            // also support the case where only one element is passed, check for the length property to be sure elements is an array
            if (elements.length) {
                this.elements = elements;
            }
            else {
                this.elements = [elements];
            }
            // add a click event listener to any element passed as property to this directive
            this.elements.forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                if (el.addEventListener) {
                    el.addEventListener('click', _this.clickHandler);
                    // workaround until refactoring: if the reference is a component
                    // reference the component has to implement a getter to its own elementRef
                }
                else if (el.elementRef) {
                    el.elementRef.nativeElement.addEventListener('click', _this.clickHandler);
                }
                else {
                    console.warn("nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.", el);
                }
            }));
        },
        enumerable: true,
        configurable: true
    });
    NxOpenModalOnClickDirective.decorators = [
        { type: Directive, args: [{ selector: '[nxOpenModalOnClick]' },] }
    ];
    /** @nocollapse */
    NxOpenModalOnClickDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: NxModalService }
    ]; };
    NxOpenModalOnClickDirective.propDecorators = {
        nxOpenModalOnClick: [{ type: Input }]
    };
    return NxOpenModalOnClickDirective;
}());
export { NxOpenModalOnClickDirective };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.elements;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.subscription;
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.clickHandler;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3Blbi1vbi1jbGljay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbIm1vZGFsL21vZGFsLW9wZW4tb24tY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25HLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUdqRDtJQVFFLHFDQUFvQixXQUE2QixFQUM3QixhQUErQixFQUMvQixZQUE0QjtRQUZoRCxpQkFHQztRQUhtQixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFDN0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLGlCQUFZLEdBQVosWUFBWSxDQUFnQjs7OztRQWtCaEQsaUJBQVk7Ozs7UUFBRyxVQUFDLEtBQVU7WUFDeEIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7O2dCQUVyQixPQUFPLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3ZFLDZFQUE2RTtZQUM3RSxrREFBa0Q7WUFDbEQsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxFQUFBO0lBMUJELENBQUM7Ozs7SUFFRCw4Q0FBUTs7O0lBQVI7UUFBQSxpQkFFQztRQURDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUzs7O1FBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEVBQTFCLENBQTBCLEVBQUMsQ0FBQztJQUMzRixDQUFDOzs7O0lBRUQsaURBQVc7OztJQUFYO1FBQUEsaUJBUUM7UUFQQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLEVBQUU7WUFDdEIsSUFBSSxFQUFFLENBQUMsbUJBQW1CLEVBQUU7Z0JBQzFCLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3BEO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFvQkQsc0JBQ0ksMkRBQWtCO1FBUHRCOzs7OztXQUtHOzs7Ozs7Ozs7UUFDSCxVQUN1QixRQUFRO1lBRC9CLGlCQW9CQztZQWxCQyx3SEFBd0g7WUFDeEgsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzthQUMxQjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUUsUUFBUSxDQUFFLENBQUM7YUFDOUI7WUFDRCxpRkFBaUY7WUFDakYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxFQUFFO2dCQUN0QixJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDdkIsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQ2xELGdFQUFnRTtvQkFDaEUsMEVBQTBFO2lCQUN6RTtxQkFBTSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUU7b0JBQ3hCLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQzFFO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUVBQXVFLEVBQUUsRUFBRSxDQUFDLENBQUM7aUJBQzNGO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDOzs7T0FBQTs7Z0JBakVGLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSxzQkFBc0IsRUFBQzs7OztnQkFOQyxXQUFXO2dCQUFFLGdCQUFnQjtnQkFHbEUsY0FBYzs7O3FDQWdEcEIsS0FBSzs7SUFzQlIsa0NBQUM7Q0FBQSxBQW5FRCxJQW1FQztTQWxFWSwyQkFBMkI7Ozs7OztJQUd0QywrQ0FBcUI7Ozs7O0lBRXJCLG1EQUFvQzs7Ozs7SUFzQnBDLG1EQVNDOzs7OztJQTdCVyxrREFBcUM7Ozs7O0lBQ3JDLG9EQUF1Qzs7Ozs7SUFDdkMsbURBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25MaWtlIGFzIElTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTnhNb2RhbFNlcnZpY2UgfSBmcm9tICcuL21vZGFsLnNlcnZpY2UnO1xuXG5cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnW254T3Blbk1vZGFsT25DbGlja10nfSlcbmV4cG9ydCBjbGFzcyBOeE9wZW5Nb2RhbE9uQ2xpY2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZWxlbWVudHM6IEFycmF5PGFueT47XG5cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IElTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICAgICAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIG1vZGFsU2VydmljZTogTnhNb2RhbFNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5tb2RhbFNlcnZpY2UuY2xvc2UkLnN1YnNjcmliZSgoKSA9PiB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgaWYgKGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgY2xpY2tIYW5kbGVyID0gKGV2ZW50OiBhbnkpID0+IHtcbiAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAvLyBpbnN0YW50aWF0ZSB0aGUgdGVtcGxhdGUgb250byB3aGljaCB0aGlzIGRpcmVjdGl2ZSBpcyBhcHBsaWVkXG4gICAgY29uc3Qgdmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgLy8gd2UgbmVlZCB0byBtYXJrIHRoZSB2aWV3UmVmIGV4cGxpY2l0bHkgaWYgdGhlIG1vZGFsIGlzIHVzZWQgaW5zaWRlIGFub3RoZXJcbiAgICAvLyBjb21wb25lbnQgdGhhdCBpcyB1c2luZyBvblB1c2ggY2hhbmdlIGRldGVjdGlvblxuICAgIHZpZXdSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbmUgb3IgbXVsdGlwbGUgdGVtcGxhdGUgcmVmZXJlbmNlIHZhcmlhYmxlcyBwb2ludGluZyB0byBlbGVtZW50c1xuICAgKiB3aGljaCBzaG91bGQgdHJpZ2dlciBvcGVuaW5nIHRoZSBtb2RhbCBvbiBjbGljay5cbiAgICpcbiAgICogVmFsdWU6IEEgc2luZ2xlIHRlbXBsYXRlIHJlZmVyZW5jZSB2YXJpYWJsZSBvciBhbiBhcnJheSBvZiB0ZW1wbGF0ZSByZWZlcmVuY2UgdmFyaWFibGVzLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IG54T3Blbk1vZGFsT25DbGljayhlbGVtZW50cykge1xuICAgIC8vIGFsc28gc3VwcG9ydCB0aGUgY2FzZSB3aGVyZSBvbmx5IG9uZSBlbGVtZW50IGlzIHBhc3NlZCwgY2hlY2sgZm9yIHRoZSBsZW5ndGggcHJvcGVydHkgdG8gYmUgc3VyZSBlbGVtZW50cyBpcyBhbiBhcnJheVxuICAgIGlmIChlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50cyA9IFsgZWxlbWVudHMgXTtcbiAgICB9XG4gICAgLy8gYWRkIGEgY2xpY2sgZXZlbnQgbGlzdGVuZXIgdG8gYW55IGVsZW1lbnQgcGFzc2VkIGFzIHByb3BlcnR5IHRvIHRoaXMgZGlyZWN0aXZlXG4gICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGlmIChlbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIpO1xuICAgICAgLy8gd29ya2Fyb3VuZCB1bnRpbCByZWZhY3RvcmluZzogaWYgdGhlIHJlZmVyZW5jZSBpcyBhIGNvbXBvbmVudFxuICAgICAgLy8gcmVmZXJlbmNlIHRoZSBjb21wb25lbnQgaGFzIHRvIGltcGxlbWVudCBhIGdldHRlciB0byBpdHMgb3duIGVsZW1lbnRSZWZcbiAgICAgIH0gZWxzZSBpZiAoZWwuZWxlbWVudFJlZikge1xuICAgICAgICBlbC5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oYG54T3Blbk1vZGFsT25DbGljazogR2l2ZW4gRWxlbWVudCBkb2Vzbid0IGFwcGVhciB0byBiZSBhbiBFbGVtZW50UmVmLmAsIGVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=