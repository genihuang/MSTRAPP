/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NgModule } from '@angular/core';
import { NxModalComponent, NxModalActionsDirective, NxModalContentDirective } from './modal.component';
import { CommonModule } from '@angular/common';
import { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';
import { NxModalService } from './modal.service';
import { A11yModule } from '@angular/cdk/a11y';
var NxModalModule = /** @class */ (function () {
    function NxModalModule() {
    }
    // define the modal service on root level as an application wide singleton,
    // assuming that we only display one modal at a time, which seems quite reasonable
    // this is static and named "forRoot" by convention
    // define the modal service on root level as an application wide singleton,
    // assuming that we only display one modal at a time, which seems quite reasonable
    // this is static and named "forRoot" by convention
    /**
     * @return {?}
     */
    NxModalModule.forRoot = 
    // define the modal service on root level as an application wide singleton,
    // assuming that we only display one modal at a time, which seems quite reasonable
    // this is static and named "forRoot" by convention
    /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NxModalModule,
            providers: [NxModalService]
        };
    };
    NxModalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, A11yModule, NxIconModule],
                    declarations: [
                        NxModalComponent,
                        NxOpenModalOnClickDirective,
                        NxModalActionsDirective,
                        NxModalContentDirective
                    ],
                    exports: [
                        NxModalComponent,
                        NxOpenModalOnClickDirective,
                        NxModalActionsDirective,
                        NxModalContentDirective
                    ],
                },] }
    ];
    return NxModalModule;
}());
export { NxModalModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJtb2RhbC9tb2RhbC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsdUJBQXVCLEVBQUUsdUJBQXVCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNyRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUvQztJQUFBO0lBMEJBLENBQUM7SUFUQywyRUFBMkU7SUFDM0Usa0ZBQWtGO0lBQ2xGLG1EQUFtRDs7Ozs7OztJQUM1QyxxQkFBTzs7Ozs7OztJQUFkO1FBQ0UsT0FBTztZQUNMLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQztTQUM1QixDQUFDO0lBQ0osQ0FBQzs7Z0JBekJGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsQ0FBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBRTtvQkFDbkQsWUFBWSxFQUFFO3dCQUNaLGdCQUFnQjt3QkFDaEIsMkJBQTJCO3dCQUMzQix1QkFBdUI7d0JBQ3ZCLHVCQUF1QjtxQkFDeEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLGdCQUFnQjt3QkFDaEIsMkJBQTJCO3dCQUMzQix1QkFBdUI7d0JBQ3ZCLHVCQUF1QjtxQkFDeEI7aUJBQ0Y7O0lBWUQsb0JBQUM7Q0FBQSxBQTFCRCxJQTBCQztTQVZZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOeEljb25Nb2R1bGUgfSBmcm9tICdAYWxsaWFuei9uZ3gtbmRieC9pY29uJztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge054TW9kYWxDb21wb25lbnQsIE54TW9kYWxBY3Rpb25zRGlyZWN0aXZlLCBOeE1vZGFsQ29udGVudERpcmVjdGl2ZX0gZnJvbSAnLi9tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE54T3Blbk1vZGFsT25DbGlja0RpcmVjdGl2ZSB9IGZyb20gJy4vbW9kYWwtb3Blbi1vbi1jbGljay5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnhNb2RhbFNlcnZpY2UgfSBmcm9tICcuL21vZGFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgQTExeU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogWyBDb21tb25Nb2R1bGUsIEExMXlNb2R1bGUsIE54SWNvbk1vZHVsZSBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOeE1vZGFsQ29tcG9uZW50LFxuICAgIE54T3Blbk1vZGFsT25DbGlja0RpcmVjdGl2ZSxcbiAgICBOeE1vZGFsQWN0aW9uc0RpcmVjdGl2ZSxcbiAgICBOeE1vZGFsQ29udGVudERpcmVjdGl2ZVxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgTnhNb2RhbENvbXBvbmVudCxcbiAgICBOeE9wZW5Nb2RhbE9uQ2xpY2tEaXJlY3RpdmUsXG4gICAgTnhNb2RhbEFjdGlvbnNEaXJlY3RpdmUsXG4gICAgTnhNb2RhbENvbnRlbnREaXJlY3RpdmVcbiAgXSxcbn0pXG5cbmV4cG9ydCBjbGFzcyBOeE1vZGFsTW9kdWxlIHtcbiAgLy8gZGVmaW5lIHRoZSBtb2RhbCBzZXJ2aWNlIG9uIHJvb3QgbGV2ZWwgYXMgYW4gYXBwbGljYXRpb24gd2lkZSBzaW5nbGV0b24sXG4gIC8vIGFzc3VtaW5nIHRoYXQgd2Ugb25seSBkaXNwbGF5IG9uZSBtb2RhbCBhdCBhIHRpbWUsIHdoaWNoIHNlZW1zIHF1aXRlIHJlYXNvbmFibGVcbiAgLy8gdGhpcyBpcyBzdGF0aWMgYW5kIG5hbWVkIFwiZm9yUm9vdFwiIGJ5IGNvbnZlbnRpb25cbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOeE1vZGFsTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbTnhNb2RhbFNlcnZpY2VdXG4gICAgfTtcbiAgfVxufVxuIl19