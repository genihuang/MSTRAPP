/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CdkTree } from '@angular/cdk/tree';
import { ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation } from '@angular/core';
import { NxTreeNodeOutletDirective } from './outlet';
/**
 * Wrapper for the CdkTable with NDBX design styles.
 * @template T
 */
var NxTreeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxTreeComponent, _super);
    function NxTreeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NxTreeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tree',
                    exportAs: 'nxTree',
                    template: "<ng-container nxTreeNodeOutlet></ng-container>",
                    host: {
                        'class': 'nx-tree',
                        'role': 'tree',
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: CdkTree, useExisting: NxTreeComponent }],
                    styles: [":host.nx-tree{display:block}.nx-tree__node{display:block;overflow:hidden}"]
                }] }
    ];
    NxTreeComponent.propDecorators = {
        _nodeOutlet: [{ type: ViewChild, args: [NxTreeNodeOutletDirective,] }]
    };
    return NxTreeComponent;
}(CdkTree));
export { NxTreeComponent };
if (false) {
    /** @type {?} */
    NxTreeComponent.prototype._nodeOutlet;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC90cmVlLyIsInNvdXJjZXMiOlsidHJlZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sVUFBVSxDQUFDOzs7OztBQUtuRDtJQWF3QywyQ0FBVTtJQWJsRDs7SUFnQkEsQ0FBQzs7Z0JBaEJBLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsU0FBUztvQkFDbkIsUUFBUSxFQUFFLFFBQVE7b0JBQ2xCLFFBQVEsRUFBRSxnREFBZ0Q7b0JBQzFELElBQUksRUFBRTt3QkFDSixPQUFPLEVBQUUsU0FBUzt3QkFDbEIsTUFBTSxFQUFFLE1BQU07cUJBQ2Y7b0JBRUQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBQyxDQUFDOztpQkFDOUQ7Ozs4QkFHRSxTQUFTLFNBQUMseUJBQXlCOztJQUN0QyxzQkFBQztDQUFBLEFBaEJELENBYXdDLE9BQU8sR0FHOUM7U0FIWSxlQUFlOzs7SUFFMUIsc0NBQTZFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDZGtUcmVlfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOeFRyZWVOb2RlT3V0bGV0RGlyZWN0aXZlfSBmcm9tICcuL291dGxldCc7XG5cbi8qKlxuICogV3JhcHBlciBmb3IgdGhlIENka1RhYmxlIHdpdGggTkRCWCBkZXNpZ24gc3R5bGVzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC10cmVlJyxcbiAgZXhwb3J0QXM6ICdueFRyZWUnLFxuICB0ZW1wbGF0ZTogYDxuZy1jb250YWluZXIgbnhUcmVlTm9kZU91dGxldD48L25nLWNvbnRhaW5lcj5gLFxuICBob3N0OiB7XG4gICAgJ2NsYXNzJzogJ254LXRyZWUnLFxuICAgICdyb2xlJzogJ3RyZWUnLFxuICB9LFxuICBzdHlsZVVybHM6IFsndHJlZS5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka1RyZWUsIHVzZUV4aXN0aW5nOiBOeFRyZWVDb21wb25lbnR9XVxufSlcbmV4cG9ydCBjbGFzcyBOeFRyZWVDb21wb25lbnQ8VD4gZXh0ZW5kcyBDZGtUcmVlPFQ+IHtcbiAgLy8gT3V0bGV0cyB3aXRoaW4gdGhlIHRyZWUncyB0ZW1wbGF0ZSB3aGVyZSB0aGUgZGF0YU5vZGVzIHdpbGwgYmUgaW5zZXJ0ZWQuXG4gIEBWaWV3Q2hpbGQoTnhUcmVlTm9kZU91dGxldERpcmVjdGl2ZSkgX25vZGVPdXRsZXQ6IE54VHJlZU5vZGVPdXRsZXREaXJlY3RpdmU7XG59XG4iXX0=