/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';
import { Component, Directive, Input, } from '@angular/core';
/**
 * Wrapper for the CdkTree node with NDBX design styles.
 * @template T
 */
var NxTreeNodeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxTreeNodeComponent, _super);
    function NxTreeNodeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NxTreeNodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tree-node',
                    exportAs: 'nxTreeNode',
                    inputs: ['disabled', 'tabIndex'],
                    host: {
                        '[attr.aria-expanded]': 'isExpanded',
                        '[attr.aria-level]': 'role === "treeitem" ? level : null',
                        '[attr.role]': 'role',
                        'class': 'nx-tree__node',
                        '[class.is-expanded]': 'isExpanded'
                    },
                    providers: [{ provide: CdkTreeNode, useExisting: NxTreeNodeComponent }],
                    template: "<div class=\"nx-tree__node-box\">\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    return NxTreeNodeComponent;
}(CdkTreeNode));
export { NxTreeNodeComponent };
/**
 * Wrapper for the CdkTree node definition with NDBX design styles.
 * @template T
 */
var NxTreeNodeDefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NxTreeNodeDefDirective, _super);
    function NxTreeNodeDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NxTreeNodeDefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxTreeNodeDef]',
                    inputs: [
                        'when: nxTreeNodeDefWhen'
                    ],
                    providers: [{ provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }]
                },] }
    ];
    NxTreeNodeDefDirective.propDecorators = {
        data: [{ type: Input, args: ['nxTreeNode',] }]
    };
    return NxTreeNodeDefDirective;
}(CdkTreeNodeDef));
export { NxTreeNodeDefDirective };
if (false) {
    /** @type {?} */
    NxTreeNodeDefDirective.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3RyZWUvIiwic291cmNlcyI6WyJub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFVLFdBQVcsRUFBRSxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFFVCxLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7Ozs7O0FBS3ZCO0lBYzRDLCtDQUFjO0lBZDFEOztJQWM0RCxDQUFDOztnQkFkNUQsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixRQUFRLEVBQUUsWUFBWTtvQkFDdEIsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztvQkFDaEMsSUFBSSxFQUFFO3dCQUNKLHNCQUFzQixFQUFFLFlBQVk7d0JBQ3BDLG1CQUFtQixFQUFFLG9DQUFvQzt3QkFDekQsYUFBYSxFQUFFLE1BQU07d0JBQ3JCLE9BQU8sRUFBRSxlQUFlO3dCQUN4QixxQkFBcUIsRUFBRSxZQUFZO3FCQUNwQztvQkFDRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFDLENBQUM7b0JBQ3JFLG9GQUEwQjtpQkFDM0I7O0lBQzJELDBCQUFDO0NBQUEsQUFkN0QsQ0FjNEMsV0FBVyxHQUFNO1NBQWhELG1CQUFtQjs7Ozs7QUFLaEM7SUFPK0Msa0RBQWlCO0lBUGhFOztJQVNBLENBQUM7O2dCQVRBLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixNQUFNLEVBQUU7d0JBQ04seUJBQXlCO3FCQUMxQjtvQkFDRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLHNCQUFzQixFQUFDLENBQUM7aUJBQzVFOzs7dUJBRUUsS0FBSyxTQUFDLFlBQVk7O0lBQ3JCLDZCQUFDO0NBQUEsQUFURCxDQU8rQyxjQUFjLEdBRTVEO1NBRlksc0JBQXNCOzs7SUFDakMsc0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDZGtUcmVlLCBDZGtUcmVlTm9kZSwgQ2RrVHJlZU5vZGVEZWZ9IGZyb20gJ0Bhbmd1bGFyL2Nkay90cmVlJztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogV3JhcHBlciBmb3IgdGhlIENka1RyZWUgbm9kZSB3aXRoIE5EQlggZGVzaWduIHN0eWxlcy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtdHJlZS1ub2RlJyxcbiAgZXhwb3J0QXM6ICdueFRyZWVOb2RlJyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ3RhYkluZGV4J10sXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuYXJpYS1leHBhbmRlZF0nOiAnaXNFeHBhbmRlZCcsXG4gICAgJ1thdHRyLmFyaWEtbGV2ZWxdJzogJ3JvbGUgPT09IFwidHJlZWl0ZW1cIiA/IGxldmVsIDogbnVsbCcsXG4gICAgJ1thdHRyLnJvbGVdJzogJ3JvbGUnLFxuICAgICdjbGFzcyc6ICdueC10cmVlX19ub2RlJyxcbiAgICAnW2NsYXNzLmlzLWV4cGFuZGVkXSc6ICdpc0V4cGFuZGVkJ1xuICB9LFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrVHJlZU5vZGUsIHVzZUV4aXN0aW5nOiBOeFRyZWVOb2RlQ29tcG9uZW50fV0sXG4gIHRlbXBsYXRlVXJsOiAnLi9ub2RlLmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE54VHJlZU5vZGVDb21wb25lbnQ8VD4gZXh0ZW5kcyBDZGtUcmVlTm9kZTxUPiB7fVxuXG4vKipcbiAqIFdyYXBwZXIgZm9yIHRoZSBDZGtUcmVlIG5vZGUgZGVmaW5pdGlvbiB3aXRoIE5EQlggZGVzaWduIHN0eWxlcy5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW254VHJlZU5vZGVEZWZdJyxcbiAgaW5wdXRzOiBbXG4gICAgJ3doZW46IG54VHJlZU5vZGVEZWZXaGVuJ1xuICBdLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQ2RrVHJlZU5vZGVEZWYsIHVzZUV4aXN0aW5nOiBOeFRyZWVOb2RlRGVmRGlyZWN0aXZlfV1cbn0pXG5leHBvcnQgY2xhc3MgTnhUcmVlTm9kZURlZkRpcmVjdGl2ZTxUPiBleHRlbmRzIENka1RyZWVOb2RlRGVmPFQ+IHtcbiAgQElucHV0KCdueFRyZWVOb2RlJykgZGF0YTogVDtcbn1cbiJdfQ==