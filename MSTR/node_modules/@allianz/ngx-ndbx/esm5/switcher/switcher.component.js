/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
var nextId = 0;
var NxSwitcherComponent = /** @class */ (function () {
    function NxSwitcherComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._id = "nx-switcher-" + nextId++;
        this._labelPosition = 'right';
        this._name = null;
        this._checked = false;
        this._big = false;
        this._labelSize = 'large';
        this._negative = false;
        this._disabled = false;
        /**
         * An event is dispatched each time the switcher value is changed
         */
        this.checkedChange = new EventEmitter();
        this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(NxSwitcherComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /** Sets the id of the switcher */
        set: /**
         * Sets the id of the switcher
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "labelPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelPosition;
        },
        /** Specifies the placement of the label */
        set: /**
         * Specifies the placement of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelPosition = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        /** Sets the label text of the switcher */
        set: /**
         * Sets the label text of the switcher
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checked;
        },
        /** Whether the switcher is checked (on) or unchecked (off) */
        set: /**
         * Whether the switcher is checked (on) or unchecked (off)
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "big", {
        get: /**
         * @return {?}
         */
        function () {
            return this._big;
        },
        /** Whether the big switcher is used */
        set: /**
         * Whether the big switcher is used
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            this._big = newValue;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelSize;
        },
        /** Sets the size of the label */
        set: /**
         * Sets the size of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelSize = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the style for a dark background is used */
        set: /**
         * Whether the style for a dark background is used
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            this._negative = newValue;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Whether the switcher is in the disabled state */
        set: /**
         * Whether the switcher is in the disabled state
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /** Allows to toggle between the states */
    /**
     * Allows to toggle between the states
     * @return {?}
     */
    NxSwitcherComponent.prototype.toggle = /**
     * Allows to toggle between the states
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this.checkedChange.emit(this.checked);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NxSwitcherComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === null) {
            value = false;
        }
        if (value !== this.checked) {
            this.checked = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxSwitcherComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxSwitcherComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxSwitcherComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxSwitcherComponent.prototype.touch = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this.onTouchedCallback();
    };
    NxSwitcherComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-switcher',
                    template: "<input type=\"checkbox\" [id]=\"id\" [attr.name]=\"name\" [disabled]=\"disabled\" [checked]=\"checked\" (click)=\"toggle()\" (blur)=\"touch()\"\n  role=\"switch\"\n  [attr.aria-checked]=\"checked\"\n  class=\"nx-switcher__input\">\n<label [attr.for]=\"id\" class=\"nx-switcher__label\">\n    <div class=\"nx-switcher__toggle\">\n      <div class=\"nx-switcher__dot\">\n        <nx-icon *ngIf=\"big\" name=\"check\"></nx-icon>\n      </div>\n    </div>\n  <ng-content></ng-content>\n</label>\n\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxSwitcherComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id
                            and on label click the input click is not triggered (double id problem) */
                        '[attr.id]': 'null',
                        '[class.is-negative]': 'negative',
                        '[class.is-checked]': 'checked',
                        '[class.is-big]': 'big',
                        '[class.nx-switcher--small-label]': 'labelSize === "small"',
                        '[class.is-disabled]': 'disabled',
                        '[class.is-swapped]': 'labelPosition === "left"'
                    },
                    styles: [":host{position:relative;display:flex}:host(.is-swapped) .nx-switcher__label{flex-direction:row-reverse}:host(.is-swapped) .nx-switcher__label .nx-switcher__toggle{margin-left:12px}.nx-switcher__input{opacity:0;position:absolute}.nx-switcher__label{font-size:20px;font-size:var(--body-01-font-size,20px);line-height:28px;line-height:var(--body-01-line-height,28px);font-weight:400;font-weight:var(--body-01-font-weight,400);letter-spacing:.2px;letter-spacing:var(--body-01-letter-spacing,.2px);white-space:nowrap;cursor:pointer;display:flex;position:relative;align-items:center}.nx-switcher__toggle{position:relative;display:inline-block;width:48px;height:24px;background-color:#767676;border-radius:16px;transition:background-color .2s}@media screen and (-ms-high-contrast:active){.nx-switcher__label{color:#ff0}.nx-switcher__toggle{background-color:#c2c2c2;color:#ff0}}:host(:not(.is-swapped)) .nx-switcher__toggle{margin-right:12px}.nx-switcher__dot{position:absolute;height:20px;width:20px;left:2px;bottom:2px;background-color:#fff;border-radius:16px;-webkit-transform:translate(0);transform:translate(0);transition:transform .2s;transition:transform .2s,-webkit-transform .2s}:host(.is-checked) .nx-switcher__dot{-webkit-transform:translate(24px);transform:translate(24px)}:host(.is-checked) .nx-switcher__toggle{background-color:#007ab3;background-color:var(--interaction-primary,#007ab3)}@media screen and (-ms-high-contrast:active){:host(.is-checked) .nx-switcher__toggle{background-color:#ff0;color:#ff0}.nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{color:#fff}}:host(.is-checked.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host(.is-big) .nx-switcher__toggle{width:56px;height:32px}:host(.is-big) .nx-switcher__dot{height:28px;width:28px}:host(.is-big) nx-icon{position:absolute;top:2px;left:2px;font-size:24px;opacity:0;color:#007ab3;color:var(--interaction-primary,#007ab3)}:host(.is-big).is-checked nx-icon{opacity:1;transition:opacity .2s}:host(.nx-switcher--small-label) .nx-switcher__label{font-size:16px;font-size:var(--body-03-font-size,16px);line-height:24px;line-height:var(--body-03-line-height,24px);font-weight:400;font-weight:var(--body-03-font-weight,400);letter-spacing:0;letter-spacing:var(--body-03-letter-spacing,0)}:host(.is-negative) .nx-switcher__label{color:#fff}:host(.is-negative) .nx-switcher__dot{background-color:#fff}:host(.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host-context([data-whatinput=keyboard]) .nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.is-disabled) .nx-switcher__toggle{background-color:#c2c2c2;background-color:var(--disabled-01,#c2c2c2)}:host(.is-disabled) .nx-switcher__dot{background-color:#fff;opacity:.4}:host(.is-disabled) .nx-switcher__label{cursor:not-allowed;color:#c2c2c2;color:var(--disabled-01,#c2c2c2)}:host(.is-disabled) nx-icon{color:#c2c2c2;color:var(--disabled-01,#c2c2c2)}"]
                }] }
    ];
    /** @nocollapse */
    NxSwitcherComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxSwitcherComponent.propDecorators = {
        id: [{ type: Input }],
        labelPosition: [{ type: Input }],
        name: [{ type: Input }],
        checked: [{ type: Input }],
        big: [{ type: Input, args: ['nxBig',] }],
        labelSize: [{ type: Input }],
        negative: [{ type: Input, args: ['nxNegative',] }],
        disabled: [{ type: Input }],
        checkedChange: [{ type: Output, args: ['checkedChange',] }]
    };
    return NxSwitcherComponent;
}());
export { NxSwitcherComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._labelPosition;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._big;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._labelSize;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._disabled;
    /**
     * An event is dispatched each time the switcher value is changed
     * @type {?}
     */
    NxSwitcherComponent.prototype.checkedChange;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,