/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Input, Renderer2, HostListener } from '@angular/core';
import { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';
import { NxRadioToggleComponent } from './radio-toggle.component';
/**
 * \@docs-private
 */
var /**
 * \@docs-private
 */
NxRadioToggleButtonChange = /** @class */ (function () {
    function NxRadioToggleButtonChange(source, value) {
        this.source = source;
        this.value = value;
    }
    return NxRadioToggleButtonChange;
}());
/**
 * \@docs-private
 */
export { NxRadioToggleButtonChange };
if (false) {
    /** @type {?} */
    NxRadioToggleButtonChange.prototype.source;
    /** @type {?} */
    NxRadioToggleButtonChange.prototype.value;
}
var NxRadioToggleButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxRadioToggleButtonComponent, _super);
    function NxRadioToggleButtonComponent(radioToggle, renderer, _changeDetectorRef, _toggleDispatcher) {
        var _this = _super.call(this, renderer) || this;
        _this.radioToggle = radioToggle;
        _this._changeDetectorRef = _changeDetectorRef;
        _this._toggleDispatcher = _toggleDispatcher;
        /**
         * \@docs-private
         */
        // emits when the button is checked to notify the group
        _this.onChecked = new Subject();
        _this._destroyed = new Subject();
        _this._disabled = false;
        _this._selected = false;
        /**
         * Unregister function for _expansionDispatcher.
         */
        _this._removeUniqueSelectionListener = (/**
         * @return {?}
         */
        function () { });
        _this._removeUniqueSelectionListener = _this._toggleDispatcher.listen((/**
         * @param {?} id
         * @param {?} radioToggleId
         * @return {?}
         */
        function (id, radioToggleId) {
            if (_this.radioToggle && _this.radioToggle.id === radioToggleId && _this.id !== id) {
                _this._selected = false;
                // need to let change detector know in case that the select() function was called on another button
                _this._changeDetectorRef.markForCheck();
            }
        }));
        _this.radioToggle._disableChange.pipe(takeUntil(_this._destroyed)).subscribe((/**
         * @return {?}
         */
        function () {
            _this._changeDetectorRef.markForCheck();
        }));
        return _this;
    }
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled || (this.radioToggle && this.radioToggle.disabled);
        },
        /** @docs-private */
        set: /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        /** Sets the checked state and notify siblings and the parent group about the change */
        // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
        // To select a button without firing the event use the select() function
        set: /**
         * Sets the checked state and notify siblings and the parent group about the change
         * @param {?} value
         * @return {?}
         */
        // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
        // To select a button without firing the event use the select() function
        function (value) {
            if (this._selected !== value) {
                this._selected = value;
                if (this._selected) {
                    this._notifySiblings();
                    this._emitCheckedEvent();
                }
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._removeUniqueSelectionListener();
        this._destroyed.next();
        this._destroyed.complete();
    };
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "toggleId", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.radioToggle.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "id", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.toggleButtonId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype._notifySiblings = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var toggleId = this.radioToggle ? this.radioToggle.id : this.id;
        this._toggleDispatcher.notify(this.id, toggleId);
    };
    /**
     * @private
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype._emitCheckedEvent = /**
     * @private
     * @return {?}
     */
    function () {
        this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));
    };
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    /**
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype.select = 
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    /**
     * @return {?}
     */
    function () {
        if (!this._selected) {
            this._selected = true;
            this._notifySiblings();
        }
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype.onKeyupSpace = /**
     * @return {?}
     */
    function () {
        this._selected = false;
        this._notifySiblings();
    };
    NxRadioToggleButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-radio-toggle-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "<input [attr.id]=\"toggleButtonId\"\n    #toggleInput\n    [attr.name]=\"toggleId\"\n    [checked]=\"selected\"\n    class=\"nx-radio-toggle__input\"\n    type=\"radio\"\n    (click)=\"selected = true\"\n    [disabled]=\"disabled\">\n<div (click)=\"triggerInputClick($event)\" #toggleButtonLabelContainer class=\"nx-radio-toggle__label-container\">\n  <label [attr.for]=\"toggleButtonId\" class=\"nx-radio-toggle__label\">\n      <nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n      <ng-content></ng-content>\n  </label>\n</div>\n\n\n",
                    providers: [
                        {
                            provide: NxRadioToggleButtonBaseComponent, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxRadioToggleButtonComponent; }))
                        }
                    ],
                    styles: [":host{display:flex;position:relative;flex-direction:row}.nx-radio-toggle__input{opacity:0;position:absolute}.nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#003781;border-color:#003781;color:#fff}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#b2d7e8;border-color:#b2d7e8;color:#fff;cursor:not-allowed}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:not-allowed}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#007ab3;border-color:#007ab3;color:#fff;cursor:default}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:default}@media screen and (-ms-high-contrast:active){.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#ff0;cursor:default;border-color:inherit}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{background-color:#000}}.nx-toggle-button__mobile-check{display:none;font-size:24px;margin-right:8px;height:24px}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:14px;min-height:16px;padding:6px;text-transform:none;line-height:16px}.nx-radio-toggle{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:4px 0 0 4px;border-width:2px 0 2px 2px}@media (max-width:703px){:host{width:100%}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-toggle-button__mobile-check{display:inline-block}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{line-height:24px;padding:11px 31px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px 2px 1px;border-radius:4px 4px 0 0}}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-radius:0 4px 4px 0;border-width:2px}@media (max-width:703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:1px 2px 2px;border-radius:0 0 4px 4px}}.nx-radio-toggle__label-container{padding:10px 30px;border:2px solid #007ab3;border-radius:0;border-width:2px 0 2px 2px;color:#007ab3;cursor:pointer;flex-grow:1;font-size:16px;font-weight:600;line-height:24px;text-align:center;text-transform:uppercase;transition:background-color .2s,border-color .2s,color .2s;display:flex;align-items:center;height:100%;min-height:24px}@media (max-width:703px){.nx-radio-toggle__label-container{border-width:1px 2px;justify-content:center;padding:11px 31px}}.nx-radio-toggle__label-container:hover{background-color:#075994;border-color:#075994;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#c2c2c2;border-color:#c2c2c2;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#d9d9d9}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container{border-color:#fff;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container:hover{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}.nx-radio-toggle__label{display:flex;align-items:center;cursor:pointer}:host-context([data-whatinput=keyboard]) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;z-index:1}"]
                }] }
    ];
    /** @nocollapse */
    NxRadioToggleButtonComponent.ctorParameters = function () { return [
        { type: NxRadioToggleComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NxRadioToggleComponent; })),] }] },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: UniqueSelectionDispatcher }
    ]; };
    NxRadioToggleButtonComponent.propDecorators = {
        disabled: [{ type: Input, args: ['nxDisabled',] }],
        selected: [{ type: Input, args: ['nxSelected',] }],
        onKeyupSpace: [{ type: HostListener, args: ['keyup.space',] }]
    };
    return NxRadioToggleButtonComponent;
}(NxRadioToggleButtonBaseComponent));
export { NxRadioToggleButtonComponent };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxRadioToggleButtonComponent.prototype.onChecked;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._selected;
    /**
     * Unregister function for _expansionDispatcher.
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._removeUniqueSelectionListener;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype.radioToggle;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._toggleDispatcher;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInJhZGlvLXRvZ2dsZS9yYWRpby10b2dnbGUtYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUN0RixZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDeEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFHbEU7Ozs7SUFDRSxtQ0FDUyxNQUFvQyxFQUNwQyxLQUFVO1FBRFYsV0FBTSxHQUFOLE1BQU0sQ0FBOEI7UUFDcEMsVUFBSyxHQUFMLEtBQUssQ0FBSztJQUNoQixDQUFDO0lBQ04sZ0NBQUM7QUFBRCxDQUFDLEFBTEQsSUFLQzs7Ozs7OztJQUhHLDJDQUEyQzs7SUFDM0MsMENBQWlCOztBQUlyQjtJQVdrRCx3REFBZ0M7SUEwQ2hGLHNDQUM0RCxXQUFtQyxFQUM3RixRQUFtQixFQUNYLGtCQUFxQyxFQUNyQyxpQkFBNEM7UUFKdEQsWUFLRSxrQkFBTSxRQUFRLENBQUMsU0FhaEI7UUFqQjJELGlCQUFXLEdBQVgsV0FBVyxDQUF3QjtRQUVyRix3QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FB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QUssU0FBQyxZQUFZOytCQTBFbEIsWUFBWSxTQUFDLGFBQWE7O0lBSzdCLG1DQUFDO0NBQUEsQUFsSEQsQ0FXa0QsZ0NBQWdDLEdBdUdqRjtTQXZHWSw0QkFBNEI7Ozs7OztJQUl2QyxpREFBOEQ7Ozs7O0lBRTlELGtEQUFrRDs7Ozs7SUFFbEQsaURBQW1DOzs7OztJQUNuQyxpREFBbUM7Ozs7OztJQStCbkMsc0VBQStEOzs7OztJQUc3RCxtREFBNkY7Ozs7O0lBRTdGLDBEQUE2Qzs7Ozs7SUFDN0MseURBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IFVuaXF1ZVNlbGVjdGlvbkRpc3BhdGNoZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIGZvcndhcmRSZWYsIEluamVjdCwgSW5wdXQsIFJlbmRlcmVyMixcbiAgIE9uRGVzdHJveSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE54UmFkaW9Ub2dnbGVCdXR0b25CYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9yYWRpby10b2dnbGUtYnV0dG9uLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IE54UmFkaW9Ub2dnbGVDb21wb25lbnQgfSBmcm9tICcuL3JhZGlvLXRvZ2dsZS5jb21wb25lbnQnO1xuXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGNsYXNzIE54UmFkaW9Ub2dnbGVCdXR0b25DaGFuZ2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc291cmNlOiBOeFJhZGlvVG9nZ2xlQnV0dG9uQ29tcG9uZW50LFxuICAgIHB1YmxpYyB2YWx1ZTogYW55XG4gICkge31cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtcmFkaW8tdG9nZ2xlLWJ1dHRvbicsXG4gIHN0eWxlVXJsczogWydyYWRpby10b2dnbGUtYnV0dG9uLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZVVybDogJ3JhZGlvLXRvZ2dsZS1idXR0b24uY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOeFJhZGlvVG9nZ2xlQnV0dG9uQmFzZUNvbXBvbmVudCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTnhSYWRpb1RvZ2dsZUJ1dHRvbkNvbXBvbmVudClcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTnhSYWRpb1RvZ2dsZUJ1dHRvbkNvbXBvbmVudCBleHRlbmRzIE54UmFkaW9Ub2dnbGVCdXR0b25CYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAvLyBlbWl0cyB3aGVuIHRoZSBidXR0b24gaXMgY2hlY2tlZCB0byBub3RpZnkgdGhlIGdyb3VwXG4gIHJlYWRvbmx5IG9uQ2hlY2tlZCA9IG5ldyBTdWJqZWN0PE54UmFkaW9Ub2dnbGVCdXR0b25DaGFuZ2U+KCk7XG5cbiAgcHJpdmF0ZSBfZGVzdHJveWVkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9zZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBJbnB1dCgnbnhEaXNhYmxlZCcpXG4gIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkIHx8ICh0aGlzLnJhZGlvVG9nZ2xlICYmIHRoaXMucmFkaW9Ub2dnbGUuZGlzYWJsZWQpO1xuICB9XG5cbiAgLyoqIFNldHMgdGhlIGNoZWNrZWQgc3RhdGUgYW5kIG5vdGlmeSBzaWJsaW5ncyBhbmQgdGhlIHBhcmVudCBncm91cCBhYm91dCB0aGUgY2hhbmdlICovXG4gIC8vIE9ubHkgdXNlIHRoaXMgaWYgeW91IHdhbnQgdGhlIG9uQ2hlY2tlZCBldmVudCB0byBiZSBmaXJlZCwgdGhpcyB3aWxsIGluZm9ybSB0aGUgcGFyZW50IGFib3V0IHRoZSBjaGFuZ2UhXG4gIC8vIFRvIHNlbGVjdCBhIGJ1dHRvbiB3aXRob3V0IGZpcmluZyB0aGUgZXZlbnQgdXNlIHRoZSBzZWxlY3QoKSBmdW5jdGlvblxuICBASW5wdXQoJ254U2VsZWN0ZWQnKVxuICBzZXQgc2VsZWN0ZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5fc2VsZWN0ZWQgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMuX3NlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuX25vdGlmeVNpYmxpbmdzKCk7XG4gICAgICAgIHRoaXMuX2VtaXRDaGVja2VkRXZlbnQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuICBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICB9XG5cbiAgLyoqIFVucmVnaXN0ZXIgZnVuY3Rpb24gZm9yIF9leHBhbnNpb25EaXNwYXRjaGVyLiAqL1xuICBwcml2YXRlIF9yZW1vdmVVbmlxdWVTZWxlY3Rpb25MaXN0ZW5lcjogKCkgPT4gdm9pZCA9ICgpID0+IHsgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTnhSYWRpb1RvZ2dsZUNvbXBvbmVudCkpIHByaXZhdGUgcmFkaW9Ub2dnbGU6IE54UmFkaW9Ub2dnbGVDb21wb25lbnQsXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBfdG9nZ2xlRGlzcGF0Y2hlcjogVW5pcXVlU2VsZWN0aW9uRGlzcGF0Y2hlcikge1xuICAgIHN1cGVyKHJlbmRlcmVyKTtcblxuICAgIHRoaXMuX3JlbW92ZVVuaXF1ZVNlbGVjdGlvbkxpc3RlbmVyID0gdGhpcy5fdG9nZ2xlRGlzcGF0Y2hlci5saXN0ZW4oKGlkOiBzdHJpbmcsIHJhZGlvVG9nZ2xlSWQ6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHRoaXMucmFkaW9Ub2dnbGUgJiYgdGhpcy5yYWRpb1RvZ2dsZS5pZCA9PT0gcmFkaW9Ub2dnbGVJZCAmJiB0aGlzLmlkICE9PSBpZCkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAvLyBuZWVkIHRvIGxldCBjaGFuZ2UgZGV0ZWN0b3Iga25vdyBpbiBjYXNlIHRoYXQgdGhlIHNlbGVjdCgpIGZ1bmN0aW9uIHdhcyBjYWxsZWQgb24gYW5vdGhlciBidXR0b25cbiAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnJhZGlvVG9nZ2xlLl9kaXNhYmxlQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbW92ZVVuaXF1ZVNlbGVjdGlvbkxpc3RlbmVyKCk7XG4gICAgdGhpcy5fZGVzdHJveWVkLm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95ZWQuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGdldCB0b2dnbGVJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnJhZGlvVG9nZ2xlLmlkO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlQnV0dG9uSWQ7XG4gIH1cblxuICBwcml2YXRlIF9ub3RpZnlTaWJsaW5ncygpIHtcbiAgICBjb25zdCB0b2dnbGVJZCA9IHRoaXMucmFkaW9Ub2dnbGUgPyB0aGlzLnJhZGlvVG9nZ2xlLmlkIDogdGhpcy5pZDtcbiAgICB0aGlzLl90b2dnbGVEaXNwYXRjaGVyLm5vdGlmeSh0aGlzLmlkLCB0b2dnbGVJZCk7XG4gIH1cblxuICBwcml2YXRlIF9lbWl0Q2hlY2tlZEV2ZW50KCkge1xuICAgIHRoaXMub25DaGVja2VkLm5leHQobmV3IE54UmFkaW9Ub2dnbGVCdXR0b25DaGFuZ2UodGhpcywgdGhpcy52YWx1ZSkpO1xuICB9XG5cbiAgLy8gRG9lcyBOT1QgZW1pdCB0aGUgb25DaGVja2VkIGV2ZW50LiBVc2VmdWwgd2hlbiB5b3UgbmVlZCB0byBzZXQgaW5pdGlhbFxuICAvLyBzdGF0ZS4gVXNlZCBieSB0aGUgcGFyZW50IHRvIHNldCBjaGVja2VkIHN0YXRlcyBvbiBpbml0aWFsaXphdGlvbiBhbmQgZHVyaW5nXG4gIC8vIHdyaXRlVmFsdWUoKSBjaGFuZ2VzLlxuICBzZWxlY3QoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9zZWxlY3RlZCkge1xuICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fbm90aWZ5U2libGluZ3MoKTtcbiAgICB9XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXl1cC5zcGFjZScpXG4gIG9uS2V5dXBTcGFjZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuX25vdGlmeVNpYmxpbmdzKCk7XG4gIH1cbn1cbiJdfQ==