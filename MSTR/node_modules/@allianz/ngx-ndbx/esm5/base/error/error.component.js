/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, InjectionToken, Inject, Optional } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/**
 * Represents the default options for the error notification that can be configured
 * using the `ERROR_DEFAULT_OPTIONS` injection token.
 * @record
 */
export function ErrorDefaultOptions() { }
if (false) {
    /**
     * Defines the style type of the error notification.
     * @type {?|undefined}
     */
    ErrorDefaultOptions.prototype.appearance;
}
/** @type {?} */
export var ERROR_DEFAULT_OPTIONS = new InjectionToken('ERROR_DEFAULT_OPTIONS');
var NxErrorComponent = /** @class */ (function () {
    function NxErrorComponent(_changeDetectorRef, _defaultOptions) {
        this._changeDetectorRef = _changeDetectorRef;
        this._defaultOptions = _defaultOptions;
        this._showIcon = true;
        this._appearance = 'message';
        if (this._defaultOptions && this._defaultOptions.appearance) {
            this.appearance = this._defaultOptions.appearance;
        }
    }
    Object.defineProperty(NxErrorComponent.prototype, "showIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showIcon;
        },
        /** Whether an icon should be displayed. */
        set: /**
         * Whether an icon should be displayed.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showIcon = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxErrorComponent.prototype, "appearance", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appearance;
        },
        /**
         * Whether the error should have message or text styling.
         *
         * Default is 'message'.
         */
        set: /**
         * Whether the error should have message or text styling.
         *
         * Default is 'message'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.appearance) {
                this._appearance = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxErrorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-error',
                    template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n  <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\">\n  </nx-icon>\n  <div class=\"nx-error__content-wrapper\">\n    <div class=\"nx-error__content\">\n      <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" [showIcon]=\"showIcon\" nxContext=\"error\">\n  <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n  <ng-content></ng-content>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.role]': '"alert"'
                    },
                    styles: [":host{font-size:16px;line-height:20px;color:#dc3149;width:100%;display:block}:host .nx-error__content{line-height:20px}:host .nx-error__icon{font-size:20px;line-height:20px;color:#dc3149;margin-right:8px;float:left}"]
                }] }
    ];
    /** @nocollapse */
    NxErrorComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ERROR_DEFAULT_OPTIONS,] }] }
    ]; };
    NxErrorComponent.propDecorators = {
        showIcon: [{ type: Input }],
        appearance: [{ type: Input }]
    };
    return NxErrorComponent;
}());
export { NxErrorComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._showIcon;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._appearance;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImVycm9yL2Vycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0gsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQVM1RCx5Q0FHQzs7Ozs7O0lBREMseUNBQTRCOzs7QUFHOUIsTUFBTSxLQUFPLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFzQix1QkFBdUIsQ0FBQztBQUVyRztJQXVDRSwwQkFBb0Isa0JBQXFDLEVBQ0osZUFBb0M7UUFEckUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUNKLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQTlCakYsY0FBUyxHQUFZLElBQUksQ0FBQztRQUMxQixnQkFBVyxHQUFtQixTQUFTLENBQUM7UUE4QjVDLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRTtZQUMzRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQTlCSCxzQkFDSSxzQ0FBUTs7OztRQUlaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFSRCwyQ0FBMkM7Ozs7OztRQUMzQyxVQUNhLEtBQWM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7SUFVRCxzQkFDSSx3Q0FBVTs7OztRQU1kO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7UUFkRDs7OztXQUlHOzs7Ozs7OztRQUNILFVBQ2UsS0FBcUI7WUFDbEMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUN4QztRQUNILENBQUM7OztPQUFBOztnQkFsQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQixtckJBQXFDO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFFL0MsSUFBSSxFQUFFO3dCQUNKLGFBQWEsRUFBRSxTQUFTO3FCQUN6Qjs7aUJBQ0Y7Ozs7Z0JBekJnQyxpQkFBaUI7Z0RBeUQ3QyxRQUFRLFlBQUksTUFBTSxTQUFDLHFCQUFxQjs7OzJCQTFCMUMsS0FBSzs2QkFjTCxLQUFLOztJQWlCUix1QkFBQztDQUFBLEFBN0NELElBNkNDO1NBcENZLGdCQUFnQjs7Ozs7O0lBQzNCLHFDQUFrQzs7Ozs7SUFDbEMsdUNBQWdEOzs7OztJQTRCcEMsOENBQTZDOzs7OztJQUN2RCwyQ0FBdUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtjb2VyY2VCb29sZWFuUHJvcGVydHl9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbi8qIFR5cGVzIG9mIGVycm9yIG5vdGlmaWNhdGlvbiBzdHlsZXMgKi9cbmV4cG9ydCB0eXBlIEVycm9yU3R5bGVUeXBlID0gJ21lc3NhZ2UnIHwgJ3RleHQnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGVycm9yIG5vdGlmaWNhdGlvbiB0aGF0IGNhbiBiZSBjb25maWd1cmVkXG4gKiB1c2luZyB0aGUgYEVSUk9SX0RFRkFVTFRfT1BUSU9OU2AgaW5qZWN0aW9uIHRva2VuLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yRGVmYXVsdE9wdGlvbnMge1xuICAvKiogRGVmaW5lcyB0aGUgc3R5bGUgdHlwZSBvZiB0aGUgZXJyb3Igbm90aWZpY2F0aW9uLiAqL1xuICBhcHBlYXJhbmNlPzogRXJyb3JTdHlsZVR5cGU7XG59XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9ERUZBVUxUX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RXJyb3JEZWZhdWx0T3B0aW9ucz4oJ0VSUk9SX0RFRkFVTFRfT1BUSU9OUycpO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1lcnJvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9lcnJvci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnLi9lcnJvci5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLnJvbGVdJzogJ1wiYWxlcnRcIidcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTnhFcnJvckNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3Nob3dJY29uOiBib29sZWFuID0gdHJ1ZTtcbiAgcHJpdmF0ZSBfYXBwZWFyYW5jZTogRXJyb3JTdHlsZVR5cGUgPSAnbWVzc2FnZSc7XG5cbiAgLyoqIFdoZXRoZXIgYW4gaWNvbiBzaG91bGQgYmUgZGlzcGxheWVkLiAqL1xuICBASW5wdXQoKVxuICBzZXQgc2hvd0ljb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93SWNvbiA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IHNob3dJY29uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93SWNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBlcnJvciBzaG91bGQgaGF2ZSBtZXNzYWdlIG9yIHRleHQgc3R5bGluZy5cbiAgICpcbiAgICogRGVmYXVsdCBpcyAnbWVzc2FnZScuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgYXBwZWFyYW5jZSh2YWx1ZTogRXJyb3JTdHlsZVR5cGUpIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuYXBwZWFyYW5jZSkge1xuICAgICAgdGhpcy5fYXBwZWFyYW5jZSA9IHZhbHVlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIGdldCBhcHBlYXJhbmNlKCk6IEVycm9yU3R5bGVUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fYXBwZWFyYW5jZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEVSUk9SX0RFRkFVTFRfT1BUSU9OUykgcHJpdmF0ZSBfZGVmYXVsdE9wdGlvbnM6IEVycm9yRGVmYXVsdE9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLl9kZWZhdWx0T3B0aW9ucyAmJiB0aGlzLl9kZWZhdWx0T3B0aW9ucy5hcHBlYXJhbmNlKSB7XG4gICAgICAgIHRoaXMuYXBwZWFyYW5jZSA9IHRoaXMuX2RlZmF1bHRPcHRpb25zLmFwcGVhcmFuY2U7XG4gICAgICB9XG4gICAgfVxufVxuIl19