/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, Optional, Inject, InjectionToken } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
/** @type {?} */
var nextId = 0;
/**
 * @record
 */
export function LabelDefaultOptions() { }
if (false) {
    /**
     * Sets the default appearance. (optional)
     * @type {?|undefined}
     */
    LabelDefaultOptions.prototype.size;
}
/** @type {?} */
var DEFAULT_SIZE = 'large';
/** @type {?} */
export var LABEL_DEFAULT_OPTIONS = new InjectionToken('LABEL_DEFAULT_OPTIONS');
var NxLabelComponent = /** @class */ (function () {
    function NxLabelComponent(_defaultOptions) {
        this._defaultOptions = _defaultOptions;
        this._stateChanges = new Subject();
        this._disabled = false;
        this._negative = false;
        this._id = "nx-label-" + nextId++;
        this._size = (this._defaultOptions && this._defaultOptions.size) ? this._defaultOptions.size : DEFAULT_SIZE;
    }
    Object.defineProperty(NxLabelComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Sets the label to disabled */
        set: /**
         * Sets the label to disabled
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Sets the label to disabled */
        set: /**
         * Sets the label to disabled
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /** Sets the Id of the label */
        set: /**
         * Sets the Id of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._id !== value) {
                this._id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * **NDBX Expert option**
         * Sets the appearance of the label */
        set: /**
         * **NDBX Expert option**
         * Sets the appearance of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    NxLabelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-label',
                    template: "<label class=\"nx-label__content\">\n  <ng-content></ng-content>\n</label>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.disabled]': 'disabled',
                        '[attr.aria-labelledby]': 'id || null',
                        '[class.nx-label--negative]': 'negative',
                        '[class.nx-label--large]': 'size === "large"',
                        '[class.nx-label--small]': 'size === "small"',
                        '[attr.id]': 'id',
                    },
                    styles: [":host{display:block;color:#414141}:host.nx-label--small{font-size:16px;line-height:24px;font-weight:600}:host.nx-label--large{font-size:20px;line-height:28px;letter-spacing:.2px;font-weight:300}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:#fff}"]
                }] }
    ];
    /** @nocollapse */
    NxLabelComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LABEL_DEFAULT_OPTIONS,] }] }
    ]; };
    NxLabelComponent.propDecorators = {
        disabled: [{ type: Input }],
        negative: [{ type: Input }],
        id: [{ type: Input }],
        size: [{ type: Input }]
    };
    return NxLabelComponent;
}());
export { NxLabelComponent };
if (false) {
    /** @type {?} */
    NxLabelComponent.prototype._stateChanges;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImxhYmVsL2xhYmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFFM0IsTUFBTSxHQUFHLENBQUM7Ozs7QUFFZCx5Q0FHQzs7Ozs7O0lBREMsbUNBQXVCOzs7SUFLbkIsWUFBWSxHQUFHLE9BQU87O0FBRTVCLE1BQU0sS0FBTyxxQkFBcUIsR0FDaEMsSUFBSSxjQUFjLENBQXNCLHVCQUF1QixDQUFDO0FBQ2xFO0lBc0VFLDBCQUErRCxlQUFvQztRQUFwQyxvQkFBZSxHQUFmLGVBQWUsQ0FBcUI7UUFyRDFGLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUNyQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLGNBQVMsR0FBWSxLQUFLLENBQUM7UUF5QjNCLFFBQUcsR0FBVyxjQUFZLE1BQU0sRUFBSSxDQUFDO1FBNEIzQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQzlHLENBQUM7SUFsREQsc0JBQ0ksc0NBQVE7Ozs7UUFLWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBVEQsaUNBQWlDOzs7Ozs7UUFDakMsVUFDYSxLQUFjO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQU9ELHNCQUNJLHNDQUFROzs7O1FBS1o7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQVRELGlDQUFpQzs7Ozs7O1FBQ2pDLFVBQ2EsS0FBYztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7SUFRRCxzQkFDSSxnQ0FBRTs7OztRQU1OO1lBQ0UsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ2xCLENBQUM7UUFWRCwrQkFBK0I7Ozs7OztRQUMvQixVQUNPLEtBQWE7WUFDbEIsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLEtBQUssRUFBRTtnQkFDdEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7YUFDbEI7UUFDSCxDQUFDOzs7T0FBQTtJQVNELHNCQUNJLGtDQUFJOzs7O1FBS1I7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQVhEOzs4Q0FFc0M7Ozs7Ozs7UUFDdEMsVUFDUyxLQUFzQjtZQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVCLENBQUM7OztPQUFBOztnQkFoRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQix3RkFBcUM7b0JBRXJDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUU7d0JBQ0osaUJBQWlCLEVBQUUsVUFBVTt3QkFDN0Isd0JBQXdCLEVBQUUsWUFBWTt3QkFDdEMsNEJBQTRCLEVBQUUsVUFBVTt3QkFDeEMseUJBQXlCLEVBQUUsa0JBQWtCO3dCQUM3Qyx5QkFBeUIsRUFBRSxrQkFBa0I7d0JBQzdDLFdBQVcsRUFBRSxJQUFJO3FCQUNsQjs7aUJBQ0Y7Ozs7Z0RBeURjLFFBQVEsWUFBSSxNQUFNLFNBQUMscUJBQXFCOzs7MkJBL0NwRCxLQUFLOzJCQVdMLEtBQUs7cUJBWUwsS0FBSzt1QkFjTCxLQUFLOztJQWNSLHVCQUFDO0NBQUEsQUExRUQsSUEwRUM7U0ExRFksZ0JBQWdCOzs7SUFDM0IseUNBQTZDOzs7OztJQUM3QyxxQ0FBbUM7Ozs7O0lBQ25DLHFDQUFtQzs7Ozs7SUFDbkMsaUNBQStCOzs7OztJQXdCL0IsK0JBQTZDOzs7OztJQTBCakMsMkNBQXVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE9wdGlvbmFsLCBJbmplY3QsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5sZXQgbmV4dElkID0gMDtcblxuZXhwb3J0IGludGVyZmFjZSBMYWJlbERlZmF1bHRPcHRpb25zIHtcbiAgLyoqIFNldHMgdGhlIGRlZmF1bHQgYXBwZWFyYW5jZS4gKG9wdGlvbmFsKSAqL1xuICBzaXplPzogTEFCRUxfU0laRV9UWVBFO1xufVxuXG4vKiogT3B0aW9ucyBmb3Igc2l6aW5nIG9mIHRoZSBsYWJlbC4gKi9cbmV4cG9ydCB0eXBlIExBQkVMX1NJWkVfVFlQRSA9ICdzbWFsbCcgfCAnbGFyZ2UnO1xuY29uc3QgREVGQVVMVF9TSVpFID0gJ2xhcmdlJztcblxuZXhwb3J0IGNvbnN0IExBQkVMX0RFRkFVTFRfT1BUSU9OUyA9XG4gIG5ldyBJbmplY3Rpb25Ub2tlbjxMYWJlbERlZmF1bHRPcHRpb25zPignTEFCRUxfREVGQVVMVF9PUFRJT05TJyk7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1sYWJlbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9sYWJlbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydsYWJlbC5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5kaXNhYmxlZF0nOiAnZGlzYWJsZWQnLFxuICAgICdbYXR0ci5hcmlhLWxhYmVsbGVkYnldJzogJ2lkIHx8IG51bGwnLFxuICAgICdbY2xhc3MubngtbGFiZWwtLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gICAgJ1tjbGFzcy5ueC1sYWJlbC0tbGFyZ2VdJzogJ3NpemUgPT09IFwibGFyZ2VcIicsXG4gICAgJ1tjbGFzcy5ueC1sYWJlbC0tc21hbGxdJzogJ3NpemUgPT09IFwic21hbGxcIicsXG4gICAgJ1thdHRyLmlkXSc6ICdpZCcsXG4gIH0sXG59KVxuXG5cbmV4cG9ydCBjbGFzcyBOeExhYmVsQ29tcG9uZW50IHtcbiAgcmVhZG9ubHkgX3N0YXRlQ2hhbmdlcyA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX25lZ2F0aXZlOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3NpemU6IExBQkVMX1NJWkVfVFlQRTtcblxuICAvKiogU2V0cyB0aGUgbGFiZWwgdG8gZGlzYWJsZWQgKi9cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgLyoqIFNldHMgdGhlIGxhYmVsIHRvIGRpc2FibGVkICovXG4gIEBJbnB1dCgpXG4gIHNldCBuZWdhdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX25lZ2F0aXZlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICB9XG5cbiAgZ2V0IG5lZ2F0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9uZWdhdGl2ZTtcbiAgfVxuXG4gIHByaXZhdGUgX2lkOiBzdHJpbmcgPSBgbngtbGFiZWwtJHtuZXh0SWQrK31gO1xuICAvKiogU2V0cyB0aGUgSWQgb2YgdGhlIGxhYmVsICovXG4gIEBJbnB1dCgpXG4gIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX2lkICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICAvKipcbiAgICogKipOREJYIEV4cGVydCBvcHRpb24qKlxuICAgKiBTZXRzIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBsYWJlbCAqL1xuICBASW5wdXQoKVxuICBzZXQgc2l6ZSh2YWx1ZTogTEFCRUxfU0laRV9UWVBFKSB7XG4gICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gIH1cblxuICBnZXQgc2l6ZSgpOiBMQUJFTF9TSVpFX1RZUEUge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChMQUJFTF9ERUZBVUxUX09QVElPTlMpIHByaXZhdGUgX2RlZmF1bHRPcHRpb25zOiBMYWJlbERlZmF1bHRPcHRpb25zXG4gICkge1xuICAgIHRoaXMuX3NpemUgPSAodGhpcy5fZGVmYXVsdE9wdGlvbnMgJiYgdGhpcy5fZGVmYXVsdE9wdGlvbnMuc2l6ZSkgPyB0aGlzLl9kZWZhdWx0T3B0aW9ucy5zaXplIDogREVGQVVMVF9TSVpFO1xuICB9XG59XG4iXX0=