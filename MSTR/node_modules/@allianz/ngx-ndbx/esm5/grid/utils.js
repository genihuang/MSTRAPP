/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mapClassNames } from '@allianz/ngx-ndbx/utils';
/**
 * is udefined or empty?
 * @param {?} value
 * @return {?}
 */
export function isEmpty(value) {
    return (value === undefined || value === '');
}
/**
 * @param {?} value
 * @return {?}
 */
export function isEmptyArray(value) {
    return (value === undefined || value.length === 0);
}
/**
 * add space and return mapClassNames (css)
 * @param {?} aux
 * @param {?} map
 * @return {?}
 */
export function addStyles(aux, map) {
    return ' ' + mapClassNames(aux, [], map);
}
/**
 * input='small,medium,large'
 *  map = MAPPING
 * @param {?} input
 * @param {?} map
 * @return {?}
 */
export function addStylesFromDimensions(input, map) {
    /** @type {?} */
    var aux = processSplit(input);
    /** @type {?} */
    var output = '';
    if (aux.length >= 1 && aux.length <= 4) {
        /** @type {?} */
        var auxTiny = addStyles(aux[0], map).replace('-{tier}', '');
        /** @type {?} */
        var auxSmall = '';
        /** @type {?} */
        var auxMedium = '';
        /** @type {?} */
        var auxLarge = '';
        switch (aux.length) {
            case 1:
                auxSmall = addStyles(aux[0], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[0], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[0], map).replace('{tier}', 'large');
                break;
            case 2:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[1], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[1], map).replace('{tier}', 'large');
                break;
            case 3:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[2], map).replace('{tier}', 'large');
                break;
            default:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[3], map).replace('{tier}', 'large');
                break;
        }
        output += ' ' + auxTiny.trim() + ' '
            + auxSmall.trim() + ' '
            + auxMedium.trim() + ' '
            + auxLarge.trim();
    }
    return output;
}
// Simple split
/**
 * @param {?} aux
 * @param {?=} char
 * @return {?}
 */
export function processSplit(aux, char) {
    if (char === void 0) { char = ','; }
    return aux.split(char).map((/**
     * @param {?} item
     * @return {?}
     */
    function (item) { return item.trim(); }));
}
/**
 * @param {?} el
 * @param {?} aux
 * @return {?}
 */
export function validateClassInElement(el, aux) {
    return el.hasAttribute(aux);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9ncmlkLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7O0FBSXhELE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBVTtJQUM5QixPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEtBQVk7SUFDckMsT0FBTyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDOzs7Ozs7O0FBR0QsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFXLEVBQUUsR0FBTztJQUMxQyxPQUFPLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3QyxDQUFDOzs7Ozs7OztBQUtELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxLQUFhLEVBQUUsR0FBTzs7UUFDcEQsR0FBRyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7O1FBQzNCLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTs7WUFDOUIsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUM7O1lBQ3pELFFBQVEsR0FBRyxFQUFFOztZQUNiLFNBQVMsR0FBRyxFQUFFOztZQUNkLFFBQVEsR0FBRyxFQUFFO1FBQ2pCLFFBQVEsR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNsQixLQUFLLENBQUM7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QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwQ2xhc3NOYW1lcyB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L3V0aWxzJztcbmltcG9ydCB7IEVsZW1lbnQgfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5cbi8qKiBpcyB1ZGVmaW5lZCBvciBlbXB0eT8gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09ICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlBcnJheSh2YWx1ZTogYW55W10pOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUubGVuZ3RoID09PSAwKTtcbn1cblxuLyoqIGFkZCBzcGFjZSBhbmQgcmV0dXJuIG1hcENsYXNzTmFtZXMgKGNzcykgKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRTdHlsZXMoYXV4OiBzdHJpbmcsIG1hcDoge30pOiBzdHJpbmcge1xuICAgIHJldHVybiAnICcgKyBtYXBDbGFzc05hbWVzKGF1eCwgW10sIG1hcCk7XG59XG5cbi8qKiBpbnB1dD0nc21hbGwsbWVkaXVtLGxhcmdlJ1xuICogIG1hcCA9IE1BUFBJTkdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFN0eWxlc0Zyb21EaW1lbnNpb25zKGlucHV0OiBzdHJpbmcsIG1hcDoge30pOiBzdHJpbmcge1xuICAgIGNvbnN0IGF1eCA9IHByb2Nlc3NTcGxpdChpbnB1dCk7XG4gICAgbGV0IG91dHB1dCA9ICcnO1xuICAgIGlmIChhdXgubGVuZ3RoID49IDEgJiYgYXV4Lmxlbmd0aCA8PSA0KSB7XG4gICAgICAgIGNvbnN0IGF1eFRpbnkgPSBhZGRTdHlsZXMoYXV4WzBdLCBtYXApLnJlcGxhY2UoJy17dGllcn0nLCAnJyk7XG4gICAgICAgIGxldCBhdXhTbWFsbCA9ICcnO1xuICAgICAgICBsZXQgYXV4TWVkaXVtID0gJyc7XG4gICAgICAgIGxldCBhdXhMYXJnZSA9ICcnO1xuICAgICAgICBzd2l0Y2ggKGF1eC5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBhdXhTbWFsbCA9IGFkZFN0eWxlcyhhdXhbMF0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ3NtYWxsJyk7XG4gICAgICAgICAgICBhdXhNZWRpdW0gPSBhZGRTdHlsZXMoYXV4WzBdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdtZWRpdW0nKTtcbiAgICAgICAgICAgIGF1eExhcmdlID0gYWRkU3R5bGVzKGF1eFswXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbGFyZ2UnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGF1eFNtYWxsID0gYWRkU3R5bGVzKGF1eFsxXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnc21hbGwnKTtcbiAgICAgICAgICAgIGF1eE1lZGl1bSA9IGFkZFN0eWxlcyhhdXhbMV0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ21lZGl1bScpO1xuICAgICAgICAgICAgYXV4TGFyZ2UgPSBhZGRTdHlsZXMoYXV4WzFdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdsYXJnZScpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgYXV4U21hbGwgPSBhZGRTdHlsZXMoYXV4WzFdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdzbWFsbCcpO1xuICAgICAgICAgICAgYXV4TWVkaXVtID0gYWRkU3R5bGVzKGF1eFsyXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbWVkaXVtJyk7XG4gICAgICAgICAgICBhdXhMYXJnZSA9IGFkZFN0eWxlcyhhdXhbMl0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ2xhcmdlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYXV4U21hbGwgPSBhZGRTdHlsZXMoYXV4WzFdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdzbWFsbCcpO1xuICAgICAgICAgICAgYXV4TWVkaXVtID0gYWRkU3R5bGVzKGF1eFsyXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbWVkaXVtJyk7XG4gICAgICAgICAgICBhdXhMYXJnZSA9IGFkZFN0eWxlcyhhdXhbM10sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ2xhcmdlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXQgKz0gJyAnICsgYXV4VGlueS50cmltKCkgKyAnICdcbiAgICAgICAgICAgICAgICAgICAgICArIGF1eFNtYWxsLnRyaW0oKSArICcgJ1xuICAgICAgICAgICAgICAgICAgICAgICsgYXV4TWVkaXVtLnRyaW0oKSArICcgJ1xuICAgICAgICAgICAgICAgICAgICAgICsgYXV4TGFyZ2UudHJpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG4vLyBTaW1wbGUgc3BsaXRcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU3BsaXQoYXV4OiBzdHJpbmcsIGNoYXI6IHN0cmluZyA9ICcsJyk6IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiBhdXguc3BsaXQoY2hhcikubWFwKGl0ZW0gPT4gaXRlbS50cmltKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDbGFzc0luRWxlbWVudChlbDogYW55LCBhdXg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBlbC5oYXNBdHRyaWJ1dGUoYXV4KTtcbn1cbiJdfQ==