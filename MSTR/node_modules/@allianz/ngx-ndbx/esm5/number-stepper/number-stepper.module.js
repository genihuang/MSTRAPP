/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxNumberStepperIntl } from './number-stepper-intl';
import { NxAutoResizeDirective } from './auto-resize.directive';
import { CommonModule } from '@angular/common';
import { NxButtonModule } from '@allianz/ngx-ndbx/button';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxInputModule } from '@allianz/ngx-ndbx/input';
import { NgModule } from '@angular/core';
import { NxNumberStepperComponent } from './number-stepper.component';
import { FormsModule } from '@angular/forms';
import { NxNumberStepperPrefixDirective } from './number-stepper-prefix.directive';
import { NxNumberStepperSuffixDirective } from './number-stepper-suffix.directive';
var NxNumberStepperModule = /** @class */ (function () {
    function NxNumberStepperModule() {
    }
    NxNumberStepperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        NxInputModule,
                        FormsModule,
                        NxIconModule,
                        NxButtonModule,
                        CommonModule
                    ],
                    exports: [
                        NxNumberStepperComponent,
                        NxAutoResizeDirective,
                        NxNumberStepperPrefixDirective,
                        NxNumberStepperSuffixDirective
                    ],
                    declarations: [
                        NxNumberStepperComponent,
                        NxAutoResizeDirective,
                        NxNumberStepperPrefixDirective,
                        NxNumberStepperSuffixDirective
                    ],
                    providers: [NxNumberStepperIntl],
                },] }
    ];
    return NxNumberStepperModule;
}());
export { NxNumberStepperModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLXN0ZXBwZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJudW1iZXItc3RlcHBlci9udW1iZXItc3RlcHBlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVuRjtJQUFBO0lBc0JxQyxDQUFDOztnQkF0QnJDLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsYUFBYTt3QkFDYixXQUFXO3dCQUNYLFlBQVk7d0JBQ1osY0FBYzt3QkFDZCxZQUFZO3FCQUNiO29CQUNELE9BQU8sRUFBRTt3QkFDUCx3QkFBd0I7d0JBQ3hCLHFCQUFxQjt3QkFDckIsOEJBQThCO3dCQUM5Qiw4QkFBOEI7cUJBQy9CO29CQUNELFlBQVksRUFBRTt3QkFDWix3QkFBd0I7d0JBQ3hCLHFCQUFxQjt3QkFDckIsOEJBQThCO3dCQUM5Qiw4QkFBOEI7cUJBQy9CO29CQUNELFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO2lCQUNqQzs7SUFDb0MsNEJBQUM7Q0FBQSxBQXRCdEMsSUFzQnNDO1NBQXpCLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE54TnVtYmVyU3RlcHBlckludGwgfSBmcm9tICcuL251bWJlci1zdGVwcGVyLWludGwnO1xuaW1wb3J0IHsgTnhBdXRvUmVzaXplRGlyZWN0aXZlIH0gZnJvbSAnLi9hdXRvLXJlc2l6ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE54QnV0dG9uTW9kdWxlIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvYnV0dG9uJztcbmltcG9ydCB7IE54SWNvbk1vZHVsZSB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L2ljb24nO1xuaW1wb3J0IHsgTnhJbnB1dE1vZHVsZSB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L2lucHV0JztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE54TnVtYmVyU3RlcHBlckNvbXBvbmVudCB9IGZyb20gJy4vbnVtYmVyLXN0ZXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnhOdW1iZXJTdGVwcGVyUHJlZml4RGlyZWN0aXZlIH0gZnJvbSAnLi9udW1iZXItc3RlcHBlci1wcmVmaXguZGlyZWN0aXZlJztcbmltcG9ydCB7IE54TnVtYmVyU3RlcHBlclN1ZmZpeERpcmVjdGl2ZSB9IGZyb20gJy4vbnVtYmVyLXN0ZXBwZXItc3VmZml4LmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBOeElucHV0TW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIE54SWNvbk1vZHVsZSxcbiAgICBOeEJ1dHRvbk1vZHVsZSxcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE54TnVtYmVyU3RlcHBlckNvbXBvbmVudCxcbiAgICBOeEF1dG9SZXNpemVEaXJlY3RpdmUsXG4gICAgTnhOdW1iZXJTdGVwcGVyUHJlZml4RGlyZWN0aXZlLFxuICAgIE54TnVtYmVyU3RlcHBlclN1ZmZpeERpcmVjdGl2ZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOeE51bWJlclN0ZXBwZXJDb21wb25lbnQsXG4gICAgTnhBdXRvUmVzaXplRGlyZWN0aXZlLFxuICAgIE54TnVtYmVyU3RlcHBlclByZWZpeERpcmVjdGl2ZSxcbiAgICBOeE51bWJlclN0ZXBwZXJTdWZmaXhEaXJlY3RpdmVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbTnhOdW1iZXJTdGVwcGVySW50bF0sXG59KVxuZXhwb3J0IGNsYXNzIE54TnVtYmVyU3RlcHBlck1vZHVsZSB7IH1cbiJdfQ==