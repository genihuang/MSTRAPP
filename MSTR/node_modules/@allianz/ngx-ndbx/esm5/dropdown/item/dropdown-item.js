/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Optional, Output, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxDropdownControl } from '../dropdown.control';
import { NxDropdownGroupComponent } from './../group/dropdown-group';
var NxDropdownItemChange = /** @class */ (function () {
    function NxDropdownItemChange(item, isUserInput) {
        if (isUserInput === void 0) { isUserInput = false; }
        this.item = item;
        this.isUserInput = isUserInput;
    }
    return NxDropdownItemChange;
}());
export { NxDropdownItemChange };
if (false) {
    /**
     * Reference to the option that emitted the event.
     * @type {?}
     */
    NxDropdownItemChange.prototype.item;
    /**
     * Whether the change in the option's value was a result of a user action.
     * @type {?}
     */
    NxDropdownItemChange.prototype.isUserInput;
}
/**
 * the unique id counter
 * @type {?}
 */
var nextId = 0;
var NxDropdownItemComponent = /** @class */ (function () {
    function NxDropdownItemComponent(_dropdown, group, _changeDetectorRef, _elementRef) {
        var _this = this;
        this._dropdown = _dropdown;
        this.group = group;
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this._hidden = false;
        this._mostRecentViewValue = '';
        this._id = "nx-dropdown-item-" + nextId++;
        this._selected = false;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        /**
         * Event emitted when the option is selected or deselected.
         */
        // tslint:disable-next-line:no-output-on-prefix
        this.onSelectionChange = new EventEmitter();
        /**
         * Emits when the state of the option changes and any parents have to be notified.
         */
        this._stateChanges = new Subject();
        ((/** @type {?} */ (this._dropdown))).filterChanges.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this._showOrHideByFilter(value);
        }));
        // reset the hidden state when dropdown closes that on next open the user is seeing the full list again
        ((/** @type {?} */ (this._dropdown)))._closedStream.pipe(takeUntil(this._destroy)).subscribe((/**
         * @return {?}
         */
        function () {
            _this._hidden = false;
        }));
    }
    Object.defineProperty(NxDropdownItemComponent.prototype, "id", {
        /** The unique ID of the option. */
        get: /**
         * The unique ID of the option.
         * @return {?}
         */
        function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "selected", {
        /** Whether the item is selected. */
        get: /**
         * Whether the item is selected.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "active", {
        /** Whether the item is active. */
        get: /**
         * Whether the item is active.
         * @return {?}
         */
        function () {
            return this._active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "multiselect", {
        /**
         * @docs-private
         * Whether the parent dropdown is in multiselect mode.
         */
        get: /**
         * \@docs-private
         * Whether the parent dropdown is in multiselect mode.
         * @return {?}
         */
        function () {
            return this._dropdown && this._dropdown.isMultiSelect;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxDropdownItemComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        // Since the parent dropdown component could be using the item's label to display the selected values
        // and it doesn't have a way of knowing if the item's label has changed
        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
        // relatively cheap, however we still limit them only to selected options in order to avoid
        // hitting the DOM too often.
        if (this._selected) {
            /** @type {?} */
            var viewValue = this.viewValue;
            if (viewValue !== this._mostRecentViewValue) {
                this._mostRecentViewValue = viewValue;
                this._stateChanges.next();
            }
        }
    };
    /**
     * @return {?}
     */
    NxDropdownItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._stateChanges.complete();
        this._destroy.next();
        this._destroy.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxDropdownItemComponent.prototype._onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */
        event.preventDefault();
        event.stopPropagation();
        this._selectViaInteraction();
    };
    /**
    * `Selects the option while indicating the selection came from the user. Used to
    * determine if the select's view -> model callback should be invoked.`
    */
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     * @return {?}
     */
    NxDropdownItemComponent.prototype._selectViaInteraction = /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     * @return {?}
     */
    function () {
        this._selected = this.multiselect ? !this._selected : true;
        this._changeDetectorRef.markForCheck();
        this._emitSelectionChangeEvent(true);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.show = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._hidden = false;
        this._changeDetectorRef.markForCheck();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.hide = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._hidden = true;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @private
     * @param {?} search
     * @return {?}
     */
    NxDropdownItemComponent.prototype._showOrHideByFilter = /**
     * @private
     * @param {?} search
     * @return {?}
     */
    function (search) {
        /** @type {?} */
        var constraint = ((/** @type {?} */ (this._dropdown))).filterFn(search, this.viewValue);
        this._hidden = constraint ? false : true;
        this._changeDetectorRef.markForCheck();
    };
    Object.defineProperty(NxDropdownItemComponent.prototype, "_formattedValue", {
        get: /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this._dropdown))).valueFormatter(this.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "viewValue", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this._elementRef.nativeElement.textContent || '').trim();
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.select = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (!this._selected) {
            this._selected = true;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.deselect = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (this._selected) {
            this._selected = false;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.focus = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._elementRef.nativeElement.focus();
    };
    /**
     * @private
     * @param {?=} isUserInput
     * @return {?}
     */
    NxDropdownItemComponent.prototype._emitSelectionChangeEvent = /**
     * @private
     * @param {?=} isUserInput
     * @return {?}
     */
    function (isUserInput) {
        if (isUserInput === void 0) { isUserInput = false; }
        this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.setActiveStyles = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._active = true;
        this._changeDetectorRef.markForCheck();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.setInactiveStyles = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._active = false;
        this._changeDetectorRef.markForCheck();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.getLabel = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    NxDropdownItemComponent.prototype._isContentEmpty = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return element.children.length === 0 && !element.textContent.trim();
    };
    /**
     * @return {?}
     */
    NxDropdownItemComponent.prototype._onLabelChange = /**
     * @return {?}
     */
    function () {
        // trigger change detection when the label content changes for the case that ng-content was empty before.
        // this is also important when the label comes in deferred, e.g. by a delayed observable,
        // then first the default label derived from the value is shown
        // and after the value from the async observable is ready we need to trigger change detection that the derived label
        // gets hidden again.
        // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone
        // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly
        this._changeDetectorRef.detectChanges();
    };
    NxDropdownItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-dropdown-item',
                    template: "<div #container class=\"nx-dropdown-results__option\"\n     [ngClass]=\"{'nx-dropdown-results__option--selected': selected}\">\n\n   <nx-checkbox *ngIf=\"multiselect\" [checked]=\"selected\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </nx-checkbox>\n\n    <span *ngIf=\"!multiselect\" class=\"nx-dropdown-results__option-checkicon\">\n       <nx-icon name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <ng-container *ngIf=\"!multiselect\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </ng-container>\n</div>\n\n<ng-template #contentTemplate>\n  <div class=\"nx-dropdown-results__option-label\" >\n    <span #content (cdkObserveContent)=\"_onLabelChange()\">\n      <ng-content></ng-content>\n    </span>\n    <ng-container *ngIf=\"_isContentEmpty(content)\">\n      {{_formattedValue}}\n    </ng-container>\n  </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[id]': 'id',
                        'role': 'option',
                        '[attr.aria-selected]': 'selected.toString()',
                        '[class.nx-hidden]': '_hidden',
                        '[class.nx-dropdown-item--active]': 'active',
                        '[class.nx-selected]': 'selected',
                        '[class.nx-multiselect]': 'multiselect',
                        '(click)': '_onClick($event)'
                    },
                    styles: [":host{display:block}:host(.nx-hidden){display:none}:host:first-child .nx-dropdown-results__option{padding-top:16px}nx-checkbox{margin-bottom:0}.nx-dropdown-results__option{font-size:20px;line-height:28px;letter-spacing:.2px;padding:0 32px 16px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}.nx-dropdown-results__option-label{overflow:hidden;text-overflow:ellipsis;padding:0 12px;margin:0 -12px}:host(.nx-multiselect) .nx-dropdown-results__option{display:block;padding-left:32px}:host(.nx-multiselect) ::ng-deep .nx-checkbox__label{height:28px;display:flex;align-items:center}:host(.nx-dropdown-item--active),:host:hover{color:#007ab3}@media screen and (-ms-high-contrast:active){:host(.nx-dropdown-item--active),:host:hover{color:highlightText}}:host(.nx-selected) .nx-dropdown-results__option-checkicon{opacity:1}.nx-dropdown-results__option-checkicon{opacity:0;width:16px;height:16px;margin-right:8px}.nx-dropdown-results__option-checkicon nx-icon{font-size:16px}:host-context([data-whatinput=keyboard]).nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host-context([data-whatinput=keyboard]).nx-multiselect.nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label{box-shadow:none}:host-context([data-whatinput=keyboard]).nx-multiselect.nx-dropdown-item--active ::ng-deep .nx-checkbox__label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:24px;margin-left:-24px}:host ::ng-deep .nx-checkbox__label{padding:0 4px;margin:0 -4px}"]
                }] }
    ];
    /** @nocollapse */
    NxDropdownItemComponent.ctorParameters = function () { return [
        { type: NxDropdownControl, decorators: [{ type: Inject, args: [NxDropdownControl,] }] },
        { type: NxDropdownGroupComponent, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    NxDropdownItemComponent.propDecorators = {
        value: [{ type: Input, args: ['nxValue',] }],
        onSelectionChange: [{ type: Output }],
        containerElement: [{ type: ViewChild, args: ['container',] }]
    };
    return NxDropdownItemComponent;
}());
export { NxDropdownItemComponent };
if (false) {
    /** @type {?} */
    NxDropdownItemComponent.prototype._hidden;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._mostRecentViewValue;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._id;
    /**
     * The value of the dropdown item.
     * You can't use undefined, null and '' (empty strings)
     * as they are sentinel values signalling empty data.
     * @type {?}
     */
    NxDropdownItemComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._active;
    /**
     * Emits whenever the component is destroyed.
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._destroy;
    /**
     * Event emitted when the option is selected or deselected.
     * @type {?}
     */
    NxDropdownItemComponent.prototype.onSelectionChange;
    /**
     * Emits when the state of the option changes and any parents have to be notified.
     * @type {?}
     */
    NxDropdownItemComponent.prototype._stateChanges;
    /**
     * \@docs-private
     * The wrapping div in the template. Used by dropdown to use the container height for scrolling.
     * @type {?}
     */
    NxDropdownItemComponent.prototype.containerElement;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._dropdown;
    /**
     * \@docs-private
     * @type {?}
     */
    NxDropdownItemComponent.prototype.group;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24taXRlbS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsiZHJvcGRvd24vaXRlbS9kcm9wZG93bi1pdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUVMLFFBQVEsRUFDUixNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3JFO0lBRUUsOEJBRVMsSUFBNkIsRUFFN0IsV0FBbUI7UUFBbkIsNEJBQUEsRUFBQSxtQkFBbUI7UUFGbkIsU0FBSSxHQUFKLElBQUksQ0FBeUI7UUFFN0IsZ0JBQVcsR0FBWCxXQUFXLENBQVE7SUFBSSxDQUFDO0lBQ25DLDJCQUFDO0FBQUQsQ0FBQyxBQVBELElBT0M7Ozs7Ozs7SUFIRyxvQ0FBb0M7Ozs7O0lBRXBDLDJDQUEwQjs7Ozs7O0lBSTFCLE1BQU0sR0FBRyxDQUFDO0FBR2Q7SUF5RUUsaUNBQ3FDLFNBQTRCLEVBRTFDLEtBQStCLEVBQzVDLGtCQUFxQyxFQUNyQyxXQUF1QjtRQUxqQyxpQkFhQztRQVpvQyxjQUFTLEdBQVQsU0FBUyxDQUFtQjtRQUUxQyxVQUFLLEdBQUwsS0FBSyxDQUEwQjtRQUM1Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBQ3JDLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBM0RqQyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRVIseUJBQW9C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ekIsMkNBQWdEOzs7OztJQUloRCxvREFBZ0Y7Ozs7O0lBR2hGLGdEQUE2Qzs7Ozs7O0lBTTdDLG1EQUF5Qzs7Ozs7SUFHdkMsNENBQStEOzs7OztJQUUvRCx3Q0FBb0Q7Ozs7O0lBQ3BELHFEQUE2Qzs7Ozs7SUFDN0MsOENBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGlnaGxpZ2h0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7XG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTnhEcm9wZG93bkNvbXBvbmVudCB9IGZyb20gJy4uL2Ryb3Bkb3duJztcbmltcG9ydCB7IE54RHJvcGRvd25Db250cm9sIH0gZnJvbSAnLi4vZHJvcGRvd24uY29udHJvbCc7XG5pbXBvcnQgeyBOeERyb3Bkb3duR3JvdXBDb21wb25lbnQgfSBmcm9tICcuLy4uL2dyb3VwL2Ryb3Bkb3duLWdyb3VwJztcblxuXG5leHBvcnQgY2xhc3MgTnhEcm9wZG93bkl0ZW1DaGFuZ2Uge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIG9wdGlvbiB0aGF0IGVtaXR0ZWQgdGhlIGV2ZW50LiAqL1xuICAgIHB1YmxpYyBpdGVtOiBOeERyb3Bkb3duSXRlbUNvbXBvbmVudCxcbiAgICAvKiogV2hldGhlciB0aGUgY2hhbmdlIGluIHRoZSBvcHRpb24ncyB2YWx1ZSB3YXMgYSByZXN1bHQgb2YgYSB1c2VyIGFjdGlvbi4gKi9cbiAgICBwdWJsaWMgaXNVc2VySW5wdXQgPSBmYWxzZSkgeyB9XG59XG5cbi8qKiB0aGUgdW5pcXVlIGlkIGNvdW50ZXIgKi9cbmxldCBuZXh0SWQgPSAwO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LWRyb3Bkb3duLWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJ2Ryb3Bkb3duLWl0ZW0uaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFtcbiAgICAnZHJvcGRvd24taXRlbS5zY3NzJ1xuICBdLFxuICBob3N0OiB7XG4gICAgJ1tpZF0nOiAnaWQnLFxuICAgICdyb2xlJzogJ29wdGlvbicsXG4gICAgJ1thdHRyLmFyaWEtc2VsZWN0ZWRdJzogJ3NlbGVjdGVkLnRvU3RyaW5nKCknLFxuICAgICdbY2xhc3MubngtaGlkZGVuXSc6ICdfaGlkZGVuJyxcbiAgICAnW2NsYXNzLm54LWRyb3Bkb3duLWl0ZW0tLWFjdGl2ZV0nOiAnYWN0aXZlJyxcbiAgICAnW2NsYXNzLm54LXNlbGVjdGVkXSc6ICdzZWxlY3RlZCcsXG4gICAgJ1tjbGFzcy5ueC1tdWx0aXNlbGVjdF0nOiAnbXVsdGlzZWxlY3QnLFxuICAgICcoY2xpY2spJzogJ19vbkNsaWNrKCRldmVudCknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhEcm9wZG93bkl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBIaWdobGlnaHRhYmxlLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0NoZWNrZWQge1xuICBfaGlkZGVuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfbW9zdFJlY2VudFZpZXdWYWx1ZSA9ICcnO1xuXG4gIHByaXZhdGUgX2lkID0gYG54LWRyb3Bkb3duLWl0ZW0tJHtuZXh0SWQrK31gO1xuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGRyb3Bkb3duIGl0ZW0uXG4gICAqIFlvdSBjYW4ndCB1c2UgdW5kZWZpbmVkLCBudWxsIGFuZCAnJyAoZW1wdHkgc3RyaW5ncylcbiAgICogYXMgdGhleSBhcmUgc2VudGluZWwgdmFsdWVzIHNpZ25hbGxpbmcgZW1wdHkgZGF0YS5cbiAgICovXG4gIEBJbnB1dCgnbnhWYWx1ZScpIHZhbHVlO1xuXG4gIC8qKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBvcHRpb24uICovXG4gIGdldCBpZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5faWQ7IH1cblxuICBwcml2YXRlIF9zZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBpdGVtIGlzIHNlbGVjdGVkLiAqL1xuICBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfYWN0aXZlOiBib29sZWFuO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBpdGVtIGlzIGFjdGl2ZS4gKi9cbiAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkb2NzLXByaXZhdGVcbiAgICogV2hldGhlciB0aGUgcGFyZW50IGRyb3Bkb3duIGlzIGluIG11bHRpc2VsZWN0IG1vZGUuXG4gICAqL1xuICBnZXQgbXVsdGlzZWxlY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Ryb3Bkb3duICYmIHRoaXMuX2Ryb3Bkb3duLmlzTXVsdGlTZWxlY3Q7XG4gIH1cblxuICAvKiogRW1pdHMgd2hlbmV2ZXIgdGhlIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIG9wdGlvbiBpcyBzZWxlY3RlZCBvciBkZXNlbGVjdGVkLiAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tb3V0cHV0LW9uLXByZWZpeFxuICBAT3V0cHV0KCkgcmVhZG9ubHkgb25TZWxlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE54RHJvcGRvd25JdGVtQ2hhbmdlPigpO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBzdGF0ZSBvZiB0aGUgb3B0aW9uIGNoYW5nZXMgYW5kIGFueSBwYXJlbnRzIGhhdmUgdG8gYmUgbm90aWZpZWQuICovXG4gIHJlYWRvbmx5IF9zdGF0ZUNoYW5nZXMgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKlxuICAgKiBAZG9jcy1wcml2YXRlXG4gICAqIFRoZSB3cmFwcGluZyBkaXYgaW4gdGhlIHRlbXBsYXRlLiBVc2VkIGJ5IGRyb3Bkb3duIHRvIHVzZSB0aGUgY29udGFpbmVyIGhlaWdodCBmb3Igc2Nyb2xsaW5nLlxuICAgKi9cbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJykgY29udGFpbmVyRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE54RHJvcGRvd25Db250cm9sKSBwcml2YXRlIF9kcm9wZG93bjogTnhEcm9wZG93bkNvbnRyb2wsXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBAT3B0aW9uYWwoKSByZWFkb25seSBncm91cDogTnhEcm9wZG93bkdyb3VwQ29tcG9uZW50LFxuICAgIHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgKHRoaXMuX2Ryb3Bkb3duIGFzIE54RHJvcGRvd25Db21wb25lbnQpLmZpbHRlckNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveSkpLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuX3Nob3dPckhpZGVCeUZpbHRlcih2YWx1ZSk7XG4gICAgfSk7XG4gICAgLy8gcmVzZXQgdGhlIGhpZGRlbiBzdGF0ZSB3aGVuIGRyb3Bkb3duIGNsb3NlcyB0aGF0IG9uIG5leHQgb3BlbiB0aGUgdXNlciBpcyBzZWVpbmcgdGhlIGZ1bGwgbGlzdCBhZ2FpblxuICAgICh0aGlzLl9kcm9wZG93biBhcyBOeERyb3Bkb3duQ29tcG9uZW50KS5fY2xvc2VkU3RyZWFtLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gICAgLy8gU2luY2UgdGhlIHBhcmVudCBkcm9wZG93biBjb21wb25lbnQgY291bGQgYmUgdXNpbmcgdGhlIGl0ZW0ncyBsYWJlbCB0byBkaXNwbGF5IHRoZSBzZWxlY3RlZCB2YWx1ZXNcbiAgICAvLyBhbmQgaXQgZG9lc24ndCBoYXZlIGEgd2F5IG9mIGtub3dpbmcgaWYgdGhlIGl0ZW0ncyBsYWJlbCBoYXMgY2hhbmdlZFxuICAgIC8vIHdlIGhhdmUgdG8gY2hlY2sgZm9yIGNoYW5nZXMgaW4gdGhlIERPTSBvdXJzZWx2ZXMgYW5kIGRpc3BhdGNoIGFuIGV2ZW50LiBUaGVzZSBjaGVja3MgYXJlXG4gICAgLy8gcmVsYXRpdmVseSBjaGVhcCwgaG93ZXZlciB3ZSBzdGlsbCBsaW1pdCB0aGVtIG9ubHkgdG8gc2VsZWN0ZWQgb3B0aW9ucyBpbiBvcmRlciB0byBhdm9pZFxuICAgIC8vIGhpdHRpbmcgdGhlIERPTSB0b28gb2Z0ZW4uXG4gICAgaWYgKHRoaXMuX3NlbGVjdGVkKSB7XG4gICAgICBjb25zdCB2aWV3VmFsdWUgPSB0aGlzLnZpZXdWYWx1ZTtcblxuICAgICAgaWYgKHZpZXdWYWx1ZSAhPT0gdGhpcy5fbW9zdFJlY2VudFZpZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLl9tb3N0UmVjZW50Vmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuICAgICAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5jb21wbGV0ZSgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kuY29tcGxldGUoKTtcbiAgfVxuXG4gIF9vbkNsaWNrKGV2ZW50KSB7XG4gICAgLyogcHJldmVudERlZmF1bHQgdG8gc3RvcCB0cmlnZ2VyaW5nIHRoZSBldmVudCB0d2ljZSB3aGVuIHlvdSBjbGljayBvbiB0aGUgY2hlY2tib3ggb3IgdGhlIGxhYmVsIGluc2lkZSB0aGUgaXRlbSAqL1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5fc2VsZWN0VmlhSW50ZXJhY3Rpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAqIGBTZWxlY3RzIHRoZSBvcHRpb24gd2hpbGUgaW5kaWNhdGluZyB0aGUgc2VsZWN0aW9uIGNhbWUgZnJvbSB0aGUgdXNlci4gVXNlZCB0b1xuICAqIGRldGVybWluZSBpZiB0aGUgc2VsZWN0J3MgdmlldyAtPiBtb2RlbCBjYWxsYmFjayBzaG91bGQgYmUgaW52b2tlZC5gXG4gICovXG4gIF9zZWxlY3RWaWFJbnRlcmFjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLl9zZWxlY3RlZCA9IHRoaXMubXVsdGlzZWxlY3QgPyAhdGhpcy5fc2VsZWN0ZWQgOiB0cnVlO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIHRoaXMuX2VtaXRTZWxlY3Rpb25DaGFuZ2VFdmVudCh0cnVlKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHNob3coKSB7XG4gICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBoaWRlKCkge1xuICAgIHRoaXMuX2hpZGRlbiA9IHRydWU7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBwcml2YXRlIF9zaG93T3JIaWRlQnlGaWx0ZXIoc2VhcmNoKSB7XG4gICAgY29uc3QgY29uc3RyYWludCA9ICh0aGlzLl9kcm9wZG93biBhcyBOeERyb3Bkb3duQ29tcG9uZW50KS5maWx0ZXJGbihzZWFyY2gsIHRoaXMudmlld1ZhbHVlKTtcbiAgICB0aGlzLl9oaWRkZW4gPSBjb25zdHJhaW50ID8gZmFsc2UgOiB0cnVlO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgZ2V0IF9mb3JtYXR0ZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2Ryb3Bkb3duIGFzIE54RHJvcGRvd25Db21wb25lbnQpLnZhbHVlRm9ybWF0dGVyKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IHZpZXdWYWx1ZSgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudCB8fCAnJykudHJpbSgpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgc2VsZWN0KCkge1xuICAgIGlmICghdGhpcy5fc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuX3NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgdGhpcy5fZW1pdFNlbGVjdGlvbkNoYW5nZUV2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZGVzZWxlY3QoKSB7XG4gICAgaWYgKHRoaXMuX3NlbGVjdGVkKSB7XG4gICAgICB0aGlzLl9zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB0aGlzLl9lbWl0U2VsZWN0aW9uQ2hhbmdlRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBmb2N1cygpOiB2b2lkIHtcbiAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2VtaXRTZWxlY3Rpb25DaGFuZ2VFdmVudChpc1VzZXJJbnB1dDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgdGhpcy5vblNlbGVjdGlvbkNoYW5nZS5lbWl0KG5ldyBOeERyb3Bkb3duSXRlbUNoYW5nZSh0aGlzLCBpc1VzZXJJbnB1dCkpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgc2V0QWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBzZXRJbmFjdGl2ZVN0eWxlcygpOiB2b2lkIHtcbiAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGdldExhYmVsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cblxuICBfaXNDb250ZW50RW1wdHkoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiAhZWxlbWVudC50ZXh0Q29udGVudC50cmltKCk7XG4gIH1cblxuICBfb25MYWJlbENoYW5nZSgpIHtcbiAgICAvLyB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb24gd2hlbiB0aGUgbGFiZWwgY29udGVudCBjaGFuZ2VzIGZvciB0aGUgY2FzZSB0aGF0IG5nLWNvbnRlbnQgd2FzIGVtcHR5IGJlZm9yZS5cbiAgICAvLyB0aGlzIGlzIGFsc28gaW1wb3J0YW50IHdoZW4gdGhlIGxhYmVsIGNvbWVzIGluIGRlZmVycmVkLCBlLmcuIGJ5IGEgZGVsYXllZCBvYnNlcnZhYmxlLFxuICAgIC8vIHRoZW4gZmlyc3QgdGhlIGRlZmF1bHQgbGFiZWwgZGVyaXZlZCBmcm9tIHRoZSB2YWx1ZSBpcyBzaG93blxuICAgIC8vIGFuZCBhZnRlciB0aGUgdmFsdWUgZnJvbSB0aGUgYXN5bmMgb2JzZXJ2YWJsZSBpcyByZWFkeSB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIGRldGVjdGlvbiB0aGF0IHRoZSBkZXJpdmVkIGxhYmVsXG4gICAgLy8gZ2V0cyBoaWRkZW4gYWdhaW4uXG4gICAgLy8gTm90aWNlKCEpOiB0aGUgZXZlbnQgb2YgKGNka09ic2VydmVDb250ZW50KSBpcyBydW4gb3V0c2lkZSBvZiB0aGUgbmdab25lXG4gICAgLy8gV2UgcnVuIGRldGVjdENoYW5nZXMgZGlyZWN0bHkgaGVyZSBhcyBtYXJrRm9yQ2hlY2sgd2Fzbid0IGVub3VnaCB0byBhbHdheXMgdHJpZ2dlciBjaGFuZ2UgZGV0ZWN0aW9uIGNvcnJlY3RseVxuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIl19