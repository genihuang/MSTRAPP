/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FocusKeyManager } from '@angular/cdk/a11y';
import { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, EventEmitter, Input, Output, QueryList, } from '@angular/core';
import { NxTabLabelDirective } from './tab-label';
/**
 * \@docs-private
 */
var NxTabHeaderComponent = /** @class */ (function () {
    function NxTabHeaderComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._selectedIndex = 0;
        this._autoselect = true;
        this.selectFocusedIndex = new EventEmitter();
        this.indexFocused = new EventEmitter();
    }
    Object.defineProperty(NxTabHeaderComponent.prototype, "selectedIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedIndex;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectedIndex = value;
            if (this._keyManager) {
                this._keyManager.updateActiveItemIndex(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTabHeaderComponent.prototype, "focusIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._keyManager ? this._keyManager.activeItemIndex : 0;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {
                return;
            }
            this._keyManager.setActiveItem(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTabHeaderComponent.prototype, "autoselect", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoselect;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoselect = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxTabHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    NxTabHeaderComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._keyManager = new FocusKeyManager(this.labels).withHorizontalOrientation('ltr').withWrap();
        this._keyManager.updateActiveItemIndex(0);
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    NxTabHeaderComponent.prototype._isValidIndex = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        if (!this.labels) {
            return true;
        }
        return !!this.labels.toArray()[idx];
    };
    /**
     * Handles keyboard inputs on the labels
     * If autoselect is enabled the tab gets changed immediately
     * If autoselect is disabled only the focus changes but the user still has to select the item
     * by himself
     */
    /**
     * Handles keyboard inputs on the labels
     * If autoselect is enabled the tab gets changed immediately
     * If autoselect is disabled only the focus changes but the user still has to select the item
     * by himself
     * @param {?} event
     * @return {?}
     */
    NxTabHeaderComponent.prototype.handleKeydown = /**
     * Handles keyboard inputs on the labels
     * If autoselect is enabled the tab gets changed immediately
     * If autoselect is disabled only the focus changes but the user still has to select the item
     * by himself
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            case HOME:
                this._keyManager.setFirstItemActive();
                event.preventDefault();
                break;
            case END:
                this._keyManager.setLastItemActive();
                event.preventDefault();
                break;
            case ENTER:
            case SPACE:
                this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);
                event.preventDefault();
                break;
            default:
                this._keyManager.onKeydown(event);
        }
        if (this.autoselect) {
            this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);
        }
        else if (event.keyCode !== ENTER && event.keyCode !== SPACE) {
            this.indexFocused.emit(this._keyManager.activeItemIndex);
        }
    };
    NxTabHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tab-header',
                    template: "<div class=\"nx-tab-header\" (keydown)=\"handleKeydown($event)\" role=\"tablist\">\n  <ng-content></ng-content>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-tab-header{display:flex;align-items:flex-end;justify-content:center;padding:60px 0}"]
                }] }
    ];
    /** @nocollapse */
    NxTabHeaderComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxTabHeaderComponent.propDecorators = {
        selectedIndex: [{ type: Input }],
        autoselect: [{ type: Input }],
        selectFocusedIndex: [{ type: Output }],
        indexFocused: [{ type: Output }],
        labels: [{ type: ContentChildren, args: [NxTabLabelDirective,] }]
    };
    return NxTabHeaderComponent;
}());
export { NxTabHeaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderComponent.prototype._keyManager;
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderComponent.prototype._selectedIndex;
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderComponent.prototype._autoselect;
    /** @type {?} */
    NxTabHeaderComponent.prototype.selectFocusedIndex;
    /** @type {?} */
    NxTabHeaderComponent.prototype.indexFocused;
    /** @type {?} */
    NxTabHeaderComponent.prototype.labels;
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,