/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Directive, ChangeDetectionStrategy, Optional, SkipSelf, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
var NxTabNavBarComponent = /** @class */ (function () {
    function NxTabNavBarComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._negative = false;
    }
    Object.defineProperty(NxTabNavBarComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the tab nav bar has negative styling. */
        set: /**
         * Whether the tab nav bar has negative styling.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this.negative) {
                this._negative = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxTabNavBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tab-nav-bar',
                    template: "<ng-content></ng-content>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.is-negative]': 'negative',
                        'role': 'navigation',
                    },
                    styles: [":host{display:flex;align-items:flex-end;justify-content:center}:host ::ng-deep a.nx-tab-link{text-decoration:none;border:none;background:0 0;color:#006192;border-bottom:2px solid #007ab3;padding:0 16px 6px;font-weight:400;font-size:18px;line-height:24px}:host ::ng-deep a.nx-tab-link.is-active{border-width:4px;font-weight:700;transition:font-weight .3s;padding-bottom:4px}:host(.is-negative){color:#fff}:host(.is-negative) ::ng-deep a.nx-tab-link{color:#fff;border-bottom-color:#fff}:host-context([data-whatinput=keyboard]) nx-tab-link:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}"]
                }] }
    ];
    /** @nocollapse */
    NxTabNavBarComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxTabNavBarComponent.propDecorators = {
        negative: [{ type: Input }]
    };
    return NxTabNavBarComponent;
}());
export { NxTabNavBarComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabNavBarComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxTabNavBarComponent.prototype._changeDetectorRef;
}
var NxTabLinkDirective = /** @class */ (function () {
    function NxTabLinkDirective(_tabNavBar) {
        this._tabNavBar = _tabNavBar;
        this._active = false;
        if (!this._tabNavBar) {
            throw Error("The nx-tab-link element has to be wrapped in a nx-tab-nav-bar to work.");
        }
    }
    Object.defineProperty(NxTabLinkDirective.prototype, "active", {
        /** Whether the tab link is active and has the active styling. */
        get: /**
         * Whether the tab link is active and has the active styling.
         * @return {?}
         */
        function () {
            return this._active;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._active) {
                this._active = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    NxTabLinkDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxTabLink]',
                    host: {
                        '[class.nx-tab-link]': 'true',
                        '[class.is-active]': 'active',
                        '[attr.aria-current]': 'active',
                    }
                },] }
    ];
    /** @nocollapse */
    NxTabLinkDirective.ctorParameters = function () { return [
        { type: NxTabNavBarComponent, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    NxTabLinkDirective.propDecorators = {
        active: [{ type: Input }]
    };
    return NxTabLinkDirective;
}());
export { NxTabLinkDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabLinkDirective.prototype._active;
    /**
     * @type {?}
     * @private
     */
    NxTabLinkDirective.prototype._tabNavBar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLW5hdi1iYXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInRhYnMvdGFiLW5hdi1iYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTlEO0lBNEJFLDhCQUFvQixrQkFBcUM7UUFBckMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQWhCakQsY0FBUyxHQUFZLEtBQUssQ0FBQztJQWdCeUIsQ0FBQztJQWI3RCxzQkFDSSwwQ0FBUTs7OztRQVFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFaRCxvREFBb0Q7Ozs7OztRQUNwRCxVQUNhLEtBQWM7O2dCQUNuQixRQUFRLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDO1lBQzdDLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO2dCQUMxQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDeEM7UUFDSCxDQUFDOzs7T0FBQTs7Z0JBdEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixxQ0FBK0I7b0JBRS9CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUU7d0JBQ0oscUJBQXFCLEVBQUUsVUFBVTt3QkFDakMsTUFBTSxFQUFFLFlBQVk7cUJBQ3JCOztpQkFDRjs7OztnQkFaa0YsaUJBQWlCOzs7MkJBa0JqRyxLQUFLOztJQWVSLDJCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0FwQlksb0JBQW9COzs7Ozs7SUFFL0IseUNBQW1DOzs7OztJQWdCdkIsa0RBQTZDOztBQUkzRDtJQXdCRSw0QkFDa0MsVUFBZ0M7UUFBaEMsZUFBVSxHQUFWLFVBQVUsQ0FBc0I7UUFmMUQsWUFBTyxHQUFZLEtBQUssQ0FBQztRQWdCL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsTUFBTSxLQUFLLENBQUMsd0VBQXdFLENBQUMsQ0FBQztTQUN2RjtJQUNILENBQUM7SUFoQkQsc0JBQ0ksc0NBQU07UUFGVixpRUFBaUU7Ozs7O1FBQ2pFO1lBRUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7Ozs7O1FBQ0QsVUFBVyxLQUFjOztnQkFDakIsUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQztZQUM3QyxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzthQUN0QjtRQUNILENBQUM7OztPQU5BOztnQkFoQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixJQUFJLEVBQUU7d0JBQ0oscUJBQXFCLEVBQUUsTUFBTTt3QkFDN0IsbUJBQW1CLEVBQUUsUUFBUTt3QkFDN0IscUJBQXFCLEVBQUUsUUFBUTtxQkFDaEM7aUJBQ0Y7Ozs7Z0JBa0IrQyxvQkFBb0IsdUJBQS9ELFFBQVEsWUFBSSxRQUFROzs7eUJBWnRCLEtBQUs7O0lBaUJSLHlCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0F0Qlksa0JBQWtCOzs7Ozs7SUFFN0IscUNBQWlDOzs7OztJQWUvQix3Q0FBZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBEaXJlY3RpdmUsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBPcHRpb25hbCwgU2tpcFNlbGYsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC10YWItbmF2LWJhcicsXG4gIHRlbXBsYXRlVXJsOiAndGFiLW5hdi1iYXIuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhYi1uYXYtYmFyLnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmlzLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gICAgJ3JvbGUnOiAnbmF2aWdhdGlvbicsXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhUYWJOYXZCYXJDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX25lZ2F0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIHRhYiBuYXYgYmFyIGhhcyBuZWdhdGl2ZSBzdHlsaW5nLiAqL1xuICBASW5wdXQoKVxuICBzZXQgbmVnYXRpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSB0aGlzLm5lZ2F0aXZlKSB7XG4gICAgICB0aGlzLl9uZWdhdGl2ZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG5lZ2F0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl9uZWdhdGl2ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbnhUYWJMaW5rXScsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm54LXRhYi1saW5rXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmlzLWFjdGl2ZV0nOiAnYWN0aXZlJyxcbiAgICAnW2F0dHIuYXJpYS1jdXJyZW50XSc6ICdhY3RpdmUnLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54VGFiTGlua0RpcmVjdGl2ZSB7XG5cbiAgcHJpdmF0ZSBfYWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIHRhYiBsaW5rIGlzIGFjdGl2ZSBhbmQgaGFzIHRoZSBhY3RpdmUgc3R5bGluZy4gKi9cbiAgQElucHV0KClcbiAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG4gIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSB0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHByaXZhdGUgX3RhYk5hdkJhcjogTnhUYWJOYXZCYXJDb21wb25lbnQpIHtcbiAgICBpZiAoIXRoaXMuX3RhYk5hdkJhcikge1xuICAgICAgdGhyb3cgRXJyb3IoYFRoZSBueC10YWItbGluayBlbGVtZW50IGhhcyB0byBiZSB3cmFwcGVkIGluIGEgbngtdGFiLW5hdi1iYXIgdG8gd29yay5gKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==