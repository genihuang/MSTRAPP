/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/**
 * Option selected event
 */
var /**
 * Option selected event
 */
NxAutocompleteOptionSelected = /** @class */ (function () {
    function NxAutocompleteOptionSelected(source, isUserInput) {
        if (isUserInput === void 0) { isUserInput = false; }
        this.source = source;
        this.isUserInput = isUserInput;
    }
    return NxAutocompleteOptionSelected;
}());
/**
 * Option selected event
 */
export { NxAutocompleteOptionSelected };
if (false) {
    /**
     * The option that is selected or deselected.
     * @type {?}
     */
    NxAutocompleteOptionSelected.prototype.source;
    /**
     * Whether the input was triggered by the user.
     * @type {?}
     */
    NxAutocompleteOptionSelected.prototype.isUserInput;
}
/**
 * Option IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 * @type {?}
 */
var _uniqueIdCounter = 0;
var NxAutocompleteOptionComponent = /** @class */ (function () {
    function NxAutocompleteOptionComponent(elementRef, _changeDetectorRef) {
        this.elementRef = elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._id = "nx-autocomplete-option-" + _uniqueIdCounter++;
        this._selected = false;
        this._active = false;
        this._disabled = false;
        /**
         * Event emitted when the option is selected or deselected.
         */
        this.onSelectionChange = new EventEmitter();
    }
    Object.defineProperty(NxAutocompleteOptionComponent.prototype, "id", {
        /** Id of the autocomplete option. By default it is set to an incremented value. */
        get: /**
         * Id of the autocomplete option. By default it is set to an incremented value.
         * @return {?}
         */
        function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxAutocompleteOptionComponent.prototype, "selected", {
        /** Whether or not the option is currently selected. */
        get: /**
         * Whether or not the option is currently selected.
         * @return {?}
         */
        function () { return this._selected; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxAutocompleteOptionComponent.prototype, "active", {
        /**
         * Whether or not the option is currently active and ready to be selected.
         * An active option displays styles as if it is focused, but the
         * focus is actually retained somewhere else. This comes in handy
         * for components like autocomplete where focus must remain on the input.
         */
        get: /**
         * Whether or not the option is currently active and ready to be selected.
         * An active option displays styles as if it is focused, but the
         * focus is actually retained somewhere else. This comes in handy
         * for components like autocomplete where focus must remain on the input.
         * @return {?}
         */
        function () {
            return this._active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxAutocompleteOptionComponent.prototype, "disabled", {
        /** Whether the option is disabled. */
        get: /**
         * Whether the option is disabled.
         * @return {?}
         */
        function () { return this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this._disabled !== newValue) {
                this._disabled = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    /** Ensures the option is selected when activated from the keyboard. */
    /**
     * Ensures the option is selected when activated from the keyboard.
     * @param {?} event
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype._handleKeydown = /**
     * Ensures the option is selected when activated from the keyboard.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === ENTER || event.keyCode === SPACE) {
            this._selectViaInteraction();
            // Prevent the page from scrolling down and form submits.
            event.preventDefault();
        }
    };
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype._selectViaInteraction = /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this._selected = true;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent(true);
        }
    };
    /** Returns the correct tabindex for the option depending on disabled state. */
    /**
     * Returns the correct tabindex for the option depending on disabled state.
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype._getTabIndex = /**
     * Returns the correct tabindex for the option depending on disabled state.
     * @return {?}
     */
    function () {
        return this.disabled ? '-1' : '0';
    };
    /** Emits the selection change event. */
    /**
     * Emits the selection change event.
     * @private
     * @param {?=} isUserInput
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype._emitSelectionChangeEvent = /**
     * Emits the selection change event.
     * @private
     * @param {?=} isUserInput
     * @return {?}
     */
    function (isUserInput) {
        if (isUserInput === void 0) { isUserInput = false; }
        this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));
    };
    Object.defineProperty(NxAutocompleteOptionComponent.prototype, "viewValue", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.elementRef.nativeElement.textContent || '').trim();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @docs-private
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    /**
     * \@docs-private
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype.setActiveStyles = /**
     * \@docs-private
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     * @return {?}
     */
    function () {
        if (!this._active) {
            this._active = true;
            this._changeDetectorRef.markForCheck();
        }
    };
    /**
     * @docs-private
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    /**
     * \@docs-private
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype.setInactiveStyles = /**
     * \@docs-private
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     * @return {?}
     */
    function () {
        if (this._active) {
            this._active = false;
            this._changeDetectorRef.markForCheck();
        }
    };
    /**
     * @docs-private
     * Gets the label to be used when determining whether the option should be focused.
     */
    /**
     * \@docs-private
     * Gets the label to be used when determining whether the option should be focused.
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype.getLabel = /**
     * \@docs-private
     * Gets the label to be used when determining whether the option should be focused.
     * @return {?}
     */
    function () {
        return this.viewValue;
    };
    /** Selects the option. */
    /**
     * Selects the option.
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype.select = /**
     * Selects the option.
     * @return {?}
     */
    function () {
        this._selected = true;
        this._changeDetectorRef.markForCheck();
        this._emitSelectionChangeEvent();
    };
    /** Deselects the option. */
    /**
     * Deselects the option.
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype.deselect = /**
     * Deselects the option.
     * @return {?}
     */
    function () {
        this._selected = false;
        this._changeDetectorRef.markForCheck();
        this._emitSelectionChangeEvent();
    };
    /**
     * @docs-private
     * Sets focus onto this option.
     */
    /**
     * \@docs-private
     * Sets focus onto this option.
     * @return {?}
     */
    NxAutocompleteOptionComponent.prototype.focus = /**
     * \@docs-private
     * Sets focus onto this option.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.elementRef.nativeElement;
        if (typeof element.focus === 'function') {
            element.focus();
        }
    };
    NxAutocompleteOptionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-autocomplete-option',
                    template: "<div class=\"nx-autocomplete-option\" [class.nx-active]=\"active\">\n  <div class=\"nx-autocomplete-option__label\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    host: {
                        'role': 'option',
                        '[attr.tabindex]': '_getTabIndex()',
                        '[id]': 'id',
                        '[attr.aria-selected]': 'selected.toString()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '(click)': '_selectViaInteraction()',
                        '(keydown)': '_handleKeydown($event)',
                        '[class.nx-active]': 'active',
                        '[class.nx-disabled]': 'disabled',
                        '[style.display]': '\'block\'' // needed for to be able to calculate offset height
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host:focus{outline:0}.nx-autocomplete-option{font-size:20px;line-height:28px;letter-spacing:.2px;padding:0 32px 16px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}.nx-autocomplete-option.nx-active,.nx-autocomplete-option:hover{color:#007ab3}@media screen and (-ms-high-contrast:active){.nx-autocomplete-option.nx-active,.nx-autocomplete-option:hover{color:highlightText}}.nx-autocomplete-option__label{overflow:hidden;text-overflow:ellipsis;padding:0 12px;margin:0 -12px}:host-context([data-whatinput=keyboard]) .nx-autocomplete-option.nx-active .nx-autocomplete-option__label{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                }] }
    ];
    /** @nocollapse */
    NxAutocompleteOptionComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NxAutocompleteOptionComponent.propDecorators = {
        disabled: [{ type: Input }],
        value: [{ type: Input }],
        onSelectionChange: [{ type: Output }]
    };
    return NxAutocompleteOptionComponent;
}());
export { NxAutocompleteOptionComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteOptionComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteOptionComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteOptionComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteOptionComponent.prototype._disabled;
    /**
     * The value of the autocomplete option.
     * @type {?}
     */
    NxAutocompleteOptionComponent.prototype.value;
    /**
     * Event emitted when the option is selected or deselected.
     * @type {?}
     */
    NxAutocompleteOptionComponent.prototype.onSelectionChange;
    /**
     * \@docs-private
     * @type {?}
     */
    NxAutocompleteOptionComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteOptionComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,