/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NX_NATIVE_DATE_FORMATS } from './native-date-formats';
import { NxNativeDateAdapter } from './native-date-adapter';
import { NX_DATE_FORMATS } from './date-formats';
import { NgModule } from '@angular/core';
import { LOCALE_ID } from '@angular/core';
import { NxDateAdapter } from './date-adapter';
import { NX_DATE_LOCALE } from './date-token';
import { PlatformModule } from '@angular/cdk/platform';
/** @type {?} */
export var NX_DATE_LOCALE_PROVIDER = { provide: NX_DATE_LOCALE, useExisting: LOCALE_ID };
export { NX_DATE_LOCALE } from './date-token';
export { NxDateAdapter } from './date-adapter';
export { NX_DATE_FORMATS } from './date-formats';
export { NxNativeDateAdapter } from './native-date-adapter';
export { NX_NATIVE_DATE_FORMATS } from './native-date-formats';
var NativeDateModule = /** @class */ (function () {
    function NativeDateModule() {
    }
    NativeDateModule.decorators = [
        { type: NgModule, args: [{
                    imports: [PlatformModule],
                    providers: [
                        { provide: NxDateAdapter, useClass: NxNativeDateAdapter },
                        NX_DATE_LOCALE_PROVIDER
                    ],
                },] }
    ];
    return NativeDateModule;
}());
export { NativeDateModule };
var ɵ0 = NX_NATIVE_DATE_FORMATS;
var NxNativeDateModule = /** @class */ (function () {
    function NxNativeDateModule() {
    }
    NxNativeDateModule.decorators = [
        { type: NgModule, args: [{
                    imports: [NativeDateModule],
                    providers: [{ provide: NX_DATE_FORMATS, useValue: ɵ0 }],
                },] }
    ];
    return NxNativeDateModule;
}());
export { NxNativeDateModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9kYXRlZmllbGQvIiwic291cmNlcyI6WyJhZGFwdGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQWlCLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU5QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRXZELE1BQU0sS0FBTyx1QkFBdUIsR0FBRyxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQztBQUV4RiwrQkFBYyxjQUFjLENBQUM7QUFDN0IsOEJBQWMsZ0JBQWdCLENBQUM7QUFDL0IsZ0NBQWMsZ0JBQWdCLENBQUM7QUFFL0Isb0NBQWMsdUJBQXVCLENBQUM7QUFDdEMsdUNBQWMsdUJBQXVCLENBQUM7QUFHdEM7SUFBQTtJQU8rQixDQUFDOztnQkFQL0IsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztvQkFDekIsU0FBUyxFQUFFO3dCQUNULEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUM7d0JBQ3ZELHVCQUF1QjtxQkFDeEI7aUJBQ0Y7O0lBQzhCLHVCQUFDO0NBQUEsQUFQaEMsSUFPZ0M7U0FBbkIsZ0JBQWdCO1NBS3NCLHNCQUFzQjtBQUZ6RTtJQUFBO0lBSWlDLENBQUM7O2dCQUpqQyxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQzNCLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLElBQXdCLEVBQUMsQ0FBQztpQkFDMUU7O0lBQ2dDLHlCQUFDO0NBQUEsQUFKbEMsSUFJa0M7U0FBckIsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlhfTkFUSVZFX0RBVEVfRk9STUFUUyB9IGZyb20gJy4vbmF0aXZlLWRhdGUtZm9ybWF0cyc7XG5pbXBvcnQgeyBOeE5hdGl2ZURhdGVBZGFwdGVyIH0gZnJvbSAnLi9uYXRpdmUtZGF0ZS1hZGFwdGVyJztcbmltcG9ydCB7IE5YX0RBVEVfRk9STUFUUyB9IGZyb20gJy4vZGF0ZS1mb3JtYXRzJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0luamVjdGlvblRva2VuLCBMT0NBTEVfSUR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhEYXRlQWRhcHRlciB9IGZyb20gJy4vZGF0ZS1hZGFwdGVyJztcbmltcG9ydCB7IE5YX0RBVEVfTE9DQUxFIH0gZnJvbSAnLi9kYXRlLXRva2VuJztcblxuaW1wb3J0IHsgUGxhdGZvcm1Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuXG5leHBvcnQgY29uc3QgTlhfREFURV9MT0NBTEVfUFJPVklERVIgPSB7cHJvdmlkZTogTlhfREFURV9MT0NBTEUsIHVzZUV4aXN0aW5nOiBMT0NBTEVfSUR9O1xuXG5leHBvcnQgKiBmcm9tICcuL2RhdGUtdG9rZW4nO1xuZXhwb3J0ICogZnJvbSAnLi9kYXRlLWFkYXB0ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9kYXRlLWZvcm1hdHMnO1xuXG5leHBvcnQgKiBmcm9tICcuL25hdGl2ZS1kYXRlLWFkYXB0ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9uYXRpdmUtZGF0ZS1mb3JtYXRzJztcblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbUGxhdGZvcm1Nb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7cHJvdmlkZTogTnhEYXRlQWRhcHRlciwgdXNlQ2xhc3M6IE54TmF0aXZlRGF0ZUFkYXB0ZXJ9LFxuICAgIE5YX0RBVEVfTE9DQUxFX1BST1ZJREVSXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZURhdGVNb2R1bGUge31cblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbTmF0aXZlRGF0ZU1vZHVsZV0sXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOWF9EQVRFX0ZPUk1BVFMsIHVzZVZhbHVlOiBOWF9OQVRJVkVfREFURV9GT1JNQVRTfV0sXG59KVxuZXhwb3J0IGNsYXNzIE54TmF0aXZlRGF0ZU1vZHVsZSB7fVxuXG4iXX0=