/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { appendClasses, mapClassNames, removeClasses } from '@allianz/ngx-ndbx/utils';
var MappedStyles = /** @class */ (function () {
    function MappedStyles(mapping, baseClasses, _elementRef, _renderer) {
        if (baseClasses === void 0) { baseClasses = []; }
        this.mapping = mapping;
        this.baseClasses = baseClasses;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.classNames = '';
    }
    Object.defineProperty(MappedStyles.prototype, "classNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classNames;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._classNames === value) {
                return;
            }
            removeClasses(this._renderer, this._elementRef, this._classNamesSanitized);
            this._classNamesSanitized = mapClassNames(value, this.baseClasses, this.mapping);
            this._classNames = value;
            appendClasses(this._renderer, this._elementRef, this._classNamesSanitized);
        },
        enumerable: true,
        configurable: true
    });
    return MappedStyles;
}());
export { MappedStyles };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype._classNames;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype._classNamesSanitized;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype.mapping;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype.baseClasses;
    /**
     * @type {?}
     * @protected
     */
    MappedStyles.prototype._elementRef;
    /**
     * @type {?}
     * @protected
     */
    MappedStyles.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGVkLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsiY29yZS9tYXBwZWQtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU10RjtJQUlFLHNCQUNVLE9BQXNCLEVBQ3RCLFdBQWdCLEVBQ2QsV0FBdUIsRUFDdkIsU0FBb0I7UUFGdEIsNEJBQUEsRUFBQSxnQkFBZ0I7UUFEaEIsWUFBTyxHQUFQLE9BQU8sQ0FBZTtRQUN0QixnQkFBVyxHQUFYLFdBQVcsQ0FBSztRQUNkLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELHNCQUFJLG9DQUFVOzs7O1FBQWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQzs7Ozs7UUFFRCxVQUFlLEtBQWE7WUFDMUIsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsT0FBTzthQUNSO1lBQ0QsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUMzRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqRixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUN6QixhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdFLENBQUM7OztPQVZBO0lBV0gsbUJBQUM7QUFBRCxDQUFDLEFBekJELElBeUJDOzs7Ozs7O0lBeEJDLG1DQUE0Qjs7Ozs7SUFDNUIsNENBQXFDOzs7OztJQUduQywrQkFBOEI7Ozs7O0lBQzlCLG1DQUF3Qjs7Ozs7SUFDeEIsbUNBQWlDOzs7OztJQUNqQyxpQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGFwcGVuZENsYXNzZXMsIG1hcENsYXNzTmFtZXMsIHJlbW92ZUNsYXNzZXMgfSBmcm9tICdAYWxsaWFuei9uZ3gtbmRieC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIE1hcHBpbmdPYmplY3QgPSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZztcbn07XG5cbmV4cG9ydCBjbGFzcyBNYXBwZWRTdHlsZXMge1xuICBwcml2YXRlIF9jbGFzc05hbWVzOiBzdHJpbmc7XG4gIHByaXZhdGUgX2NsYXNzTmFtZXNTYW5pdGl6ZWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG1hcHBpbmc6IE1hcHBpbmdPYmplY3QsXG4gICAgcHJpdmF0ZSBiYXNlQ2xhc3NlcyA9IFtdLFxuICAgIHByb3RlY3RlZCBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICAgIHRoaXMuY2xhc3NOYW1lcyA9ICcnO1xuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY2xhc3NOYW1lcztcbiAgfVxuXG4gIHNldCBjbGFzc05hbWVzKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5fY2xhc3NOYW1lcyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVtb3ZlQ2xhc3Nlcyh0aGlzLl9yZW5kZXJlciwgdGhpcy5fZWxlbWVudFJlZiwgdGhpcy5fY2xhc3NOYW1lc1Nhbml0aXplZCk7XG4gICAgdGhpcy5fY2xhc3NOYW1lc1Nhbml0aXplZCA9IG1hcENsYXNzTmFtZXModmFsdWUsIHRoaXMuYmFzZUNsYXNzZXMsIHRoaXMubWFwcGluZyk7XG4gICAgdGhpcy5fY2xhc3NOYW1lcyA9IHZhbHVlO1xuICAgIGFwcGVuZENsYXNzZXModGhpcy5fcmVuZGVyZXIsIHRoaXMuX2VsZW1lbnRSZWYsIHRoaXMuX2NsYXNzTmFtZXNTYW5pdGl6ZWQpO1xuICB9XG59XG4iXX0=