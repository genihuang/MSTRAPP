/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild, Optional, HostListener, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { ToggleButton } from './toggle-button';
import { NxCircleToggleGroupComponent } from '../circle-toggle-group/circle-toggle-group.component';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';
var ToggleChangeEvent = /** @class */ (function () {
    function ToggleChangeEvent(button, value) {
        this.button = button;
        this.value = value;
    }
    return ToggleChangeEvent;
}());
export { ToggleChangeEvent };
if (false) {
    /**
     * A toggle button
     * @type {?}
     */
    ToggleChangeEvent.prototype.button;
    /**
     * The value of the toggle button that is sent with the event.
     * @type {?}
     */
    ToggleChangeEvent.prototype.value;
}
/** @type {?} */
var nextId = 0;
var NxCircleToggleComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxCircleToggleComponent, _super);
    function NxCircleToggleComponent(/** @docs-private */ toggleGroup, _checkedDispatcher, _changeDetectorRef) {
        var _this = _super.call(this) || this;
        _this.toggleGroup = toggleGroup;
        _this._checkedDispatcher = _checkedDispatcher;
        _this._changeDetectorRef = _changeDetectorRef;
        _this._id = "toggle-button-" + nextId++;
        /**
         * \@docs-private
         */
        _this.inGroup = false;
        _this._name = null;
        /**
         * An event that is emitted when the checked state fo the circle toggle changes.
         */
        _this.checkedChange = new EventEmitter();
        /**
         * An event that is emitted when the checked state of the circle toggle changes.
         * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
         */
        _this.selectionChange = new EventEmitter();
        _this._checked = false;
        _this._value = null;
        _this._iconName = null;
        _this._svg = null;
        _this._svgChecked = null;
        _this._label = null;
        _this._hint = null;
        _this._hover = false;
        /**
         * touched is set to true on touch devices.
         */
        _this._touched = false;
        _this._removeUniqueSelectionListener = (/**
         * @return {?}
         */
        function () { });
        _this.onChangeCallback = (/**
         * @param {?} checked
         * @return {?}
         */
        function (checked) { });
        _this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
        if (_this.toggleGroup) {
            _this.name = _this.toggleGroup.name;
        }
        return _this;
    }
    Object.defineProperty(NxCircleToggleComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /**
         * Id of the circle toggle.
         *
         * If not set, the circle toggle gets an incremented value by default.
         */
        set: /**
         * Id of the circle toggle.
         *
         * If not set, the circle toggle gets an incremented value by default.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        /** Name that is used for accessibility. */
        set: /**
         * Name that is used for accessibility.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checked;
        },
        /** Whether the circle toggle is checked. */
        set: /**
         * Whether the circle toggle is checked.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this.checked !== newValue) {
                this._checked = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /** The value that is used in the model. */
        set: /**
         * The value that is used in the model.
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._value = newValue;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "iconName", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconName;
        },
        /** Id of the icon that should be displayed. */
        set: /**
         * Id of the icon that should be displayed.
         * @param {?} name
         * @return {?}
         */
        function (name) {
            this._iconName = name;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "svg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._svg;
        },
        /** SVG that is displayed if the circle toggle is unchecked. */
        set: /**
         * SVG that is displayed if the circle toggle is unchecked.
         * @param {?} src
         * @return {?}
         */
        function (src) {
            this._svg = src;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "svgChecked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._svgChecked;
        },
        /** SVG that is displayed if the circle toggle is checked. */
        set: /**
         * SVG that is displayed if the circle toggle is checked.
         * @param {?} src
         * @return {?}
         */
        function (src) {
            this._svgChecked = src;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label;
        },
        /** Label displayed below the circle. */
        set: /**
         * Label displayed below the circle.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._label = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "hint", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hint;
        },
        /** Additional hint displayed below the label. */
        set: /**
         * Additional hint displayed below the label.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hint = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the circle toggle uses the negative set of styling. */
        set: /**
         * Whether the circle toggle uses the negative set of styling.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this.negative !== newValue) {
                this._negative = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "responsive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._responsive;
        },
        /** Whether the circle toggle has a responsive behavior. */
        set: /**
         * Whether the circle toggle has a responsive behavior.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this.responsive !== newValue) {
                this._responsive = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Whether the circle toggle is disabled. */
        set: /**
         * Whether the circle toggle is disabled.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this.disabled !== newValue) {
                this._disabled = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCircleToggleComponent.prototype.onMouseEnter = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (!this._touched) {
            this._hover = true;
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCircleToggleComponent.prototype.onMouseLeave = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (!this._touched) {
            this._hover = false;
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCircleToggleComponent.prototype.onTouchStart = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._touched = true;
    };
    /**
     * @return {?}
     */
    NxCircleToggleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.toggleGroup) {
            this.attachListenerForGroup();
        }
    };
    /**
     * @return {?}
     */
    NxCircleToggleComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.toggleGroup) {
            Promise.resolve().then((/**
             * @return {?}
             */
            function () {
                _this.inGroup = true;
                _this.negative = _this.toggleGroup.negative;
                _this.disabled = _this.toggleGroup.disabled;
                _this.responsive = _this.toggleGroup.responsive;
                _this.id = _this.toggleGroup.id + ("-button-" + nextId++);
            }));
        }
    };
    /**
     * @return {?}
     */
    NxCircleToggleComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // function returned by the listener
        this._removeUniqueSelectionListener();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCircleToggleComponent.prototype.attachListenerForGroup = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        var _this = this;
        this._removeUniqueSelectionListener =
            this._checkedDispatcher.listen((/**
             * @param {?} groupId
             * @param {?} buttonId
             * @return {?}
             */
            function (groupId, buttonId) {
                if (_this.id !== buttonId && groupId === _this.toggleGroup.id) {
                    _this.checked = false;
                }
            }));
    };
    /**
     * @param {?} newValue
     * @return {?}
     */
    NxCircleToggleComponent.prototype.writeValue = /**
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        this.checked = newValue;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxCircleToggleComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxCircleToggleComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxCircleToggleComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxCircleToggleComponent.prototype.toggle = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        if ((this.toggleGroup && this.checked) || this.disabled) {
            return;
        }
        else {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this.checkedChange.emit(this.checked);
            this.selectionChange.emit(new ToggleChangeEvent(this, this.value));
            if (this.toggleGroup) {
                this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
            }
        }
    };
    /**
     * @docs-private
     *
     * method called by the group if the internal value of the group is changed programatically,
     * does not trigger change emission
     */
    /**
     * \@docs-private
     *
     * method called by the group if the internal value of the group is changed programatically,
     * does not trigger change emission
     * @return {?}
     */
    NxCircleToggleComponent.prototype.setGroupSelection = /**
     * \@docs-private
     *
     * method called by the group if the internal value of the group is changed programatically,
     * does not trigger change emission
     * @return {?}
     */
    function () {
        // propagate changes only if the value in the group is different than the button checked value
        if (!this.checked) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this._checkedDispatcher.notify(this.toggleGroup.id, this.id);
        }
    };
    Object.defineProperty(NxCircleToggleComponent.prototype, "svgButton", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return !!this.svg && !!this.svgChecked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "svgUrl", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var useFilledSvg = this.checked || (!this.disabled && this._hover);
            if (this.negative) {
                useFilledSvg = !useFilledSvg;
            }
            return useFilledSvg ? this.svgChecked : this.svg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleComponent.prototype, "type", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.toggleGroup ? 'radio' : 'checkbox';
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxCircleToggleComponent.prototype.handleEnterKey = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.toggleGroup) {
            this.toggle(event);
        }
    };
    NxCircleToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-circle-toggle',
                    template: "<input [id]=\"id + '-input'\"\n       class=\"nx-circle-toggle__input\"\n       [attr.aria-labelledby]=\"id + '-label'\"\n       [type]=\"type\"\n       [attr.name]=\"name\"\n       [checked]=\"checked\"\n       [disabled]= \"disabled\"\n       [attr.aria-checked]=\"checked\"\n       (keydown.enter)=\"handleEnterKey($event)\"\n       (click)=\"toggle($event)\">\n<label class=\"nx-circle-toggle__label\"\n  [for]=\"id + '-input'\"\n  [id]=\"id + '-label'\">\n    <nx-icon-toggle-button\n      [label]=\"label\"\n      [hint]=\"hint\"\n      [checked]=\"checked\"\n      [icon]=\"iconName\"\n      [negative]=\"negative\"\n      [svg]=\"svgUrl\"\n      [disabled]=\"disabled\"\n      [inGroup]=\"inGroup\"\n      [touched]=\"_touched\">\n    </nx-icon-toggle-button>\n    <!-- The mobile toggle button is needed for the responsive mobile version of the component.\n    The display swtich is handled in the css. -->\n    <nx-mobile-toggle-button\n      [label]=\"label\"\n      [hint]=\"hint\"\n      [checked]=\"checked\"\n      [negative]=\"negative\"\n      [disabled]=\"disabled\">\n    </nx-mobile-toggle-button>\n</label>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ToggleButton,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxCircleToggleComponent; }))
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxCircleToggleComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        '[class.nx-toggle-circle]': 'true',
                        '[class.in-group]': 'inGroup',
                        '[class.is-disabled]': 'disabled',
                        '[class.is-responsive]': 'responsive'
                    },
                    styles: [":host{display:inline-block;vertical-align:top;position:relative}:host:not(.is-responsive){opacity:.9999}:host .nx-circle-toggle__input{opacity:0;position:absolute}:host:not(.in-group){margin-right:64px}@media (max-width:703px){:host:not(.in-group){margin-right:48px}}:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__check-focus,:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep .nx-toggle-circle__icon-wrapper{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host-context([data-whatinput=keyboard]) .nx-circle-toggle__input:focus+.nx-circle-toggle__label ::ng-deep nx-mobile-toggle-button{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;z-index:1}"]
                }] }
    ];
    /** @nocollapse */
    NxCircleToggleComponent.ctorParameters = function () { return [
        { type: NxCircleToggleGroupComponent, decorators: [{ type: Optional }] },
        { type: UniqueSelectionDispatcher },
        { type: ChangeDetectorRef }
    ]; };
    NxCircleToggleComponent.propDecorators = {
        name: [{ type: Input }],
        checkedChange: [{ type: Output }],
        selectionChange: [{ type: Output }],
        checked: [{ type: Input }],
        value: [{ type: Input }],
        iconName: [{ type: Input, args: ['icon',] }],
        svg: [{ type: Input }],
        svgChecked: [{ type: Input }],
        label: [{ type: Input }],
        hint: [{ type: Input }],
        negative: [{ type: Input }],
        responsive: [{ type: Input }],
        disabled: [{ type: Input }],
        toggleButton: [{ type: ViewChild, args: [NxMobileToggleButtonComponent,] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
        onTouchStart: [{ type: HostListener, args: ['touchstart',] }]
    };
    return NxCircleToggleComponent;
}(ToggleButton));
export { NxCircleToggleComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._id;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCircleToggleComponent.prototype.inGroup;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._name;
    /**
     * An event that is emitted when the checked state fo the circle toggle changes.
     * @type {?}
     */
    NxCircleToggleComponent.prototype.checkedChange;
    /**
     * An event that is emitted when the checked state of the circle toggle changes.
     * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
     * @type {?}
     */
    NxCircleToggleComponent.prototype.selectionChange;
    /** @type {?} */
    NxCircleToggleComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._iconName;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._svg;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._svgChecked;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._hint;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._responsive;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._disabled;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCircleToggleComponent.prototype.toggleButton;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._hover;
    /**
     * touched is set to true on touch devices.
     * @type {?}
     */
    NxCircleToggleComponent.prototype._touched;
    /** @type {?} */
    NxCircleToggleComponent.prototype._removeUniqueSelectionListener;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype.onTouchedCallback;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCircleToggleComponent.prototype.toggleGroup;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._checkedDispatcher;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,