/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChildren, EventEmitter, forwardRef, Input, Output, QueryList, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { takeUntil, tap, startWith, filter } from 'rxjs/operators';
import { merge, Subject } from 'rxjs';
import { ToggleButton } from '../circle-toggle/toggle-button';
/** @type {?} */
var nextId = 0;
var NxCircleToggleGroupComponent = /** @class */ (function () {
    function NxCircleToggleGroupComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._id = "nx-circle-toggle-group-" + nextId++;
        this._destroyed = new Subject();
        /**
         * An event emitted when the selection changes. Outputs the value of the currently selected button.
         */
        this.valueChange = new EventEmitter();
        this._name = "toggle-group-" + nextId++;
        this._negative = false;
        this._responsive = true;
        this.onChangeCallback = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /**
         * Id of the circle toggle group.
         *
         * If not set, the circle toggle group gets an incremented value by default.
         */
        set: /**
         * Id of the circle toggle group.
         *
         * If not set, the circle toggle group gets an incremented value by default.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        /** Name that is used for accessibility. */
        set: /**
         * Name that is used for accessibility.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
            this.updateToggleButtonsNames();
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Whether the circle toggle group is disabled. */
        set: /**
         * Whether the circle toggle group is disabled.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this._disabled !== newValue) {
                this._disabled = newValue;
                this._changeDetectorRef.markForCheck();
            }
            if (this.buttons) {
                this.buttons.forEach((/**
                 * @param {?} button
                 * @return {?}
                 */
                function (button) { return button.disabled = value; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the circle toggle group uses the negative styling. */
        set: /**
         * Whether the circle toggle group uses the negative styling.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this.negative !== newValue) {
                this._negative = newValue;
            }
            if (this.buttons) {
                this.buttons.forEach((/**
                 * @param {?} button
                 * @return {?}
                 */
                function (button) { return button.negative = value; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /** The value of the selected circle toggle in the circle toggle group. */
        set: /**
         * The value of the selected circle toggle in the circle toggle group.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.writeValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "responsive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._responsive;
        },
        /** Whether the circle toggle group has a responsive behavior. */
        set: /**
         * Whether the circle toggle group has a responsive behavior.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this.responsive) {
                this._responsive = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.value !== value) {
            this._value = value;
            this.notifySelectedChild(value);
        }
    };
    /**
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyed.next();
        this._destroyed.complete();
    };
    /**
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscribeToSelectionChanges();
        // react if a content child is deleted, added etc.
        this.buttons.changes
            .pipe(startWith(this.buttons), filter((/**
         * @param {?} toggles
         * @return {?}
         */
        function (toggles) { return toggles.length > 0; })), tap((/**
         * @param {?} toggles
         * @return {?}
         */
        function (toggles) {
            return Promise.resolve().then((/**
             * @return {?}
             */
            function () {
                toggles.forEach((/**
                 * @param {?} toggle
                 * @return {?}
                 */
                function (toggle) { return toggle.toggleButton.resetClasses(); }));
                _this.buttons.first.toggleButton.setFirstButton();
                _this.buttons.last.toggleButton.setLastButton();
            }));
        })), takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.subscribeToSelectionChanges(); }));
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.subscribeToSelectionChanges = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changedOrDestroyed = merge(this.buttons.changes, this._destroyed);
        merge.apply(void 0, tslib_1.__spread(this.buttons.map((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.selectionChange; })))).pipe(takeUntil(changedOrDestroyed))
            .subscribe((/**
         * @param {?} change
         * @return {?}
         */
        function (change) {
            _this.onChangeCallback(change.value);
            _this.valueChange.emit(change.value);
        }));
    };
    /**
     * @docs-private
     * inform the selected button if the group selection is set programattically at the beginning
     */
    /**
     * \@docs-private
     * inform the selected button if the group selection is set programattically at the beginning
     * @param {?} newValue
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.notifySelectedChild = /**
     * \@docs-private
     * inform the selected button if the group selection is set programattically at the beginning
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        if (this.buttons) {
            /** @type {?} */
            var selected = this.buttons.find((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.value === newValue; }));
            if (selected) {
                selected.setGroupSelection();
            }
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.updateToggleButtonsNames = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.buttons) {
            this.buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.name = _this.name; }));
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxCircleToggleGroupComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "selectedButton", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.buttons ? this.buttons.find((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.checked; })) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCircleToggleGroupComponent.prototype, "buttons", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._buttons;
        },
        enumerable: true,
        configurable: true
    });
    NxCircleToggleGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-circle-toggle-group',
                    template: "<ng-content></ng-content>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxCircleToggleGroupComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        '[class.is-responsive]': 'responsive',
                        '[class.is-disabled]': 'disabled',
                        '[attr.aria-disabled]': 'disabled',
                        '[attr.aria-labelledby]': 'name',
                        '[attr.name]': 'name',
                        '[attr.id]': 'id',
                        '[class.nx-circle-toggle-group]': 'true',
                        'role': 'radiogroup'
                    },
                    styles: [":host{display:flex;flex-wrap:wrap;flex-direction:column;justify-content:space-around}@media (min-width:320px){:host{flex-direction:row}}:host(.is-responsive){flex-direction:column}@media (min-width:704px){:host(.is-responsive){flex-direction:row}}"]
                }] }
    ];
    /** @nocollapse */
    NxCircleToggleGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxCircleToggleGroupComponent.propDecorators = {
        _buttons: [{ type: ContentChildren, args: [ToggleButton,] }],
        valueChange: [{ type: Output }],
        name: [{ type: Input }],
        disabled: [{ type: Input }],
        negative: [{ type: Input }],
        value: [{ type: Input }],
        responsive: [{ type: Input }]
    };
    return NxCircleToggleGroupComponent;
}());
export { NxCircleToggleGroupComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._buttons;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._destroyed;
    /**
     * An event emitted when the selection changes. Outputs the value of the currently selected button.
     * @type {?}
     */
    NxCircleToggleGroupComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._disabled;
    /** @type {?} */
    NxCircleToggleGroupComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._responsive;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,