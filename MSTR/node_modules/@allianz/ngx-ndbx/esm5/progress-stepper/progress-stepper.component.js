/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CdkStep, CdkStepper } from '@angular/cdk/stepper';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject, Input, QueryList, SkipSelf } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
// tslint:disable:use-input-property-decorator
// We need to reference steps in stepper and stepper in steps. To prevent circular depenedency errors
// Provide both components in a single file. Otherwise we would have to introduce interface/abstract classes
// shared between both implementations.
var NxStepComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxStepComponent, _super);
    function NxStepComponent(stepper, _errorStateMatcher) {
        var _this = _super.call(this, stepper) || this;
        _this._errorStateMatcher = _errorStateMatcher;
        return _this;
    }
    /** Custom error state matcher that checks for validity of the step form. */
    /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    NxStepComponent.prototype.isErrorState = /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    function (control, form) {
        /** @type {?} */
        var originalErrorState = this._errorStateMatcher.isErrorState(control, form);
        // Checks for the validity of a step form that is not submitted or touched,
        // e.g when the user directly clicks the "next" button or directly on the step
        /** @type {?} */
        var customErrorState = !!(control && control.invalid && this.interacted);
        return originalErrorState || customErrorState;
    };
    NxStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-step',
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    exportAs: 'nxStep',
                    providers: [{ provide: ErrorStateMatcher, useExisting: NxStepComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxStepComponent.ctorParameters = function () { return [
        { type: NxProgressStepperDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NxProgressStepperDirective; })),] }] },
        { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] }
    ]; };
    return NxStepComponent;
}(CdkStep));
export { NxStepComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._errorStateMatcher;
}
var NxProgressStepperDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NxProgressStepperDirective, _super);
    function NxProgressStepperDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._stepHeader = new QueryList();
        return _this;
    }
    /**
     * @return {?}
     */
    NxProgressStepperDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes
            .pipe(takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this._stateChanged();
        }));
    };
    Object.defineProperty(NxProgressStepperDirective.prototype, "hasPrevious", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex - 1) >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "hasNext", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex + 1) < this.count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "count", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._steps ? this._steps.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "currentStep", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.count === 0 || this.selectedIndex === -1) {
                return null;
            }
            /** @type {?} */
            var steps = this._steps.toArray();
            return steps[this.selectedIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "nextStep", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.selectedIndex + 1 >= this._steps.length) {
                return null;
            }
            else {
                return this._steps.toArray()[this.selectedIndex + 1];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "steps", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._steps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "currentLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.currentStep;
            /** @type {?} */
            var label = step.stepLabel || step.label;
            return "\n    " + this.currentStepLabel + " " + (this.selectedIndex + 1) + "/" + this.count + ": " + label + "\n    ";
        },
        enumerable: true,
        configurable: true
    });
    NxProgressStepperDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxProgressStepper]',
                    exportAs: 'nxProgressStepper',
                },] }
    ];
    NxProgressStepperDirective.propDecorators = {
        _steps: [{ type: ContentChildren, args: [NxStepComponent,] }],
        currentStepLabel: [{ type: Input }],
        title: [{ type: Input }]
    };
    return NxProgressStepperDirective;
}(CdkStepper));
export { NxProgressStepperDirective };
if (false) {
    /** @type {?} */
    NxProgressStepperDirective.prototype._steps;
    /** @type {?} */
    NxProgressStepperDirective.prototype._stepHeader;
    /**
     * Sets the label on the left side showing the current step label. Used for mobile viewports.
     * @type {?}
     */
    NxProgressStepperDirective.prototype.currentStepLabel;
    /**
     * Sets the title to be rendered above the progress bar.
     * @type {?}
     */
    NxProgressStepperDirective.prototype.title;
}
//# sourceMappingURL=data:application/json;base64,