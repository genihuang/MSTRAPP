/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NxProgressStepperDirective } from './../progress-stepper.component';
var NxSingleStepperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxSingleStepperComponent, _super);
    function NxSingleStepperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._rightLabel = 'Next step:';
        return _this;
    }
    Object.defineProperty(NxSingleStepperComponent.prototype, "rightLabel", {
        /** Sets the label on the right showing the next step. */
        get: /**
         * Sets the label on the right showing the next step.
         * @return {?}
         */
        function () { return this._rightLabel; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._rightLabel = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "progress", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex + 1) / this.count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "currentLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.currentStep;
            /** @type {?} */
            var label = step.stepLabel || step.label;
            return "\n    " + this.currentStepLabel + " " + (this.selectedIndex + 1) + "/" + this.count + ": " + label + "\n    ";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "nextLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.nextStep;
            if (step) {
                /** @type {?} */
                var label = step.stepLabel || step.label;
                return "\n        " + this.rightLabel + " " + label + "\n      ";
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    NxSingleStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-single-stepper',
                    template: "<div class=\"nx-single-step-container\">\n  <span *ngIf=\"title\" class=\"nx-single-step__title\">{{title}}</span>\n\n    <nx-progressbar [value]=\"progress\"></nx-progressbar>\n\n    <div class=\"nx-single-step__infos\">\n      <div class=\"nx-single-step__current\">\n        {{currentLabel}}\n      </div>\n      <div class=\"nx-single-step__next\">\n        {{nextLabel}}\n      </div>\n    </div>\n\n    <div class=\"nx-progress-stepper__current\">\n        {{currentLabel}}\n    </div>\n</div>\n\n<div *ngFor=\"let step of _steps; let i = index\"\n      class=\"nx-progress-stepper__content\" role=\"tabpanel\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-label]=\"currentLabel\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>",
                    providers: [{ provide: NxProgressStepperDirective, useExisting: NxSingleStepperComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-progress-stepper__content{overflow:hidden}.nx-progress-stepper__content[aria-expanded=false]{height:0}.nx-progress-stepper__current{display:none}@media (max-width:703px){.nx-progress-stepper__current{display:block;text-align:center}}", ":host{display:block}.nx-single-step-container{margin-bottom:48px}.nx-single-step__infos{display:flex;font-weight:300;line-height:24px;font-size:16px;margin-top:8px}.nx-single-step__current{color:#414141}.nx-single-step__title,nx-progressbar{margin-bottom:8px;display:block}@media (max-width:703px){.nx-single-step__infos,nx-progressbar{display:none}}.nx-single-step__title{font-size:20px;font-weight:300;margin-bottom:24px}@media (min-width:320px){.nx-single-step__title{display:block}}.nx-single-step__next{margin-left:auto}@media (max-width:703px){.nx-single-step__next{display:none}}"]
                }] }
    ];
    NxSingleStepperComponent.propDecorators = {
        rightLabel: [{ type: Input, args: ['nextLabel',] }]
    };
    return NxSingleStepperComponent;
}(NxProgressStepperDirective));
export { NxSingleStepperComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSingleStepperComponent.prototype._rightLabel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLXN0ZXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvcHJvZ3Jlc3Mtc3RlcHBlci8iLCJzb3VyY2VzIjpbInNpbmdsZS9zaW5nbGUtc3RlcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUU3RTtJQVE4QyxvREFBMEI7SUFSeEU7UUFBQSxxRUErQ0M7UUFqQ1MsaUJBQVcsR0FBVyxZQUFZLENBQUM7O0lBaUM3QyxDQUFDO0lBckNDLHNCQUNJLGdEQUFVO1FBRmQseURBQXlEOzs7OztRQUN6RCxjQUMyQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDOzs7OztRQUNyRCxVQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7OztPQURVO0lBTXJELHNCQUFJLDhDQUFRO1FBRFosb0JBQW9COzs7OztRQUNwQjtZQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDL0MsQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSxrREFBWTtRQURoQixvQkFBb0I7Ozs7O1FBQ3BCOztnQkFDUSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVc7O2dCQUN2QixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSztZQUUxQyxPQUFPLFdBQ0wsSUFBSSxDQUFDLGdCQUFnQixVQUFJLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxVQUFJLElBQUksQ0FBQyxLQUFLLFVBQUssS0FBSyxXQUN4RSxDQUFDO1FBQ0osQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSwrQ0FBUztRQURiLG9CQUFvQjs7Ozs7UUFDcEI7O2dCQUNRLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUTtZQUUxQixJQUFJLElBQUksRUFBRTs7b0JBQ0YsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLEtBQUs7Z0JBRTFDLE9BQU8sZUFDSCxJQUFJLENBQUMsVUFBVSxTQUFJLEtBQUssYUFDM0IsQ0FBQzthQUNIO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTs7Z0JBNUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixxMEJBQTJDO29CQUUzQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUMsQ0FBQztvQkFDekYsbUJBQW1CLEVBQUUsS0FBSztvQkFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2lCQUNoRDs7OzZCQUdFLEtBQUssU0FBQyxXQUFXOztJQXFDcEIsK0JBQUM7Q0FBQSxBQS9DRCxDQVE4QywwQkFBMEIsR0F1Q3ZFO1NBdkNZLHdCQUF3Qjs7Ozs7O0lBTW5DLCtDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE54UHJvZ3Jlc3NTdGVwcGVyRGlyZWN0aXZlIH0gZnJvbSAnLi8uLi9wcm9ncmVzcy1zdGVwcGVyLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXNpbmdsZS1zdGVwcGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NpbmdsZS1zdGVwLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4uL3Byb2dyZXNzLXN0ZXBwZXIuY29tcG9uZW50LnNjc3MnLCAnLi9zaW5nbGUtc3RlcC5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogTnhQcm9ncmVzc1N0ZXBwZXJEaXJlY3RpdmUsIHVzZUV4aXN0aW5nOiBOeFNpbmdsZVN0ZXBwZXJDb21wb25lbnR9XSxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE54U2luZ2xlU3RlcHBlckNvbXBvbmVudCBleHRlbmRzIE54UHJvZ3Jlc3NTdGVwcGVyRGlyZWN0aXZlIHtcbiAgLyoqIFNldHMgdGhlIGxhYmVsIG9uIHRoZSByaWdodCBzaG93aW5nIHRoZSBuZXh0IHN0ZXAuICovXG4gIEBJbnB1dCgnbmV4dExhYmVsJylcbiAgZ2V0IHJpZ2h0TGFiZWwoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3JpZ2h0TGFiZWw7IH1cbiAgc2V0IHJpZ2h0TGFiZWwodikgeyB0aGlzLl9yaWdodExhYmVsID0gdjsgfVxuXG4gIHByaXZhdGUgX3JpZ2h0TGFiZWw6IHN0cmluZyA9ICdOZXh0IHN0ZXA6JztcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXQgcHJvZ3Jlc3MoKSB7XG4gICAgcmV0dXJuICh0aGlzLnNlbGVjdGVkSW5kZXggKyAxKSAvIHRoaXMuY291bnQ7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXQgY3VycmVudExhYmVsKCkge1xuICAgIGNvbnN0IHN0ZXAgPSB0aGlzLmN1cnJlbnRTdGVwO1xuICAgIGNvbnN0IGxhYmVsID0gc3RlcC5zdGVwTGFiZWwgfHwgc3RlcC5sYWJlbDtcblxuICAgIHJldHVybiBgXG4gICAgJHt0aGlzLmN1cnJlbnRTdGVwTGFiZWx9ICR7dGhpcy5zZWxlY3RlZEluZGV4ICsgMX0vJHt0aGlzLmNvdW50fTogJHtsYWJlbH1cbiAgICBgO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IG5leHRMYWJlbCgpIHtcbiAgICBjb25zdCBzdGVwID0gdGhpcy5uZXh0U3RlcDtcblxuICAgIGlmIChzdGVwKSB7XG4gICAgICBjb25zdCBsYWJlbCA9IHN0ZXAuc3RlcExhYmVsIHx8IHN0ZXAubGFiZWw7XG5cbiAgICAgIHJldHVybiBgXG4gICAgICAgICR7dGhpcy5yaWdodExhYmVsfSAke2xhYmVsfVxuICAgICAgYDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG5cbn1cbiJdfQ==