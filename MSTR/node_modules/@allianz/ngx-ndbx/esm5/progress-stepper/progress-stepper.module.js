/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxProgressbarModule } from '@allianz/ngx-ndbx/progressbar';
import { NxMultiStepItemComponent } from './multi/multi-step-item.component';
import { NxMultiStepperComponent } from './multi/multi-step.component';
import { NxSingleStepperComponent } from './single/single-step.component';
import { NxProgressStepperComponent } from './progress/progress.component';
import { NxStepperNextDirective, NxStepperPreviousDirective } from './buttons';
import { NxProgressStepperDirective, NxStepComponent } from './progress-stepper.component';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { CdkStepperModule } from '@angular/cdk/stepper';
var NxProgressStepperModule = /** @class */ (function () {
    function NxProgressStepperModule() {
    }
    NxProgressStepperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        CdkStepperModule,
                        NxIconModule,
                        NxProgressbarModule
                    ],
                    declarations: [
                        NxProgressStepperDirective,
                        NxMultiStepperComponent,
                        NxStepComponent,
                        NxStepperNextDirective,
                        NxStepperPreviousDirective,
                        NxProgressStepperComponent,
                        NxSingleStepperComponent,
                        NxMultiStepItemComponent
                    ],
                    exports: [
                        NxProgressStepperDirective,
                        NxSingleStepperComponent,
                        NxProgressStepperComponent,
                        NxMultiStepperComponent,
                        NxStepComponent,
                        NxStepperNextDirective,
                        NxStepperPreviousDirective
                    ]
                },] }
    ];
    return NxProgressStepperModule;
}());
export { NxProgressStepperModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3Mtc3RlcHBlci5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9wcm9ncmVzcy1zdGVwcGVyLyIsInNvdXJjZXMiOlsicHJvZ3Jlc3Mtc3RlcHBlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDM0YsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXREO0lBQUE7SUE2QkEsQ0FBQzs7Z0JBN0JBLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixnQkFBZ0I7d0JBQ2hCLFlBQVk7d0JBQ1osbUJBQW1CO3FCQUNwQjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1osMEJBQTBCO3dCQUMxQix1QkFBdUI7d0JBQ3ZCLGVBQWU7d0JBQ2Ysc0JBQXNCO3dCQUN0QiwwQkFBMEI7d0JBQzFCLDBCQUEwQjt3QkFDMUIsd0JBQXdCO3dCQUN4Qix3QkFBd0I7cUJBQ3pCO29CQUNELE9BQU8sRUFBRTt3QkFDUCwwQkFBMEI7d0JBQzFCLHdCQUF3Qjt3QkFDeEIsMEJBQTBCO3dCQUMxQix1QkFBdUI7d0JBQ3ZCLGVBQWU7d0JBQ2Ysc0JBQXNCO3dCQUN0QiwwQkFBMEI7cUJBQzNCO2lCQUNGOztJQUdELDhCQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0FGWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOeFByb2dyZXNzYmFyTW9kdWxlIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvcHJvZ3Jlc3NiYXInO1xuaW1wb3J0IHsgTnhNdWx0aVN0ZXBJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9tdWx0aS9tdWx0aS1zdGVwLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IE54TXVsdGlTdGVwcGVyQ29tcG9uZW50IH0gZnJvbSAnLi9tdWx0aS9tdWx0aS1zdGVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFNpbmdsZVN0ZXBwZXJDb21wb25lbnQgfSBmcm9tICcuL3NpbmdsZS9zaW5nbGUtc3RlcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnhQcm9ncmVzc1N0ZXBwZXJDb21wb25lbnQgfSBmcm9tICcuL3Byb2dyZXNzL3Byb2dyZXNzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFN0ZXBwZXJOZXh0RGlyZWN0aXZlLCBOeFN0ZXBwZXJQcmV2aW91c0RpcmVjdGl2ZSB9IGZyb20gJy4vYnV0dG9ucyc7XG5pbXBvcnQgeyBOeFByb2dyZXNzU3RlcHBlckRpcmVjdGl2ZSwgTnhTdGVwQ29tcG9uZW50IH0gZnJvbSAnLi9wcm9ncmVzcy1zdGVwcGVyLmNvbXBvbmVudCc7XG5pbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T3ZlcmxheU1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge054SWNvbk1vZHVsZX0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvaWNvbic7XG5pbXBvcnQge0Nka1N0ZXBwZXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBDZGtTdGVwcGVyTW9kdWxlLFxuICAgIE54SWNvbk1vZHVsZSxcbiAgICBOeFByb2dyZXNzYmFyTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE54UHJvZ3Jlc3NTdGVwcGVyRGlyZWN0aXZlLFxuICAgIE54TXVsdGlTdGVwcGVyQ29tcG9uZW50LFxuICAgIE54U3RlcENvbXBvbmVudCxcbiAgICBOeFN0ZXBwZXJOZXh0RGlyZWN0aXZlLFxuICAgIE54U3RlcHBlclByZXZpb3VzRGlyZWN0aXZlLFxuICAgIE54UHJvZ3Jlc3NTdGVwcGVyQ29tcG9uZW50LFxuICAgIE54U2luZ2xlU3RlcHBlckNvbXBvbmVudCxcbiAgICBOeE11bHRpU3RlcEl0ZW1Db21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE54UHJvZ3Jlc3NTdGVwcGVyRGlyZWN0aXZlLFxuICAgIE54U2luZ2xlU3RlcHBlckNvbXBvbmVudCxcbiAgICBOeFByb2dyZXNzU3RlcHBlckNvbXBvbmVudCxcbiAgICBOeE11bHRpU3RlcHBlckNvbXBvbmVudCxcbiAgICBOeFN0ZXBDb21wb25lbnQsXG4gICAgTnhTdGVwcGVyTmV4dERpcmVjdGl2ZSxcbiAgICBOeFN0ZXBwZXJQcmV2aW91c0RpcmVjdGl2ZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE54UHJvZ3Jlc3NTdGVwcGVyTW9kdWxlIHtcblxufVxuIl19