/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
var DEFAULT_SIZE = 'small';
var NxSpinnerComponent = /** @class */ (function () {
    function NxSpinnerComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._size = DEFAULT_SIZE;
        this._negative = false;
    }
    Object.defineProperty(NxSpinnerComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /** Sets the size of the spinner. Default is 'small'. */
        set: /**
         * Sets the size of the spinner. Default is 'small'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._size) {
                this._size = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSpinnerComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the spinner should use a negative styling. */
        set: /**
         * Whether the spinner should use a negative styling.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._negative) {
                this._negative = coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-spinner',
                    template: "<div class=\"nx-spinner__spin-block\">\n  <div class=\"nx-spinner__edge-left\"></div>\n  <div class=\"nx-spinner__edge-right\"></div>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-spinner--small]': 'size === "small"',
                        '[class.nx-spinner--medium]': 'size === "medium"',
                        '[class.nx-spinner--large]': 'size === "large"',
                        '[class.nx-spinner--negative]': 'negative',
                        '[attr.role]': '"status"',
                        '[attr.aria-busy]': '"true"',
                        '[attr.aria-live]': '"assertive"',
                    },
                    styles: ["@-webkit-keyframes spin{0%{-webkit-transform:rotate(45deg);transform:rotate(45deg)}100%{-webkit-transform:rotate(405deg);transform:rotate(405deg)}}@keyframes spin{0%{-webkit-transform:rotate(45deg);transform:rotate(45deg)}100%{-webkit-transform:rotate(405deg);transform:rotate(405deg)}}:host{position:relative;display:block}:host(.nx-spinner--small){width:16px;height:16px}:host(.nx-spinner--medium){width:24px;height:24px}:host(.nx-spinner--large){width:40px;height:40px}.nx-spinner__spin-block{width:100%;height:100%;-webkit-transform:rotate(45deg);transform:rotate(45deg);border-style:solid;border-radius:50%;border-color:#007ab3 #ececec #ececec;-webkit-animation-name:spin;animation-name:spin;-webkit-animation-duration:.8s;animation-duration:.8s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:linear;animation-timing-function:linear}:host(.nx-spinner--small) .nx-spinner__spin-block{border-width:calc(1.6px)}:host(.nx-spinner--medium) .nx-spinner__spin-block{border-width:calc(2.4px)}:host(.nx-spinner--large) .nx-spinner__spin-block{border-width:calc(4px)}.nx-spinner__edge-left,.nx-spinner__edge-right{width:12%;height:12%;border-radius:50%;background-color:#007ab3;position:absolute;top:4%}.nx-spinner__edge-left{left:4%}.nx-spinner__edge-right{right:4%}:host(.nx-spinner--negative) .nx-spinner__spin-block{border-color:#fff rgba(250,247,239,.35) rgba(250,247,239,.35)}:host(.nx-spinner--negative) .nx-spinner__edge-left,:host(.nx-spinner--negative) .nx-spinner__edge-right{background-color:#fff}"]
                }] }
    ];
    /** @nocollapse */
    NxSpinnerComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxSpinnerComponent.propDecorators = {
        size: [{ type: Input, args: ['nxSize',] }],
        negative: [{ type: Input }]
    };
    return NxSpinnerComponent;
}());
export { NxSpinnerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSpinnerComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxSpinnerComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxSpinnerComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInNwaW5uZXIvc3Bpbm5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztJQU14RCxZQUFZLEdBQUcsT0FBTztBQUU1QjtJQTRDRSw0QkFBb0Isa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUE1QmpELFVBQUssR0FBZ0IsWUFBWSxDQUFDO1FBY2xDLGNBQVMsR0FBWSxLQUFLLENBQUM7SUFjeUIsQ0FBQztJQXpCN0Qsc0JBQ0ksb0NBQUk7Ozs7UUFNUjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDO1FBVkQsd0RBQXdEOzs7Ozs7UUFDeEQsVUFDUyxLQUFrQjtZQUN6QixJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQzs7O09BQUE7SUFRRCxzQkFDSSx3Q0FBUTs7OztRQU1aO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFWRCx5REFBeUQ7Ozs7OztRQUN6RCxVQUNhLEtBQWM7WUFDekIsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQzs7O09BQUE7O2dCQXZDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLHlKQUF1QztvQkFDdkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBRS9DLElBQUksRUFBRTt3QkFDSiwyQkFBMkIsRUFBRSxrQkFBa0I7d0JBQy9DLDRCQUE0QixFQUFFLG1CQUFtQjt3QkFDakQsMkJBQTJCLEVBQUUsa0JBQWtCO3dCQUMvQyw4QkFBOEIsRUFBRSxVQUFVO3dCQUMxQyxhQUFhLEVBQUUsVUFBVTt3QkFDekIsa0JBQWtCLEVBQUUsUUFBUTt3QkFDNUIsa0JBQWtCLEVBQUUsYUFBYTtxQkFDbEM7O2lCQUNGOzs7O2dCQXZCbUQsaUJBQWlCOzs7dUJBNEJsRSxLQUFLLFNBQUMsUUFBUTsyQkFjZCxLQUFLOztJQVlSLHlCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0E5Qlksa0JBQWtCOzs7Ozs7SUFDN0IsbUNBQTBDOzs7OztJQWMxQyx1Q0FBbUM7Ozs7O0lBY3ZCLGdEQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcblxuXG4vKiogT3B0aW9ucyBmb3Igc2l6aW5nIG9mIHRoZSBzcGlubmVyLiAqL1xuZXhwb3J0IHR5cGUgU3Bpbm5lclNpemUgPSAnc21hbGwnIHwgJ21lZGl1bScgfCAnbGFyZ2UnO1xuXG5jb25zdCBERUZBVUxUX1NJWkUgPSAnc21hbGwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1zcGlubmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NwaW5uZXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJy4vc3Bpbm5lci5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5ueC1zcGlubmVyLS1zbWFsbF0nOiAnc2l6ZSA9PT0gXCJzbWFsbFwiJyxcbiAgICAnW2NsYXNzLm54LXNwaW5uZXItLW1lZGl1bV0nOiAnc2l6ZSA9PT0gXCJtZWRpdW1cIicsXG4gICAgJ1tjbGFzcy5ueC1zcGlubmVyLS1sYXJnZV0nOiAnc2l6ZSA9PT0gXCJsYXJnZVwiJyxcbiAgICAnW2NsYXNzLm54LXNwaW5uZXItLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gICAgJ1thdHRyLnJvbGVdJzogJ1wic3RhdHVzXCInLFxuICAgICdbYXR0ci5hcmlhLWJ1c3ldJzogJ1widHJ1ZVwiJyxcbiAgICAnW2F0dHIuYXJpYS1saXZlXSc6ICdcImFzc2VydGl2ZVwiJyxcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeFNwaW5uZXJDb21wb25lbnQge1xuICBwcml2YXRlIF9zaXplOiBTcGlubmVyU2l6ZSA9IERFRkFVTFRfU0laRTtcblxuICAvKiogU2V0cyB0aGUgc2l6ZSBvZiB0aGUgc3Bpbm5lci4gRGVmYXVsdCBpcyAnc21hbGwnLiAqL1xuICBASW5wdXQoJ254U2l6ZScpXG4gIHNldCBzaXplKHZhbHVlOiBTcGlubmVyU2l6ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fc2l6ZSkge1xuICAgICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIGdldCBzaXplKCk6IFNwaW5uZXJTaXplIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIHByaXZhdGUgX25lZ2F0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIHNwaW5uZXIgc2hvdWxkIHVzZSBhIG5lZ2F0aXZlIHN0eWxpbmcuICovXG4gIEBJbnB1dCgpXG4gIHNldCBuZWdhdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fbmVnYXRpdmUpIHtcbiAgICAgIHRoaXMuX25lZ2F0aXZlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuICBnZXQgbmVnYXRpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX25lZ2F0aXZlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxufVxuIl19