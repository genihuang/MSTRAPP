/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
var NxBadgeComponent = /** @class */ (function () {
    function NxBadgeComponent(_changeDetRef) {
        this._changeDetRef = _changeDetRef;
        this._vibrant = false;
    }
    Object.defineProperty(NxBadgeComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /** Sets the class name for the badge element.  */
        set: /**
         * Sets the class name for the badge element.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._type) {
                this._type = value;
                this._changeDetRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxBadgeComponent.prototype, "vibrant", {
        get: /**
         * @return {?}
         */
        function () {
            return this._vibrant;
        },
        /** Change badge style to vibrant. */
        set: /**
         * Change badge style to vibrant.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (value !== this._vibrant) {
                this._vibrant = newValue;
                this._changeDetRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxBadgeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-badge',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-badge--active]': 'type === "active"',
                        '[class.nx-badge--positive]': 'type === "positive"',
                        '[class.nx-badge--critical]': 'type === "critical"',
                        '[class.nx-badge--negative]': 'type === "negative"',
                        '[class.nx-badge--vibrant]': 'vibrant'
                    },
                    styles: [":host{display:inline-block;padding:0 8px;font-size:16px;font-weight:400;line-height:24px;white-space:nowrap;border-radius:12px;color:#414141;background-color:#d9d9d9;min-width:24px}@media screen and (-ms-high-contrast:active){:host{box-shadow:0 0 0 1px windowText}}:host.nx-badge--active{background-color:#cfe9ee}:host.nx-badge--positive{background-color:#e3ebaf}:host.nx-badge--critical{background-color:#f7c7c3}:host.nx-badge--negative{background-color:#ffe8b0}:host(.nx-badge--vibrant){color:#fff;background-color:#414141}:host(.nx-badge--vibrant).nx-badge--active{background-color:#007ab3}:host(.nx-badge--vibrant).nx-badge--positive{background-color:#1e8927}:host(.nx-badge--vibrant).nx-badge--critical{background-color:#dc3149}:host(.nx-badge--vibrant).nx-badge--negative{color:#414141;background-color:#efbe25}"]
                }] }
    ];
    /** @nocollapse */
    NxBadgeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxBadgeComponent.propDecorators = {
        type: [{ type: Input }],
        vibrant: [{ type: Input }]
    };
    return NxBadgeComponent;
}());
export { NxBadgeComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxBadgeComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    NxBadgeComponent.prototype._vibrant;
    /**
     * @type {?}
     * @private
     */
    NxBadgeComponent.prototype._changeDetRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFkZ2UvIiwic291cmNlcyI6WyJiYWRnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBSTlEO0lBaUJFLDBCQUFvQixhQUFnQztRQUFoQyxrQkFBYSxHQUFiLGFBQWEsQ0FBbUI7UUFGNUMsYUFBUSxHQUFZLEtBQUssQ0FBQztJQUVzQixDQUFDO0lBR3pELHNCQUNJLGtDQUFJOzs7O1FBTVI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQVZELGtEQUFrRDs7Ozs7O1FBQ2xELFVBQ1MsS0FBa0I7WUFDekIsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDbkM7UUFDSCxDQUFDOzs7T0FBQTtJQUtELHNCQUNJLHFDQUFPOzs7O1FBUVg7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQztRQVpELHFDQUFxQzs7Ozs7O1FBQ3JDLFVBQ1ksS0FBYzs7Z0JBQ2xCLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7WUFFN0MsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDbkM7UUFDSCxDQUFDOzs7T0FBQTs7Z0JBdkNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBRS9DLElBQUksRUFBRTt3QkFDSiwwQkFBMEIsRUFBRSxtQkFBbUI7d0JBQy9DLDRCQUE0QixFQUFFLHFCQUFxQjt3QkFDbkQsNEJBQTRCLEVBQUUscUJBQXFCO3dCQUNuRCw0QkFBNEIsRUFBRSxxQkFBcUI7d0JBQ25ELDJCQUEyQixFQUFFLFNBQVM7cUJBQ3ZDOztpQkFDRjs7OztnQkFqQm1ELGlCQUFpQjs7O3VCQXlCbEUsS0FBSzswQkFXTCxLQUFLOztJQVlSLHVCQUFDO0NBQUEsQUEzQ0QsSUEyQ0M7U0E5QlksZ0JBQWdCOzs7Ozs7SUFDM0IsaUNBQTJCOzs7OztJQUMzQixvQ0FBa0M7Ozs7O0lBRXRCLHlDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuLyoqIFBvc3NpYmxlIGJhZGdlIHR5cGVzLiAqL1xuZXhwb3J0IHR5cGUgTnhCYWRnZVR5cGUgPSAnYWN0aXZlJyB8ICdwb3NpdGl2ZScgfCAnY3JpdGljYWwnIHwgJ25lZ2F0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtYmFkZ2UnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJy4vYmFkZ2UuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubngtYmFkZ2UtLWFjdGl2ZV0nOiAndHlwZSA9PT0gXCJhY3RpdmVcIicsXG4gICAgJ1tjbGFzcy5ueC1iYWRnZS0tcG9zaXRpdmVdJzogJ3R5cGUgPT09IFwicG9zaXRpdmVcIicsXG4gICAgJ1tjbGFzcy5ueC1iYWRnZS0tY3JpdGljYWxdJzogJ3R5cGUgPT09IFwiY3JpdGljYWxcIicsXG4gICAgJ1tjbGFzcy5ueC1iYWRnZS0tbmVnYXRpdmVdJzogJ3R5cGUgPT09IFwibmVnYXRpdmVcIicsXG4gICAgJ1tjbGFzcy5ueC1iYWRnZS0tdmlicmFudF0nOiAndmlicmFudCdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeEJhZGdlQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfdHlwZTogTnhCYWRnZVR5cGU7XG4gIHByaXZhdGUgX3ZpYnJhbnQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuICAvKiogU2V0cyB0aGUgY2xhc3MgbmFtZSBmb3IgdGhlIGJhZGdlIGVsZW1lbnQuICAqL1xuICBASW5wdXQoKVxuICBzZXQgdHlwZSh2YWx1ZTogTnhCYWRnZVR5cGUpIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuX3R5cGUpIHtcbiAgICAgIHRoaXMuX3R5cGUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2NoYW5nZURldFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHR5cGUoKTogTnhCYWRnZVR5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG4gIC8qKiBDaGFuZ2UgYmFkZ2Ugc3R5bGUgdG8gdmlicmFudC4gKi9cbiAgQElucHV0KClcbiAgc2V0IHZpYnJhbnQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG5cbiAgICBpZiAodmFsdWUgIT09IHRoaXMuX3ZpYnJhbnQpIHtcbiAgICAgIHRoaXMuX3ZpYnJhbnQgPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuX2NoYW5nZURldFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHZpYnJhbnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpYnJhbnQ7XG4gIH1cbn1cbiJdfQ==