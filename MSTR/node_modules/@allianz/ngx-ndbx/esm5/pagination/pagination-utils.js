/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
/**
 * \@docs-private
 */
var NxPaginationUtils = /** @class */ (function () {
    function NxPaginationUtils() {
        this._pagesToShow = 3;
        this._elipsisText = '...';
        this._classExpanded = 'expanded-view';
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getPages = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var pages = [];
        /** @type {?} */
        var start = [];
        /** @type {?} */
        var middle = [];
        /** @type {?} */
        var end = [];
        // First array -> start
        start = this.getStartArray(currentPage, totalPages);
        // Second array -> middle
        middle = this.getMiddleArray(currentPage, totalPages);
        // Third array -> end
        end = this.getEndArray(currentPage, totalPages);
        pages = tslib_1.__spread(start, middle, end);
        return pages;
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getMiddleArray = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var pageNumber = currentPage < 6 ? 4 : currentPage - 1;
        /** @type {?} */
        var middle = [];
        while (middle.length < 3 &&
            pageNumber >= 2 &&
            pageNumber <= totalPages - 3 &&
            (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)) {
            middle.push(this.createPaginationItem(pageNumber, pageNumber));
            pageNumber++;
        }
        return middle;
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getEndArray = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var end = [];
        /** @type {?} */
        var currentItemToShow = totalPages <= 3 ? totalPages + 1 :
            totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2;
        /** @type {?} */
        var showEllipsis = currentPage < totalPages - 4;
        while (currentItemToShow <= totalPages) {
            /** @type {?} */
            var endItem = end.length === 0 && showEllipsis ?
                this.createPaginationItem(this._elipsisText, currentItemToShow, true) :
                this.createPaginationItem(currentItemToShow, currentItemToShow, true);
            end.push(endItem);
            currentItemToShow++;
        }
        return end;
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getStartArray = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var counterPages = 0;
        /** @type {?} */
        var start = [];
        /** @type {?} */
        var maxSizeArray = 3;
        while (counterPages < maxSizeArray && counterPages < totalPages) {
            /** @type {?} */
            var startItem = counterPages === 2 && currentPage > 5 ?
                this.createPaginationItem(this._elipsisText, counterPages, true) :
                this.createPaginationItem(counterPages + 1, counterPages + 1, true);
            start.push(startItem);
            counterPages++;
        }
        return start;
    };
    /**
     * @private
     * @param {?} label
     * @param {?} value
     * @param {?=} classExpanded
     * @return {?}
     */
    NxPaginationUtils.prototype.createPaginationItem = /**
     * @private
     * @param {?} label
     * @param {?} value
     * @param {?=} classExpanded
     * @return {?}
     */
    function (label, value, classExpanded) {
        return { label: label, value: value, class: classExpanded ? this._classExpanded : '' };
    };
    NxPaginationUtils.decorators = [
        { type: Injectable }
    ];
    return NxPaginationUtils;
}());
export { NxPaginationUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._pagesToShow;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._elipsisText;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._classExpanded;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsicGFnaW5hdGlvbi9wYWdpbmF0aW9uLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUkzQztJQUFBO1FBRVUsaUJBQVksR0FBRyxDQUFDLENBQUM7UUFDakIsaUJBQVksR0FBVyxLQUFLLENBQUM7UUFDN0IsbUJBQWMsR0FBVyxlQUFlLENBQUM7SUF5RW5ELENBQUM7Ozs7OztJQXZFQyxvQ0FBUTs7Ozs7SUFBUixVQUFTLFdBQW1CLEVBQUUsVUFBa0I7O1lBRTFDLEtBQUssR0FBRyxFQUFFOztZQUNWLEtBQUssR0FBRyxFQUFFOztZQUFFLE1BQU0sR0FBRyxFQUFFOztZQUFFLEdBQUcsR0FBRyxFQUFFO1FBRXJDLHVCQUF1QjtRQUN2QixLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDcEQseUJBQXlCO1FBQ3pCLE1BQU0sR0FBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN2RCxxQkFBcUI7UUFDckIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWhELEtBQUssb0JBQVEsS0FBSyxFQUFLLE1BQU0sRUFBSyxHQUFHLENBQUUsQ0FBQztRQUV4QyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVELDBDQUFjOzs7OztJQUFkLFVBQWUsV0FBbUIsRUFBRSxVQUFrQjs7WUFDaEQsVUFBVSxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUM7O1lBQ2hELE1BQU0sR0FBRyxFQUFFO1FBRWpCLE9BQ0UsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDO1lBQ2pCLFVBQVUsSUFBSSxDQUFDO1lBQ2YsVUFBVSxJQUFJLFVBQVUsR0FBRyxDQUFDO1lBQzVCLENBQUMsVUFBVSxJQUFJLFdBQVcsR0FBRyxDQUFDLElBQUksVUFBVSxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFDaEU7WUFDQSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUMvRCxVQUFVLEVBQUUsQ0FBQztTQUNkO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Ozs7O0lBQ0QsdUNBQVc7Ozs7O0lBQVgsVUFBWSxXQUFtQixFQUFFLFVBQWtCOztZQUMzQyxHQUFHLEdBQUcsRUFBRTs7WUFDVixpQkFBaUIsR0FDbkIsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUM7O1lBQzVELFlBQVksR0FBRyxXQUFXLEdBQUcsVUFBVSxHQUFHLENBQUM7UUFFakQsT0FBTyxpQkFBaUIsSUFBSSxVQUFVLEVBQUU7O2dCQUNoQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUM7Z0JBQ2hELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsRUFBRyxpQkFBaUIsRUFBRSxJQUFJLENBQUM7WUFDeEUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsQixpQkFBaUIsRUFBRSxDQUFDO1NBQ3JCO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOzs7Ozs7SUFDRCx5Q0FBYTs7Ozs7SUFBYixVQUFjLFdBQW1CLEVBQUUsVUFBa0I7O1lBQy9DLFlBQVksR0FBRyxDQUFDOztZQUNkLEtBQUssR0FBRyxFQUFFOztZQUNWLFlBQVksR0FBRyxDQUFDO1FBRXRCLE9BQU8sWUFBWSxHQUFHLFlBQVksSUFBSSxZQUFZLEdBQUcsVUFBVSxFQUFFOztnQkFDekQsU0FBUyxHQUFHLFlBQVksS0FBSyxDQUFDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksR0FBRyxDQUFDLEVBQUcsWUFBWSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUM7WUFFdEUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN0QixZQUFZLEVBQUUsQ0FBQztTQUNoQjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7Ozs7SUFHTyxnREFBb0I7Ozs7Ozs7SUFBNUIsVUFBNkIsS0FBc0IsRUFBRSxLQUFhLEVBQUUsYUFBdUI7UUFDekYsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUcsQ0FBQztJQUMxRixDQUFDOztnQkEzRUYsVUFBVTs7SUE2RVgsd0JBQUM7Q0FBQSxBQTdFRCxJQTZFQztTQTVFWSxpQkFBaUI7Ozs7OztJQUM1Qix5Q0FBeUI7Ozs7O0lBQ3pCLHlDQUFxQzs7Ozs7SUFDckMsMkNBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vcGFnaW5hdGlvbi5jb21wb25lbnQnO1xuXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE54UGFnaW5hdGlvblV0aWxzICB7XG4gIHByaXZhdGUgX3BhZ2VzVG9TaG93ID0gMztcbiAgcHJpdmF0ZSBfZWxpcHNpc1RleHQ6IHN0cmluZyA9ICcuLi4nO1xuICBwcml2YXRlIF9jbGFzc0V4cGFuZGVkOiBzdHJpbmcgPSAnZXhwYW5kZWQtdmlldyc7XG5cbiAgZ2V0UGFnZXMoY3VycmVudFBhZ2U6IG51bWJlciwgdG90YWxQYWdlczogbnVtYmVyKTogUGFnZVtdIHtcblxuICAgIGxldCBwYWdlcyA9IFtdO1xuICAgIGxldCBzdGFydCA9IFtdLCBtaWRkbGUgPSBbXSwgZW5kID0gW107XG5cbiAgICAvLyBGaXJzdCBhcnJheSAtPiBzdGFydFxuICAgIHN0YXJ0ID0gdGhpcy5nZXRTdGFydEFycmF5KGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2VzKTtcbiAgICAvLyBTZWNvbmQgYXJyYXkgLT4gbWlkZGxlXG4gICAgbWlkZGxlID0gIHRoaXMuZ2V0TWlkZGxlQXJyYXkoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpO1xuICAgIC8vIFRoaXJkIGFycmF5IC0+IGVuZFxuICAgIGVuZCA9IHRoaXMuZ2V0RW5kQXJyYXkoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpO1xuXG4gICAgcGFnZXMgPSBbIC4uLnN0YXJ0LCAuLi5taWRkbGUsIC4uLmVuZCBdO1xuXG4gICAgcmV0dXJuIHBhZ2VzO1xuICB9XG5cbiAgZ2V0TWlkZGxlQXJyYXkoY3VycmVudFBhZ2U6IG51bWJlciwgdG90YWxQYWdlczogbnVtYmVyKTogQXJyYXk8YW55PiB7XG4gICAgbGV0IHBhZ2VOdW1iZXIgPSBjdXJyZW50UGFnZSA8IDYgPyA0IDogY3VycmVudFBhZ2UgLSAxO1xuICAgIGNvbnN0IG1pZGRsZSA9IFtdO1xuXG4gICAgd2hpbGUgKFxuICAgICAgbWlkZGxlLmxlbmd0aCA8IDMgJiZcbiAgICAgIHBhZ2VOdW1iZXIgPj0gMiAmJlxuICAgICAgcGFnZU51bWJlciA8PSB0b3RhbFBhZ2VzIC0gMyAmJlxuICAgICAgKHBhZ2VOdW1iZXIgPD0gY3VycmVudFBhZ2UgKyAxICYmIHBhZ2VOdW1iZXIgPj0gY3VycmVudFBhZ2UgLSAxKVxuICAgICkge1xuICAgICAgbWlkZGxlLnB1c2godGhpcy5jcmVhdGVQYWdpbmF0aW9uSXRlbShwYWdlTnVtYmVyLCBwYWdlTnVtYmVyKSk7XG4gICAgICBwYWdlTnVtYmVyKys7XG4gICAgfVxuICAgIHJldHVybiBtaWRkbGU7XG4gIH1cbiAgZ2V0RW5kQXJyYXkoY3VycmVudFBhZ2U6IG51bWJlciwgdG90YWxQYWdlczogbnVtYmVyKTogQXJyYXk8YW55PiB7XG4gICAgY29uc3QgZW5kID0gW107XG4gICAgbGV0IGN1cnJlbnRJdGVtVG9TaG93OiBudW1iZXIgPVxuICAgICAgdG90YWxQYWdlcyA8PSAzID8gdG90YWxQYWdlcyArIDEgOlxuICAgICAgdG90YWxQYWdlcyA8PSA2ID8gdG90YWxQYWdlcyAtICh0b3RhbFBhZ2VzIC0gNCkgOiB0b3RhbFBhZ2VzIC0gMiA7XG4gICAgY29uc3Qgc2hvd0VsbGlwc2lzID0gY3VycmVudFBhZ2UgPCB0b3RhbFBhZ2VzIC0gNDtcblxuICAgIHdoaWxlIChjdXJyZW50SXRlbVRvU2hvdyA8PSB0b3RhbFBhZ2VzKSB7XG4gICAgICBjb25zdCBlbmRJdGVtID0gZW5kLmxlbmd0aCA9PT0gMCAmJiBzaG93RWxsaXBzaXMgP1xuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2luYXRpb25JdGVtKHRoaXMuX2VsaXBzaXNUZXh0LCBjdXJyZW50SXRlbVRvU2hvdywgdHJ1ZSkgOlxuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2luYXRpb25JdGVtKGN1cnJlbnRJdGVtVG9TaG93ICwgY3VycmVudEl0ZW1Ub1Nob3csIHRydWUpO1xuICAgICAgZW5kLnB1c2goZW5kSXRlbSk7XG4gICAgICBjdXJyZW50SXRlbVRvU2hvdysrO1xuICAgIH1cblxuICAgIHJldHVybiBlbmQ7XG4gIH1cbiAgZ2V0U3RhcnRBcnJheShjdXJyZW50UGFnZTogbnVtYmVyLCB0b3RhbFBhZ2VzOiBudW1iZXIpOiBBcnJheTxhbnk+IHtcbiAgICBsZXQgY291bnRlclBhZ2VzID0gMDtcbiAgICBjb25zdCBzdGFydCA9IFtdO1xuICAgIGNvbnN0IG1heFNpemVBcnJheSA9IDM7XG5cbiAgICB3aGlsZSAoY291bnRlclBhZ2VzIDwgbWF4U2l6ZUFycmF5ICYmIGNvdW50ZXJQYWdlcyA8IHRvdGFsUGFnZXMpIHtcbiAgICAgIGNvbnN0IHN0YXJ0SXRlbSA9IGNvdW50ZXJQYWdlcyA9PT0gMiAmJiBjdXJyZW50UGFnZSA+IDUgP1xuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2luYXRpb25JdGVtKHRoaXMuX2VsaXBzaXNUZXh0LCBjb3VudGVyUGFnZXMsIHRydWUpIDpcbiAgICAgICAgdGhpcy5jcmVhdGVQYWdpbmF0aW9uSXRlbShjb3VudGVyUGFnZXMgKyAxICwgY291bnRlclBhZ2VzICsgMSwgdHJ1ZSk7XG5cbiAgICAgIHN0YXJ0LnB1c2goc3RhcnRJdGVtKTtcbiAgICAgIGNvdW50ZXJQYWdlcysrO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFydDtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBjcmVhdGVQYWdpbmF0aW9uSXRlbShsYWJlbDogc3RyaW5nIHwgbnVtYmVyLCB2YWx1ZTogbnVtYmVyLCBjbGFzc0V4cGFuZGVkPzogYm9vbGVhbikge1xuICAgIHJldHVybiB7IGxhYmVsOiBsYWJlbCwgdmFsdWU6IHZhbHVlLCBjbGFzczogY2xhc3NFeHBhbmRlZCA/IHRoaXMuX2NsYXNzRXhwYW5kZWQgOiAnJyAgfTtcbiAgfVxuXG59XG4iXX0=