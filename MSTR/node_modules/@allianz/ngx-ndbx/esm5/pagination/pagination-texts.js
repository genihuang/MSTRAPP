/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/**
 * Interface for providing custom labels in a simple pagination.
 * With an implementation you can localize your pagination with the NX_PAGINATION_TEXTS injection token.
 * @record
 */
export function IPaginationTexts() { }
if (false) {
    /**
     * Label that should replace 'previous'.
     * @type {?}
     */
    IPaginationTexts.prototype.previous;
    /**
     * Label that should replace 'next'.
     * @type {?}
     */
    IPaginationTexts.prototype.next;
    /**
     * Label that should replace 'first'.
     *
     * Optional attribute needed only for the advanced pagination.
     * @type {?|undefined}
     */
    IPaginationTexts.prototype.first;
    /**
     * Label that should replace 'last'.
     *
     * Optional attribute needed only for the advanced pagination.
     * @type {?|undefined}
     */
    IPaginationTexts.prototype.last;
    /**
     * Label that should replace 'of'.
     * @type {?}
     */
    IPaginationTexts.prototype.ofLabel;
    /**
     * Label that should replace the aria label.
     * @type {?}
     */
    IPaginationTexts.prototype.ariaLabel;
}
/** @type {?} */
export var DefaultPaginationTexts = {
    previous: 'Previous',
    next: 'Next',
    first: 'First',
    last: 'Last',
    ofLabel: 'of',
    ariaLabel: 'Please select your page'
};
/**
 * InjectionToken for pagination that can be used to override default locale code.
 * @type {?}
 */
export var NX_PAGINATION_TEXTS = new InjectionToken('nx-pagination-texts');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi10ZXh0cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsicGFnaW5hdGlvbi9wYWdpbmF0aW9uLXRleHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUMsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFNeEQsc0NBd0JDOzs7Ozs7SUF0QkMsb0NBQWlCOzs7OztJQUdqQixnQ0FBYTs7Ozs7OztJQU1iLGlDQUFlOzs7Ozs7O0lBTWYsZ0NBQWM7Ozs7O0lBR2QsbUNBQWdCOzs7OztJQUdoQixxQ0FBa0I7OztBQUdwQixNQUFNLEtBQU8sc0JBQXNCLEdBQUk7SUFDckMsUUFBUSxFQUFFLFVBQVU7SUFDcEIsSUFBSSxFQUFFLE1BQU07SUFDWixLQUFLLEVBQUUsT0FBTztJQUNkLElBQUksRUFBRSxNQUFNO0lBQ1osT0FBTyxFQUFFLElBQUk7SUFDYixTQUFTLEVBQUUseUJBQXlCO0NBQ3JDOzs7OztBQUlELE1BQU0sS0FBTyxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FBbUIscUJBQXFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbiwgTE9DQUxFX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHByb3ZpZGluZyBjdXN0b20gbGFiZWxzIGluIGEgc2ltcGxlIHBhZ2luYXRpb24uXG4gKiBXaXRoIGFuIGltcGxlbWVudGF0aW9uIHlvdSBjYW4gbG9jYWxpemUgeW91ciBwYWdpbmF0aW9uIHdpdGggdGhlIE5YX1BBR0lOQVRJT05fVEVYVFMgaW5qZWN0aW9uIHRva2VuLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQYWdpbmF0aW9uVGV4dHMge1xuICAvKiogTGFiZWwgdGhhdCBzaG91bGQgcmVwbGFjZSAncHJldmlvdXMnLiAqL1xuICBwcmV2aW91czogc3RyaW5nO1xuXG4gIC8qKiBMYWJlbCB0aGF0IHNob3VsZCByZXBsYWNlICduZXh0Jy4gKi9cbiAgbmV4dDogc3RyaW5nO1xuXG4gIC8qKiBMYWJlbCB0aGF0IHNob3VsZCByZXBsYWNlICdmaXJzdCcuXG4gICAqXG4gICAqIE9wdGlvbmFsIGF0dHJpYnV0ZSBuZWVkZWQgb25seSBmb3IgdGhlIGFkdmFuY2VkIHBhZ2luYXRpb24uXG4gICAqL1xuICBmaXJzdD86IHN0cmluZztcblxuICAvKiogTGFiZWwgdGhhdCBzaG91bGQgcmVwbGFjZSAnbGFzdCcuXG4gICAqXG4gICAqIE9wdGlvbmFsIGF0dHJpYnV0ZSBuZWVkZWQgb25seSBmb3IgdGhlIGFkdmFuY2VkIHBhZ2luYXRpb24uXG4gICAqL1xuICBsYXN0Pzogc3RyaW5nO1xuXG4gIC8qKiBMYWJlbCB0aGF0IHNob3VsZCByZXBsYWNlICdvZicuICovXG4gIG9mTGFiZWw6IHN0cmluZztcblxuICAvKiogTGFiZWwgdGhhdCBzaG91bGQgcmVwbGFjZSB0aGUgYXJpYSBsYWJlbC4gKi9cbiAgYXJpYUxhYmVsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0UGFnaW5hdGlvblRleHRzID0gIHtcbiAgcHJldmlvdXM6ICdQcmV2aW91cycsXG4gIG5leHQ6ICdOZXh0JyxcbiAgZmlyc3Q6ICdGaXJzdCcsXG4gIGxhc3Q6ICdMYXN0JyxcbiAgb2ZMYWJlbDogJ29mJyxcbiAgYXJpYUxhYmVsOiAnUGxlYXNlIHNlbGVjdCB5b3VyIHBhZ2UnXG59O1xuXG5cbi8qKiBJbmplY3Rpb25Ub2tlbiBmb3IgcGFnaW5hdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIGRlZmF1bHQgbG9jYWxlIGNvZGUuICovXG5leHBvcnQgY29uc3QgTlhfUEFHSU5BVElPTl9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxJUGFnaW5hdGlvblRleHRzPignbngtcGFnaW5hdGlvbi10ZXh0cycpO1xuIl19