/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ChangeDetectionStrategy } from '@angular/core';
import { Component } from '@angular/core';
import { clamp } from '@allianz/ngx-ndbx/utils';
/** @type {?} */
var progressbarId = 0;
var NxProgressbarComponent = /** @class */ (function () {
    function NxProgressbarComponent() {
        /**
         * \@docs-private
         */
        this.progressbarId = "nx-progress-bar-" + progressbarId++;
        this._value = 0;
    }
    Object.defineProperty(NxProgressbarComponent.prototype, "value", {
        /** Sets the value of the progress bar. Defaults to zero. Mirrored to aria-value now. */
        get: /**
         * Sets the value of the progress bar. Defaults to zero. Mirrored to aria-value now.
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._value = clamp(value || 0); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxProgressbarComponent.prototype._primaryTransform = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scale = this.value;
        return { transform: "scaleX(" + scale + ")" };
    };
    NxProgressbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-progressbar',
                    template: "<div class=\"nx-progress__track\">\n  <div class=\"nx-progress__indicator\" [ngStyle]=\"_primaryTransform()\"></div>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.aria-valuenow]': 'value'
                    },
                    styles: [":host{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}.nx-progress__track{background-color:#ececec;height:100%}.nx-progress__indicator{-webkit-transform-origin:top left;transform-origin:top left;height:100%;position:absolute;width:100%}.nx-progress__indicator::after{height:100%;position:absolute;width:100%;-webkit-animation:none;animation:none;content:'';display:inline-block;left:0;background:#007ab3}"]
                }] }
    ];
    NxProgressbarComponent.propDecorators = {
        value: [{ type: Input }]
    };
    return NxProgressbarComponent;
}());
export { NxProgressbarComponent };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxProgressbarComponent.prototype.progressbarId;
    /**
     * @type {?}
     * @private
     */
    NxProgressbarComponent.prototype._value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvcHJvZ3Jlc3NiYXIvIiwic291cmNlcyI6WyJwcm9ncmVzc2Jhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUM7O0lBQzVDLGFBQWEsR0FBRyxDQUFDO0FBRXJCO0lBQUE7Ozs7UUFZRSxrQkFBYSxHQUFHLHFCQUFtQixhQUFhLEVBQUksQ0FBQztRQU03QyxXQUFNLEdBQVcsQ0FBQyxDQUFDO0lBTTdCLENBQUM7SUFUQyxzQkFDSSx5Q0FBSztRQUZULHdGQUF3Rjs7Ozs7UUFDeEYsY0FDc0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7Ozs7UUFDM0MsVUFBVSxLQUFhLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O09BRGxCOzs7O0lBSTNDLGtEQUFpQjs7O0lBQWpCOztZQUNRLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSztRQUN4QixPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVUsS0FBSyxNQUFHLEVBQUMsQ0FBQztJQUN6QyxDQUFDOztnQkF2QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLHdJQUEyQztvQkFDM0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBRS9DLElBQUksRUFBRTt3QkFDSixzQkFBc0IsRUFBRSxPQUFPO3FCQUNoQzs7aUJBQ0Y7Ozt3QkFPRSxLQUFLOztJQVNSLDZCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0FmWSxzQkFBc0I7Ozs7OztJQUdqQywrQ0FBcUQ7Ozs7O0lBTXJELHdDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L3V0aWxzJztcbmxldCBwcm9ncmVzc2JhcklkID0gMDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtcHJvZ3Jlc3NiYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcHJvZ3Jlc3NiYXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJy4vcHJvZ3Jlc3NiYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLXZhbHVlbm93XSc6ICd2YWx1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeFByb2dyZXNzYmFyQ29tcG9uZW50IHtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBwcm9ncmVzc2JhcklkID0gYG54LXByb2dyZXNzLWJhci0ke3Byb2dyZXNzYmFySWQrK31gO1xuXG4gIC8qKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyLiBEZWZhdWx0cyB0byB6ZXJvLiBNaXJyb3JlZCB0byBhcmlhLXZhbHVlIG5vdy4gKi9cbiAgQElucHV0KClcbiAgZ2V0IHZhbHVlKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl92YWx1ZTsgfVxuICBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikgeyB0aGlzLl92YWx1ZSA9IGNsYW1wKHZhbHVlIHx8IDApOyB9XG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXIgPSAwO1xuXG4gIF9wcmltYXJ5VHJhbnNmb3JtKCkge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy52YWx1ZTtcbiAgICByZXR1cm4ge3RyYW5zZm9ybTogYHNjYWxlWCgke3NjYWxlfSlgfTtcbiAgfVxufVxuIl19