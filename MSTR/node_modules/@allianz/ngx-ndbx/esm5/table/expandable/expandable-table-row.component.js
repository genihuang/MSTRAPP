/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/**
 * This is an expandable table row.
 * It can collapse its height to hide the content.
 * Requires the table cells to have the `[nxExpandableTableCell]` component.
 */
var NxExpandableTableRowComponent = /** @class */ (function () {
    function NxExpandableTableRowComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this.expanded = new BehaviorSubject(false);
    }
    /**
     * Toggles the expansion of this row.
     */
    /**
     * Toggles the expansion of this row.
     * @return {?}
     */
    NxExpandableTableRowComponent.prototype.toggle = /**
     * Toggles the expansion of this row.
     * @return {?}
     */
    function () {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    };
    /**
     * Expands this row.
     */
    /**
     * Expands this row.
     * @return {?}
     */
    NxExpandableTableRowComponent.prototype.expand = /**
     * Expands this row.
     * @return {?}
     */
    function () {
        if (!this.expanded.value) {
            this.expanded.next(true);
            this._changeDetectorRef.markForCheck();
        }
    };
    /**
     * Closes this row.
     */
    /**
     * Closes this row.
     * @return {?}
     */
    NxExpandableTableRowComponent.prototype.close = /**
     * Closes this row.
     * @return {?}
     */
    function () {
        if (this.expanded.value) {
            this.expanded.next(false);
            this._changeDetectorRef.markForCheck();
        }
    };
    NxExpandableTableRowComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'tr[nxExpandableTableRow]',
                    host: {
                        'class': 'nx-expandable-table-row'
                    },
                    template: "<ng-content></ng-content>",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxExpandableTableRowComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return NxExpandableTableRowComponent;
}());
export { NxExpandableTableRowComponent };
if (false) {
    /** @type {?} */
    NxExpandableTableRowComponent.prototype.expanded;
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableRowComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS1yb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJleHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFRdkM7SUFZRSx1Q0FBb0Isa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFGekQsYUFBUSxHQUE2QixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVKLENBQUM7SUFFN0Q7O09BRUc7Ozs7O0lBQ0gsOENBQU07Ozs7SUFBTjtRQUNFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILDhDQUFNOzs7O0lBQU47UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILDZDQUFLOzs7O0lBQUw7UUFDRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUN4QztJQUNILENBQUM7O2dCQTNDRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLElBQUksRUFBRTt3QkFDTCxPQUFPLEVBQUUseUJBQXlCO3FCQUNsQztvQkFDRCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBakI0QyxpQkFBaUI7O0lBcUQ5RCxvQ0FBQztDQUFBLEFBNUNELElBNENDO1NBbkNZLDZCQUE2Qjs7O0lBQ3hDLGlEQUFnRTs7Ozs7SUFFcEQsMkRBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnhFeHBhbmRhYmxlIH0gZnJvbSAnLi90b2dnbGUtYnV0dG9uLmNvbXBvbmVudCc7XG5cbi8qKlxuICogVGhpcyBpcyBhbiBleHBhbmRhYmxlIHRhYmxlIHJvdy5cbiAqIEl0IGNhbiBjb2xsYXBzZSBpdHMgaGVpZ2h0IHRvIGhpZGUgdGhlIGNvbnRlbnQuXG4gKiBSZXF1aXJlcyB0aGUgdGFibGUgY2VsbHMgdG8gaGF2ZSB0aGUgYFtueEV4cGFuZGFibGVUYWJsZUNlbGxdYCBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndHJbbnhFeHBhbmRhYmxlVGFibGVSb3ddJyxcbiAgaG9zdDoge1xuICAgJ2NsYXNzJzogJ254LWV4cGFuZGFibGUtdGFibGUtcm93J1xuICB9LFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeEV4cGFuZGFibGVUYWJsZVJvd0NvbXBvbmVudCBpbXBsZW1lbnRzIE54RXhwYW5kYWJsZSB7XG4gIGV4cGFuZGVkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGV4cGFuc2lvbiBvZiB0aGlzIHJvdy5cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5leHBhbmRlZC52YWx1ZSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV4cGFuZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBhbmRzIHRoaXMgcm93LlxuICAgKi9cbiAgZXhwYW5kKCkge1xuICAgIGlmICghdGhpcy5leHBhbmRlZC52YWx1ZSkge1xuICAgICAgdGhpcy5leHBhbmRlZC5uZXh0KHRydWUpO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGlzIHJvdy5cbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGlmICh0aGlzLmV4cGFuZGVkLnZhbHVlKSB7XG4gICAgICB0aGlzLmV4cGFuZGVkLm5leHQoZmFsc2UpO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG59XG4iXX0=