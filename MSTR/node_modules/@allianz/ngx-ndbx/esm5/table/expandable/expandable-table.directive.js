/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, QueryList, Directive } from '@angular/core';
import { NxExpandableTableRowComponent } from './expandable-table-row.component';
import { flatMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';
import { combineLatest, BehaviorSubject } from 'rxjs';
/**
 * The nxExpandableTable adds row expansion functionality to the nxTable.
 * It provides the logic to expand/collapse all expandable rows simultanously.
 */
var NxExpandableTableDirective = /** @class */ (function () {
    function NxExpandableTableDirective() {
        this.expanded = new BehaviorSubject(false);
    }
    /**
     * @return {?}
     */
    NxExpandableTableDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.rows.changes.pipe(startWith(this.rows), flatMap((/**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            return combineLatest(rows.map((/**
             * @param {?} row
             * @return {?}
             */
            function (row) { return row.expanded; })));
        })), map((/**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            return values.reduce((/**
             * @param {?} a
             * @param {?} x
             * @return {?}
             */
            function (a, x) { return a && x; }), true);
        })), distinctUntilChanged())
            .subscribe((/**
         * @param {?} rowsOpen
         * @return {?}
         */
        function (rowsOpen) {
            _this.expanded.next(rowsOpen);
        }));
    };
    /**
     * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.
     */
    /**
     * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.
     * @return {?}
     */
    NxExpandableTableDirective.prototype.toggle = /**
     * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.
     * @return {?}
     */
    function () {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    };
    /**
     * Expands all expandable rows.
     */
    /**
     * Expands all expandable rows.
     * @return {?}
     */
    NxExpandableTableDirective.prototype.expand = /**
     * Expands all expandable rows.
     * @return {?}
     */
    function () {
        this.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        function (row) { return row.expanded.next(true); }));
    };
    /**
     * Closes all expandable rows.
     */
    /**
     * Closes all expandable rows.
     * @return {?}
     */
    NxExpandableTableDirective.prototype.close = /**
     * Closes all expandable rows.
     * @return {?}
     */
    function () {
        this.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        function (row) { return row.expanded.next(false); }));
    };
    NxExpandableTableDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'table[nxExpandableTable]',
                    exportAs: 'nxExpandableTable'
                },] }
    ];
    NxExpandableTableDirective.propDecorators = {
        rows: [{ type: ContentChildren, args: [NxExpandableTableRowComponent,] }]
    };
    return NxExpandableTableDirective;
}());
export { NxExpandableTableDirective };
if (false) {
    /** @type {?} */
    NxExpandableTableDirective.prototype.rows;
    /** @type {?} */
    NxExpandableTableDirective.prototype.expanded;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC90YWJsZS8iLCJzb3VyY2VzIjpbImV4cGFuZGFibGUvZXhwYW5kYWJsZS10YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFpQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDakYsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBT3REO0lBQUE7UUFPRSxhQUFRLEdBQTZCLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBMENsRSxDQUFDOzs7O0lBeENDLG9EQUFlOzs7SUFBZjtRQUFBLGlCQWNDO1FBYkMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNwQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUNwQixPQUFPOzs7O1FBQUMsVUFBQyxJQUFxQztZQUM1QyxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFFBQVEsRUFBWixDQUFZLEVBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsRUFBQyxFQUNGLEdBQUc7Ozs7UUFBQyxVQUFDLE1BQWlCO1lBQ3BCLE9BQUEsTUFBTSxDQUFDLE1BQU07Ozs7O1lBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxJQUFJLENBQUMsRUFBTixDQUFNLEdBQUUsSUFBSSxDQUFDO1FBQXJDLENBQXFDLEVBQ3RDLEVBQ0Qsb0JBQW9CLEVBQUUsQ0FDdkI7YUFDQSxTQUFTOzs7O1FBQUMsVUFBQyxRQUFRO1lBQ2xCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILDJDQUFNOzs7O0lBQU47UUFDRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCwyQ0FBTTs7OztJQUFOO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBdkIsQ0FBdUIsRUFBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCwwQ0FBSzs7OztJQUFMO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBeEIsQ0FBd0IsRUFBQyxDQUFDO0lBQ3JELENBQUM7O2dCQWhERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsUUFBUSxFQUFFLG1CQUFtQjtpQkFDOUI7Ozt1QkFFRSxlQUFlLFNBQUMsNkJBQTZCOztJQTRDaEQsaUNBQUM7Q0FBQSxBQWpERCxJQWlEQztTQTdDWSwwQkFBMEI7OztJQUNyQywwQ0FBK0Y7O0lBRS9GLDhDQUFnRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0LCBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlLXRhYmxlLXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgZmxhdE1hcCwgc3RhcnRXaXRoLCBtYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOeEV4cGFuZGFibGUgfSBmcm9tICcuL3RvZ2dsZS1idXR0b24uY29tcG9uZW50JztcblxuLyoqXG4gKiBUaGUgbnhFeHBhbmRhYmxlVGFibGUgYWRkcyByb3cgZXhwYW5zaW9uIGZ1bmN0aW9uYWxpdHkgdG8gdGhlIG54VGFibGUuXG4gKiBJdCBwcm92aWRlcyB0aGUgbG9naWMgdG8gZXhwYW5kL2NvbGxhcHNlIGFsbCBleHBhbmRhYmxlIHJvd3Mgc2ltdWx0YW5vdXNseS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAndGFibGVbbnhFeHBhbmRhYmxlVGFibGVdJyxcbiAgZXhwb3J0QXM6ICdueEV4cGFuZGFibGVUYWJsZSdcbn0pXG5leHBvcnQgY2xhc3MgTnhFeHBhbmRhYmxlVGFibGVEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBOeEV4cGFuZGFibGUge1xuICBAQ29udGVudENoaWxkcmVuKE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50KSByb3dzOiBRdWVyeUxpc3Q8TnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQ+O1xuXG4gIGV4cGFuZGVkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5yb3dzLmNoYW5nZXMucGlwZShcbiAgICAgIHN0YXJ0V2l0aCh0aGlzLnJvd3MpLFxuICAgICAgZmxhdE1hcCgocm93czogTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnRbXSkgPT4ge1xuICAgICAgICByZXR1cm4gY29tYmluZUxhdGVzdChyb3dzLm1hcChyb3cgPT4gcm93LmV4cGFuZGVkKSk7XG4gICAgICB9KSxcbiAgICAgIG1hcCgodmFsdWVzOiBib29sZWFuW10pID0+XG4gICAgICAgIHZhbHVlcy5yZWR1Y2UoKGEsIHgpID0+IGEgJiYgeCwgdHJ1ZSlcbiAgICAgICksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKVxuICAgIC5zdWJzY3JpYmUoKHJvd3NPcGVuKSA9PiB7XG4gICAgICB0aGlzLmV4cGFuZGVkLm5leHQocm93c09wZW4pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGV4cGFuZGFibGUgcm93cy4gSWYgYWxsIHJvd3MgYXJlIG9wZW4gaXQgd2lsbCBjbG9zZSB0aGVtLCBvdGhlcndpc2UgaXQgd2lsbCBvcGVuIHRoZW0uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuZXhwYW5kZWQudmFsdWUpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5leHBhbmQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyBhbGwgZXhwYW5kYWJsZSByb3dzLlxuICAgKi9cbiAgZXhwYW5kKCkge1xuICAgIHRoaXMucm93cy5mb3JFYWNoKHJvdyA9PiByb3cuZXhwYW5kZWQubmV4dCh0cnVlKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIGFsbCBleHBhbmRhYmxlIHJvd3MuXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB0aGlzLnJvd3MuZm9yRWFjaChyb3cgPT4gcm93LmV4cGFuZGVkLm5leHQoZmFsc2UpKTtcbiAgfVxufVxuIl19