/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
/**
 * @record
 */
export function NxExpandable() { }
if (false) {
    /**
     * Indicates if this expandable instance is open or not.
     * @type {?}
     */
    NxExpandable.prototype.expanded;
    /**
     * Toggles the open state.
     * @type {?}
     */
    NxExpandable.prototype.toggle;
    /**
     * Expands this component.
     * @type {?}
     */
    NxExpandable.prototype.expand;
    /**
     * Closes this component.
     * @type {?}
     */
    NxExpandable.prototype.close;
}
/**
 * This toggle button can be clicked and toggles expandable elements.
 * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.
 */
var NxToggleButtonComponent = /** @class */ (function () {
    function NxToggleButtonComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._expanded = false;
        this._ariaLabel = '';
    }
    Object.defineProperty(NxToggleButtonComponent.prototype, "target", {
        /**
         * This is the expandable target that will be toggled when the user clicks the button.
         */
        set: /**
         * This is the expandable target that will be toggled when the user clicks the button.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._target = value;
            if (this._subscription) {
                this._subscription.unsubscribe();
            }
            if (this._target) {
                this._subscription = this._target.expanded.subscribe((/**
                 * @param {?} expanded
                 * @return {?}
                 */
                function (expanded) {
                    _this._expanded = expanded;
                    _this._changeDetectorRef.markForCheck();
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxToggleButtonComponent.prototype, "ariaLabel", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ariaLabel = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxToggleButtonComponent.prototype._onClick = /**
     * @return {?}
     */
    function () {
        if (this._target) {
            this._target.toggle();
        }
    };
    /**
     * @return {?}
     */
    NxToggleButtonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    NxToggleButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-toggle-button',
                    template: "<button (click)=\"_onClick()\"\n    class=\"nx-toggle-button\"\n    [attr.aria-label]=\"_ariaLabel\"\n    [attr.aria-expanded]=\"_expanded\"\n    [class.is-expanded]=\"_expanded\">\n  <nx-icon name=\"chevron-down\"\n      aria-hidden=\"true\"\n      size=\"s\"\n      class=\"nx-toggle-button__icon\"></nx-icon>\n</button>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-toggle-button{display:block;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;outline:0;background:0 0;padding:0;line-height:24px;height:24px}.nx-toggle-button .nx-toggle-button__icon{-webkit-transform:rotateZ(0);transform:rotateZ(0);transition:transform .2s;transition:transform .2s,-webkit-transform .2s}.nx-toggle-button.is-expanded .nx-toggle-button__icon{-webkit-transform:rotateZ(-180deg);transform:rotateZ(-180deg)}.nx-toggle-button::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .nx-toggle-button:focus{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}"]
                }] }
    ];
    /** @nocollapse */
    NxToggleButtonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxToggleButtonComponent.propDecorators = {
        target: [{ type: Input }],
        ariaLabel: [{ type: Input }]
    };
    return NxToggleButtonComponent;
}());
export { NxToggleButtonComponent };
if (false) {
    /** @type {?} */
    NxToggleButtonComponent.prototype._expanded;
    /** @type {?} */
    NxToggleButtonComponent.prototype._target;
    /** @type {?} */
    NxToggleButtonComponent.prototype._ariaLabel;
    /**
     * @type {?}
     * @private
     */
    NxToggleButtonComponent.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    NxToggleButtonComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC90YWJsZS8iLCJzb3VyY2VzIjpbImV4cGFuZGFibGUvdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFhLE1BQU0sZUFBZSxDQUFDOzs7O0FBSXhHLGtDQVlDOzs7Ozs7SUFWQyxnQ0FBbUM7Ozs7O0lBR25DLDhCQUFtQjs7Ozs7SUFHbkIsOEJBQW1COzs7OztJQUduQiw2QkFBa0I7Ozs7OztBQU9wQjtJQXNDRSxpQ0FBb0Isa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUEvQnpELGNBQVMsR0FBWSxLQUFLLENBQUM7UUEyQjNCLGVBQVUsR0FBVyxFQUFFLENBQUM7SUFJb0MsQ0FBQztJQTFCN0Qsc0JBQ0ksMkNBQU07UUFKVjs7V0FFRzs7Ozs7O1FBQ0gsVUFDVyxLQUFtQjtZQUQ5QixpQkFjQztZQVpDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBRXJCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNsQztZQUVELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTOzs7O2dCQUFDLFVBQUEsUUFBUTtvQkFDekQsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7b0JBQzFCLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDekMsQ0FBQyxFQUFDLENBQUM7YUFDTjtRQUNILENBQUM7OztPQUFBO0lBR0Qsc0JBQ0ksOENBQVM7Ozs7O1FBRGIsVUFDYyxLQUFhO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTs7OztJQU9ELDBDQUFROzs7SUFBUjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7OztJQUVELDZDQUFXOzs7SUFBWDtRQUNFLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQzs7Z0JBbERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixnVkFBNkM7b0JBRTdDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztpQkFDaEQ7Ozs7Z0JBM0JtRCxpQkFBaUI7Ozt5QkFrQ2xFLEtBQUs7NEJBaUJMLEtBQUs7O0lBc0JSLDhCQUFDO0NBQUEsQUFuREQsSUFtREM7U0E3Q1ksdUJBQXVCOzs7SUFDbEMsNENBQTJCOztJQW9CM0IsMENBQXNCOztJQU90Qiw2Q0FBd0I7Ozs7O0lBRXhCLGdEQUFvQzs7Ozs7SUFFeEIscURBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGUgfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTnhFeHBhbmRhYmxlIHtcbiAgLyoqIEluZGljYXRlcyBpZiB0aGlzIGV4cGFuZGFibGUgaW5zdGFuY2UgaXMgb3BlbiBvciBub3QuICAqL1xuICBleHBhbmRlZDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xuXG4gIC8qKiBUb2dnbGVzIHRoZSBvcGVuIHN0YXRlLiAqL1xuICB0b2dnbGU6ICgpID0+IHZvaWQ7XG5cbiAgLyoqIEV4cGFuZHMgdGhpcyBjb21wb25lbnQuICovXG4gIGV4cGFuZDogKCkgPT4gdm9pZDtcblxuICAvKiogQ2xvc2VzIHRoaXMgY29tcG9uZW50LiAqL1xuICBjbG9zZTogKCkgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiBUaGlzIHRvZ2dsZSBidXR0b24gY2FuIGJlIGNsaWNrZWQgYW5kIHRvZ2dsZXMgZXhwYW5kYWJsZSBlbGVtZW50cy5cbiAqIGUuZy4gaXQgY2FuIHRvZ2dsZSBhIGV4cGFuZGFibGUgdGFibGUgcm93IG9yIGFueXRoaW5nIGVsc2UgdGhhdCBpbXBsZW1lbnRzIHRoZSBgTnhFeHBhbmRhYmxlYCBpbnRlcmZhY2UuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXRvZ2dsZS1idXR0b24nLFxuICB0ZW1wbGF0ZVVybDogJy4vdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RvZ2dsZS1idXR0b24uc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeFRvZ2dsZUJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIF9leHBhbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBleHBhbmRhYmxlIHRhcmdldCB0aGF0IHdpbGwgYmUgdG9nZ2xlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgYnV0dG9uLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IHRhcmdldCh2YWx1ZTogTnhFeHBhbmRhYmxlKSB7XG4gICAgdGhpcy5fdGFyZ2V0ID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdGFyZ2V0KSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSB0aGlzLl90YXJnZXQuZXhwYW5kZWQuc3Vic2NyaWJlKGV4cGFuZGVkID0+IHtcbiAgICAgICAgICB0aGlzLl9leHBhbmRlZCA9IGV4cGFuZGVkO1xuICAgICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX3RhcmdldDogTnhFeHBhbmRhYmxlO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBhcmlhTGFiZWwodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2FyaWFMYWJlbCA9IHZhbHVlO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG4gIF9hcmlhTGFiZWw6IHN0cmluZyA9ICcnO1xuXG4gIHByaXZhdGUgX3N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBfb25DbGljaygpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0KSB7XG4gICAgICB0aGlzLl90YXJnZXQudG9nZ2xlKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=