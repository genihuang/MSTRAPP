/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Optional, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NxSortDirective } from './sort.directive';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { NxSortHeaderIntl } from './sort-header-intl';
var NxSortHeaderComponent = /** @class */ (function () {
    function NxSortHeaderComponent(_sort, _intl, _changeDetectorRef) {
        var _this = this;
        this._sort = _sort;
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._intlSubscription = this._intl.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this._changeDetectorRef.markForCheck(); }));
    }
    Object.defineProperty(NxSortHeaderComponent.prototype, "key", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key;
        },
        /** Sets the key of this sort header. */
        set: /**
         * Sets the key of this sort header.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._key !== value) {
                this._key = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxSortHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._parentChangeSubscription = this._sort._stateChanges.subscribe((/**
         * @return {?}
         */
        function () {
            _this._changeDetectorRef.markForCheck();
        }));
    };
    /**
     * @return {?}
     */
    NxSortHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._parentChangeSubscription) {
            this._parentChangeSubscription.unsubscribe();
        }
        this._intlSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    NxSortHeaderComponent.prototype._handleClick = /**
     * @return {?}
     */
    function () {
        this._sort.sort(this._key);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NxSortHeaderComponent.prototype._onKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this._sort.sort(this._key);
            // prevent page from scrolling down
            if ($event.keyCode === SPACE) {
                $event.preventDefault();
            }
        }
    };
    /**
     * @return {?}
     */
    NxSortHeaderComponent.prototype._isSortedAscending = /**
     * @return {?}
     */
    function () {
        return (this._sort.active === this._key && this._sort.direction === 'asc');
    };
    /**
     * @return {?}
     */
    NxSortHeaderComponent.prototype._isSortedDescending = /**
     * @return {?}
     */
    function () {
        return (this._sort.active === this._key && this._sort.direction === 'desc');
    };
    /**
     * @return {?}
     */
    NxSortHeaderComponent.prototype._getAriaLabel = /**
     * @return {?}
     */
    function () {
        if (this._sort.active === this._key && this._sort.direction === 'asc') {
            return this._key + " " + this._intl.sortDescendingAriaLabel;
        }
        return this._key + " " + this._intl.sortAscendingAriaLabel;
    };
    NxSortHeaderComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'th[nxSortHeaderCell]',
                    exportAs: 'nxSortHeaderComponent',
                    template: "<div class=\"nx-sort-header__focus-container\">\n  <div class=\"nx-sort-header__icons-container\">\n    <nx-icon name=\"chevron-up-small\" class=\"nx-sort-header__icon-up\"\n            [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\">\n    </nx-icon>\n    <nx-icon name=\"chevron-down-small\" class=\"nx-sort-header__icon-down\"\n            [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\">\n    </nx-icon>\n  </div>\n  <ng-content></ng-content>\n</div>\n",
                    host: {
                        '(click)': '_handleClick()',
                        '(keydown)': '_onKeydown($event)',
                        '[tabindex]': '0',
                        'role': 'button',
                        '[attr.aria-label]': '_getAriaLabel()'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{cursor:pointer}.nx-sort-header__icons-container{display:inline-block;margin-right:8px;vertical-align:bottom;width:24px;position:relative;height:24px}.nx-sort-header__icons-container nx-icon{font-size:20px;position:absolute;font-weight:600;width:24px}.nx-sort-header__icons-container .nx-sort-header__icon-up{top:-3px}.nx-sort-header__icons-container .nx-sort-header__icon-down{top:5px}.nx-sort-header__icons-container .nx-sort-header__hidden-icon{visibility:hidden}:host-context([data-whatinput=keyboard]):focus .nx-sort-header__focus-container{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}:host:focus{outline:0}"]
                }] }
    ];
    /** @nocollapse */
    NxSortHeaderComponent.ctorParameters = function () { return [
        { type: NxSortDirective, decorators: [{ type: Optional }] },
        { type: NxSortHeaderIntl },
        { type: ChangeDetectorRef }
    ]; };
    NxSortHeaderComponent.propDecorators = {
        key: [{ type: Input, args: ['nxSortHeaderCell',] }]
    };
    return NxSortHeaderComponent;
}());
export { NxSortHeaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._parentChangeSubscription;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._intlSubscription;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._key;
    /** @type {?} */
    NxSortHeaderComponent.prototype._sort;
    /** @type {?} */
    NxSortHeaderComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJzb3J0LWhlYWRlci9zb3J0LWhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBVSxpQkFBaUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMxSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd0RDtJQWdDRSwrQkFBK0IsS0FBc0IsRUFDNUMsS0FBdUIsRUFDdEIsa0JBQXFDO1FBRi9DLGlCQUtDO1FBTDhCLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBQzVDLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3RCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFFN0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLEVBQXRDLENBQXNDLEVBQUMsQ0FBQztJQUN0RyxDQUFDO0lBZkQsc0JBQ0ksc0NBQUc7Ozs7UUFLUDtZQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztRQUNuQixDQUFDO1FBVEQsd0NBQXdDOzs7Ozs7UUFDeEMsVUFDUSxLQUFhO1lBQ25CLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2FBQ25CO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7SUFZRCx3Q0FB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ZXRlY3Rpb25TdHJhdGVneSwgT25Jbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOeFNvcnREaXJlY3RpdmUgfSBmcm9tICcuL3NvcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRU5URVIsIFNQQUNFIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IE54U29ydEhlYWRlckludGwgfSBmcm9tICcuL3NvcnQtaGVhZGVyLWludGwnO1xuXG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndGhbbnhTb3J0SGVhZGVyQ2VsbF0nLFxuICBleHBvcnRBczogJ254U29ydEhlYWRlckNvbXBvbmVudCcsXG4gIHRlbXBsYXRlVXJsOiAnc29ydC1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnc29ydC1oZWFkZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICcoY2xpY2spJzogJ19oYW5kbGVDbGljaygpJyxcbiAgICAnKGtleWRvd24pJzogJ19vbktleWRvd24oJGV2ZW50KScsXG4gICAgJ1t0YWJpbmRleF0nOiAnMCcsXG4gICAgJ3JvbGUnOiAnYnV0dG9uJyxcbiAgICAnW2F0dHIuYXJpYS1sYWJlbF0nOiAnX2dldEFyaWFMYWJlbCgpJ1xuICB9LFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeFNvcnRIZWFkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBfcGFyZW50Q2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgX2ludGxTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBfa2V5OiBzdHJpbmc7XG5cbiAgLyoqIFNldHMgdGhlIGtleSBvZiB0aGlzIHNvcnQgaGVhZGVyLiAqL1xuICBASW5wdXQoJ254U29ydEhlYWRlckNlbGwnKVxuICBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5fa2V5ICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fa2V5ID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIGdldCBrZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fa2V5O1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHVibGljIF9zb3J0OiBOeFNvcnREaXJlY3RpdmUsXG4gICAgcHVibGljIF9pbnRsOiBOeFNvcnRIZWFkZXJJbnRsLFxuICAgIHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHtcbiAgICB0aGlzLl9pbnRsU3Vic2NyaXB0aW9uID0gdGhpcy5faW50bC5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLl9wYXJlbnRDaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLl9zb3J0Ll9zdGF0ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX3BhcmVudENoYW5nZVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5fcGFyZW50Q2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIHRoaXMuX2ludGxTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIF9oYW5kbGVDbGljaygpIHtcbiAgICB0aGlzLl9zb3J0LnNvcnQodGhpcy5fa2V5KTtcbiAgfVxuXG4gIF9vbktleWRvd24oJGV2ZW50KSB7XG4gICAgaWYgKCRldmVudCAmJiAoJGV2ZW50LmtleUNvZGUgPT09IEVOVEVSIHx8ICRldmVudC5rZXlDb2RlID09PSBTUEFDRSkpIHtcbiAgICAgIHRoaXMuX3NvcnQuc29ydCh0aGlzLl9rZXkpO1xuXG4gICAgICAvLyBwcmV2ZW50IHBhZ2UgZnJvbSBzY3JvbGxpbmcgZG93blxuICAgICAgaWYgKCRldmVudC5rZXlDb2RlID09PSBTUEFDRSkge1xuICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfaXNTb3J0ZWRBc2NlbmRpbmcoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9zb3J0LmFjdGl2ZSA9PT0gdGhpcy5fa2V5ICYmIHRoaXMuX3NvcnQuZGlyZWN0aW9uID09PSAnYXNjJyk7XG4gIH1cblxuICBfaXNTb3J0ZWREZXNjZW5kaW5nKCkge1xuICAgIHJldHVybiAodGhpcy5fc29ydC5hY3RpdmUgPT09IHRoaXMuX2tleSAmJiB0aGlzLl9zb3J0LmRpcmVjdGlvbiA9PT0gJ2Rlc2MnKTtcbiAgfVxuXG4gIF9nZXRBcmlhTGFiZWwoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5fc29ydC5hY3RpdmUgPT09IHRoaXMuX2tleSAmJiB0aGlzLl9zb3J0LmRpcmVjdGlvbiA9PT0gJ2FzYycpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLl9rZXl9ICR7dGhpcy5faW50bC5zb3J0RGVzY2VuZGluZ0FyaWFMYWJlbH1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7dGhpcy5fa2V5fSAke3RoaXMuX2ludGwuc29ydEFzY2VuZGluZ0FyaWFMYWJlbH1gO1xuICB9XG59XG4iXX0=