/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxTableCellComponent } from './table-cell.component';
import { NxHeaderCellDirective } from './header-cell.directive';
import { NxTableComponent } from './table.component';
import { NxTableRowComponent } from './table-row.component';
import { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';
import { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';
import { NxToggleButtonComponent } from './expandable/toggle-button.component';
import { NxExpandableTableDirective } from './expandable/expandable-table.directive';
import { NxSortHeaderComponent } from './sort-header/sort-header.component';
import { NxSortDirective } from './sort-header/sort.directive';
import { NxSortHeaderIntl } from './sort-header/sort-header-intl';
/** @type {?} */
var EXPORTED_DECLARED_ELEMENTS = [
    NxHeaderCellDirective,
    NxTableComponent,
    NxTableCellComponent,
    NxTableComponent,
    NxTableRowComponent,
    NxToggleButtonComponent,
    NxExpandableTableDirective,
    NxExpandableTableRowComponent,
    NxExpandableTableCellComponent,
    NxSortHeaderComponent,
    NxSortDirective
];
var NxTableModule = /** @class */ (function () {
    function NxTableModule() {
    }
    NxTableModule.decorators = [
        { type: NgModule, args: [{
                    declarations: EXPORTED_DECLARED_ELEMENTS,
                    exports: EXPORTED_DECLARED_ELEMENTS,
                    imports: [
                        CommonModule,
                        NxIconModule
                    ],
                    providers: [NxSortHeaderIntl],
                },] }
    ];
    return NxTableModule;
}());
export { NxTableModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJ0YWJsZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM5RixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUM1RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O0lBRTVELDBCQUEwQixHQUFHO0lBQ2pDLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLDBCQUEwQjtJQUMxQiw2QkFBNkI7SUFDN0IsOEJBQThCO0lBQzlCLHFCQUFxQjtJQUNyQixlQUFlO0NBQ2hCO0FBQ0Q7SUFBQTtJQVM2QixDQUFDOztnQkFUN0IsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSwwQkFBMEI7b0JBQ3hDLE9BQU8sRUFBRSwwQkFBMEI7b0JBQ25DLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLFlBQVk7cUJBQ2I7b0JBQ0QsU0FBUyxFQUFFLENBQUUsZ0JBQWdCLENBQUU7aUJBQ2hDOztJQUM0QixvQkFBQztDQUFBLEFBVDlCLElBUzhCO1NBQWpCLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE54SWNvbk1vZHVsZSB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L2ljb24nO1xuaW1wb3J0IHsgTnhUYWJsZUNlbGxDb21wb25lbnQgfSBmcm9tICcuL3RhYmxlLWNlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IE54SGVhZGVyQ2VsbERpcmVjdGl2ZSB9IGZyb20gJy4vaGVhZGVyLWNlbGwuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54VGFibGVDb21wb25lbnQgfSBmcm9tICcuL3RhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi90YWJsZS1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vZXhwYW5kYWJsZS9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFRvZ2dsZUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vZXhwYW5kYWJsZS90b2dnbGUtYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeEV4cGFuZGFibGVUYWJsZURpcmVjdGl2ZSB9IGZyb20gJy4vZXhwYW5kYWJsZS9leHBhbmRhYmxlLXRhYmxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOeFNvcnRIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuL3NvcnQtaGVhZGVyL3NvcnQtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFNvcnREaXJlY3RpdmUgfSBmcm9tICcuL3NvcnQtaGVhZGVyL3NvcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54U29ydEhlYWRlckludGwgfSBmcm9tICcuL3NvcnQtaGVhZGVyL3NvcnQtaGVhZGVyLWludGwnO1xuXG5jb25zdCBFWFBPUlRFRF9ERUNMQVJFRF9FTEVNRU5UUyA9IFtcbiAgTnhIZWFkZXJDZWxsRGlyZWN0aXZlLFxuICBOeFRhYmxlQ29tcG9uZW50LFxuICBOeFRhYmxlQ2VsbENvbXBvbmVudCxcbiAgTnhUYWJsZUNvbXBvbmVudCxcbiAgTnhUYWJsZVJvd0NvbXBvbmVudCxcbiAgTnhUb2dnbGVCdXR0b25Db21wb25lbnQsXG4gIE54RXhwYW5kYWJsZVRhYmxlRGlyZWN0aXZlLFxuICBOeEV4cGFuZGFibGVUYWJsZVJvd0NvbXBvbmVudCxcbiAgTnhFeHBhbmRhYmxlVGFibGVDZWxsQ29tcG9uZW50LFxuICBOeFNvcnRIZWFkZXJDb21wb25lbnQsXG4gIE54U29ydERpcmVjdGl2ZVxuXTtcbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogRVhQT1JURURfREVDTEFSRURfRUxFTUVOVFMsXG4gIGV4cG9ydHM6IEVYUE9SVEVEX0RFQ0xBUkVEX0VMRU1FTlRTLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIE54SWNvbk1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFsgTnhTb3J0SGVhZGVySW50bCBdLFxufSlcbmV4cG9ydCBjbGFzcyBOeFRhYmxlTW9kdWxlIHsgfVxuIl19