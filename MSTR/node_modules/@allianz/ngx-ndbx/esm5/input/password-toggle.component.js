/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Component, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
/** @type {?} */
var visibilityIcons = {
    show: 'password-show-o',
    hide: 'password-hide-o'
};
var NxPasswordToggleComponent = /** @class */ (function () {
    function NxPasswordToggleComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * \@docs-private
         */
        this._currentIcon = visibilityIcons['show'];
        /**
         * \@docs-private
         */
        this._pressed = false;
        this._ariaLabel = 'Show password';
    }
    Object.defineProperty(NxPasswordToggleComponent.prototype, "ariaLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ariaLabel;
        },
        /** Sets the aria-label needed for accessibility.
         * Notice that this `aria-label` should describe the initial action according to the status of the visibility.
         * E.g if you have an `input[type=password]` at the beginning then the
         * password will be hidden and the correct aria-label would be 'Show password.'
         */
        set: /**
         * Sets the aria-label needed for accessibility.
         * Notice that this `aria-label` should describe the initial action according to the status of the visibility.
         * E.g if you have an `input[type=password]` at the beginning then the
         * password will be hidden and the correct aria-label would be 'Show password.'
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._ariaLabel) {
                this._ariaLabel = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxPasswordToggleComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.control) {
            console.warn('You need to pass an input as a control to the password toggle.');
        }
        else {
            // show the right icon according to the initial type of the input
            this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];
        }
    };
    /** Toggles the type of the input. */
    /**
     * Toggles the type of the input.
     * @return {?}
     */
    NxPasswordToggleComponent.prototype.toggleInputType = /**
     * Toggles the type of the input.
     * @return {?}
     */
    function () {
        if (this.control) {
            this.control.type = this.control.type === 'password' ? 'text' : 'password';
            this._pressed = !this._pressed;
            this.toggleIcon();
            this._changeDetectorRef.markForCheck();
        }
    };
    /**@docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxPasswordToggleComponent.prototype.toggleIcon = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];
    };
    /**@docs-private */
    /**
     * \@docs-private
     * @param {?} $event
     * @return {?}
     */
    NxPasswordToggleComponent.prototype._onKeydown = /**
     * \@docs-private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this.toggleInputType();
        }
    };
    Object.defineProperty(NxPasswordToggleComponent.prototype, "tabindex", {
        /**@docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.control) {
                return this.control.disabled ? -1 : 0;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    NxPasswordToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-password-toggle',
                    template: "<nx-icon\n      aria-hidden=\"true\"\n      [name]=\"_currentIcon\">\n    </nx-icon>",
                    host: {
                        '[attr.aria-label]': 'ariaLabel',
                        '[attr.tabindex]': 'tabindex',
                        '[attr.aria-pressed]': '_pressed',
                        'role': 'button',
                        '(click)': 'toggleInputType()',
                        '(keydown)': '_onKeydown($event)'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{position:relative;display:inline-block;height:24px;width:24px;cursor:pointer}:host:focus{outline:0}:host-context([data-whatinput=keyboard]):focus ::ng-deep nx-icon{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px}:host-context(.is-disabled){pointer-events:none}"]
                }] }
    ];
    /** @nocollapse */
    NxPasswordToggleComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxPasswordToggleComponent.propDecorators = {
        control: [{ type: Input }],
        ariaLabel: [{ type: Input }]
    };
    return NxPasswordToggleComponent;
}());
export { NxPasswordToggleComponent };
if (false) {
    /**
     * Input element using the toggle functionality.
     * @type {?}
     */
    NxPasswordToggleComponent.prototype.control;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPasswordToggleComponent.prototype._currentIcon;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPasswordToggleComponent.prototype._pressed;
    /**
     * @type {?}
     * @private
     */
    NxPasswordToggleComponent.prototype._ariaLabel;
    /**
     * @type {?}
     * @private
     */
    NxPasswordToggleComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L2lucHV0LyIsInNvdXJjZXMiOlsicGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQWlCLGlCQUFpQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVHLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0lBRS9DLGVBQWUsR0FBRztJQUN0QixJQUFJLEVBQUUsaUJBQWlCO0lBQ3ZCLElBQUksRUFBRSxpQkFBaUI7Q0FDeEI7QUFFRDtJQTZDRSxtQ0FBcUIsa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7Ozs7UUFyQjFELGlCQUFZLEdBQVcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7O1FBRS9DLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDbEIsZUFBVSxHQUFXLGVBQWUsQ0FBQztJQWtCaUIsQ0FBQztJQVgvRCxzQkFDSSxnREFBUzs7OztRQU1iO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7UUFkRDs7OztXQUlHOzs7Ozs7Ozs7UUFDSCxVQUNjLEtBQWE7WUFDekIsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUN4QztRQUNILENBQUM7OztPQUFBOzs7O0lBT0QsbURBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO1NBQ2hGO2FBQU07WUFDTCxpRUFBaUU7WUFDakUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzFHO0lBQ0gsQ0FBQztJQUVELHFDQUFxQzs7Ozs7SUFDckMsbURBQWU7Ozs7SUFBZjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQzNFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQy9CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBRUQsbUJBQW1COzs7OztJQUNuQiw4Q0FBVTs7OztJQUFWO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxLQUFLLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEgsQ0FBQztJQUVELG1CQUFtQjs7Ozs7O0lBQ25CLDhDQUFVOzs7OztJQUFWLFVBQVcsTUFBTTtRQUNmLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBR0Qsc0JBQUksK0NBQVE7UUFEWixtQkFBbUI7Ozs7O1FBQ25CO1lBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZDO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTs7Z0JBcEZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQ04sc0ZBR1c7b0JBRWIsSUFBSSxFQUFFO3dCQUNKLG1CQUFtQixFQUFFLFdBQVc7d0JBQ2hDLGlCQUFpQixFQUFFLFVBQVU7d0JBQzdCLHFCQUFxQixFQUFFLFVBQVU7d0JBQ2pDLE1BQU0sRUFBRSxRQUFRO3dCQUNoQixTQUFTLEVBQUUsbUJBQW1CO3dCQUM5QixXQUFXLEVBQUUsb0JBQW9CO3FCQUNsQztvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7aUJBQ2hEOzs7O2dCQXpCeUMsaUJBQWlCOzs7MEJBNkJ4RCxLQUFLOzRCQWFMLEtBQUs7O0lBbURQLGdDQUFDO0NBQUEsQUFyRkYsSUFxRkU7U0FuRVcseUJBQXlCOzs7Ozs7SUFHcEMsNENBQW1DOzs7OztJQUduQyxpREFBK0M7Ozs7O0lBRS9DLDZDQUEwQjs7Ozs7SUFDMUIsK0NBQTZDOzs7OztJQWtCaEMsdURBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFTlRFUiwgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuXG5jb25zdCB2aXNpYmlsaXR5SWNvbnMgPSB7XG4gIHNob3c6ICdwYXNzd29yZC1zaG93LW8nLFxuICBoaWRlOiAncGFzc3dvcmQtaGlkZS1vJ1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtcGFzc3dvcmQtdG9nZ2xlJyxcbiAgdGVtcGxhdGU6XG4gICAgYDxueC1pY29uXG4gICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgW25hbWVdPVwiX2N1cnJlbnRJY29uXCI+XG4gICAgPC9ueC1pY29uPmAsXG4gIHN0eWxlVXJsczogWycuL3Bhc3N3b3JkLXRvZ2dsZS5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtbGFiZWxdJzogJ2FyaWFMYWJlbCcsXG4gICAgJ1thdHRyLnRhYmluZGV4XSc6ICd0YWJpbmRleCcsXG4gICAgJ1thdHRyLmFyaWEtcHJlc3NlZF0nOiAnX3ByZXNzZWQnLFxuICAgICdyb2xlJzogJ2J1dHRvbicsXG4gICAgJyhjbGljayknOiAndG9nZ2xlSW5wdXRUeXBlKCknLFxuICAgICcoa2V5ZG93biknOiAnX29uS2V5ZG93bigkZXZlbnQpJ1xuICB9LFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeFBhc3N3b3JkVG9nZ2xlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgLyoqIElucHV0IGVsZW1lbnQgdXNpbmcgdGhlIHRvZ2dsZSBmdW5jdGlvbmFsaXR5LiAqL1xuICBASW5wdXQoKSBjb250cm9sOiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIC8qKkBkb2NzLXByaXZhdGUgKi9cbiAgX2N1cnJlbnRJY29uOiBzdHJpbmcgPSB2aXNpYmlsaXR5SWNvbnNbJ3Nob3cnXTtcbiAgLyoqQGRvY3MtcHJpdmF0ZSAqL1xuICBfcHJlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9hcmlhTGFiZWw6IHN0cmluZyA9ICdTaG93IHBhc3N3b3JkJztcblxuICAvKiogU2V0cyB0aGUgYXJpYS1sYWJlbCBuZWVkZWQgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqIE5vdGljZSB0aGF0IHRoaXMgYGFyaWEtbGFiZWxgIHNob3VsZCBkZXNjcmliZSB0aGUgaW5pdGlhbCBhY3Rpb24gYWNjb3JkaW5nIHRvIHRoZSBzdGF0dXMgb2YgdGhlIHZpc2liaWxpdHkuXG4gICAqIEUuZyBpZiB5b3UgaGF2ZSBhbiBgaW5wdXRbdHlwZT1wYXNzd29yZF1gIGF0IHRoZSBiZWdpbm5pbmcgdGhlbiB0aGVcbiAgICogcGFzc3dvcmQgd2lsbCBiZSBoaWRkZW4gYW5kIHRoZSBjb3JyZWN0IGFyaWEtbGFiZWwgd291bGQgYmUgJ1Nob3cgcGFzc3dvcmQuJ1xuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGFyaWFMYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9hcmlhTGFiZWwpIHtcbiAgICAgIHRoaXMuX2FyaWFMYWJlbCA9IHZhbHVlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIGdldCBhcmlhTGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYXJpYUxhYmVsO1xuICB9XG5cbiAgY29uc3RydWN0b3IgKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5jb250cm9sKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBuZWVkIHRvIHBhc3MgYW4gaW5wdXQgYXMgYSBjb250cm9sIHRvIHRoZSBwYXNzd29yZCB0b2dnbGUuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNob3cgdGhlIHJpZ2h0IGljb24gYWNjb3JkaW5nIHRvIHRoZSBpbml0aWFsIHR5cGUgb2YgdGhlIGlucHV0XG4gICAgICB0aGlzLl9jdXJyZW50SWNvbiA9IHRoaXMuY29udHJvbC50eXBlID09PSAncGFzc3dvcmQnID8gdmlzaWJpbGl0eUljb25zWydzaG93J10gOiB2aXNpYmlsaXR5SWNvbnNbJ2hpZGUnXTtcbiAgICB9XG4gIH1cblxuICAvKiogVG9nZ2xlcyB0aGUgdHlwZSBvZiB0aGUgaW5wdXQuICovXG4gIHRvZ2dsZUlucHV0VHlwZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICB0aGlzLmNvbnRyb2wudHlwZSA9IHRoaXMuY29udHJvbC50eXBlID09PSAncGFzc3dvcmQnID8gJ3RleHQnIDogJ3Bhc3N3b3JkJztcbiAgICAgIHRoaXMuX3ByZXNzZWQgPSAhdGhpcy5fcHJlc3NlZDtcbiAgICAgIHRoaXMudG9nZ2xlSWNvbigpO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqQGRvY3MtcHJpdmF0ZSAqL1xuICB0b2dnbGVJY29uKCk6IHZvaWQge1xuICAgIHRoaXMuX2N1cnJlbnRJY29uID0gdGhpcy5fY3VycmVudEljb24gPT09IHZpc2liaWxpdHlJY29uc1snc2hvdyddID8gdmlzaWJpbGl0eUljb25zWydoaWRlJ10gOiB2aXNpYmlsaXR5SWNvbnNbJ3Nob3cnXTtcbiAgfVxuXG4gIC8qKkBkb2NzLXByaXZhdGUgKi9cbiAgX29uS2V5ZG93bigkZXZlbnQpIHtcbiAgICBpZiAoJGV2ZW50ICYmICgkZXZlbnQua2V5Q29kZSA9PT0gRU5URVIgfHwgJGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSkge1xuICAgICAgdGhpcy50b2dnbGVJbnB1dFR5cGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipAZG9jcy1wcml2YXRlICovXG4gIGdldCB0YWJpbmRleCgpOiBudW1iZXLCoHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250cm9sLmRpc2FibGVkID8gLTEgOiAwO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuIH1cbiJdfQ==