/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
/** @type {?} */
var DEFAULT_TYPE = 'normal';
var NxListComponent = /** @class */ (function () {
    function NxListComponent() {
        /**
         * \@docs-private
         */
        this.negative = false;
        /**
         * \@docs-private
         */
        this.orderedCircle = false;
    }
    Object.defineProperty(NxListComponent.prototype, "classNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classNames;
        },
        /**
         * Sets the visual appearance of the list. You can combine different values:
         *
         * xsmall | small | normal: The listed input values are expanded to the underlying BEM conform styles based
         * on modifiers. Defaults to normal.
         *
         * negative: Display the list with a negative set of styling.
         *
         * ordered-circle: Display the list item numbers in a color filled circle.
         */
        set: /**
         * Sets the visual appearance of the list. You can combine different values:
         *
         * xsmall | small | normal: The listed input values are expanded to the underlying BEM conform styles based
         * on modifiers. Defaults to normal.
         *
         * negative: Display the list with a negative set of styling.
         *
         * ordered-circle: Display the list item numbers in a color filled circle.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._classNames === value) {
                return;
            }
            this._classNames = value;
            var _a = tslib_1.__read(this._classNames.match(/xsmall|small|normal/) || [DEFAULT_TYPE], 1), _b = _a[0], type = _b === void 0 ? null : _b;
            this.type = (/** @type {?} */ (type));
            this.negative = !!this._classNames.match(/negative/);
            this.orderedCircle = !!this._classNames.match(/ordered-circle/);
        },
        enumerable: true,
        configurable: true
    });
    NxListComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ul[nxList], ol[nxList]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-list--xsmall]': 'type === "xsmall"',
                        '[class.nx-list--small]': 'type === "small"',
                        '[class.nx-list--normal]': 'type === "normal"',
                        '[class.nx-list--negative]': 'negative',
                        '[class.nx-list--ordered-circle]': 'orderedCircle',
                    },
                    styles: [":host{color:#414141;list-style:none;margin-bottom:32px;padding:0;counter-reset:list}:host(.nx-list--normal){font-size:18px;line-height:24px;letter-spacing:.2px}:host(.nx-list--small){font-size:16px;line-height:24px}:host(.nx-list--xsmall){font-size:14px;line-height:20px;letter-spacing:.2px}:host(.nx-list--xsmall):not(ol)::ng-deep li:not([nxlisticon])::before{top:6px}:host(.nx-list--xsmall) ::ng-deep .nx-list__icon{top:-2px}:host(ol.nx-list--xsmall.nx-list--ordered-circle) ::ng-deep li:not([nxlisticon])::before{top:-2px}:host(ol.nx-list--xsmall.nx-list--ordered-circle) ::ng-deep li:not([nxlisticon])::after{top:-2px}:host(.nx-list--negative){color:#fff}:host(.nx-list--negative) ::ng-deep .nx-list__icon{color:#fff}:host ::ng-deep .nx-list__icon{position:absolute;left:0;top:0;font-size:24px;color:#5a5360}:host ::ng-deep li{margin-bottom:16px;padding-left:36px;position:relative}:host(ul) ::ng-deep>li:not([nxlisticon]):before{background-color:#5a5360;border-radius:50%;content:\"\";display:inline-block;height:8px;width:8px;margin-right:16px;position:absolute;left:8px;top:8px}:host(ol) ::ng-deep>li:not([nxlisticon]):before{counter-increment:list;content:counter(list);position:absolute;font-size:inherit;font-weight:700;display:inline-block;width:24px;text-align:center;left:3px}:host ::ng-deep li>::ng-deep ol,:host ::ng-deep li>::ng-deep ul{margin-bottom:16px;margin-top:16px}:host(ol.nx-list--ordered-circle) ::ng-deep>li:not([nxlisticon]):before{width:24px;font-size:16px;line-height:24px;color:#fff;font-weight:400;left:0;z-index:2}:host(ol.nx-list--ordered-circle) ::ng-deep>li:not([nxlisticon]):after{border-radius:50%;width:24px;height:24px;background-color:#5a5360;left:0;top:0;content:'';position:absolute}:host(ol.nx-list--ordered-circle.nx-list--negative)::ng-deep>li:not([nxlisticon]):after{background-color:#fff}:host(ol.nx-list--ordered-circle.nx-list--negative)::ng-deep>li:not([nxlisticon]):before{color:#5a5360}:host(ul.nx-list--negative) ::ng-deep>li:not([nxlisticon]):before{background-color:#fff}"]
                }] }
    ];
    NxListComponent.propDecorators = {
        classNames: [{ type: Input, args: ['nxList',] }]
    };
    return NxListComponent;
}());
export { NxListComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxListComponent.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxListComponent.prototype.type;
    /**
     * \@docs-private
     * @type {?}
     */
    NxListComponent.prototype.negative;
    /**
     * \@docs-private
     * @type {?}
     */
    NxListComponent.prototype.orderedCircle;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImxpc3QvbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFFcEUsWUFBWSxHQUFHLFFBQVE7QUFLN0I7SUFBQTs7OztRQXNCRSxhQUFRLEdBQVksS0FBSyxDQUFDOzs7O1FBRzFCLGtCQUFhLEdBQVksS0FBSyxDQUFDO0lBOEJqQyxDQUFDO0lBbEJDLHNCQUNJLHVDQUFVOzs7O1FBY2Q7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQztRQTNCRDs7Ozs7Ozs7O1dBU0c7Ozs7Ozs7Ozs7Ozs7UUFDSCxVQUNlLEtBQWE7WUFDMUIsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsT0FBTzthQUNSO1lBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFFbkIsSUFBQSx1RkFBK0UsRUFBOUUsVUFBVyxFQUFYLGdDQUE4RTtZQUNyRixJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFBLElBQUksRUFBTyxDQUFDO1lBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDbEUsQ0FBQzs7O09BQUE7O2dCQWxERixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUUvQyxJQUFJLEVBQUU7d0JBQ0oseUJBQXlCLEVBQUcsbUJBQW1CO3dCQUMvQyx3QkFBd0IsRUFBRyxrQkFBa0I7d0JBQzdDLHlCQUF5QixFQUFHLG1CQUFtQjt3QkFDL0MsMkJBQTJCLEVBQUcsVUFBVTt3QkFDeEMsaUNBQWlDLEVBQUcsZUFBZTtxQkFDcEQ7O2lCQUNGOzs7NkJBd0JFLEtBQUssU0FBQyxRQUFROztJQWtCakIsc0JBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXhDWSxlQUFlOzs7Ozs7SUFDMUIsc0NBQW9COzs7OztJQUdwQiwrQkFBaUI7Ozs7O0lBR2pCLG1DQUEwQjs7Ozs7SUFHMUIsd0NBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgREVGQVVMVF9UWVBFID0gJ25vcm1hbCc7XG5cbi8qKiBTaXplIG9mIHRoZSBsaXN0ICovXG5leHBvcnQgdHlwZSBOeExpc3RTaXplID0gJ3hzbWFsbCcgfCAnc21hbGwnIHwgJ25vcm1hbCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndWxbbnhMaXN0XSwgb2xbbnhMaXN0XScsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnbGlzdC5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5ueC1saXN0LS14c21hbGxdJyA6ICd0eXBlID09PSBcInhzbWFsbFwiJyxcbiAgICAnW2NsYXNzLm54LWxpc3QtLXNtYWxsXScgOiAndHlwZSA9PT0gXCJzbWFsbFwiJyxcbiAgICAnW2NsYXNzLm54LWxpc3QtLW5vcm1hbF0nIDogJ3R5cGUgPT09IFwibm9ybWFsXCInLFxuICAgICdbY2xhc3MubngtbGlzdC0tbmVnYXRpdmVdJyA6ICduZWdhdGl2ZScsXG4gICAgJ1tjbGFzcy5ueC1saXN0LS1vcmRlcmVkLWNpcmNsZV0nIDogJ29yZGVyZWRDaXJjbGUnLFxuICB9XG59KVxuXG5leHBvcnQgY2xhc3MgTnhMaXN0Q29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfY2xhc3NOYW1lcztcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICB0eXBlOiBOeExpc3RTaXplO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIG5lZ2F0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgb3JkZXJlZENpcmNsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2aXN1YWwgYXBwZWFyYW5jZSBvZiB0aGUgbGlzdC4gWW91IGNhbiBjb21iaW5lIGRpZmZlcmVudCB2YWx1ZXM6XG4gICAqXG4gICAqIHhzbWFsbCB8IHNtYWxsIHwgbm9ybWFsOiBUaGUgbGlzdGVkIGlucHV0IHZhbHVlcyBhcmUgZXhwYW5kZWQgdG8gdGhlIHVuZGVybHlpbmcgQkVNIGNvbmZvcm0gc3R5bGVzIGJhc2VkXG4gICAqIG9uIG1vZGlmaWVycy4gRGVmYXVsdHMgdG8gbm9ybWFsLlxuICAgKlxuICAgKiBuZWdhdGl2ZTogRGlzcGxheSB0aGUgbGlzdCB3aXRoIGEgbmVnYXRpdmUgc2V0IG9mIHN0eWxpbmcuXG4gICAqXG4gICAqIG9yZGVyZWQtY2lyY2xlOiBEaXNwbGF5IHRoZSBsaXN0IGl0ZW0gbnVtYmVycyBpbiBhIGNvbG9yIGZpbGxlZCBjaXJjbGUuXG4gICAqL1xuICBASW5wdXQoJ254TGlzdCcpXG4gIHNldCBjbGFzc05hbWVzKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5fY2xhc3NOYW1lcyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9jbGFzc05hbWVzID0gdmFsdWU7XG5cbiAgICBjb25zdCBbdHlwZSA9IG51bGxdID0gdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgveHNtYWxsfHNtYWxsfG5vcm1hbC8pIHx8IFtERUZBVUxUX1RZUEVdO1xuICAgIHRoaXMudHlwZSA9IHR5cGUgYXMgYW55O1xuXG4gICAgdGhpcy5uZWdhdGl2ZSA9ICEhdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvbmVnYXRpdmUvKTtcbiAgICB0aGlzLm9yZGVyZWRDaXJjbGUgPSAhIXRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL29yZGVyZWQtY2lyY2xlLyk7XG4gIH1cblxuICBnZXQgY2xhc3NOYW1lcygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jbGFzc05hbWVzO1xuICB9XG59XG4iXX0=