import { NxProgressbarModule } from '@allianz/ngx-ndbx/progressbar';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { takeUntil } from 'rxjs/operators';
import { ErrorStateMatcher, clamp } from '@allianz/ngx-ndbx/utils';
import { __extends } from 'tslib';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject, Input, QueryList, SkipSelf, ChangeDetectorRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { CdkStep, CdkStepper, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-input-property-decorator
// We need to reference steps in stepper and stepper in steps. To prevent circular depenedency errors
// Provide both components in a single file. Otherwise we would have to introduce interface/abstract classes
// shared between both implementations.
var NxStepComponent = /** @class */ (function (_super) {
    __extends(NxStepComponent, _super);
    function NxStepComponent(stepper, _errorStateMatcher) {
        var _this = _super.call(this, stepper) || this;
        _this._errorStateMatcher = _errorStateMatcher;
        return _this;
    }
    /** Custom error state matcher that checks for validity of the step form. */
    /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    NxStepComponent.prototype.isErrorState = /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    function (control, form) {
        /** @type {?} */
        var originalErrorState = this._errorStateMatcher.isErrorState(control, form);
        // Checks for the validity of a step form that is not submitted or touched,
        // e.g when the user directly clicks the "next" button or directly on the step
        /** @type {?} */
        var customErrorState = !!(control && control.invalid && this.interacted);
        return originalErrorState || customErrorState;
    };
    NxStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-step',
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    exportAs: 'nxStep',
                    providers: [{ provide: ErrorStateMatcher, useExisting: NxStepComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxStepComponent.ctorParameters = function () { return [
        { type: NxProgressStepperDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NxProgressStepperDirective; })),] }] },
        { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] }
    ]; };
    return NxStepComponent;
}(CdkStep));
var NxProgressStepperDirective = /** @class */ (function (_super) {
    __extends(NxProgressStepperDirective, _super);
    function NxProgressStepperDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._stepHeader = new QueryList();
        return _this;
    }
    /**
     * @return {?}
     */
    NxProgressStepperDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes
            .pipe(takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this._stateChanged();
        }));
    };
    Object.defineProperty(NxProgressStepperDirective.prototype, "hasPrevious", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex - 1) >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "hasNext", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex + 1) < this.count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "count", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._steps ? this._steps.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "currentStep", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.count === 0 || this.selectedIndex === -1) {
                return null;
            }
            /** @type {?} */
            var steps = this._steps.toArray();
            return steps[this.selectedIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "nextStep", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.selectedIndex + 1 >= this._steps.length) {
                return null;
            }
            else {
                return this._steps.toArray()[this.selectedIndex + 1];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "steps", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._steps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "currentLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.currentStep;
            /** @type {?} */
            var label = step.stepLabel || step.label;
            return "\n    " + this.currentStepLabel + " " + (this.selectedIndex + 1) + "/" + this.count + ": " + label + "\n    ";
        },
        enumerable: true,
        configurable: true
    });
    NxProgressStepperDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxProgressStepper]',
                    exportAs: 'nxProgressStepper',
                },] }
    ];
    NxProgressStepperDirective.propDecorators = {
        _steps: [{ type: ContentChildren, args: [NxStepComponent,] }],
        currentStepLabel: [{ type: Input }],
        title: [{ type: Input }]
    };
    return NxProgressStepperDirective;
}(CdkStepper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 */
var NxMultiStepItemComponent = /** @class */ (function (_super) {
    __extends(NxMultiStepItemComponent, _super);
    function NxMultiStepItemComponent(_changeDetectorRef, stepper, _errorStateMatcher) {
        var _this = _super.call(this, stepper, _errorStateMatcher) || this;
        _this._changeDetectorRef = _changeDetectorRef;
        _this._completed = false;
        return _this;
    }
    Object.defineProperty(NxMultiStepItemComponent.prototype, "index", {
        /** Sets the index of the selected step. */
        get: /**
         * Sets the index of the selected step.
         * @return {?}
         */
        function () { return this._index; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._index = coerceNumberProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "selected", {
        /** Sets the selected step. */
        get: /**
         * Sets the selected step.
         * @return {?}
         */
        function () { return this._selected; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._selected = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "active", {
        /** Sets the active step. */
        get: /**
         * Sets the active step.
         * @return {?}
         */
        function () { return this._active; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._active = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "last", {
        /** Sets the last step. */
        get: /**
         * Sets the last step.
         * @return {?}
         */
        function () { return this._last; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._last = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "first", {
        /** Sets the first step. */
        get: /**
         * Sets the first step.
         * @return {?}
         */
        function () { return this._first; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._first = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "stepCompleted", {
        get: /**
         * @return {?}
         */
        function () { return this._completed; },
        /** Whether the step is completed or not. */
        set: /**
         * Whether the step is completed or not.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._completed = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    NxMultiStepItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-multi-step-item',
                    template: "<div class=\"label\">\n    {{label}}\n  </div>\n\n<div\n  [ngSwitch]=\"state\"\n  class=\"dot\"\n  [class.dot--filled]='stepCompleted'>\n  <nx-icon *ngIf=\"stepCompleted\" name=\"check\"></nx-icon>\n  <div *ngIf=\"selected && !stepCompleted\" class=\"small-dot\"></div>\n\n</div>\n<div\n  *ngIf=\"!last\"\n  class=\"before-line\"\n  [class.before-line--active]='active'>\n</div>\n<div\n  *ngIf=\"!last\"\n  class=\"line\"\n  [class.line--active]='active'>\n</div>\n<div\n  *ngIf=\"!last\"\n  class=\"after-line\"\n  [class.after-line--active]='active'>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{flex:1 0 auto;display:flex;align-items:center;position:relative;font-size:16px;padding-bottom:32px;cursor:pointer}.label{position:absolute;top:calc(8px + 16px);-webkit-transform:translateX(-50%) translateX(8px);transform:translateX(-50%) translateX(8px);min-width:156px;text-align:center;line-height:24px;font-size:16px;color:#414141}.dot{width:16px;height:16px;border:2px solid #007ab3;border-radius:50%;color:#fff;background-color:#fff;flex:0 0 auto}.dot nx-icon{font-size:16px;position:absolute;top:0;left:0}.small-dot{top:4px;left:4px;position:absolute;width:8px;height:8px;border-radius:50%;background-color:#007ab3}.dot--filled{background-color:#007ab3;color:#fff}.line{flex:1 1 100%;min-width:32px;height:0;border-top:4px dotted #c2c2c2}.line--active{border-top-color:#007ab3;border-top-style:solid;border-image-source:none;transition:border-style .1s ease-in}.after-line,.before-line{width:4px;height:4px;z-index:-1}.after-line--active,.before-line--active{z-index:0;background:#007ab3}"]
                }] }
    ];
    /** @nocollapse */
    NxMultiStepItemComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NxProgressStepperDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NxProgressStepperDirective; })),] }] },
        { type: ErrorStateMatcher }
    ]; };
    NxMultiStepItemComponent.propDecorators = {
        state: [{ type: Input }],
        label: [{ type: Input }],
        index: [{ type: Input }],
        selected: [{ type: Input }],
        active: [{ type: Input }],
        last: [{ type: Input }],
        first: [{ type: Input }],
        stepCompleted: [{ type: Input }]
    };
    return NxMultiStepItemComponent;
}(NxStepComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxMultiStepperComponent = /** @class */ (function (_super) {
    __extends(NxMultiStepperComponent, _super);
    function NxMultiStepperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NxMultiStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-multi-stepper',
                    template: "<span *ngIf=\"title\" class=\"nx-single-step__title\">{{title}}</span>\n\n<div class=\"nx-multi-stepper__items\">\n<ng-container\n  *ngFor=\"let step of _steps;let i = index; let isLast = last; let isFirst = first\">\n\n  <nx-multi-step-item\n    (click)=\"step.select()\"\n    [state]=\"_getIndicatorType(i)\"\n    [last]=\"isLast\"\n    [first]=\"isFirst\"\n    [label]=\"step.stepLabel || step.label\"\n    [stepCompleted]=\"step.completed\"\n    [selected]=\"selectedIndex === i\"\n    [active]=\"selectedIndex > i\">\n  </nx-multi-step-item>\n</ng-container>\n</div>\n\n<div class=\"nx-progress-stepper__current\">\n  {{currentLabel}}\n</div>\n\n\n<div *ngFor=\"let step of _steps; let i = index\"\n      class=\"nx-progress-stepper__content\" role=\"tabpanel\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-label]=\"currentLabel\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>",
                    providers: [{ provide: NxProgressStepperDirective, useExisting: NxMultiStepperComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-progress-stepper__content{overflow:hidden}.nx-progress-stepper__content[aria-expanded=false]{height:0}.nx-progress-stepper__current{display:none}@media (max-width:703px){.nx-progress-stepper__current{display:block;text-align:center}}", ":host{width:100%}nx-multi-step-item:last-child{flex:0 0 auto}.nx-multi-stepper__items{display:flex;margin:48px auto}@media (max-width:703px){.nx-multi-stepper__items{display:none}}"]
                }] }
    ];
    return NxMultiStepperComponent;
}(NxProgressStepperDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSingleStepperComponent = /** @class */ (function (_super) {
    __extends(NxSingleStepperComponent, _super);
    function NxSingleStepperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._rightLabel = 'Next step:';
        return _this;
    }
    Object.defineProperty(NxSingleStepperComponent.prototype, "rightLabel", {
        /** Sets the label on the right showing the next step. */
        get: /**
         * Sets the label on the right showing the next step.
         * @return {?}
         */
        function () { return this._rightLabel; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._rightLabel = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "progress", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex + 1) / this.count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "currentLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.currentStep;
            /** @type {?} */
            var label = step.stepLabel || step.label;
            return "\n    " + this.currentStepLabel + " " + (this.selectedIndex + 1) + "/" + this.count + ": " + label + "\n    ";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "nextLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.nextStep;
            if (step) {
                /** @type {?} */
                var label = step.stepLabel || step.label;
                return "\n        " + this.rightLabel + " " + label + "\n      ";
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    NxSingleStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-single-stepper',
                    template: "<div class=\"nx-single-step-container\">\n  <span *ngIf=\"title\" class=\"nx-single-step__title\">{{title}}</span>\n\n    <nx-progressbar [value]=\"progress\"></nx-progressbar>\n\n    <div class=\"nx-single-step__infos\">\n      <div class=\"nx-single-step__current\">\n        {{currentLabel}}\n      </div>\n      <div class=\"nx-single-step__next\">\n        {{nextLabel}}\n      </div>\n    </div>\n\n    <div class=\"nx-progress-stepper__current\">\n        {{currentLabel}}\n    </div>\n</div>\n\n<div *ngFor=\"let step of _steps; let i = index\"\n      class=\"nx-progress-stepper__content\" role=\"tabpanel\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-label]=\"currentLabel\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>",
                    providers: [{ provide: NxProgressStepperDirective, useExisting: NxSingleStepperComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-progress-stepper__content{overflow:hidden}.nx-progress-stepper__content[aria-expanded=false]{height:0}.nx-progress-stepper__current{display:none}@media (max-width:703px){.nx-progress-stepper__current{display:block;text-align:center}}", ":host{display:block}.nx-single-step-container{margin-bottom:48px}.nx-single-step__infos{display:flex;font-weight:300;line-height:24px;font-size:16px;margin-top:8px}.nx-single-step__current{color:#414141}.nx-single-step__title,nx-progressbar{margin-bottom:8px;display:block}@media (max-width:703px){.nx-single-step__infos,nx-progressbar{display:none}}.nx-single-step__title{font-size:20px;font-weight:300;margin-bottom:24px}@media (min-width:320px){.nx-single-step__title{display:block}}.nx-single-step__next{margin-left:auto}@media (max-width:703px){.nx-single-step__next{display:none}}"]
                }] }
    ];
    NxSingleStepperComponent.propDecorators = {
        rightLabel: [{ type: Input, args: ['nextLabel',] }]
    };
    return NxSingleStepperComponent;
}(NxProgressStepperDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxProgressStepperComponent = /** @class */ (function (_super) {
    __extends(NxProgressStepperComponent, _super);
    function NxProgressStepperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._progress = 0;
        return _this;
    }
    Object.defineProperty(NxProgressStepperComponent.prototype, "progress", {
        /** Sets the current value/progress of the progress bar. */
        get: /**
         * Sets the current value/progress of the progress bar.
         * @return {?}
         */
        function () { return this._progress; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._progress = clamp(value || 0); },
        enumerable: true,
        configurable: true
    });
    NxProgressStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-progress-stepper',
                    template: "<span *ngIf=\"title\" class=\"nx-single-step__title\">{{title}}</span>\n\n<div class=\"nx-subprogress__items\">\n  <ng-container *ngFor=\"let step of _steps; let i = index\">\n\n    <div\n      [class.nx-subprogress__item--inactive]=\"selectedIndex !== i && !step.completed\"\n      [attr.aria-disabled]=\"selectedIndex !== i && !step.completed\"\n      [class.nx-subprogress__item--selected]=\"selectedIndex === i\"\n      class=\"nx-subprogress__item\">\n\n      <div class=\"nx-subprogress__counter\">\n      <div class=\"nx-subprogress__number\">\n\n          {{ i + 1 }}\n          </div>\n      </div>\n\n      <label class=\"nx-subprogress__label\">{{step.stepLabel || step.label}}</label>\n\n      <div class=\"nx-subprogress__progress\"  *ngIf=\"selectedIndex === i\">\n        <nx-progressbar\n          [value]=\"progress\"></nx-progressbar>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<div class=\"nx-progress-stepper__current\">\n    {{currentLabel}}\n</div>\n\n\n<div *ngFor=\"let step of _steps; let i = index\"\n      class=\"nx-progress-stepper__content\" role=\"tabpanel\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-label]=\"currentLabel\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>",
                    providers: [{ provide: NxProgressStepperDirective, useExisting: NxProgressStepperComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-progress-stepper__content{overflow:hidden}.nx-progress-stepper__content[aria-expanded=false]{height:0}.nx-progress-stepper__current{display:none}@media (max-width:703px){.nx-progress-stepper__current{display:block;text-align:center}}", ".nx-subprogress__items{display:flex;margin:48px auto}@media (max-width:703px){.nx-subprogress__items{display:none}}.nx-subprogress__item{display:flex;flex:1 0 auto}.nx-subprogress__item:not(:first-child){margin-left:16px}.nx-subprogress__item--selected{display:flex;flex:1 1 100%;align-items:center}.nx-subprogress__progress{flex:1 1 100%;margin-left:8px}.nx-subprogress__item--inactive{color:#d9d9d9}.nx-subprogress__item--inactive .nx-subprogress__counter{max-width:24px;background-color:#fff;border:2px solid #d9d9d9;color:#d9d9d9}.nx-subprogress__item--inactive .nx-subprogress__label{color:#d9d9d9}.nx-subprogress__label{flex:1 1 auto;white-space:nowrap;text-overflow:ellipsis;color:#006192}.nx-subprogress__counter{flex:0 0 24px;display:flex;align-items:center;justify-content:center;background-color:#007ab3;color:#fff;width:24px;height:24px;text-align:center;border-radius:50%;margin-right:8px}"]
                }] }
    ];
    NxProgressStepperComponent.propDecorators = {
        progress: [{ type: Input }]
    };
    return NxProgressStepperComponent;
}(NxProgressStepperDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-input-property-decorator
var NxStepperNextDirective = /** @class */ (function (_super) {
    __extends(NxStepperNextDirective, _super);
    function NxStepperNextDirective(_stepper, changeDetectorRef) {
        var _this = _super.call(this, _stepper) || this;
        _this.changeDetectorRef = changeDetectorRef;
        /**
         * \@docs-private
         */
        _this.disabled = false;
        return _this;
    }
    /**
     * Implemented to prevent changed after checked error after stepper init.
     * When the stepper initializes the directive is checked first before
     * the stepper can check its content thus it doesn't know about it's children yet
     * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle
     * after the stepper has checked its contents the button needs to be enabled resulting
     * in the error.
     */
    /**
     * Implemented to prevent changed after checked error after stepper init.
     * When the stepper initializes the directive is checked first before
     * the stepper can check its content thus it doesn't know about it's children yet
     * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle
     * after the stepper has checked its contents the button needs to be enabled resulting
     * in the error.
     * @return {?}
     */
    NxStepperNextDirective.prototype.ngDoCheck = /**
     * Implemented to prevent changed after checked error after stepper init.
     * When the stepper initializes the directive is checked first before
     * the stepper can check its content thus it doesn't know about it's children yet
     * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle
     * after the stepper has checked its contents the button needs to be enabled resulting
     * in the error.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var stepper = (/** @type {?} */ (this._stepper));
        if (this.disabled !== !stepper.hasNext) {
            this.disabled = !stepper.hasNext;
            this.changeDetectorRef.markForCheck();
        }
    };
    NxStepperNextDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[nxStepperNext]',
                    host: {
                        '(click)': '_stepper.next()',
                        '[type]': 'type',
                        '[disabled]': 'disabled'
                    },
                    inputs: ['type'],
                    providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }]
                },] }
    ];
    /** @nocollapse */
    NxStepperNextDirective.ctorParameters = function () { return [
        { type: CdkStepper },
        { type: ChangeDetectorRef }
    ]; };
    return NxStepperNextDirective;
}(CdkStepperNext));
var NxStepperPreviousDirective = /** @class */ (function (_super) {
    __extends(NxStepperPreviousDirective, _super);
    function NxStepperPreviousDirective(_stepper, changeDetectorRef) {
        var _this = _super.call(this, _stepper) || this;
        _this.changeDetectorRef = changeDetectorRef;
        return _this;
    }
    NxStepperPreviousDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[nxStepperPrevious]',
                    host: {
                        '(click)': '_stepper.previous()',
                        '[type]': 'type',
                        '[disabled]': '!_stepper.hasPrevious'
                    },
                    inputs: ['type'],
                    providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }]
                },] }
    ];
    /** @nocollapse */
    NxStepperPreviousDirective.ctorParameters = function () { return [
        { type: CdkStepper },
        { type: ChangeDetectorRef }
    ]; };
    return NxStepperPreviousDirective;
}(CdkStepperPrevious));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxProgressStepperModule = /** @class */ (function () {
    function NxProgressStepperModule() {
    }
    NxProgressStepperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        CdkStepperModule,
                        NxIconModule,
                        NxProgressbarModule
                    ],
                    declarations: [
                        NxProgressStepperDirective,
                        NxMultiStepperComponent,
                        NxStepComponent,
                        NxStepperNextDirective,
                        NxStepperPreviousDirective,
                        NxProgressStepperComponent,
                        NxSingleStepperComponent,
                        NxMultiStepItemComponent
                    ],
                    exports: [
                        NxProgressStepperDirective,
                        NxSingleStepperComponent,
                        NxProgressStepperComponent,
                        NxMultiStepperComponent,
                        NxStepComponent,
                        NxStepperNextDirective,
                        NxStepperPreviousDirective
                    ]
                },] }
    ];
    return NxProgressStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxProgressStepperModule, NxStepComponent, NxProgressStepperDirective, NxMultiStepperComponent, NxMultiStepItemComponent, NxProgressStepperComponent, NxSingleStepperComponent, NxStepperNextDirective, NxStepperPreviousDirective };

//# sourceMappingURL=allianz-ngx-ndbx-progress-stepper.js.map