import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { NxButtonModule } from '@allianz/ngx-ndbx/button';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxInputModule } from '@allianz/ngx-ndbx/input';
import { __extends } from 'tslib';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { getFontShorthand, mapClassNames, pad } from '@allianz/ngx-ndbx/utils';
import { MappedStyles } from '@allianz/ngx-ndbx/core';
import { Decimal } from 'decimal.js';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { Injectable, ChangeDetectorRef, Directive, ElementRef, HostBinding, Input, Renderer2, ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Output, ViewChild, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxNumberStepperIntl = /** @class */ (function () {
    function NxNumberStepperIntl() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /**
         * The aria label for the decrement '-' button
         */
        this.decrementAriaLabel = 'Decrement';
        /**
         * The aria label for the increment '+' button
         */
        this.incrementAriaLabel = 'Increment';
    }
    NxNumberStepperIntl.decorators = [
        { type: Injectable }
    ];
    return NxNumberStepperIntl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 */
var NxAutoResizeDirective = /** @class */ (function () {
    function NxAutoResizeDirective(_element, _renderer, _cdr) {
        this._element = _element;
        this._renderer = _renderer;
        this._cdr = _cdr;
        this._resize = true;
        this.updateInputWidth = this.updateInputWidth.bind(this);
    }
    Object.defineProperty(NxAutoResizeDirective.prototype, "resize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._resize = coerceBooleanProperty(value);
            if (this._resize) {
                this._addEventListener();
                this.updateInputWidth();
            }
            else {
                this._removeEventListener();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.resize) {
            this._addEventListener();
        }
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._removeEventListener();
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype.updateInputWidth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var measureCanvas = this._renderer.createElement('canvas');
        /** @type {?} */
        var ctx = measureCanvas.getContext('2d');
        /** @type {?} */
        var styles = window.getComputedStyle(this._element.nativeElement);
        ctx.font = getFontShorthand(styles);
        /** @type {?} */
        var metrics = ctx.measureText(this._element.nativeElement.value);
        /** @type {?} */
        var padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);
        /** @type {?} */
        var border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);
        // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut
        /** @type {?} */
        var newWidth = metrics.width + padding + border + 16;
        // Limit to own given minimal width
        /** @type {?} */
        var parsed = parseFloat(styles.minWidth);
        this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);
        // needed when the outer component is onPush
        this._cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype._addEventListener = /**
     * @return {?}
     */
    function () {
        this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype._removeEventListener = /**
     * @return {?}
     */
    function () {
        this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);
    };
    /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    NxAutoResizeDirective.prototype.sumStyles = /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    function (left, right) {
        left = parseInt(left, 10);
        right = parseInt(right, 10);
        left = Number.isNaN(left) ? 0 : left;
        right = Number.isNaN(right) ? 0 : right;
        return left + right;
    };
    NxAutoResizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[nxAutoResize]'
                },] }
    ];
    /** @nocollapse */
    NxAutoResizeDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    NxAutoResizeDirective.propDecorators = {
        width: [{ type: HostBinding, args: ['style.width.px',] }],
        resize: [{ type: Input, args: ['nxAutoResize',] }]
    };
    return NxAutoResizeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SIZE_MAPPING = {
    big: 'nx-stepper--big',
    normal: ''
};
/** @type {?} */
var STYLE_MAPPING = {
    regular: '',
    bold: 'nx-stepper__input--bold',
    light: 'nx-stepper__input--light'
};
/** @type {?} */
var DEFAULT_CLASSES = ['nx-stepper'];
/** @type {?} */
var INPUT_CLASSES = ['nx-stepper__input'];
/** @type {?} */
var ALLOWED_CHARACTERS = new RegExp(/^-?[0-9]\d*(\.\d+)?$/g);
/** @type {?} */
var CUSTOM_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NxNumberStepperComponent; })),
    multi: true
};
/** @type {?} */
var CUSTOM_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NxNumberStepperComponent; })),
    multi: true
};
/** @type {?} */
var nextUniqueId = 0;
var NxNumberStepperComponent = /** @class */ (function (_super) {
    __extends(NxNumberStepperComponent, _super);
    function NxNumberStepperComponent(_changeDetectorRef, _renderer, _elementRef, _intl) {
        var _this = _super.call(this, SIZE_MAPPING, DEFAULT_CLASSES, _elementRef, _renderer) || this;
        _this._changeDetectorRef = _changeDetectorRef;
        _this._intl = _intl;
        _this._step = 1;
        _this._min = 0;
        _this._max = 100;
        _this._value = 0;
        _this._label = null;
        _this._resize = false;
        _this._negative = false;
        _this._leadingZero = true;
        /**
         * \@docs-private
         */
        _this.inputClassNames = mapClassNames('regular', INPUT_CLASSES, STYLE_MAPPING);
        /**
         * \@docs-private
         */
        _this.inputId = "nx-number-stepper-" + nextUniqueId++;
        /**
         * \@docs-private
         */
        _this.ariaDescribedBy = null;
        /**
         * An event emitted on value change.
         */
        _this.valueChange = new EventEmitter();
        _this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        _this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
        _this._intlSubscription = _this._intl.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this._changeDetectorRef.markForCheck(); }));
        return _this;
    }
    Object.defineProperty(NxNumberStepperComponent.prototype, "resize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resize;
        },
        /** Whether the input should be resized. Default: false */
        set: /**
         * Whether the input should be resized. Default: false
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._resize = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label;
        },
        /** Defines the the label shown above the stepper input. */
        set: /**
         * Defines the the label shown above the stepper input.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._label !== value) {
                this._label = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "style", {
        get: /**
         * @return {?}
         */
        function () {
            return this._style;
        },
        /**
         * Defines the font weight of the input.
         *
         * Possible values: regular, bold, light. Default value: regular
         *
         * @deprecated The style input is not available anymore, only default font-weight should be used.
         * @deletion-target 8.0.0
         */
        set: /**
         * Defines the font weight of the input.
         *
         * Possible values: regular, bold, light. Default value: regular
         *
         * @deprecated The style input is not available anymore, only default font-weight should be used.
         * \@deletion-target 8.0.0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._style === value) {
                return;
            }
            this._style = value;
            this.inputClassNames = mapClassNames(value, INPUT_CLASSES, STYLE_MAPPING);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        /** Sets the step size. Default: 1 */
        set: /**
         * Sets the step size. Default: 1
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // only internal changes no need to call markForCheck
            this._step = Number(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min;
        },
        /** Sets the minimum accepted number. Default: 0 */
        set: /**
         * Sets the minimum accepted number. Default: 0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = Number(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        /** Sets the maximum accepted number. Default: 100 */
        set: /**
         * Sets the maximum accepted number. Default: 100
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = Number(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /** Sets the value of the number-stepper. */
        set: /**
         * Sets the value of the number-stepper.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            if (this._value !== null) {
                this.setInputValue(this._value);
            }
            else {
                this.setInputValue(0);
            }
            this.triggerResize();
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the negative set of styling should be used. */
        set: /**
         * Whether the negative set of styling should be used.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._negative !== value) {
                this._negative = coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNumberStepperComponent.prototype, "leadingZero", {
        get: /**
         * @return {?}
         */
        function () {
            return this._leadingZero;
        },
        /** Whether the number stepper value should have a leading zero.
         *
         * Default value is true.
         */
        set: /**
         * Whether the number stepper value should have a leading zero.
         *
         * Default value is true.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._leadingZero !== value) {
                this._leadingZero = coerceBooleanProperty(value);
                this.setInputValue(this.value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxNumberStepperComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setInputValue(this._value);
    };
    /**
     * @return {?}
     */
    NxNumberStepperComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // defer to prevent checked after change errors
        if (this.resize) {
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.triggerResize(); }));
        }
        if (this.ngContentWrapper) {
            this.ariaDescribedBy = this.ngContentWrapper.nativeElement.children.length > 0 ? "label-for-" + this.inputId : null;
        }
    };
    /**
     * @return {?}
     */
    NxNumberStepperComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._intlSubscription.unsubscribe();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    NxNumberStepperComponent.prototype.setInputValue = /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.leadingZero) {
            this.numberInput.nativeElement.value = pad(value.toString(), 2);
        }
        else {
            this.numberInput.nativeElement.value = value.toString();
        }
    };
    /* ControlValueAccessor Implementations */
    /* ControlValueAccessor Implementations */
    /**
     * @param {?} value
     * @return {?}
     */
    NxNumberStepperComponent.prototype.writeValue = /* ControlValueAccessor Implementations */
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} onChange
     * @return {?}
     */
    NxNumberStepperComponent.prototype.registerOnChange = /**
     * @param {?} onChange
     * @return {?}
     */
    function (onChange) {
        this.onChangeCallback = onChange;
    };
    /**
     * @param {?} onTouched
     * @return {?}
     */
    NxNumberStepperComponent.prototype.registerOnTouched = /**
     * @param {?} onTouched
     * @return {?}
     */
    function (onTouched) {
        this.onTouchedCallback = onTouched;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxNumberStepperComponent.prototype.onInputChange = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.validateUserInput(event.target.value)) {
            this._value = null;
        }
        else {
            this._value = Number(event.target.value);
        }
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} input
     * @return {?}
     */
    NxNumberStepperComponent.prototype.validateUserInput = /**
     * \@docs-private
     * @param {?} input
     * @return {?}
     */
    function (input) {
        return !!input.match(ALLOWED_CHARACTERS);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxNumberStepperComponent.prototype.increment = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newValue;
        if (this.isBetweenLimits(this._value)) {
            newValue = this.getNextGreaterValue(this._value);
        }
        else {
            newValue = this.enforceLimits(this._value);
        }
        this.value = newValue;
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxNumberStepperComponent.prototype.triggerResize = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (this.resize) {
            this.autoResize.updateInputWidth();
            this._changeDetectorRef.markForCheck();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxNumberStepperComponent.prototype.decrement = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newValue;
        if (this.isBetweenLimits(this._value)) {
            newValue = this.getNextLowerValue(this._value);
        }
        else {
            newValue = this.enforceLimits(this._value);
        }
        this.value = newValue;
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    NxNumberStepperComponent.prototype.enforceLimits = /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value > this._max) {
            return this._max;
        }
        else if (value < this._min) {
            return this._min;
        }
        return value;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} start
     * @return {?}
     */
    NxNumberStepperComponent.prototype.getNextLowerValue = /**
     * \@docs-private
     * @param {?} start
     * @return {?}
     */
    function (start) {
        // if there is an invalid input start is null
        if (!start) {
            start = 0;
        }
        /** @type {?} */
        var next;
        if (this.isValidStep(start)) {
            next = (new Decimal(start).minus(new Decimal(this._step))).toNumber();
        }
        else {
            next = new Decimal(start).toNearest(this._step, Decimal.ROUND_DOWN).toNumber();
        }
        return this.enforceLimits(next);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} start
     * @return {?}
     */
    NxNumberStepperComponent.prototype.getNextGreaterValue = /**
     * \@docs-private
     * @param {?} start
     * @return {?}
     */
    function (start) {
        /** @type {?} */
        var next;
        if (!start) {
            start = 0;
        }
        if (this.isValidStep(start)) {
            next = (new Decimal(start).plus(new Decimal(this._step))).toNumber();
        }
        else {
            next = new Decimal(start).toNearest(this._step, Decimal.ROUND_UP).toNumber();
        }
        return this.enforceLimits(next);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    NxNumberStepperComponent.prototype.isBetweenLimits = /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value <= this._max && value >= this._min;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxNumberStepperComponent.prototype.isMinimum = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this._value === this._min;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxNumberStepperComponent.prototype.isMaximum = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this._value === this._max;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    NxNumberStepperComponent.prototype.isValidStep = /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === null) {
            value = new Decimal(0);
        }
        /** @type {?} */
        var min = new Decimal(this._min);
        /** @type {?} */
        var valueDec = new Decimal(value);
        /** @type {?} */
        var checkValue = (min.minus(valueDec)).mod(new Decimal(this._step)).toNumber();
        if (this.isBetweenLimits(value) && ((this.isMinimum() || this.isMaximum()) ||
            checkValue === 0)) {
            return true;
        }
        return false;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    NxNumberStepperComponent.prototype.userInputToNumber = /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var current = value === '' ? 0 : value;
        return parseInt(current, 10);
    };
    /**
     * @return {?}
     */
    NxNumberStepperComponent.prototype._validateFn = /**
     * @return {?}
     */
    function () {
        // the manual user input must match min + n * step, e.g. minimum 1 step 2: 1, 3, 5, 7 etc.
        if (!this.isValidStep(this._value)) {
            return { nxNumberStepperStepError: 'Value is not a valid step' };
        }
        else if (this._value === null) {
            return { nxNumberStepperFormatError: 'Not a valid number' };
        }
        return null;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} c
     * @return {?}
     */
    NxNumberStepperComponent.prototype.validate = /**
     * \@docs-private
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this._validateFn();
    };
    Object.defineProperty(NxNumberStepperComponent.prototype, "_buttonType", {
        get: /**
         * @return {?}
         */
        function () {
            return 'secondary' + (this.negative ? ' negative' : '');
        },
        enumerable: true,
        configurable: true
    });
    NxNumberStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-number-stepper',
                    template: "<div *ngIf=\"label\" class=\"nx-stepper__label\">\n  <label [for]=\"inputId\">\n    {{label}}\n  </label>\n</div>\n<div #customLabel *ngIf=\"!label\" [id]=\"ariaDescribedBy\">\n  <ng-content></ng-content>\n</div>\n<div class=\"nx-stepper__input-container\">\n  <button\n    [attr.aria-label]=\"_intl.decrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__down nx-stepper__control\"\n    (click)=\"decrement()\"\n    [disabled]=\"value <= min\">\n    <nx-icon name=\"minus\" size=\"s\"></nx-icon>\n  </button>\n  <div class=\"nx-stepper__input-wrapper\">\n    <div class=\"nx-stepper__inner-wrapper\">\n        <ng-content select=\"nx-number-stepper-prefix\"></ng-content>\n\n        <input #numberInput [nxAutoResize]=\"resize\"\n        [attr.aria-describedby]=\"ariaDescribedBy\"\n        [id]=\"inputId\" [ngClass]=\"inputClassNames\"\n        (input)=\"onInputChange($event)\"\n        (keydown.arrowup)=\"increment()\"\n        (keydown.arrowdown)=\"decrement()\"/>\n\n        <ng-content select=\"nx-number-stepper-suffix\"></ng-content>\n    </div>\n    <div class=\"nx-stepper__input-underline\"></div>\n  </div>\n\n  <button\n    [attr.aria-label]=\"_intl.incrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__up nx-stepper__control\"\n    (click)=\"increment()\"\n    [disabled]=\"value >= max\">\n    <nx-icon name=\"plus\" size=\"s\"></nx-icon>\n  </button>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: ['classNames: nxSize'],
                    host: {
                        '[class.is-negative]': 'negative'
                    },
                    providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR],
                    styles: [":host{display:block}:host input{padding:0}.nx-stepper__input-container{align-items:flex-end;display:flex;margin-top:12px}.nx-stepper__label{display:flex;font-size:20px;line-height:28px}.nx-stepper__control{width:32px;height:32px;min-height:32px;font-size:24px;margin:0;padding:0}.nx-stepper__control:disabled{background-color:rgba(255,255,255,.4);border-color:#006192;color:#006192;opacity:.4}.nx-stepper__input{width:56px;min-width:56px}.nx-stepper__input,::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix{background:0 0;outline:0;border:0;text-align:center;color:#414141;font-size:20px;line-height:28px;height:28px}::ng-deep .nx-stepper__suffix{margin-left:4px}::ng-deep .nx-stepper__prefix{margin-right:4px}.nx-stepper__input-wrapper{display:flex;align-items:center;flex-direction:column;margin:0 16px}.nx-stepper__inner-wrapper{height:28px;display:flex;align-items:baseline}.nx-stepper__input-underline{width:100%;margin-top:2px;height:2px;background:#414141}:host.nx-stepper--big .nx-stepper__control{width:72px;min-height:48px;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input{width:72px;min-width:72px}:host.nx-stepper--big .nx-stepper__input,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{color:#414141;font-size:40px;line-height:48px;height:48px;letter-spacing:.3px;padding:0;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input-wrapper{margin:0 24px}:host.nx-stepper--big .nx-stepper__input-underline{margin-top:-2px}:host.nx-stepper--big .nx-stepper__inner-wrapper{height:48px}:host.is-negative .nx-stepper__label{color:#fff}:host.is-negative .nx-stepper__input{color:#fff}:host.is-negative .nx-stepper__input-underline{background:#fff}"]
                }] }
    ];
    /** @nocollapse */
    NxNumberStepperComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef },
        { type: NxNumberStepperIntl }
    ]; };
    NxNumberStepperComponent.propDecorators = {
        numberInput: [{ type: ViewChild, args: ['numberInput',] }],
        ngContentWrapper: [{ type: ViewChild, args: ['customLabel',] }],
        autoResize: [{ type: ViewChild, args: [NxAutoResizeDirective,] }],
        valueChange: [{ type: Output, args: ['nxValueChange',] }],
        resize: [{ type: Input, args: ['nxResize',] }],
        label: [{ type: Input, args: ['nxLabel',] }],
        style: [{ type: Input, args: ['nxStyle',] }],
        step: [{ type: Input, args: ['nxStep',] }],
        min: [{ type: Input, args: ['nxMin',] }],
        max: [{ type: Input, args: ['nxMax',] }],
        value: [{ type: Input, args: ['nxValue',] }],
        negative: [{ type: Input }],
        leadingZero: [{ type: Input }]
    };
    return NxNumberStepperComponent;
}(MappedStyles));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Directive used to pass a suffix to the number stepper.
 */
var NxNumberStepperPrefixDirective = /** @class */ (function () {
    function NxNumberStepperPrefixDirective() {
    }
    NxNumberStepperPrefixDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-number-stepper-prefix',
                    host: {
                        'class': 'nx-stepper__prefix'
                    }
                },] }
    ];
    return NxNumberStepperPrefixDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Directive used to pass a suffix to the number stepper.
 */
var NxNumberStepperSuffixDirective = /** @class */ (function () {
    function NxNumberStepperSuffixDirective() {
    }
    NxNumberStepperSuffixDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-number-stepper-suffix',
                    host: {
                        'class': 'nx-stepper__suffix'
                    }
                },] }
    ];
    return NxNumberStepperSuffixDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxNumberStepperModule = /** @class */ (function () {
    function NxNumberStepperModule() {
    }
    NxNumberStepperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        NxInputModule,
                        FormsModule,
                        NxIconModule,
                        NxButtonModule,
                        CommonModule
                    ],
                    exports: [
                        NxNumberStepperComponent,
                        NxAutoResizeDirective,
                        NxNumberStepperPrefixDirective,
                        NxNumberStepperSuffixDirective
                    ],
                    declarations: [
                        NxNumberStepperComponent,
                        NxAutoResizeDirective,
                        NxNumberStepperPrefixDirective,
                        NxNumberStepperSuffixDirective
                    ],
                    providers: [NxNumberStepperIntl],
                },] }
    ];
    return NxNumberStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxNumberStepperModule, NxNumberStepperComponent, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective, NxNumberStepperIntl, NxAutoResizeDirective as ɵa };

//# sourceMappingURL=allianz-ngx-ndbx-number-stepper.js.map