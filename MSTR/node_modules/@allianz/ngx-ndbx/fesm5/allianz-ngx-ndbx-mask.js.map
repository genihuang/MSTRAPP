{"version":3,"file":"allianz-ngx-ndbx-mask.js.map","sources":["ng://@allianz/ngx-ndbx/mask/mask.directive.ts","ng://@allianz/ngx-ndbx/mask/mask.module.ts"],"sourcesContent":["import { Directive, Input, ElementRef, forwardRef } from '@angular/core';\n\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  Validator\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NX_INPUT_VALUE_ACCESSOR } from '@allianz/ngx-ndbx/input';\nimport { BACKSPACE, DELETE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, A, Z } from '@angular/cdk/keycodes';\n\ntype MASK_TYPE = '0' | 'A' | 'S';\n\nexport const NX_MASK_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxMaskDirective),\n  multi: true\n};\n\nexport const NX_MASK_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxMaskDirective),\n  multi: true\n};\n\n@Directive({\n  selector: 'input[nxMask]',\n  host: {\n    '(input)': '_onInputChange($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(paste)': '_onPaste($event)',\n    '(blur)': '_onTouchedCallback()'\n  },\n  exportAs: 'nxMaskDirective',\n  providers: [\n    NX_MASK_VALUE_ACCESSOR,\n    { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxMaskDirective },\n    NX_MASK_VALIDATORS\n  ]\n})\nexport class NxMaskDirective implements ControlValueAccessor, Validator {\n\n  private _mask: string;\n  private _separators = ['/', '(', ')', '.', ':', '-', ' ', '+', ','];\n  private _dropSpecialCharacters: boolean = false;\n  private _position: number = null;\n  private _validateMask: boolean = true;\n\n  private _onChangeCallback = (_: any) => { };\n  private _onTouchedCallback = () => { };\n  private _validatorOnChange = () => { };\n\n  /** Sets the mask.  */\n  @Input('nxMask')\n  set mask(value: string) {\n    if (!value) {\n      value = '';\n    }\n    if (value !== this._mask) {\n      this._mask = value;\n      this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n      this._validatorOnChange();\n    }\n  }\n  get mask(): string {\n    return this._mask;\n  }\n\n  /**\n   * Sets the keys that are recognized as separators.\n   * Default separators: / ( ) . : - + , and space.\n   */\n  @Input()\n  set separators(values: string[]) {\n    this._separators = values;\n    this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n    this._validatorOnChange();\n  }\n  get separators(): string[] {\n    return this._separators;\n  }\n\n  /** Whether the separators should be dropped in the control value accessor. */\n  @Input()\n  set dropSpecialCharacters(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._dropSpecialCharacters) {\n      this._dropSpecialCharacters = newValue;\n      this.updateValue(this.getMaskedString(this._elementRef.nativeElement.value));\n    }\n  }\n  get dropSpecialCharacters(): boolean {\n    return this._dropSpecialCharacters;\n  }\n\n  /** Whether the mask validation should be applied on the input. Default: true. */\n  @Input()\n  set validateMask(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._validateMask) {\n      this._validateMask = newValue;\n      this._validatorOnChange();\n    }\n  }\n  get validateMask(): boolean {\n    return this._validateMask;\n  }\n\n  constructor(\n    private _elementRef: ElementRef\n  ) { }\n\n  /** Returns the unmasked value. */\n  getUnmaskedValue(): string {\n    const unmaskedValue = this.separators.reduce(function(unmasked, separator) {\n      return unmasked.split(separator).join('');\n    }, this._elementRef.nativeElement.value);\n\n    return unmaskedValue;\n  }\n\n  /**\n   * this._position can be set to a new value in this function;\n   * it is used to set the cursor position after checking the masked input in _onInputChange().\n   */\n  _onKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const location = event.location;\n\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    const currentValue = this._elementRef.nativeElement.value;\n\n    // row of characters is selected: set cursor position to end of new entered character\n    if (input.selectionStart !== input.selectionEnd) {\n      let nextCharacterInMask = input.selectionStart;\n      while (this.isSeparator(this._mask[nextCharacterInMask])) {\n        nextCharacterInMask++;\n      }\n      const positionChange = this._isKeyCodeAllowed(keyCode, location, this.mask[nextCharacterInMask] as MASK_TYPE)\n                      ? this._calculateCursorShift(input.selectionStart)\n                      : 0;\n      this._position = input.selectionStart + positionChange;\n    } else if (keyCode === BACKSPACE || keyCode === DELETE) {\n      // if backspace pressed, cursor has to move one character to start\n      const backspaceShift = keyCode === BACKSPACE ? 1 : 0;\n      const lastCharacter = currentValue.substring(input.selectionStart - backspaceShift, input.selectionEnd - backspaceShift + 1);\n      const selectionAtLastCharacter = (input.selectionStart === currentValue.length - 1 + backspaceShift);\n\n      // if last character is deleted: only delete last character, do not trigger input event again\n      // (here the separator would be added again)\n      if (selectionAtLastCharacter) {\n        this.updateValue(currentValue.substring(0, currentValue.length - 1));\n        event.preventDefault();\n      // do not delete a separator, only set cursor position\n      } else if (this.isSeparator(lastCharacter)) {\n        input.setSelectionRange(input.selectionStart - backspaceShift, input.selectionEnd - backspaceShift);\n        event.preventDefault();\n      // for any other character: decrease cursor position by one.\n      // the input is modified and will be validated in _onInputChange().\n      } else {\n        this._position = input.selectionStart - backspaceShift;\n      }\n    } else {\n      this._position = input.selectionStart;\n      let nextCharacterInMask = input.selectionStart;\n      while (this.isSeparator(this._mask[nextCharacterInMask])) {\n        nextCharacterInMask++;\n      }\n\n      if (this._isKeyCodeAllowed(keyCode, location, this._mask[nextCharacterInMask] as MASK_TYPE)) {\n        // if mask is already filled up, do not allow any inputs\n        if (currentValue.length === this.mask.length) {\n          input.setSelectionRange(nextCharacterInMask, nextCharacterInMask);\n          event.preventDefault();\n        } else {\n          this._position = nextCharacterInMask + 1;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the cursor position after a letter is entered at `selectionStart` position in the mask.\n   * There are two cases to consider ('|' => cursor position where the character is entered, mask: 00:00:00):\n   * - before the separators there is space for entering the letter: '12:3|4:5' => '12:30:|45'\n   * - the letter has to be shifted and is entered after the separators: '12:34|:5' => '12:34:0|5'\n   */\n  private _calculateCursorShift(position: number): number {\n    let shift = 0;\n    // tracks if the entered letter was already placed in the current mask\n    // and therefor was considered in the cursor calculation.\n    let characterWasEntered = false;\n\n    if (!this.isSeparator(this.mask[position + shift])) {\n      shift++;\n      characterWasEntered = true;\n    }\n\n    while (this.isSeparator(this.mask[position + shift])) {\n      shift++;\n    }\n\n    if (!characterWasEntered) {\n      shift++;\n    }\n\n    return shift;\n  }\n\n  private _keyCodeIsNumber(value: number, location: number): boolean {\n    return ((value >= ZERO && value <= NINE)\n           || (location === 3 && value >= NUMPAD_ZERO && value <= NUMPAD_NINE));\n  }\n\n  private _keyCodeIsLetter(value: number): boolean {\n    return (value >= A && value <= Z);\n  }\n\n  private _isKeyCodeAllowed(value: number, location: number, maskedValue: MASK_TYPE) {\n    if ((maskedValue === '0' && this._keyCodeIsNumber(value, location))\n        || (maskedValue === 'A' && (this._keyCodeIsNumber(value, location) || this._keyCodeIsLetter(value)))\n        || (maskedValue === 'S' && this._keyCodeIsLetter(value))) {\n\n      return true;\n    }\n    return false;\n  }\n\n  private _isStringAllowed(value: string, maskedValue: MASK_TYPE) {\n    if ((maskedValue === '0' && /^[0-9]{1}$/.test(value))\n          || (maskedValue === 'A' && /^[a-zA-Z0-9]{1}$/.test(value))\n          || (maskedValue === 'S' && /^[a-zA-Z]{1}$/.test(value))) {\n\n      return true;\n    }\n    return false;\n  }\n\n  _onInputChange(event: KeyboardEvent) {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    this.updateValue(this.getMaskedString(input.value));\n    if (this._position !== null) {\n      input.setSelectionRange(this._position, this._position);\n      this._position = null;\n    }\n  }\n\n  _onPaste(event: ClipboardEvent) {\n    const input: HTMLInputElement = event.target as HTMLInputElement;\n    const pastedData = (event.clipboardData || (<any> window).clipboardData).getData('text');\n    const maskedString = this.getMaskedString(pastedData, input.selectionStart);\n    this._position = input.selectionStart + maskedString.length;\n  }\n\n  private updateValue(value: string) {\n    this._elementRef.nativeElement.value = value;\n    if (!this.dropSpecialCharacters) {\n      this._onChangeCallback(value);\n    } else {\n      this._onChangeCallback(this.getUnmaskedValue());\n    }\n  }\n\n  private getMaskedString(inputValue: string, maskStartIndex: number = 0): string {\n    let formattedValue = '';\n    let maskIndex = maskStartIndex;\n    let inputIndex = 0;\n    let carot = 0;\n\n    // insert if next in mask is separator\n    while (this.isSeparator(this.mask[maskIndex])) {\n      formattedValue += this.mask[maskIndex];\n      maskIndex++;\n    }\n\n    while (inputIndex < inputValue.length) {\n      // test if letters are valid\n      if (this._isStringAllowed(inputValue[inputIndex], this.mask[maskIndex] as MASK_TYPE)) {\n        formattedValue += inputValue[inputIndex];\n        inputIndex++;\n        maskIndex++;\n      } else {\n        inputIndex++;\n      }\n\n      // insert if next in mask is separator\n      while (this.isSeparator(this.mask[maskIndex])) {\n        formattedValue += this.mask[maskIndex];\n\n        // shift for _position\n        if (maskIndex === this._position + carot) {\n          carot++;\n        }\n\n        maskIndex++;\n      }\n    }\n\n    if (carot > 0) {\n      this._position = this._position + carot;\n    }\n\n    return formattedValue;\n  }\n\n  private isSeparator(value: string): boolean {\n    return (this._separators.indexOf(value) !== -1);\n  }\n\n  // control value accessor\n  writeValue(value: any): void {\n    if (!value) {\n      value = '';\n    }\n    this.updateValue(this.getMaskedString(value));\n  }\n\n  registerOnChange(onChange: any): void {\n    this._onChangeCallback = onChange;\n  }\n\n  registerOnTouched(onTouched: any): void {\n    this._onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  _validateFn() {\n    const inputLength = this._elementRef.nativeElement.value.length;\n    const maskLength = this._mask.length;\n    if (inputLength !== maskLength) {\n      return { nxMaskLengthError: {'length': maskLength, 'actual': inputLength} };\n    }\n    return null;\n  }\n\n  /** @docs-private */\n  validate() {\n    return this.validateMask ? this._validateFn() : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxMaskDirective } from './mask.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule\n  ],\n  declarations: [\n    NxMaskDirective\n  ],\n  exports: [\n    NxFormfieldModule,\n    NxMaskDirective\n  ]\n})\nexport class NxMaskModule { }\n"],"names":[],"mappings":"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"}
