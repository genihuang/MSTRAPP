import { CommonModule } from '@angular/common';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Directive, NgModule } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This components is a collapsible menu for usage on smaller devices.
 * Can contain any content, but usually [nxMenuLink], [nxMenuGroup] and [nxAction].
 */
var NxMenuComponent = /** @class */ (function () {
    function NxMenuComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._open = false;
    }
    Object.defineProperty(NxMenuComponent.prototype, "open", {
        get: /**
         * @return {?}
         */
        function () {
            return this._open;
        },
        /** Whether the menu is open or closed. */
        set: /**
         * Whether the menu is open or closed.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var open = coerceBooleanProperty(value);
            if (open !== this._open) {
                this._open = open;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /* Toggles the open state of the menu. */
    /* Toggles the open state of the menu. */
    /**
     * @return {?}
     */
    NxMenuComponent.prototype.toggle = /* Toggles the open state of the menu. */
    /**
     * @return {?}
     */
    function () {
        this.open = !this.open;
    };
    NxMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-menu',
                    template: "<div class=\"nx-menu__wrapper\" *ngIf=\"open\">\n  <ng-content></ng-content>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.aria-expanded]': 'open'
                    },
                    styles: [":host(.nx-menu){display:block}.nx-menu__wrapper{position:fixed;top:60px;left:0;right:0;bottom:0;z-index:1;overflow:auto;background:#fff}::ng-deep .nx-menu__link{display:block;padding:12px 0;font-size:18px;line-height:24px;outline:0}::ng-deep .nx-menu__link+.nx-menu__link{margin-top:8px}::ng-deep [data-whatinput=keyboard] .nx-menu__link:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-radius:4px;outline:0}::ng-deep .nx-menu__item.nx-menu__item--large,::ng-deep .nx-menu__item.nx-menu__item--small{padding:24px;border-bottom:1px solid #d9d9d9}::ng-deep .nx-menu__item.nx-menu__item--large{padding-left:64px}"]
                }] }
    ];
    /** @nocollapse */
    NxMenuComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxMenuComponent.propDecorators = {
        open: [{ type: Input }]
    };
    return NxMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This is a menu link.
 * It adds styling to a link and is usually used within a [nxMenuItem].
 */
var NxMenuLinkDirective = /** @class */ (function () {
    function NxMenuLinkDirective() {
    }
    NxMenuLinkDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'a[nxMenuLink]',
                    host: {
                        class: 'nx-menu__link'
                    }
                },] }
    ];
    return NxMenuLinkDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This is a menu item is used to structure content whithin a menu.
 */
var NxMenuItemDirective = /** @class */ (function () {
    function NxMenuItemDirective() {
        this._size = 's';
    }
    Object.defineProperty(NxMenuItemDirective.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value === 'l' ? 'l' : 's';
        },
        enumerable: true,
        configurable: true
    });
    NxMenuItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxMenuItem]',
                    host: {
                        class: 'nx-menu__item',
                        '[class.nx-menu__item--small]': 'size === "s"',
                        '[class.nx-menu__item--large]': 'size === "l"'
                    }
                },] }
    ];
    NxMenuItemDirective.propDecorators = {
        size: [{ type: Input, args: ['nxMenuItem',] }]
    };
    return NxMenuItemDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@title MenuButton
 */
var NxMenuButtonComponent = /** @class */ (function () {
    function NxMenuButtonComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._expandable = false;
        this._expanded = false;
        this._type = 'root';
    }
    Object.defineProperty(NxMenuButtonComponent.prototype, "expandable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expandable;
        },
        /** Whether this menu button is expandable or not. Will add a caret icon. */
        set: /**
         * Whether this menu button is expandable or not. Will add a caret icon.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._expandable = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMenuButtonComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        /**
         * Whether this menu button is expanded or not.
         * Only works in combination with the `expandable` option set to `true`.
         */
        set: /**
         * Whether this menu button is expanded or not.
         * Only works in combination with the `expandable` option set to `true`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._expanded = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMenuButtonComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * The type of this menu button.
         * Can be `primary` or `secondary`, defaults to `primary`.
         */
        set: /**
         * The type of this menu button.
         * Can be `primary` or `secondary`, defaults to `primary`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === 'root' || value === 'nested') {
                this._type = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxMenuButtonComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: '[nxMenuButton]',
                    template: "<ng-content select=\"[nxMenuButtonIcon]\"></ng-content>\n<span class=\"nx-menu-button__label\">\n  <ng-content></ng-content>\n</span>\n<nx-icon *ngIf=\"expandable\" class=\"nx-menu-button__expand-icon\" name=\"chevron-down\"></nx-icon>\n",
                    host: {
                        '[class.is-expanded]': 'expandable && expanded',
                        '[class.is-expandable]': 'expandable',
                        '[class.nx-menu-button--nested]': 'type === "nested"',
                        '[class.nx-menu-button--root]': 'type === "root"',
                        'class': 'nx-menu-button'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:flex;align-items:center;background-color:#fff;color:#414141;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;box-shadow:none;border:none;margin:0;cursor:pointer;line-height:24px;font-weight:400;font-size:18px;width:100%;text-decoration:none;padding:24px}:host:hover{background-color:#ececec}:host.is-expanded{font-weight:700;background-color:#007ab3;border-color:#007ab3;color:#fff}:host.is-expanded .nx-menu-button__expand-icon{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}:host.nx-menu-button--nested{background-color:#f5f5f5}:host.nx-menu-button--nested.is-expanded{background-color:#c1ebfb;border-color:#c1ebfb;color:#414141}:host::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]):focus{box-shadow:inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff;border-radius:8px;border:none}.nx-menu-button__expand-icon{display:flex;justify-content:center;transition:.2s;-webkit-transform:rotateZ(0);transform:rotateZ(0);width:16px;height:24px;margin-right:8px;flex:0 0 auto;font-size:24px}.nx-menu-button__label{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;flex:1 1 auto;text-align:left;line-height:1;padding:4px 0}::ng-deep .nx-menu-button__icon{margin-right:16px;height:24px;font-weight:400;flex:0 0 auto}"]
                }] }
    ];
    /** @nocollapse */
    NxMenuButtonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxMenuButtonComponent.propDecorators = {
        expandable: [{ type: Input }],
        expanded: [{ type: Input }],
        type: [{ type: Input, args: ['nxType',] }]
    };
    return NxMenuButtonComponent;
}());
/**
 * Icon that can be added to a [nxButton].
 */
var NxMenuButtonIconDirective = /** @class */ (function () {
    function NxMenuButtonIconDirective() {
    }
    NxMenuButtonIconDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxMenuButtonIcon]',
                    host: {
                        class: 'nx-menu-button__icon'
                    }
                },] }
    ];
    return NxMenuButtonIconDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var EXPORTED_MODULES = [
    NxMenuComponent,
    NxMenuLinkDirective,
    NxMenuItemDirective,
    NxMenuButtonComponent,
    NxMenuButtonIconDirective,
];
var NxMenuModule = /** @class */ (function () {
    function NxMenuModule() {
    }
    NxMenuModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NxIconModule],
                    declarations: EXPORTED_MODULES,
                    exports: EXPORTED_MODULES
                },] }
    ];
    return NxMenuModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxMenuModule, NxMenuComponent, NxMenuLinkDirective, NxMenuButtonComponent, NxMenuButtonIconDirective, NxMenuItemDirective };

//# sourceMappingURL=allianz-ngx-ndbx-menu.js.map