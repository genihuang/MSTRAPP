import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxMessageModule } from '@allianz/ngx-ndbx/message';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, InjectionToken, Inject, Optional, NgModule } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ERROR_DEFAULT_OPTIONS = new InjectionToken('ERROR_DEFAULT_OPTIONS');
var NxErrorComponent = /** @class */ (function () {
    function NxErrorComponent(_changeDetectorRef, _defaultOptions) {
        this._changeDetectorRef = _changeDetectorRef;
        this._defaultOptions = _defaultOptions;
        this._showIcon = true;
        this._appearance = 'message';
        if (this._defaultOptions && this._defaultOptions.appearance) {
            this.appearance = this._defaultOptions.appearance;
        }
    }
    Object.defineProperty(NxErrorComponent.prototype, "showIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showIcon;
        },
        /** Whether an icon should be displayed. */
        set: /**
         * Whether an icon should be displayed.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showIcon = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxErrorComponent.prototype, "appearance", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appearance;
        },
        /**
         * Whether the error should have message or text styling.
         *
         * Default is 'message'.
         */
        set: /**
         * Whether the error should have message or text styling.
         *
         * Default is 'message'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.appearance) {
                this._appearance = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxErrorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-error',
                    template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n  <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\">\n  </nx-icon>\n  <div class=\"nx-error__content-wrapper\">\n    <div class=\"nx-error__content\">\n      <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" [showIcon]=\"showIcon\" nxContext=\"error\">\n  <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n  <ng-content></ng-content>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.role]': '"alert"'
                    },
                    styles: [":host{font-size:16px;line-height:20px;color:#dc3149;width:100%;display:block}:host .nx-error__content{line-height:20px}:host .nx-error__icon{font-size:20px;line-height:20px;color:#dc3149;margin-right:8px;float:left}"]
                }] }
    ];
    /** @nocollapse */
    NxErrorComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ERROR_DEFAULT_OPTIONS,] }] }
    ]; };
    NxErrorComponent.propDecorators = {
        showIcon: [{ type: Input }],
        appearance: [{ type: Input }]
    };
    return NxErrorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxErrorModule = /** @class */ (function () {
    function NxErrorModule() {
    }
    NxErrorModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        NxIconModule,
                        NxMessageModule
                    ],
                    declarations: [
                        NxErrorComponent
                    ],
                    exports: [
                        NxErrorComponent
                    ]
                },] }
    ];
    return NxErrorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var nextId = 0;
/** @type {?} */
var DEFAULT_SIZE = 'large';
/** @type {?} */
var LABEL_DEFAULT_OPTIONS = new InjectionToken('LABEL_DEFAULT_OPTIONS');
var NxLabelComponent = /** @class */ (function () {
    function NxLabelComponent(_defaultOptions) {
        this._defaultOptions = _defaultOptions;
        this._stateChanges = new Subject();
        this._disabled = false;
        this._negative = false;
        this._id = "nx-label-" + nextId++;
        this._size = (this._defaultOptions && this._defaultOptions.size) ? this._defaultOptions.size : DEFAULT_SIZE;
    }
    Object.defineProperty(NxLabelComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Sets the label to disabled */
        set: /**
         * Sets the label to disabled
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Sets the label to disabled */
        set: /**
         * Sets the label to disabled
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /** Sets the Id of the label */
        set: /**
         * Sets the Id of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._id !== value) {
                this._id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * **NDBX Expert option**
         * Sets the appearance of the label */
        set: /**
         * **NDBX Expert option**
         * Sets the appearance of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    NxLabelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-label',
                    template: "<label class=\"nx-label__content\">\n  <ng-content></ng-content>\n</label>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.disabled]': 'disabled',
                        '[attr.aria-labelledby]': 'id || null',
                        '[class.nx-label--negative]': 'negative',
                        '[class.nx-label--large]': 'size === "large"',
                        '[class.nx-label--small]': 'size === "small"',
                        '[attr.id]': 'id',
                    },
                    styles: [":host{display:block;color:#414141}:host.nx-label--small{font-size:16px;line-height:24px;font-weight:600}:host.nx-label--large{font-size:20px;line-height:28px;letter-spacing:.2px;font-weight:300}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:#fff}"]
                }] }
    ];
    /** @nocollapse */
    NxLabelComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LABEL_DEFAULT_OPTIONS,] }] }
    ]; };
    NxLabelComponent.propDecorators = {
        disabled: [{ type: Input }],
        negative: [{ type: Input }],
        id: [{ type: Input }],
        size: [{ type: Input }]
    };
    return NxLabelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxLabelModule = /** @class */ (function () {
    function NxLabelModule() {
    }
    NxLabelModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        NxLabelComponent
                    ],
                    exports: [
                        NxLabelComponent
                    ]
                },] }
    ];
    return NxLabelModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxErrorModule, ERROR_DEFAULT_OPTIONS, NxErrorComponent, NxLabelModule, LABEL_DEFAULT_OPTIONS, NxLabelComponent };

//# sourceMappingURL=allianz-ngx-ndbx-base.js.map