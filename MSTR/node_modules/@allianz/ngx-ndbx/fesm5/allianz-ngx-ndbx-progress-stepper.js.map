{"version":3,"file":"allianz-ngx-ndbx-progress-stepper.js.map","sources":["ng://@allianz/ngx-ndbx/progress-stepper/progress-stepper.component.ts","ng://@allianz/ngx-ndbx/progress-stepper/multi/multi-step-item.component.ts","ng://@allianz/ngx-ndbx/progress-stepper/multi/multi-step.component.ts","ng://@allianz/ngx-ndbx/progress-stepper/single/single-step.component.ts","ng://@allianz/ngx-ndbx/progress-stepper/progress/progress.component.ts","ng://@allianz/ngx-ndbx/progress-stepper/buttons.ts","ng://@allianz/ngx-ndbx/progress-stepper/progress-stepper.module.ts"],"sourcesContent":["import { CdkStep, CdkStepper } from '@angular/cdk/stepper';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  Input,\n  QueryList,\n  SkipSelf\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\n\n// tslint:disable:use-input-property-decorator\n\n\n// We need to reference steps in stepper and stepper in steps. To prevent circular depenedency errors\n// Provide both components in a single file. Otherwise we would have to introduce interface/abstract classes\n// shared between both implementations.\n\n@Component({\n  selector: 'nx-step',\n  templateUrl: 'progress-stepper.component.html',\n  exportAs: 'nxStep',\n  providers: [{provide: ErrorStateMatcher, useExisting: NxStepComponent}],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxStepComponent extends CdkStep implements ErrorStateMatcher {\n\n  constructor(@Inject(forwardRef(() => NxProgressStepperDirective)) stepper: NxProgressStepperDirective,\n  @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that checks for validity of the step form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Checks for the validity of a step form that is not submitted or touched,\n    // e.g when the user directly clicks the \"next\" button or directly on the step\n    const customErrorState = !!(control && control.invalid && this.interacted);\n    return originalErrorState || customErrorState;\n  }\n}\n@Directive({\n  selector: '[nxProgressStepper]',\n  exportAs: 'nxProgressStepper',\n})\nexport class NxProgressStepperDirective extends CdkStepper implements AfterContentInit {\n  // Do not initialize with an empty QueryList or the hasNext() function produces\n  // wrong results on init\n  @ContentChildren(NxStepComponent) _steps: QueryList<NxStepComponent>;\n  _stepHeader: QueryList<null> = new QueryList();\n\n  /** Sets the label on the left side showing the current step label. Used for mobile viewports. */\n  @Input() currentStepLabel: string;\n  /** Sets the title to be rendered above the progress bar. */\n  @Input() title: string;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._stateChanged();\n      });\n  }\n\n  /** @docs-private */\n  get hasPrevious() {\n    return (this.selectedIndex - 1) >= 0;\n  }\n\n  /** @docs-private */\n  get hasNext() {\n    return (this.selectedIndex + 1) < this.count;\n  }\n\n  /** @docs-private */\n  get count() {\n    return this._steps ? this._steps.length : 0;\n  }\n\n  /** @docs-private */\n  get currentStep(): NxStepComponent | null {\n    if (this.count === 0 || this.selectedIndex === -1) {\n      return null;\n    }\n\n    const steps = this._steps.toArray();\n    return steps[this.selectedIndex];\n  }\n\n  /** @docs-private */\n  get nextStep(): NxStepComponent | null {\n    if (this.selectedIndex + 1 >= this._steps.length) {\n      return null;\n    } else {\n      return this._steps.toArray()[this.selectedIndex + 1];\n    }\n  }\n\n  /** @docs-private */\n  get steps() {\n    return this._steps;\n  }\n\n  /** @docs-private */\n  get currentLabel() {\n    const step = this.currentStep;\n    const label = step.stepLabel || step.label;\n\n    return `\n    ${this.currentStepLabel} ${this.selectedIndex + 1}/${this.count}: ${label}\n    `;\n  }\n}\n\n","import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, forwardRef, Inject } from '@angular/core';\nimport { NxStepComponent, NxProgressStepperDirective } from './../progress-stepper.component';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-multi-step-item',\n  templateUrl: './multi-step-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./multi-step-item.component.scss']\n})\nexport class NxMultiStepItemComponent extends NxStepComponent {\n  /** The state of the step. */\n  @Input() state: string;\n\n  /** The label of the step. */\n  @Input() label: string;\n\n  /** Sets the index of the selected step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Sets the selected step. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Sets the active step. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Sets the last step. */\n  @Input()\n  get last(): boolean { return this._last; }\n  set last(value: boolean) { this._last = coerceBooleanProperty(value); }\n  private _last: boolean;\n\n  /** Sets the first step. */\n  @Input()\n  get first(): boolean { return this._first; }\n  set first(value: boolean) { this._first = coerceBooleanProperty(value); }\n  private _first: boolean;\n\n  /** Whether the step is completed or not. */\n  @Input()\n  set stepCompleted(value: boolean) {\n    this._completed = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n   }\n  get stepCompleted(): boolean { return this._completed; }\n  private _completed: boolean = false;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(forwardRef(() => NxProgressStepperDirective)) stepper: NxProgressStepperDirective,\n     _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper, _errorStateMatcher);\n  }\n\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NxProgressStepperDirective } from './../progress-stepper.component';\n\n@Component({\n  selector: 'nx-multi-stepper',\n  templateUrl: './multi-step.component.html',\n  styleUrls: ['../progress-stepper.component.scss', './multi-step.component.scss'],\n  providers: [{ provide: NxProgressStepperDirective, useExisting: NxMultiStepperComponent }],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxMultiStepperComponent extends NxProgressStepperDirective { }\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { NxProgressStepperDirective } from './../progress-stepper.component';\n\n@Component({\n  selector: 'nx-single-stepper',\n  templateUrl: './single-step.component.html',\n  styleUrls: ['../progress-stepper.component.scss', './single-step.component.scss'],\n  providers: [{provide: NxProgressStepperDirective, useExisting: NxSingleStepperComponent}],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxSingleStepperComponent extends NxProgressStepperDirective {\n  /** Sets the label on the right showing the next step. */\n  @Input('nextLabel')\n  get rightLabel(): string { return this._rightLabel; }\n  set rightLabel(v) { this._rightLabel = v; }\n\n  private _rightLabel: string = 'Next step:';\n\n  /** @docs-private */\n  get progress() {\n    return (this.selectedIndex + 1) / this.count;\n  }\n\n  /** @docs-private */\n  get currentLabel() {\n    const step = this.currentStep;\n    const label = step.stepLabel || step.label;\n\n    return `\n    ${this.currentStepLabel} ${this.selectedIndex + 1}/${this.count}: ${label}\n    `;\n  }\n\n  /** @docs-private */\n  get nextLabel() {\n    const step = this.nextStep;\n\n    if (step) {\n      const label = step.stepLabel || step.label;\n\n      return `\n        ${this.rightLabel} ${label}\n      `;\n    }\n\n    return null;\n  }\n\n\n}\n","import { clamp } from '@allianz/ngx-ndbx/utils';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { NxProgressStepperDirective } from './../progress-stepper.component';\n\n@Component({\n  selector: 'nx-progress-stepper',\n  templateUrl: 'progress.component.html',\n  styleUrls: ['../progress-stepper.component.scss', './progress.component.scss'],\n  providers: [{provide: NxProgressStepperDirective, useExisting: NxProgressStepperComponent}],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxProgressStepperComponent extends NxProgressStepperDirective {\n\n  /** Sets the current value/progress of the progress bar. */\n  @Input()\n  get progress(): number { return this._progress; }\n  set progress(value: number) { this._progress = clamp(value || 0); }\n  private _progress: number = 0;\n}\n","import { CdkStepper, CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';\nimport { ChangeDetectorRef, Directive, DoCheck, OnInit } from '@angular/core';\n\nimport { NxProgressStepperDirective } from './progress-stepper.component';\n\n// tslint:disable:use-input-property-decorator\n\n@Directive({\n  selector: 'button[nxStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n    '[disabled]': 'disabled'\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: NxProgressStepperDirective}]\n})\nexport class NxStepperNextDirective extends CdkStepperNext implements DoCheck {\n\n  /** @docs-private */\n  disabled = false;\n\n  constructor(_stepper: CdkStepper, private changeDetectorRef: ChangeDetectorRef) {\n    super(_stepper);\n  }\n\n  /**\n   * Implemented to prevent changed after checked error after stepper init.\n   * When the stepper initializes the directive is checked first before\n   * the stepper can check its content thus it doesn't know about it's children yet\n   * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle\n   * after the stepper has checked its contents the button needs to be enabled resulting\n   * in the error.\n   */\n  ngDoCheck() {\n    const stepper = this._stepper as NxProgressStepperDirective;\n    if (this.disabled !== !stepper.hasNext) {\n      this.disabled = !stepper.hasNext;\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n}\n\n@Directive({\n  selector: 'button[nxStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n    '[disabled]': '!_stepper.hasPrevious'\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: NxProgressStepperDirective}]\n})\nexport class NxStepperPreviousDirective extends CdkStepperPrevious {\n  constructor(_stepper: CdkStepper, private changeDetectorRef: ChangeDetectorRef) {\n    super(_stepper);\n  }\n\n}\n","import { NxProgressbarModule } from '@allianz/ngx-ndbx/progressbar';\nimport { NxMultiStepItemComponent } from './multi/multi-step-item.component';\nimport { NxMultiStepperComponent } from './multi/multi-step.component';\nimport { NxSingleStepperComponent } from './single/single-step.component';\nimport { NxProgressStepperComponent } from './progress/progress.component';\nimport { NxStepperNextDirective, NxStepperPreviousDirective } from './buttons';\nimport { NxProgressStepperDirective, NxStepComponent } from './progress-stepper.component';\nimport {NgModule} from '@angular/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NxIconModule} from '@allianz/ngx-ndbx/icon';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CdkStepperModule,\n    NxIconModule,\n    NxProgressbarModule\n  ],\n  declarations: [\n    NxProgressStepperDirective,\n    NxMultiStepperComponent,\n    NxStepComponent,\n    NxStepperNextDirective,\n    NxStepperPreviousDirective,\n    NxProgressStepperComponent,\n    NxSingleStepperComponent,\n    NxMultiStepItemComponent\n  ],\n  exports: [\n    NxProgressStepperDirective,\n    NxSingleStepperComponent,\n    NxProgressStepperComponent,\n    NxMultiStepperComponent,\n    NxStepComponent,\n    NxStepperNextDirective,\n    NxStepperPreviousDirective\n  ]\n})\nexport class NxProgressStepperModule {\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
