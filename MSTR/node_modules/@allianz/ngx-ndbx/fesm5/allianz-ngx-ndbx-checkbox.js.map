{"version":3,"file":"allianz-ngx-ndbx-checkbox.js.map","sources":["ng://@allianz/ngx-ndbx/checkbox/checkbox.component.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ChangeDetectorRef,\n  AfterContentInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  Self,\n  OnInit, ContentChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\nlet nextId = 0;\n\nexport class NxCheckboxChangeEvent {\n  constructor(\n  /** The checked value of the checkbox. */\n  public checked: boolean,\n  /** The value of the checkbox. */\n  public value: string,\n  /** The component instance of the checkbox which emitted the change event. */\n  public checkbox: NxCheckboxComponent\n  ) {}\n}\n\n/** Size of the label. */\nexport type NxCheckboxLabelSize = 'small' | 'large';\n\n@Component({\n  selector: 'nx-checkbox-group',\n  templateUrl: 'checkbox-group.component.html',\n  styleUrls: ['checkbox-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox-group]': 'true',\n    '[class.nx-checkbox-group--negative]': 'negative',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-labelledby]': 'this._label?.id  || null',\n    '[attr.role]': '\"group\"',\n  }\n})\nexport class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n  @ContentChildren(forwardRef(() => NxCheckboxComponent), {descendants: true})\n  _checkboxes: QueryList<NxCheckboxComponent>;\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {})\n   _label: NxLabelComponent;\n\n  readonly _stateChanges = new Subject<void>();\n  @Output() selectionChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  private _id: string = `nx-checkbox-group-${nextId++}`;\n  /** Sets the Id of the checkbox group. */\n  @Input()\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string;\n  /** Sets the name of the checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Disables all checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._label) {\n      this._label.disabled = this._disabled;\n    }\n    this._stateChanges.next();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n    this._stateChanges.next();\n  }\n\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _labelSize: NxCheckboxLabelSize;\n  /** Sets the label size of the checkboxes inside the group */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._stateChanges.next();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return this._labelSize;\n  }\n\n  /** Whether the nx-checkbox-group are required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  private _value: any;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.ngControl) {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._onChange(this._value);\n      });\n    }\n\n    this._updateSelectedCheckboxFromValue();\n    this._checkboxes.changes.subscribe(() => {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      if (this.ngControl) {\n        this.ngControl.control.setValue(this._value);\n      }\n      this._updateSelectedCheckboxFromValue();\n    });\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    if (this._value) {\n      this._value = value;\n    }\n    this._updateSelectedCheckboxFromValue();\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n\n  private _onTouched: () => any = () => {};\n\n  private _updateSelectedCheckboxFromValue(): void {\n    if (this._checkboxes !== null) {\n      if (this._value) {\n        this._checkboxes.map(checkbox => {\n          if (this._value.indexOf(checkbox.value) !== -1) {\n            checkbox.checked = true;\n          }\n        });\n      }\n    }\n  }\n\n  /** @docs-private */\n  change(value) {\n    value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n    this._onChange(value);\n    if (this._onTouched) {\n      this._onTouched();\n    }\n    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));\n  }\n}\n\n@Component({\n  selector: 'nx-checkbox',\n  templateUrl: 'checkbox.component.html',\n  styleUrls: ['checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox]': 'true',\n    '[class.disabled]': 'disabled',\n    '[class.nx-checkbox--label-large]': 'labelSize === \"large\"',\n    '[class.nx-checkbox--negative]': 'negative',\n    '[attr.required]': 'required',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCheckboxComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit {\n  private _parentChangeSubscription: Subscription;\n  private _id: string = (nextId++).toString();\n  private _disabled: boolean = false;\n  private _negative: boolean = false;\n  private _labelSize: NxCheckboxLabelSize = 'small';\n  private _checked = false;\n  private _name: string = null;\n\n  /**\n   * Id of the checkbox.\n   *\n   * If not set, the checkbox gets an incremented value by default.\n   */\n  @Input()\n  set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id() {\n    return `nx-checkbox-${this._id}`;\n  }\n\n  /** Name of the checkbox. */\n  @Input()\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name(): string {\n    return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;\n  }\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;\n  }\n\n  /**\n   * Sets the label size of the checkbox. Default value: small\n   */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;\n  }\n\n  /**\n   * Whether the checkbox has negative styling.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;\n  }\n\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      if (this._indeterminate) {\n        this._setIndeterminate(false);\n      }\n      this._setChecked(newValue);\n    }\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  private _indeterminate = false;\n\n  /** Whether the checkbox is indeterminated. */\n  @Input()\n  set indeterminate(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._indeterminate !== newValue) {\n      if (this._checked) {\n        this._setChecked(false);\n      }\n      this._setIndeterminate(newValue);\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  /** Sets the value of the checkbox. Default value is the checked status. */\n  @Input()\n  get value(): string {\n    return this._value ? this._value : this.checked.toString();\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _value: string;\n\n  /** An event emitted when the indeterminate value has changed */\n  @Output()\n  indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits the boolean checked value of the changed checkbox.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits a NxCheckboxChangeEvent.\n   */\n  @Output()\n  checkboxChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public checkboxGroup: NxCheckboxGroupComponent) {\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    return !!(this.checkboxGroup && this.checkboxGroup.ngControl && this.checkboxGroup.ngControl.invalid\n      && this.checkboxGroup.ngControl.touched);\n  }\n\n  ngOnInit() {\n    if (this.checkboxGroup) {\n      this.name = this.checkboxGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  private _setIndeterminate(value: boolean) {\n    this._indeterminate = value;\n    this.indeterminateChange.emit(this._indeterminate);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _setChecked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  public toggle() {\n    this.checked = !this.checked;\n    this.onChangeCallback(this.checked);\n    if (this.checkboxGroup !== null) {\n      this.checkboxGroup.change(this);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  _onInputClick(event): void {\n    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.toggle();\n      this.checkedChange.emit(this._checked);\n      this.checkboxChange.emit(this._createChangeEvent(this._checked));\n    }\n  }\n\n  /**@docs-private */\n  private _createChangeEvent(checkedValue: boolean): NxCheckboxChangeEvent {\n    const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);\n    event.checked = checkedValue;\n    event.value = this.value;\n    event.checkbox = this;\n    return event;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxCheckboxComponent } from './checkbox.component';\nimport { NxCheckboxGroupComponent } from './checkbox.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxLabelModule } from '@allianz/ngx-ndbx/base';\n\n@NgModule({\n  declarations: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  exports: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    NxLabelModule\n  ]\n})\nexport class NxCheckboxModule { }\n"],"names":[],"mappings":"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"}
