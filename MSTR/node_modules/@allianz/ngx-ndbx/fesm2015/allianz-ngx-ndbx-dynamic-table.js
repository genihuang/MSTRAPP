import { CommonModule } from '@angular/common';
import { mapClassNames } from '@allianz/ngx-ndbx/utils';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ChangeDetectorRef, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { DataSource } from '@angular/cdk/collections';
import { CdkTableModule } from '@angular/cdk/table';
import { ScrollDispatchModule } from '@angular/cdk/scrolling';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TableDataSource extends DataSource {
    /**
     * @param {?} _datachange
     */
    constructor(_datachange) {
        super();
        this._datachange = _datachange;
    }
    /**
     * \@docs-private Connect function called by the table to retrieve one stream containing the data to render.
     * @return {?}
     */
    connect() {
        return this._datachange;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    disconnect() { }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPPING = {
    light: 'nx-table--light',
    border: 'nx-table--light nx-table--with-border'
};
/** @type {?} */
const DEFAULT_CLASSES = ['nx-table '];
class NxDynamicTableComponent {
    /**
     * @param {?} el
     * @param {?} _changeDetectorRef
     */
    constructor(el, _changeDetectorRef) {
        this.el = el;
        this._changeDetectorRef = _changeDetectorRef;
        this._tableStyles = '';
        this._dataChange = new BehaviorSubject([]);
        this._classNames = mapClassNames('', DEFAULT_CLASSES, MAPPING);
        /**
         * An event is dispatched when a row is clicked.
         */
        this.nxRowClick = new EventEmitter();
    }
    /**
     * Sets the data that it will show in the table.
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value
            .filter((/**
         * @param {?} element
         * @return {?}
         */
        element => element));
        // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data
        if (!this._displayedColumns) {
            /** @type {?} */
            const keys = [];
            /** @type {?} */
            const cArray = [];
            // For catch keys of data Objects and assing title, key and type string by default to displayedColumns
            this._data
                .forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                for (const key in element) {
                    if (keys.indexOf(key) === -1) {
                        keys.push(key);
                        cArray.push({ title: key, key: key, type: 'string' });
                    }
                }
            }));
            this._columnKeys = keys;
            this._displayedColumns = cArray;
            // need to call markForCheck as the setter changes displayedColumns here
            // sidenote: isn't needed for the data itself as it gets passed to the cdk-table
            // by the datasource observable
            this._changeDetectorRef.markForCheck();
        }
        this._dataChange.next(this._data);
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * Sets the name order and type of columns.
     * @param {?} value
     * @return {?}
     */
    set displayedColumns(value) {
        this._displayedColumns = value;
        this._columnKeys = value.map((/**
         * @param {?} column
         * @return {?}
         */
        column => column.key));
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get displayedColumns() {
        return this._displayedColumns;
    }
    /**
     * @deprecated The default and light header styling will be removed.
     * \@deletion-target 8.0.0
     * @param {?} value
     * @return {?}
     */
    set styles(value) {
        if (this._tableStyles === value) {
            return;
        }
        this._classNames = mapClassNames(value, DEFAULT_CLASSES, MAPPING);
        this._tableStyles = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get dataSource() {
        return this._dataSource;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get columnKeys() {
        return this._columnKeys;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this._data) {
            this._data = [];
            this._dataChange.next(this._data);
        }
        this._dataSource = new TableDataSource(this._dataChange);
    }
    /**
     * \@docs-private
     * @param {?} row
     * @return {?}
     */
    handleRowClick(row) {
        this.nxRowClick.emit(row);
    }
    /**
     * \@docs-private
     * @param {?} element
     * @return {?}
     */
    isNumeric(element) {
        if (element.type === 'numeric') {
            return true;
        }
        return false;
    }
}
NxDynamicTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-dynamic-table',
                template: "<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n  <div class=\"nx-table__scroll\">\n    <cdk-table [dataSource]=\"dataSource\" [ngClass]=\"classNames\">\n      <!-- Column Definition -->\n      <ng-container *ngFor=\"let element of displayedColumns\" cdkColumnDef=\"{{element.key}}\">\n        <cdk-header-cell *cdkHeaderCellDef class=\"nx-table__header-cell\"\n                         [ngClass]=\"{'nx-table__header-cell--number': isNumeric(element) }\">\n          <div class=\"nx-table__header-title--block\">\n            <span class=\"nx-table__header-title\"> {{element.title}}</span>\n          </div>\n        </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\" class=\"nx-table__cell\"\n                  [ngClass]=\"{'nx-table__cell--number': isNumeric(element) }\" [innerHTML]=\"row[element.key]\"></cdk-cell>\n      </ng-container>\n\n      <!-- Header and Row Declarations -->\n      <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n      <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\"\n               (dblclick)=\"handleRowClick(row)\"></cdk-row>\n\n    </cdk-table>\n  </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n  <ng-content></ng-content>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".nx-table{border-top:2px solid #d9d9d9;border-bottom:2px solid #414141;font-size:16px;text-align:left;width:100%;line-height:24px;color:#414141;display:table}.nx-table--light.nx-table{border-top:1px solid #d9d9d9}.nx-table__container{margin:32px 0}.nx-table__scroll{max-width:100%;overflow:hidden;overflow-x:auto}.nx-table__header-cell{background-color:#d9d9d9;border:1px solid #fff;border-right:none;color:#414141;padding:21px 16px 23px;position:relative;font-size:16px;line-height:24px;font-weight:700}.nx-table__header-row .nx-table__header-cell:last-child{border-right:1px solid #fff}.nx-table__header-row{background-color:#d9d9d9;border-spacing:1px none}.nx-table--light .nx-table__header-row{background-color:#fff;border-bottom:2px solid #414141;border-top:1px solid #d9d9d9}.nx-table__header-cell--number{display:flex;position:relative}.nx-table__header-cell--number .nx-table__header-title--block{justify-content:flex-end}.nx-table__cell{padding:24px 16px;vertical-align:top}.nx-table__cell--number,.nx-table__header-cell--number{text-align:right}.nx-table__row{background-color:#fff}.nx-table__header-row,.nx-table__row{display:table-row;vertical-align:inherit;border-color:inherit}.nx-table__row:nth-child(2n+1){background-color:#ececec}.nx-table--light.nx-table--with-border .nx-table__row{background-color:#fff}.nx-table--light .nx-table__header-cell{background-color:#fff;border:none;border-bottom:2px solid #414141;padding-top:23px;padding-bottom:22px}.nx-table--light.nx-table--with-border .nx-table__cell{padding-bottom:23px;border-bottom:1px solid #d9d9d9}.nx-table__row:last-child .nx-table__cell{padding-bottom:22px;border-bottom:none}.nx-table__cell,.nx-table__header-cell{display:table-cell;vertical-align:inherit}"]
            }] }
];
/** @nocollapse */
NxDynamicTableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
NxDynamicTableComponent.propDecorators = {
    data: [{ type: Input, args: ['nxData',] }],
    displayedColumns: [{ type: Input, args: ['nxDisplayedColumns',] }],
    styles: [{ type: Input, args: ['nxType',] }],
    nxRowClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxDynamicTableModule {
}
NxDynamicTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NxDynamicTableComponent],
                exports: [NxDynamicTableComponent],
                imports: [CommonModule, CdkTableModule, ScrollDispatchModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxDynamicTableModule, NxDynamicTableComponent };

//# sourceMappingURL=allianz-ngx-ndbx-dynamic-table.js.map