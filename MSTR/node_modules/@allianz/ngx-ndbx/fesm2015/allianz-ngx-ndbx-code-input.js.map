{"version":3,"file":"allianz-ngx-ndbx-code-input.js.map","sources":["ng://@allianz/ngx-ndbx/code-input/code-input-intl.ts","ng://@allianz/ngx-ndbx/code-input/code-input.component.ts","ng://@allianz/ngx-ndbx/code-input/code-input.module.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NxCodeInputIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for the input field */\n  inputFieldAriaLabel: string = 'Enter Key';\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ChangeDetectorRef,\n  ElementRef,\n  Self,\n  Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\nimport { BACKSPACE, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\n\nconst DEFAULT_INPUT_LENGTH = 6;\nconst TAG_NAME_INPUT = 'INPUT';\nconst AUTO_UPPERCASE = 'upper';\nconst AUTO_LOWERCASE = 'lower';\nconst INPUT_FIELD_GAP = 'nx-code-input--gap';\nexport type NxConversionTypes = 'lower' | 'upper';\n\n@Component({\n  selector: 'nx-code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: [\n    'code-input.scss'\n  ],\n  host: {\n    '[class.nx-code-input]': 'true',\n    '[class.has-error]': '_control ? _control.invalid && _control.touched : false',\n    '[attr.tabindex]': 'tabindex'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCodeInputComponent implements ControlValueAccessor {\n  /** The length of the code input. Default: 6. */\n  @Input('length')\n  set codeLength(value: number) {\n    this._codeLength = value;\n    this.setInputLength();\n    this._changeDetectorRef.markForCheck();\n  }\n  get codeLength() {\n    return this._codeLength;\n  }\n  private _codeLength: number = DEFAULT_INPUT_LENGTH;\n\n  /** The type of HTML input */\n  @Input()\n  set type(value: string) {\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get type() {\n    return this._type;\n  }\n  private _type: string = 'text';\n\n  /* Sets the the tabindex if code input */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n  private _tabindex: number = 0;\n\n  /** Whether the form should auto capitalize or lowercase. (Optional) */\n  @Input('nxConvertTo')\n  set convertTo(value: NxConversionTypes) {\n    this._convertTo = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get convertTo() {\n    return this._convertTo;\n  }\n  private _convertTo?: NxConversionTypes;\n\n  /** The user input in array form */\n  _keyCode: string[] = new Array(DEFAULT_INPUT_LENGTH);\n  private _focused: boolean = false;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _el: ElementRef,\n    @Self() @Optional() public _control: NgControl,\n    public _intl: NxCodeInputIntl) {\n    if (this._control) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this._control.valueAccessor = this;\n    }\n  }\n\n  /** Sets the length of the input fields. */\n  setInputLength(): void {\n    if (this.codeLength) {\n      this._keyCode = new Array(this.codeLength);\n    } else {\n      this._keyCode = new Array(DEFAULT_INPUT_LENGTH);\n    }\n  }\n\n  /** Converts to upper or lowercase when enabled. */\n  _convertLetterSize(value: any): string {\n    if (value === 'Ã') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      if (this.convertTo === AUTO_UPPERCASE) {\n        return value.toUpperCase();\n      } else if (this.convertTo === AUTO_LOWERCASE) {\n        return value.toLowerCase();\n      }\n\n      return value;\n    }\n  }\n\n  /** Reacts to keydown event. */\n  _keydownAction(event): void | false {\n    const previousInputField = event.target.previousElementSibling;\n    const nextInputField = event.target.nextElementSibling;\n\n    switch (event.keyCode) {\n      case SPACE:\n        return false;\n\n      case BACKSPACE:\n        if (event.target.value === '') {\n          if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n            previousInputField.focus();\n            previousInputField.select();\n          }\n        }\n        break;\n\n      case LEFT_ARROW:\n        if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n          event.preventDefault();\n          previousInputField.focus();\n          previousInputField.select();\n        }\n        break;\n\n      case RIGHT_ARROW:\n        if (nextInputField && nextInputField.tagName === TAG_NAME_INPUT) {\n          nextInputField.focus();\n          nextInputField.select();\n        }\n        event.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /** Selects the value on click of an input field. */\n  _selectText(event): void {\n    event.target.select();\n  }\n\n  /** Automatically focuses and selects the next input on key input. */\n  _selectNextInput(event): void {\n    event.target.value = this._convertLetterSize(event.target.value);\n    this.propagateChange(this._keyCode.join(''));\n\n    if (event.target.value) {\n      const nextInputField = event.target.nextSibling;\n\n      if (nextInputField !== null && nextInputField.tagName === TAG_NAME_INPUT) {\n        nextInputField.focus();\n        if (nextInputField.value !== '') {\n          nextInputField.select();\n        }\n      }\n    }\n  }\n\n  /** Paste event to distribute content in input fields. */\n  _pasteClipboard(event): void {\n    let copiedText = '';\n    if (event.clipboardData === undefined) {\n      copiedText = (<any>window).clipboardData.getData('text').replace(/ /g, '').split('');\n    } else {\n      copiedText = event.clipboardData.getData('text').replace(/ /g, '').split('');\n    }\n\n    let index = 0;\n    let count = 0;\n\n    for (let i = 0; i < this._el.nativeElement.children.length; i++) {\n      if (event.srcElement === this._el.nativeElement.children.item(i)) {\n        index = i;\n      }\n    }\n\n    for (let i = index; i < this.codeLength; i++) {\n      this._keyCode[i] = this._convertLetterSize(copiedText[count]);\n      count++;\n    }\n\n    this.propagateChange(this._keyCode.join(''));\n\n    if (index + copiedText.length < this.codeLength) {\n      this._el.nativeElement.children.item(index + copiedText.length).focus();\n      event.preventDefault();\n    } else if (index + copiedText.length >= this.codeLength) {\n      event.preventDefault();\n    }\n  }\n\n  /** Triggers when an input field is blurred. */\n  _onBlur(): void {\n    this._focused = false;\n    setTimeout(() => {\n      if (!this._focused) {\n        this.propagateTouch(this._keyCode.join(''));\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Sets _focused state and makes valid. */\n  _setFocusState(): void {\n    this._focused = true;\n  }\n\n  /** Sets initial value, used by ControlValueAccessor. */\n  writeValue(value: string): void {\n    if (value) {\n      const valueAsArray = value.split('').slice(0, this.codeLength);\n\n      for (let i = 0; i < this.codeLength; i++) {\n        this._keyCode[i] = valueAsArray[i];\n      }\n    } else {\n      this.setInputLength();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _trackByKeyCode(index: number, item: string): number {\n    return index;\n  }\n\n  /** Adds a gap to input fields when appropriate. */\n  _inputGap(index): string {\n    switch (this.codeLength) {\n      case 4:\n      case 6:\n      case 8:\n        if (index === this.codeLength / 2) {\n          return INPUT_FIELD_GAP;\n        }\n\n        break;\n      default:\n        return;\n    }\n  }\n\n  /** @docs-private */\n  propagateChange = (_: any) => {\n  }\n\n  /** @docs-private */\n  propagateTouch = (_: any) => {\n  }\n\n  registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.propagateTouch = fn;\n  }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\n\nimport {NxCodeInputComponent} from './code-input.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    NxCodeInputComponent,\n  ],\n  exports: [\n    NxCodeInputComponent,\n  ],\n  providers: [NxCodeInputIntl],\n})\nexport class NxCodeInputModule {\n}\n"],"names":[],"mappings":"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"}
