{"version":3,"file":"allianz-ngx-ndbx-tabs.js.map","sources":["ng://@allianz/ngx-ndbx/tabs/tab-group-base.ts","ng://@allianz/ngx-ndbx/tabs/tab.ts","ng://@allianz/ngx-ndbx/tabs/tab-body.ts","ng://@allianz/ngx-ndbx/tabs/tab-label.ts","ng://@allianz/ngx-ndbx/tabs/tab-header.ts","ng://@allianz/ngx-ndbx/tabs/tab-group.ts","ng://@allianz/ngx-ndbx/tabs/tab-nav-bar.ts","ng://@allianz/ngx-ndbx/tabs/tabs.module.ts"],"sourcesContent":["/** @docs-private */\nexport abstract class NxTabGroupBase {\n\n}\n","import { NxTabGroupBase } from './tab-group-base';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  Optional,\n  Inject,\n  Host\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'nx-tab',\n  exportAs: 'nxTab',\n  templateUrl: 'tab.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTabComponent implements OnInit, OnChanges, OnDestroy {\n  private _label: string;\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** Sets the label of the tab shown in the tablist. */\n  @Input()\n  get label(): string {\n    return this._label;\n  }\n  set label(value: string) {\n    if (this._label !== value) {\n      this._label = value;\n    }\n  }\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Template inside the NxTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(NxTabGroupBase) @Optional() @Host() private _tabGroup: NxTabGroupBase) {\n    if (!this._tabGroup) {\n      throw Error(`The nx-tab element has to be wrapped in a nx-tab-group to work.\n      Please provide a nx-tab-group element and place your tabs inside it.`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('label')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnInit() {\n    this._contentPortal = new TemplatePortal(this._implicitContent, this._viewContainerRef);\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { ChangeDetectionStrategy, Component, Input, ViewChild } from '@angular/core';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-tab-body',\n  templateUrl: 'tab-body.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./tab-body.scss']\n})\nexport class NxTabBodyComponent {\n\n  @Input() content: TemplatePortal;\n  portal: TemplatePortal;\n\n  private _active: boolean = false;\n\n  @Input()\n  set active(value: boolean) {\n    this._active = coerceBooleanProperty(value);\n    if (this._active) {\n      this.attach();\n    } else {\n      this.detach();\n    }\n  }\n  get active(): boolean {\n    return this._active;\n  }\n\n  @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n  attach() {\n    if (!this.portalOutlet.hasAttached()) {\n      this.portalOutlet.attach(this.content);\n    }\n  }\n  detach() {\n    if (this.portalOutlet.hasAttached()) {\n      this.portalOutlet.detach();\n    }\n  }\n}\n","import { FocusableOption } from '@angular/cdk/a11y';\nimport { Directive, ElementRef } from '@angular/core';\n\n/** @docs-private */\n@Directive({ selector: '[nxTabLabel]' })\nexport class NxTabLabelDirective implements FocusableOption {\n  constructor(public elementRef: ElementRef) { }\n\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  QueryList,\n} from '@angular/core';\n\nimport { NxTabLabelDirective } from './tab-label';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['./tab-header.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NxTabHeaderComponent implements OnInit, AfterContentInit {\n\n  private _keyManager: FocusKeyManager<NxTabLabelDirective>;\n\n  private _selectedIndex: number = 0;\n\n  @Input()\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._selectedIndex = value;\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex : 0;\n  }\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  private _autoselect: boolean = true;\n\n  @Input()\n  get autoselect(): boolean {\n    return this._autoselect;\n  }\n  set autoselect(value: boolean) {\n    this._autoselect = value;\n  }\n\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  @ContentChildren(NxTabLabelDirective) labels: QueryList<NxTabLabelDirective>;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit() { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<NxTabLabelDirective>(this.labels).withHorizontalOrientation('ltr').withWrap();\n    this._keyManager.updateActiveItemIndex(0);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _isValidIndex(idx: number) {\n    if (!this.labels) { return true; }\n\n    return !!this.labels.toArray()[idx];\n  }\n\n  /**\n   * Handles keyboard inputs on the labels\n   * If autoselect is enabled the tab gets changed immediately\n   * If autoselect is disabled only the focus changes but the user still has to select the item\n   * by himself\n   */\n  handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n\n    if (this.autoselect) {\n      this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);\n    } else if (event.keyCode !== ENTER && event.keyCode !== SPACE) {\n      this.indexFocused.emit(this._keyManager.activeItemIndex);\n    }\n  }\n}\n","import { NxTabGroupBase } from './tab-group-base';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  OnInit\n} from '@angular/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { NxAccordionDirective } from '@allianz/ngx-ndbx/accordion';\nimport { NxExpansionPanelComponent } from '@allianz/ngx-ndbx/accordion';\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabHeaderComponent } from './tab-header';\n\n\nexport class NxTabChangeEvent {\n  /** The index of the selected or focused tab. */\n  index: number;\n\n  /** The component instance of the selected or focused tab. */\n  tab: NxTabComponent;\n}\n\nlet nextId: number = 0;\nconst MOBILE_BREAKPOINT = 480;\n\n@Component({\n  selector: 'nx-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['./tab-group.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-negative]': 'negative'\n  },\n  providers: [{provide: NxTabGroupBase, useExisting: NxTabGroupComponent}]\n})\nexport class NxTabGroupComponent implements NxTabGroupBase, OnInit, OnDestroy, AfterContentInit, AfterContentChecked {\n  private _selectedIndex: number | null = null;\n  private _groupId: number;\n  private _negative: boolean = false;\n  private _indexToSelect: number | null = 0;\n  private _autoselect: boolean = true;\n  private _mobileAccordion: boolean = true;\n  _showAccordion: boolean = false;\n\n  /** @docs-private */\n  @ContentChildren(NxTabComponent) tabs: QueryList<NxTabComponent>;\n\n  /** @docs-private */\n  @ViewChildren(NxTabBodyComponent) tabBodyChildren: QueryList<NxTabBodyComponent>;\n\n  /** @docs-private */\n  @ViewChild('tabHeader') tabHeader: NxTabHeaderComponent;\n\n  /** @docs-private */\n  @ViewChildren(NxExpansionPanelComponent) panels: QueryList<NxExpansionPanelComponent>;\n\n  /** @docs-private */\n  @ViewChild(NxAccordionDirective) accordion: NxAccordionDirective;\n\n  /** Sets the selected tab. */\n  @Input()\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n\n  /** Whether the negative set of styling should be used. */\n  @Input()\n  get negative(): boolean {\n    return this._negative;\n  }\n  set negative(value: boolean) {\n    if (value !== this._negative) {\n      this._negative = coerceBooleanProperty(value);\n    }\n  }\n\n  /** Whether the tab should be immediately selected on focus. */\n  @Input()\n  get autoselect(): boolean {\n    return this._autoselect;\n  }\n  set autoselect(value: boolean) {\n    this._autoselect = coerceBooleanProperty(value);\n  }\n\n  /** Whether the tabs should to accordion on mobile viewports. */\n  @Input()\n  get mobileAccordion(): boolean {\n    return this._mobileAccordion;\n  }\n  set mobileAccordion(value: boolean) {\n    this._mobileAccordion = coerceBooleanProperty(value);\n  }\n\n  /** An event emitted when the selected tab has changed. */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** An event emitted when the selected tab has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n  /**\n   * An event emitted when focus has changed within a tab group.\n   *\n   * **Note:** is not supported in mobile view.\n   */\n  @Output() readonly focusChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n   /** Subscription to tabs being added/removed. */\n   private _tabsSubscription = Subscription.EMPTY;\n\n   /** Subscription to changes in the tab labels. */\n   private _tabLabelSubscription = Subscription.EMPTY;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\n    this._groupId = nextId++;\n  }\n\n  ngOnInit() {\n    this._switchAppearance(window.innerWidth);\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this.tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this.tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n    * After the content is checked, this component knows what tabs have been defined\n    * and what the selected index should be.\n    */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex !== indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n   /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this.tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** @docs-private */\n  focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): NxTabChangeEvent {\n    const event = new NxTabChangeEvent;\n    event.index = index;\n    if (this.tabs && this.tabs.length) {\n      event.tab = this.tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /** @docs-private */\n  handleClick(index: number) {\n    this.selectedIndex = this.tabHeader.focusIndex = index;\n  }\n\n  /**\n   * @docs-private\n   * Returns the tabindex for a tab label\n   */\n  getTabIndex(tab: NxTabComponent, idx: number): number | null {\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `nx-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `nx-tab-content-${this._groupId}-${i}`;\n  }\n\n  /** @docs-private */\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this._switchAppearance(event.target.innerWidth);\n  }\n\n  private _switchAppearance(viewPortWidth) {\n    if (!this._mobileAccordion) {\n      return;\n    }\n    if (viewPortWidth <= MOBILE_BREAKPOINT && !this._showAccordion) {\n      this._showMobileVersion();\n    } else if (viewPortWidth > MOBILE_BREAKPOINT && this._showAccordion) {\n      this._showDesktopVersion();\n    }\n  }\n\n  private _showMobileVersion() {\n    this._showAccordion = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _showDesktopVersion() {\n    this._showAccordion = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Emulate the tab change event when an accordion panel is opened in\n   * mobile viewports.\n   */\n  _panelOpened(index: number) {\n    this.selectedIndex = index;\n  }\n}\n","import { Component, Input, Directive, ChangeDetectionStrategy, Optional, SkipSelf, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'nx-tab-nav-bar',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['./tab-nav-bar.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-negative]': 'negative',\n    'role': 'navigation',\n  }\n})\nexport class NxTabNavBarComponent {\n\n  private _negative: boolean = false;\n\n  /** Whether the tab nav bar has negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n}\n\n@Directive({\n  selector: '[nxTabLink]',\n  host: {\n    '[class.nx-tab-link]': 'true',\n    '[class.is-active]': 'active',\n    '[attr.aria-current]': 'active',\n  }\n})\nexport class NxTabLinkDirective {\n\n  private _active: boolean = false;\n\n  /** Whether the tab link is active and has the active styling. */\n  @Input()\n  get active(): boolean {\n    return this._active;\n  }\n  set active(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._active) {\n      this._active = value;\n    }\n  }\n\n  constructor(\n    @Optional() @SkipSelf() private _tabNavBar: NxTabNavBarComponent) {\n    if (!this._tabNavBar) {\n      throw Error(`The nx-tab-link element has to be wrapped in a nx-tab-nav-bar to work.`);\n    }\n  }\n}\n","import { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAccordionModule } from '@allianz/ngx-ndbx/accordion';\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabGroupComponent } from './tab-group';\nimport { NxTabHeaderComponent } from './tab-header';\nimport { NxTabLabelDirective } from './tab-label';\nimport { NxTabNavBarComponent, NxTabLinkDirective } from './tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    NxAccordionModule\n  ],\n  exports: [\n    NxTabComponent,\n    NxTabGroupComponent,\n    NxTabLabelDirective,\n    NxTabHeaderComponent,\n    NxTabBodyComponent,\n    NxTabNavBarComponent,\n    NxTabLinkDirective\n  ],\n  declarations: [\n    NxTabComponent,\n    NxTabGroupComponent,\n    NxTabLabelDirective,\n    NxTabHeaderComponent,\n    NxTabBodyComponent,\n    NxTabNavBarComponent,\n    NxTabLinkDirective\n  ],\n  providers: [],\n})\nexport class NxTabsModule { }\n"],"names":[],"mappings":"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"}
