import { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextId = 0;
class NxSwitcherComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._id = `nx-switcher-${nextId++}`;
        this._labelPosition = 'right';
        this._name = null;
        this._checked = false;
        this._big = false;
        this._labelSize = 'large';
        this._negative = false;
        this._disabled = false;
        /**
         * An event is dispatched each time the switcher value is changed
         */
        this.checkedChange = new EventEmitter();
        this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * Sets the id of the switcher
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._id = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * Specifies the placement of the label
     * @param {?} value
     * @return {?}
     */
    set labelPosition(value) {
        this._labelPosition = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get labelPosition() {
        return this._labelPosition;
    }
    /**
     * Sets the label text of the switcher
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * Whether the switcher is checked (on) or unchecked (off)
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        this._checked = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get checked() {
        return this._checked;
    }
    /**
     * Whether the big switcher is used
     * @param {?} value
     * @return {?}
     */
    set big(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        this._big = newValue;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get big() {
        return this._big;
    }
    /**
     * Sets the size of the label
     * @param {?} value
     * @return {?}
     */
    set labelSize(value) {
        this._labelSize = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get labelSize() {
        return this._labelSize;
    }
    /**
     * Whether the style for a dark background is used
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        this._negative = newValue;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Whether the switcher is in the disabled state
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        this._disabled = newValue;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Allows to toggle between the states
     * @return {?}
     */
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this.checkedChange.emit(this.checked);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value === null) {
            value = false;
        }
        if (value !== this.checked) {
            this.checked = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    touch() {
        this.onTouchedCallback();
    }
}
NxSwitcherComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-switcher',
                template: "<input type=\"checkbox\" [id]=\"id\" [attr.name]=\"name\" [disabled]=\"disabled\" [checked]=\"checked\" (click)=\"toggle()\" (blur)=\"touch()\"\n  role=\"switch\"\n  [attr.aria-checked]=\"checked\"\n  class=\"nx-switcher__input\">\n<label [attr.for]=\"id\" class=\"nx-switcher__label\">\n    <div class=\"nx-switcher__toggle\">\n      <div class=\"nx-switcher__dot\">\n        <nx-icon *ngIf=\"big\" name=\"check\"></nx-icon>\n      </div>\n    </div>\n  <ng-content></ng-content>\n</label>\n\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxSwitcherComponent)),
                        multi: true
                    }
                ],
                host: {
                    /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id
                        and on label click the input click is not triggered (double id problem) */
                    '[attr.id]': 'null',
                    '[class.is-negative]': 'negative',
                    '[class.is-checked]': 'checked',
                    '[class.is-big]': 'big',
                    '[class.nx-switcher--small-label]': 'labelSize === "small"',
                    '[class.is-disabled]': 'disabled',
                    '[class.is-swapped]': 'labelPosition === "left"'
                },
                styles: [":host{position:relative;display:flex}:host(.is-swapped) .nx-switcher__label{flex-direction:row-reverse}:host(.is-swapped) .nx-switcher__label .nx-switcher__toggle{margin-left:12px}.nx-switcher__input{opacity:0;position:absolute}.nx-switcher__label{font-size:20px;font-size:var(--body-01-font-size,20px);line-height:28px;line-height:var(--body-01-line-height,28px);font-weight:400;font-weight:var(--body-01-font-weight,400);letter-spacing:.2px;letter-spacing:var(--body-01-letter-spacing,.2px);white-space:nowrap;cursor:pointer;display:flex;position:relative;align-items:center}.nx-switcher__toggle{position:relative;display:inline-block;width:48px;height:24px;background-color:#767676;border-radius:16px;transition:background-color .2s}@media screen and (-ms-high-contrast:active){.nx-switcher__label{color:#ff0}.nx-switcher__toggle{background-color:#c2c2c2;color:#ff0}}:host(:not(.is-swapped)) .nx-switcher__toggle{margin-right:12px}.nx-switcher__dot{position:absolute;height:20px;width:20px;left:2px;bottom:2px;background-color:#fff;border-radius:16px;-webkit-transform:translate(0);transform:translate(0);transition:transform .2s;transition:transform .2s,-webkit-transform .2s}:host(.is-checked) .nx-switcher__dot{-webkit-transform:translate(24px);transform:translate(24px)}:host(.is-checked) .nx-switcher__toggle{background-color:#007ab3;background-color:var(--interaction-primary,#007ab3)}@media screen and (-ms-high-contrast:active){:host(.is-checked) .nx-switcher__toggle{background-color:#ff0;color:#ff0}.nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{color:#fff}}:host(.is-checked.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host(.is-big) .nx-switcher__toggle{width:56px;height:32px}:host(.is-big) .nx-switcher__dot{height:28px;width:28px}:host(.is-big) nx-icon{position:absolute;top:2px;left:2px;font-size:24px;opacity:0;color:#007ab3;color:var(--interaction-primary,#007ab3)}:host(.is-big).is-checked nx-icon{opacity:1;transition:opacity .2s}:host(.nx-switcher--small-label) .nx-switcher__label{font-size:16px;font-size:var(--body-03-font-size,16px);line-height:24px;line-height:var(--body-03-line-height,24px);font-weight:400;font-weight:var(--body-03-font-weight,400);letter-spacing:0;letter-spacing:var(--body-03-letter-spacing,0)}:host(.is-negative) .nx-switcher__label{color:#fff}:host(.is-negative) .nx-switcher__dot{background-color:#fff}:host(.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host-context([data-whatinput=keyboard]) .nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}:host(.is-disabled) .nx-switcher__toggle{background-color:#c2c2c2;background-color:var(--disabled-01,#c2c2c2)}:host(.is-disabled) .nx-switcher__dot{background-color:#fff;opacity:.4}:host(.is-disabled) .nx-switcher__label{cursor:not-allowed;color:#c2c2c2;color:var(--disabled-01,#c2c2c2)}:host(.is-disabled) nx-icon{color:#c2c2c2;color:var(--disabled-01,#c2c2c2)}"]
            }] }
];
/** @nocollapse */
NxSwitcherComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxSwitcherComponent.propDecorators = {
    id: [{ type: Input }],
    labelPosition: [{ type: Input }],
    name: [{ type: Input }],
    checked: [{ type: Input }],
    big: [{ type: Input, args: ['nxBig',] }],
    labelSize: [{ type: Input }],
    negative: [{ type: Input, args: ['nxNegative',] }],
    disabled: [{ type: Input }],
    checkedChange: [{ type: Output, args: ['checkedChange',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxSwitcherModule {
}
NxSwitcherModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NxSwitcherComponent],
                exports: [NxSwitcherComponent],
                imports: [CommonModule, NxIconModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxSwitcherModule, NxSwitcherComponent };

//# sourceMappingURL=allianz-ngx-ndbx-switcher.js.map