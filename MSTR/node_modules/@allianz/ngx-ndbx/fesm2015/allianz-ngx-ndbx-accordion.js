import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { CdkAccordion, CdkAccordionItem } from '@angular/cdk/accordion';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { TemplatePortal, PortalModule } from '@angular/cdk/portal';
import { CommonModule } from '@angular/common';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { Directive, Input, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Optional, SkipSelf, ViewContainerRef, Host, NgModule } from '@angular/core';
import { Subject, merge, Subscription } from 'rxjs';
import { filter, startWith, take } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_TYPE = 'regular';
class NxAccordionDirective extends CdkAccordion {
    constructor() {
        super(...arguments);
        this._style = 'regular';
        this._negative = null;
    }
    /**
     * Value for the styling that should be chosen.
     * Default value: 'regular'
     * @param {?} value
     * @return {?}
     */
    set style(value) {
        value = value ? value : DEFAULT_TYPE;
        const [newValue] = value.match(/regular|light/) || [DEFAULT_TYPE];
        this._style = (/** @type {?} */ (newValue));
    }
    /**
     * @return {?}
     */
    get style() {
        return this._style;
    }
    /**
     * Whether the negative set of styles should be used.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
}
NxAccordionDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'nx-accordion',
                host: {
                    '[class.nx-accordion]': 'true',
                    'role': 'presentation'
                }
            },] }
];
NxAccordionDirective.propDecorators = {
    style: [{ type: Input, args: ['nxStyle',] }],
    negative: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const nxAccordionAnimations = {
    bodyExpansion: trigger('bodyExpansion', [
        state('closed', style({ height: '0px', visibility: 'hidden' })),
        state('open', style({ height: '*', visibility: 'visible' })),
        transition('open <=> closed', animate('.5s cubic-bezier(0.86, 0, 0.07, 1)'))
    ]),
    indicatorRotate: trigger('indicatorRotate', [
        state('closed', style({ transform: 'rotate(0deg)' })),
        state('open', style({ transform: 'rotate(180deg)' })),
        transition('open <=> closed', animate('.3s ease')),
    ])
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxExpansionPanelBodyDirective {
    /**
     * @param {?} _template
     */
    constructor(_template) {
        this._template = _template;
    }
}
NxExpansionPanelBodyDirective.decorators = [
    { type: Directive, args: [{ selector: '[nxExpansionPanelBody]' },] }
];
/** @nocollapse */
NxExpansionPanelBodyDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextId = 0;
/** @type {?} */
const DEFAULT_TYPE$1 = 'regular';
const ɵ0 = undefined;
class NxExpansionPanelComponent extends CdkAccordionItem {
    /**
     * @param {?} accordion
     * @param {?} _changeDetectorRef
     * @param {?} _expansionDispatcher
     * @param {?} _viewContainerRef
     */
    constructor(accordion, _changeDetectorRef, _expansionDispatcher, _viewContainerRef) {
        super(accordion, _changeDetectorRef, _expansionDispatcher);
        this._viewContainerRef = _viewContainerRef;
        this._negative = null;
        this._accordionStyle = DEFAULT_TYPE$1;
        this._style = null;
        this._headerId = `nx-expansion-panel-header-${nextId++}`;
        /**
         * Stream that emits for changes in `\@Input` properties.
         */
        this._inputChanges = new Subject();
        this.accordion = accordion;
    }
    /**
     * Whether the negative set of styles should be used.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Value for the styling that should be chosen.
     * Default value: 'regular'.
     * @param {?} value
     * @return {?}
     */
    set style(value) {
        value = value ? value : DEFAULT_TYPE$1;
        const [newValue] = value.match(/regular|light/) || [DEFAULT_TYPE$1];
        this._style = (/** @type {?} */ (newValue));
        this._accordionStyle = (/** @type {?} */ (newValue));
    }
    /**
     * @return {?}
     */
    get style() {
        return this._style;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get portal() {
        return this._portal;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened.pipe(startWith(null), filter((/**
             * @return {?}
             */
            () => this.expanded && !this._portal)), take(1)).subscribe((/**
             * @return {?}
             */
            () => {
                this._portal = new TemplatePortal(this.lazyContent._template, this._viewContainerRef);
            }));
        }
        // Inherit appearance given by the accordion (if any).
        if (Boolean(this.accordion)) {
            if (this.style === null && this.accordion.style !== null) {
                this.style = this.accordion.style;
            }
            if (this.negative === null && this.accordion.negative !== null) {
                this.negative = this.accordion.negative;
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._inputChanges.next(changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this._inputChanges.complete();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    getOpenState() {
        return this.expanded ? 'open' : 'closed';
    }
}
NxExpansionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-expansion-panel',
                exportAs: 'NxExpansionPanelComponent',
                template: "<ng-content select=\"nx-expansion-panel-header\"></ng-content>\n\n<div class=\"nx-expansion-panel__content\" role=\"region\" [@bodyExpansion]=\"getOpenState()\"\n  [attr.aria-labelledby]=\"_headerId\" [id]=\"id\">\n  <div class=\"nx-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [nxAccordionAnimations.bodyExpansion],
                host: {
                    '[class.nx-expanded]': 'expanded',
                    '[class.nx-expansion-panel--light]': '_accordionStyle === "light"',
                    '[class.nx-expansion-panel--regular]': '_accordionStyle === "regular"',
                    '[class.nx-expansion-panel--negative]': 'negative'
                },
                providers: [
                    // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering
                    // to the same accordion.
                    { provide: NxAccordionDirective, useValue: ɵ0 },
                ],
                styles: [":host{display:block}:host(.nx-expansion-panel--negative) ::ng-deep div.nx-expansion-panel__body *{color:#fff}.nx-expansion-panel__content{overflow:hidden;display:block}.nx-expansion-panel__body{font-size:16px;line-height:24px;padding:24px 88px 32px 32px}@media (max-width:703px){.nx-expansion-panel__body{padding:24px 16px 32px}:host:last-child ::ng-deep .nx-expansion-panel__header-content,:host:only-child ::ng-deep .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-content{border-top:1px solid #d9d9d9;border-bottom:none}:host(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__body{padding-top:0}:host(.nx-expansion-panel--light):first-child ::ng-deep .nx-expansion-panel__header-content{border-top:none}"]
            }] }
];
/** @nocollapse */
NxExpansionPanelComponent.ctorParameters = () => [
    { type: NxAccordionDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: ChangeDetectorRef },
    { type: UniqueSelectionDispatcher },
    { type: ViewContainerRef }
];
NxExpansionPanelComponent.propDecorators = {
    negative: [{ type: Input }],
    style: [{ type: Input, args: ['nxStyle',] }],
    lazyContent: [{ type: ContentChild, args: [NxExpansionPanelBodyDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxExpansionPanelHeaderComponent {
    /**
     * @param {?} panel
     * @param {?} _changeDetectorRef
     */
    constructor(panel, _changeDetectorRef) {
        this.panel = panel;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter((/**
         * @param {?} changes
         * @return {?}
         */
        changes => !!(changes.hideToggle || changes.disabled)))))
            .subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._parentChangeSubscription.unsubscribe();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    isExpanded() {
        return this.panel.expanded;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    getOpenState() {
        return this.panel.getOpenState();
    }
    /**
     * @return {?}
     */
    _getPanelId() {
        return this.panel.id;
    }
    /**
     * Toggle the expansion panel.
     * @return {?}
     */
    toggle() {
        this.panel.toggle();
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    keydown(event) {
        switch (event.keyCode) {
            case SPACE:
            case ENTER:
                event.preventDefault();
                this.toggle();
                break;
            default:
                return;
        }
    }
}
NxExpansionPanelHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-expansion-panel-header',
                template: "<div class=\"nx-expansion-panel__header-content\">\n  <ng-content select=\"nx-expansion-panel-title\"></ng-content>\n  <ng-content select=\"nx-expansion-panel-description\"></ng-content>\n  <nx-icon\n    [@indicatorRotate]=\"getOpenState()\"\n    class=\"nx-expansion-panel__chevron\"\n    name=\"chevron-down\">\n  </nx-icon>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [nxAccordionAnimations.indicatorRotate],
                host: {
                    '[class.nx-expanded]': 'isExpanded()',
                    'class': 'nx-expansion-panel__header',
                    'role': 'button',
                    '[attr.id]': 'panel._headerId',
                    '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                    '[attr.aria-controls]': '_getPanelId()',
                    '[attr.aria-expanded]': 'isExpanded()',
                    '[attr.aria-disabled]': 'panel.disabled',
                    '(keydown)': 'keydown($event)',
                    '(click)': 'toggle()'
                },
                styles: [":host:focus{outline:0}.nx-expansion-panel__header-content{width:100%;cursor:pointer;align-items:center;color:#414141;display:flex;justify-content:space-between;position:relative;padding:24px 32px;margin-top:16px;background:#f5f5f5;outline:0;border:none}::ng-deep .nx-expansion-panel__header-title{font-size:26px;font-weight:300;line-height:32px;letter-spacing:.3px;text-align:left;margin-right:32px}:host-context(.nx-expansion-panel--negative) .nx-expansion-panel__header-content{background-color:#fff}.nx-expansion-panel__chevron{color:#006192;pointer-events:none;font-size:24px}:host-context(.nx-expansion-panel--light) .nx-expansion-panel__header-content{margin-top:0;background:0 0}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{color:#006192;letter-spacing:.2px;font-weight:400;font-size:20px;line-height:28px}@media (max-width:703px){.nx-expansion-panel__header-content{padding:16px;margin-top:0;border-top:1px solid #d9d9d9}::ng-deep .nx-expansion-panel__header-title{font-size:20px;line-height:28px;margin-right:16px;font-weight:400}:host(.nx-expanded) .nx-expansion-panel__header-content{border-bottom:1px solid #d9d9d9}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{line-height:24px;font-size:16px}:host-context(.nx-expansion-panel--light.nx-expanded) .nx-expansion-panel__header-content{border-bottom:none}}:host[aria-disabled=true] .nx-expansion-panel__header-content{cursor:not-allowed}:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__chevron,:host[aria-disabled=true] ::ng-deep .nx-expansion-panel__header-title{color:#c2c2c2}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content{border-color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-title{color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__chevron{color:#fff}:host-context([data-whatinput=keyboard]):focus .nx-expansion-panel__header-content{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;border-top-color:transparent;z-index:1}"]
            }] }
];
/** @nocollapse */
NxExpansionPanelHeaderComponent.ctorParameters = () => [
    { type: NxExpansionPanelComponent, decorators: [{ type: Host }] },
    { type: ChangeDetectorRef }
];
/**
 * This directive is to be used inside of the NxExpansionPanelHeader component.
 */
class NxExpansionPanelDescriptionDirective {
}
NxExpansionPanelDescriptionDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'nx-expansion-panel-description',
                host: {
                    class: 'nx-expansion-panel__header-description'
                }
            },] }
];
/**
 * This directive is to be used inside of the NxExpansionPanelHeader component.
 */
class NxExpansionPanelTitleDirective {
}
NxExpansionPanelTitleDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'nx-expansion-panel-title',
                host: {
                    class: 'nx-expansion-panel__header-title'
                }
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxAccordionModule {
}
NxAccordionModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    PortalModule,
                    NxIconModule
                ],
                exports: [
                    NxAccordionDirective,
                    NxExpansionPanelComponent,
                    NxExpansionPanelHeaderComponent,
                    NxExpansionPanelDescriptionDirective,
                    NxExpansionPanelTitleDirective,
                    NxExpansionPanelBodyDirective
                ],
                declarations: [
                    NxAccordionDirective,
                    NxExpansionPanelComponent,
                    NxExpansionPanelHeaderComponent,
                    NxExpansionPanelDescriptionDirective,
                    NxExpansionPanelTitleDirective,
                    NxExpansionPanelBodyDirective
                ],
                providers: [],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxExpansionPanelComponent, NxAccordionDirective, NxAccordionModule, nxAccordionAnimations as ɵa, NxExpansionPanelBodyDirective as ɵb, NxExpansionPanelDescriptionDirective as ɵd, NxExpansionPanelHeaderComponent as ɵc, NxExpansionPanelTitleDirective as ɵe };

//# sourceMappingURL=allianz-ngx-ndbx-accordion.js.map