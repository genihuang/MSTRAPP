import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Attribute, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxCardComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} tabindex
     */
    constructor(_changeDetectorRef, tabindex) {
        this._changeDetectorRef = _changeDetectorRef;
        this._disabled = false;
        /**
         * Event emitted when the selected value has changed.
         */
        this.selectedChange = new EventEmitter();
        this._tabindex = tabindex;
    }
    /**
     * Whether this card is selectable or not.
     * @param {?} value
     * @return {?}
     */
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get selectable() {
        return this._selectable;
    }
    /**
     * Whether this card is selected or not.
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * Whether the card is disabled.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    _toggleSelected() {
        if (this.selectable && !this.disabled) {
            this.selected = !this.selected;
            this.selectedChange.emit(this.selected);
        }
    }
    /**
     * @return {?}
     */
    _getTabindex() {
        if (this.disabled) {
            return '-1';
        }
        if (this.selectable) {
            return this._tabindex || '0';
        }
        return this._tabindex || '';
    }
}
NxCardComponent.decorators = [
    { type: Component, args: [{
                template: '<ng-content></ng-content>',
                selector: 'nx-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    'class': 'nx-card',
                    '[class.is-selectable]': 'selectable',
                    '[class.is-selected]': 'selected',
                    '[class.is-disabled]': 'disabled',
                    '[attr.aria-disabled]': 'disabled',
                    '(click)': '_toggleSelected()',
                    '(keydown.enter)': '_toggleSelected()',
                    '[attr.tabindex]': '_getTabindex()'
                },
                styles: [":host{background:#fff;border:1px solid #d9d9d9;border-radius:4px;box-shadow:none;display:inline-block;margin-bottom:24px;padding:24px;transition:background-color .2s,box-shadow .2s}:host.is-selectable{cursor:pointer}:host.is-selectable:hover{background-color:#f5f5f5}:host.is-selectable:focus,:host.is-selectable:hover{outline:0}:host.is-selected{box-shadow:0 8px 24px rgba(65,65,65,.35);background-color:#f5f5f5}:host.is-disabled{cursor:not-allowed;opacity:.4}:host.is-disabled:hover{background-color:#fff}:host.is-disabled:focus{outline:0}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6}@media screen and (-ms-high-contrast:active){:host.is-selectable:focus,:host.is-selectable:hover{border-color:highlight}:host.is-selected{box-shadow:0 0 0 2px windowText}:host.is-selected:focus,:host.is-selected:hover{box-shadow:0 0 0 2px highlight}}"]
            }] }
];
/** @nocollapse */
NxCardComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }
];
NxCardComponent.propDecorators = {
    selectable: [{ type: Input }],
    selected: [{ type: Input }],
    disabled: [{ type: Input }],
    selectedChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxCardModule {
}
NxCardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NxCardComponent],
                exports: [NxCardComponent],
                imports: [
                    CommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxCardComponent, NxCardModule };

//# sourceMappingURL=allianz-ngx-ndbx-card.js.map