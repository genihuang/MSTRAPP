import { appendClasses, mapClassNames, removeClasses } from '@allianz/ngx-ndbx/utils';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BREAKPOINT_MOBILE = '(max-width: 703px)';
/** @type {?} */
const BREAKPOINT_TABLET = '(min-width: 704px) and (max-width: 992px)';
/** @type {?} */
const BREAKPOINT_DESKTOP = '(min-width: 993px)';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MappedStyles {
    /**
     * @param {?} mapping
     * @param {?=} baseClasses
     * @param {?=} _elementRef
     * @param {?=} _renderer
     */
    constructor(mapping, baseClasses = [], _elementRef, _renderer) {
        this.mapping = mapping;
        this.baseClasses = baseClasses;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.classNames = '';
    }
    /**
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        removeClasses(this._renderer, this._elementRef, this._classNamesSanitized);
        this._classNamesSanitized = mapClassNames(value, this.baseClasses, this.mapping);
        this._classNames = value;
        appendClasses(this._renderer, this._elementRef, this._classNamesSanitized);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BREAKPOINT_MOBILE, BREAKPOINT_TABLET, BREAKPOINT_DESKTOP, MappedStyles };

//# sourceMappingURL=allianz-ngx-ndbx-core.js.map