{"version":3,"file":"allianz-ngx-ndbx-natural-language-form.js.map","sources":["ng://@allianz/ngx-ndbx/natural-language-form/word.component.ts","ng://@allianz/ngx-ndbx/natural-language-form/natural-language-form.component.ts","ng://@allianz/ngx-ndbx/natural-language-form/natural-language-form.module.ts"],"sourcesContent":["import { NxFormfieldControl, NxFormfieldErrorDirective } from '@allianz/ngx-ndbx/formfield';\nimport { getFontShorthand } from '@allianz/ngx-ndbx/utils';\nimport { Overlay } from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { startWith } from 'rxjs/operators';\nimport { Subject ,  Subscription } from 'rxjs';\n\nimport { NxPopoverTriggerDirective } from '@allianz/ngx-ndbx/popover';\nimport { NxDropdownComponent } from '@allianz/ngx-ndbx/dropdown';\n\n/** Type to determine the minimal width of a word. */\nexport type SIZES = 'regular' | 'short' | 'long';\n\n@Component({\n  selector: 'nx-word',\n  templateUrl: 'word.component.html',\n  styleUrls: [\n    'word.component.scss'\n  ],\n  host: {\n    '[class.size-short]': 'size == \"short\"',\n    '[class.size-regular]': 'size == \"regular\"',\n    '[class.size-long]': 'size == \"long\"',\n    '[class.has-error]': 'hasErrors',\n    '[class.is-focused]': 'isFocused',\n    '[class.is-filled]': 'isFilled',\n    '[class.has-dropdown]': 'hasDropdown',\n\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class NxWordComponent implements AfterContentInit, OnDestroy {\n  private subscription: Subscription = Subscription.EMPTY;\n  private subscriptionValues: Subscription = Subscription.EMPTY;\n\n  /** @docs-private */\n  public hasErrors: boolean = false;\n\n  private measureCanvas: HTMLCanvasElement;\n\n  /** @docs-private */\n  inputChanges = new Subject<any>();\n\n  @ContentChild(NxFormfieldControl) _control: NxFormfieldControl<any>;\n  @ContentChildren(NxFormfieldErrorDirective) _errorChildren: QueryList<NxFormfieldErrorDirective>;\n  @ViewChild(NxPopoverTriggerDirective) _popover: NxPopoverTriggerDirective;\n  @ContentChild(NxDropdownComponent) _dropdown: NxDropdownComponent;\n\n  /** @docs-private */\n  @HostBinding('style.width.px')\n  currentTextWidth: number = 0;\n\n\n  // this will apply different min-widths to our component through our styles\n  /** Provide a hint for a minimal width. The actual size will be determined for inputs for each change. */\n  @Input('nxSize') size: SIZES = 'regular';\n\n  /**\n   * A word doesn't have a set place to show labels.\n   * In order to be accessible, you have to provide a label with this property.\n   * It will be attached to the given input through `aria-label`.\n   */\n  @Input('nxLabel') label: string;\n\n  constructor(\n    /** @docs-private */\n    public elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _renderer: Renderer2,\n    private _overlay: Overlay\n  ) { }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    this.subscription = this._control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this.hasErrors = this._control.errorState;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // if we have a ngcontrol available stick to its valueChanges subject\n    if (this._control.ngControl) {\n      this.subscriptionValues = this._control.ngControl.valueChanges.subscribe(value => {\n        this.updateCurrentTextWidth();\n        this.inputChanges.next();\n      });\n    // in any other case it is a bre input and input changes are signaled through simple state changes\n    } else {\n      this.subscriptionValues = this._control.stateChanges.subscribe(value => {\n        this.updateCurrentTextWidth();\n        this.inputChanges.next();\n      });\n    }\n\n\n    this._control.setAriaLabel(this.label);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n    @docs-private\n    Calculate the width of the full text given by the input,\n    that value is bound to this component so it can grow.\n\n    The involved input is known to have a width of 100% an will fit the additional space given\n    which completes the auto growing behavior.\n  */\n  updateCurrentTextWidth() {\n    // provide the canvas only lazy\n    if (!this.measureCanvas) {\n      this.measureCanvas = this._renderer.createElement('canvas');\n    }\n\n\n    const ctx = this.measureCanvas.getContext('2d');\n    const inputRef = this._control.elementRef;\n    const styles = window.getComputedStyle(inputRef.nativeElement);\n    ctx.font = getFontShorthand(styles);\n\n    const metrics = ctx.measureText(this._control.value);\n    // add 1px (cursor width) to prevent jumping of the text on blur.\n    const newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;\n\n    // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent\n    // Works as promised as long as there is not other tag around the word. Not expected but possible.\n    const parent: HTMLElement = this.elementRef.nativeElement.parentElement;\n    const parentMeasurement = parent.getBoundingClientRect();\n\n    // Limit to own given minimal width\n    this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);\n\n    // Limit to container width\n    this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);\n    this._popover.updatePosition();\n  }\n\n  /** @docs-private */\n  repositionError() {\n    if (this._popover) {\n      this._popover.updatePosition();\n    }\n  }\n\n  // Fail if the required control is missing.\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');\n    }\n  }\n\n  /** @docs-private */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this.elementRef;\n  }\n\n  /** @docs-private */\n  get isFocused(): boolean {\n    return this._control.focused;\n  }\n\n  /** @docs-private */\n  get isFilled(): boolean {\n    return !this._control.empty;\n  }\n\n  /** @docs-private */\n  get hasDropdown(): boolean {\n    return Boolean(this._dropdown);\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  HostListener,\n  Input,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { delay, throttleTime } from 'rxjs/operators';\n\nimport { NxWordComponent } from './word.component';\n\n/** Size of the NLF. */\nexport type NxNaturalLanguageFormSize = 'small' | 'large';\n\nconst DEFAULT_SIZE = 'large';\n\n@Component({\n  selector: 'nx-natural-language-form',\n  templateUrl: 'natural-language-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['natural-language-form.scss'],\n  host: {\n    '[class.is-negative]': 'negative',\n    '[class.nx-natural-language-form--small]' : 'size === \"small\"',\n    '[class.nx-natural-language-form--large]' : 'size === \"large\"',\n  }\n})\n\nexport class NxNaturalLanguageFormComponent implements AfterContentInit, OnDestroy {\n  private _negative = false;\n\n  /** @docs-private */\n  resizeEvent$: Subject<void> = new Subject<void>();\n\n  /** @docs-private */\n  resizeObservable: Observable<void>;\n\n  @ContentChildren(NxWordComponent) _words: QueryList<NxWordComponent>;\n\n  /** @docs-private */\n  updatePopoversSubscription: Subscription = Subscription.EMPTY;\n\n  /** @docs-private */\n  private _size: NxNaturalLanguageFormSize = DEFAULT_SIZE;\n\n  /** Whether the negative set of stylings should be used. */\n  @Input('nxNegative')\n  set negative(value) {\n    this._negative = coerceBooleanProperty(value);\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  /**\n   * Sets the size of the NLF. Default value: large\n   */\n  @Input()\n  set size(value: NxNaturalLanguageFormSize) {\n    this._size = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get size(): NxNaturalLanguageFormSize {\n    return this._size;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  @HostListener('window:orientationchange', ['$event'])\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this.resizeEvent$.next();\n  }\n\n  ngAfterContentInit() {\n    // Collect all words and listen for changes so we can update any open error popover\n    // which would otherwise get wrongly positioned.\n    const subjects = this._words.map((word: NxWordComponent) => word.inputChanges);\n    const source = merge(...subjects);\n\n    this.updatePopoversSubscription = source.subscribe( () => {\n      this.updatePositionPopovers();\n    });\n\n    this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));\n    this.resizeObservable.subscribe(() => this.resizeWords());\n  }\n\n  /** @docs-private */\n  resizeWords() {\n    this._words.forEach((word: NxWordComponent) => {\n      word.updateCurrentTextWidth();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.updatePopoversSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  updatePositionPopovers() {\n    if (this._words) {\n      this._words.forEach((word: NxWordComponent) => {\n        word.repositionError();\n      });\n    }\n  }\n}\n","import { NxPopoverModule } from '@allianz/ngx-ndbx/popover';\nimport { NxInputModule } from '@allianz/ngx-ndbx/input';\nimport { NxWordComponent } from './word.component';\nimport { NxNaturalLanguageFormComponent } from './natural-language-form.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxInputModule,\n    NxPopoverModule\n  ],\n  declarations: [\n    NxNaturalLanguageFormComponent,\n    NxWordComponent\n  ],\n  exports: [\n    NxNaturalLanguageFormComponent,\n    NxWordComponent\n  ]\n})\nexport class NxNaturalLanguageFormModule {}\n"],"names":[],"mappings":"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"}
