{"version":3,"file":"allianz-ngx-ndbx-dynamic-table.js.map","sources":["ng://@allianz/ngx-ndbx/dynamic-table/tabledata-source.ts","ng://@allianz/ngx-ndbx/dynamic-table/dynamic-table.component.ts","ng://@allianz/ngx-ndbx/dynamic-table/dynamic-table.module.ts"],"sourcesContent":["import { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject ,  Observable } from 'rxjs';\n\nexport class TableDataSource extends DataSource<any> {\nconstructor(private _datachange: BehaviorSubject<any[]>) {\nsuper();\n}\n/** @docs-private Connect function called by the table to retrieve one stream containing the data to render. */\nconnect(): Observable<Object[]> {\nreturn this._datachange;\n}\n/** @docs-private */\ndisconnect() { }\n}\n","import { mapClassNames } from '@allianz/ngx-ndbx/utils';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnInit, Output, ChangeDetectorRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NxDisplayedColumns } from './displayedColumns';\nimport { TableDataSource } from './tabledata-source';\n\nconst MAPPING = {\n  light: 'nx-table--light',\n  border: 'nx-table--light nx-table--with-border'\n};\nconst DEFAULT_CLASSES = [ 'nx-table ' ];\n\n@Component({\n  selector: 'nx-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './dynamic-table.component.scss' ],\n})\nexport class NxDynamicTableComponent implements OnInit {\n\n  private _tableStyles: string = '';\n  private _dataChange: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  private _dataSource: TableDataSource | null;\n  private _data: any[];\n  private _classNames: string = mapClassNames('', DEFAULT_CLASSES, MAPPING);\n  private _displayedColumns: NxDisplayedColumns[];\n  private _columnKeys: string[];\n\n  /** Sets the data that it will show in the table. */\n  @Input('nxData')\n  set data(value: any[]) {\n    this._data = value\n      .filter(element => element);\n    // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data\n    if (!this._displayedColumns) {\n      const keys = [], cArray = [];\n      // For catch keys of data Objects and assing title, key and type string by default to displayedColumns\n      this._data\n        .forEach(element => {\n          for (const key in element) {\n            if (keys.indexOf(key) === -1) {\n              keys.push(key);\n              cArray.push({ title: key, key: key, type: 'string' });\n            }\n          }\n        });\n      this._columnKeys = keys;\n      this._displayedColumns = cArray;\n      // need to call markForCheck as the setter changes displayedColumns here\n      // sidenote: isn't needed for the data itself as it gets passed to the cdk-table\n      // by the datasource observable\n      this._changeDetectorRef.markForCheck();\n    }\n    this._dataChange.next(this._data);\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  /** Sets the name order and type of columns. */\n  @Input('nxDisplayedColumns')\n  set displayedColumns(value: NxDisplayedColumns[]) {\n    this._displayedColumns = value;\n    this._columnKeys = value.map(column => column.key);\n    this._changeDetectorRef.markForCheck();\n  }\n  get displayedColumns(): NxDisplayedColumns[] {\n    return this._displayedColumns;\n  }\n\n  /** @deprecated The default and light header styling will be removed.\n   * @deletion-target 8.0.0\n  */\n  @Input('nxType')\n  set styles(value: string) {\n    if (this._tableStyles === value) {\n      return;\n    }\n    this._classNames = mapClassNames(value, DEFAULT_CLASSES, MAPPING);\n    this._tableStyles = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** An event is dispatched when a row is clicked. */\n  @Output() nxRowClick = new EventEmitter();\n\n  /** @docs-private */\n  get dataSource(): TableDataSource {\n    return this._dataSource;\n  }\n  /** @docs-private */\n  get classNames(): string {\n    return this._classNames;\n  }\n  /** @docs-private */\n  get columnKeys(): string[] {\n    return this._columnKeys;\n  }\n\n  constructor(private el: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit() {\n    if (!this._data) {\n      this._data = [];\n      this._dataChange.next(this._data);\n    }\n    this._dataSource = new TableDataSource(this._dataChange);\n  }\n\n  /** @docs-private */\n  handleRowClick(row: Object): void {\n    this.nxRowClick.emit(row);\n  }\n\n  /** @docs-private */\n  isNumeric(element: NxDisplayedColumns): boolean {\n    if (element.type === 'numeric') {\n      return true;\n    }\n    return false;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxDynamicTableComponent } from './dynamic-table.component';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\n\n@NgModule({\n  declarations: [ NxDynamicTableComponent ],\n  exports: [ NxDynamicTableComponent ],\n  imports: [ CommonModule, CdkTableModule, ScrollDispatchModule ]\n})\nexport class NxDynamicTableModule { }\n"],"names":[],"mappings":"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"}
